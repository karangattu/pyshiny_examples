This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-28T19:04:43.134Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
_sidebar.yml
App.qmd
ExCard.qmd
ExceptionTypes.qmd
ExtendedTask.qmd
Htmltools.qmd
index.qmd
Inputs.qmd
MiscTypes.qmd
module.server.qmd
module.ui.qmd
Outputs.qmd
PlaywrightControls.qmd
PlaywrightExpect.qmd
Pytest.qmd
reactive.calc.qmd
reactive.effect.qmd
reactive.event.qmd
reactive.extended_task.qmd
reactive.file_reader.qmd
reactive.flush.qmd
reactive.invalidate_later.qmd
reactive.isolate.qmd
reactive.lock.qmd
reactive.poll.qmd
reactive.value.qmd
render.code.qmd
render.data_frame.qmd
render.DataGrid.qmd
render.DataTable.qmd
render.download.qmd
render.express.qmd
render.image.qmd
render.plot.qmd
render.table.qmd
render.text.qmd
render.transformer.output_transformer.qmd
render.transformer.resolve_value_fn.qmd
render.ui.qmd
Renderer.qmd
req.qmd
run_app.qmd
Run.qmd
Session.qmd
TagTypes.qmd
ui.accordion_panel.qmd
ui.accordion.qmd
ui.busy_indicators.options.qmd
ui.busy_indicators.use.qmd
ui.card_footer.qmd
ui.card_header.qmd
ui.card.qmd
ui.chat_ui.qmd
ui.Chat.qmd
ui.column.qmd
ui.css.as_css_padding.qmd
ui.css.as_css_unit.qmd
ui.download_button.qmd
ui.download_link.qmd
ui.fill.as_fill_item.qmd
ui.fill.as_fillable_container.qmd
ui.fill.remove_all_fill.qmd
ui.help_text.qmd
ui.HTML.qmd
ui.include_css.qmd
ui.include_js.qmd
ui.input_action_button.qmd
ui.input_action_link.qmd
ui.input_checkbox_group.qmd
ui.input_checkbox.qmd
ui.input_dark_mode.qmd
ui.input_date_range.qmd
ui.input_date.qmd
ui.input_file.qmd
ui.input_numeric.qmd
ui.input_password.qmd
ui.input_radio_buttons.qmd
ui.input_select.qmd
ui.input_selectize.qmd
ui.input_slider.qmd
ui.input_switch.qmd
ui.input_task_button.qmd
ui.input_text_area.qmd
ui.input_text.qmd
ui.insert_accordion_panel.qmd
ui.insert_ui.qmd
ui.layout_column_wrap.qmd
ui.layout_columns.qmd
ui.layout_sidebar.qmd
ui.markdown.qmd
ui.modal_button.qmd
ui.modal_remove.qmd
ui.modal_show.qmd
ui.modal.qmd
ui.nav_control.qmd
ui.nav_menu.qmd
ui.nav_panel.qmd
ui.nav_spacer.qmd
ui.nav.qmd
ui.navset_bar.qmd
ui.navset_card_pill.qmd
ui.navset_card_tab.qmd
ui.navset_card_underline.qmd
ui.navset_hidden.qmd
ui.navset_pill_list.qmd
ui.navset_pill.qmd
ui.navset_tab.qmd
ui.navset_underline.qmd
ui.notification_remove.qmd
ui.notification_show.qmd
ui.output_code.qmd
ui.output_data_frame.qmd
ui.output_image.qmd
ui.output_plot.qmd
ui.output_table.qmd
ui.output_text_verbatim.qmd
ui.output_text.qmd
ui.output_ui.qmd
ui.page_auto.qmd
ui.page_bootstrap.qmd
ui.page_fillable.qmd
ui.page_fixed.qmd
ui.page_fluid.qmd
ui.page_navbar.qmd
ui.page_output.qmd
ui.page_sidebar.qmd
ui.panel_absolute.qmd
ui.panel_conditional.qmd
ui.panel_fixed.qmd
ui.panel_main.qmd
ui.panel_sidebar.qmd
ui.panel_title.qmd
ui.panel_well.qmd
ui.popover.qmd
ui.Progress.qmd
ui.remove_accordion_panel.qmd
ui.remove_ui.qmd
ui.row.qmd
ui.showcase_bottom.qmd
ui.showcase_left_center.qmd
ui.showcase_top_right.qmd
ui.sidebar.qmd
ui.TagList.qmd
ui.tags.qmd
ui.Theme.qmd
ui.tooltip.qmd
ui.update_accordion_panel.qmd
ui.update_accordion.qmd
ui.update_action_button.qmd
ui.update_action_link.qmd
ui.update_checkbox_group.qmd
ui.update_checkbox.qmd
ui.update_dark_mode.qmd
ui.update_date_range.qmd
ui.update_date.qmd
ui.update_navs.qmd
ui.update_numeric.qmd
ui.update_popover.qmd
ui.update_radio_buttons.qmd
ui.update_select.qmd
ui.update_selectize.qmd
ui.update_sidebar.qmd
ui.update_slider.qmd
ui.update_switch.qmd
ui.update_task_button.qmd
ui.update_text_area.qmd
ui.update_text.qmd
ui.update_tooltip.qmd
ui.value_box_theme.qmd
ui.value_box.qmd

================================================================
Repository Files
================================================================

================
File: _sidebar.yml
================
website:
  sidebar:
  - contents:
    - api/core/index.qmd
    - contents:
      - api/core/ui.page_sidebar.qmd
      - api/core/ui.page_navbar.qmd
      - api/core/ui.page_sidebar.qmd
      - api/core/ui.page_fillable.qmd
      - api/core/ui.page_fluid.qmd
      - api/core/ui.page_fixed.qmd
      - api/core/ui.page_bootstrap.qmd
      - api/core/ui.page_auto.qmd
      - api/core/ui.page_output.qmd
      section: Page containers
    - contents:
      - api/core/ui.sidebar.qmd
      - api/core/ui.layout_sidebar.qmd
      - api/core/ui.layout_columns.qmd
      - api/core/ui.layout_column_wrap.qmd
      - api/core/ui.card.qmd
      - api/core/ui.card_header.qmd
      - api/core/ui.card_footer.qmd
      - api/core/ui.popover.qmd
      - api/core/ui.tooltip.qmd
      - api/core/ui.accordion.qmd
      - api/core/ui.accordion_panel.qmd
      - api/core/ui.column.qmd
      - api/core/ui.row.qmd
      section: UI Layouts
    - contents:
      - api/core/ui.input_select.qmd
      - api/core/ui.input_selectize.qmd
      - api/core/ui.input_slider.qmd
      - api/core/ui.input_dark_mode.qmd
      - api/core/ui.input_date.qmd
      - api/core/ui.input_date_range.qmd
      - api/core/ui.input_checkbox.qmd
      - api/core/ui.input_checkbox_group.qmd
      - api/core/ui.input_switch.qmd
      - api/core/ui.input_radio_buttons.qmd
      - api/core/ui.input_numeric.qmd
      - api/core/ui.input_text.qmd
      - api/core/ui.input_text_area.qmd
      - api/core/ui.input_password.qmd
      - api/core/ui.input_action_button.qmd
      - api/core/ui.input_action_link.qmd
      - api/core/ui.input_task_button.qmd
      section: UI Inputs
    - contents:
      - api/core/ui.value_box.qmd
      - api/core/ui.value_box_theme.qmd
      - api/core/ui.showcase_bottom.qmd
      - api/core/ui.showcase_left_center.qmd
      - api/core/ui.showcase_top_right.qmd
      section: Value boxes
    - contents:
      - api/core/ui.nav_panel.qmd
      - api/core/ui.nav_spacer.qmd
      - api/core/ui.nav_menu.qmd
      - api/core/ui.nav_control.qmd
      - api/core/ui.navset_bar.qmd
      - api/core/ui.navset_tab.qmd
      - api/core/ui.navset_pill.qmd
      - api/core/ui.navset_underline.qmd
      - api/core/ui.navset_card_tab.qmd
      - api/core/ui.navset_card_pill.qmd
      - api/core/ui.navset_card_underline.qmd
      - api/core/ui.navset_pill_list.qmd
      - api/core/ui.navset_hidden.qmd
      section: Navigation (tab) panels
    - contents:
      - api/core/ui.panel_absolute.qmd
      - api/core/ui.panel_fixed.qmd
      - api/core/ui.panel_conditional.qmd
      - api/core/ui.panel_title.qmd
      - api/core/ui.panel_well.qmd
      section: UI panels
    - contents:
      - api/core/ui.input_file.qmd
      - api/core/ui.download_button.qmd
      - api/core/ui.download_link.qmd
      section: Uploads & downloads
    - contents:
      - api/core/ui.Chat.qmd
      - api/core/ui.chat_ui.qmd
      section: Chat interface
    - contents:
      - api/core/ui.Theme.qmd
      - api/core/ui.HTML.qmd
      - api/core/ui.TagList.qmd
      - api/core/ui.tags.qmd
      - api/core/ui.markdown.qmd
      - api/core/ui.include_css.qmd
      - api/core/ui.include_js.qmd
      - api/core/ui.insert_ui.qmd
      - api/core/ui.remove_ui.qmd
      - api/core/ui.busy_indicators.use.qmd
      - api/core/ui.busy_indicators.options.qmd
      - api/core/ui.fill.as_fillable_container.qmd
      - api/core/ui.fill.as_fill_item.qmd
      - api/core/ui.fill.remove_all_fill.qmd
      - api/core/ui.css.as_css_unit.qmd
      - api/core/ui.css.as_css_padding.qmd
      section: Custom UI
    - contents:
      - api/core/ui.update_select.qmd
      - api/core/ui.update_selectize.qmd
      - api/core/ui.update_slider.qmd
      - api/core/ui.update_dark_mode.qmd
      - api/core/ui.update_date.qmd
      - api/core/ui.update_date_range.qmd
      - api/core/ui.update_checkbox.qmd
      - api/core/ui.update_checkbox_group.qmd
      - api/core/ui.update_switch.qmd
      - api/core/ui.update_radio_buttons.qmd
      - api/core/ui.update_numeric.qmd
      - api/core/ui.update_text.qmd
      - api/core/ui.update_text_area.qmd
      - api/core/ui.update_navs.qmd
      - api/core/ui.update_action_button.qmd
      - api/core/ui.update_action_link.qmd
      - api/core/ui.update_task_button.qmd
      section: Update inputs
    - contents:
      - api/core/ui.update_sidebar.qmd
      - api/core/ui.update_tooltip.qmd
      - api/core/ui.update_popover.qmd
      - api/core/ui.update_accordion.qmd
      - api/core/ui.update_accordion_panel.qmd
      - api/core/ui.insert_accordion_panel.qmd
      - api/core/ui.remove_accordion_panel.qmd
      section: Update UI Layouts
    - contents:
      - api/core/ui.output_plot.qmd
      - api/core/ui.output_image.qmd
      - api/core/ui.output_table.qmd
      - api/core/ui.output_data_frame.qmd
      - api/core/ui.output_text.qmd
      - api/core/ui.output_code.qmd
      - api/core/ui.output_text_verbatim.qmd
      - api/core/ui.output_ui.qmd
      - api/core/render.plot.qmd
      - api/core/render.image.qmd
      - api/core/render.table.qmd
      - api/core/render.text.qmd
      - api/core/render.code.qmd
      - api/core/render.ui.qmd
      - api/core/render.express.qmd
      - api/core/render.download.qmd
      - api/core/render.data_frame.qmd
      - api/core/render.DataGrid.qmd
      - api/core/render.DataTable.qmd
      section: Rendering outputs
    - contents:
      - api/core/reactive.calc.qmd
      - api/core/reactive.effect.qmd
      - api/core/reactive.value.qmd
      - api/core/reactive.Calc.qmd
      - api/core/reactive.Effect.qmd
      - api/core/reactive.Value.qmd
      - api/core/reactive.event.qmd
      - api/core/reactive.isolate.qmd
      - api/core/reactive.invalidate_later.qmd
      - api/core/reactive.extended_task.qmd
      - api/core/reactive.flush.qmd
      - api/core/reactive.poll.qmd
      - api/core/reactive.file_reader.qmd
      - api/core/reactive.lock.qmd
      - api/core/req.qmd
      section: Reactive programming
    - contents:
      - api/core/run_app.qmd
      - api/core/App.qmd
      - api/core/Inputs.qmd
      - api/core/Outputs.qmd
      - api/core/Session.qmd
      section: Create and run applications
    - contents:
      - api/core/ui.help_text.qmd
      - api/core/ui.notification_show.qmd
      - api/core/ui.notification_remove.qmd
      - api/core/ui.modal.qmd
      - api/core/ui.modal_show.qmd
      - api/core/ui.modal_remove.qmd
      - api/core/ui.modal_button.qmd
      - api/core/ui.Progress.qmd
      section: Display messages
    - contents:
      - api/core/module.ui.qmd
      - api/core/module.server.qmd
      section: Modules
    - contents:
      - api/core/Session.qmd
      - api/core/Renderer.qmd
      - api/core/Htmltools.qmd
      - api/core/ExtendedTask.qmd
      section: Developer facing tools
    - contents:
      - api/core/MiscTypes.qmd
      - api/core/TagTypes.qmd
      - api/core/ExceptionTypes.qmd
      section: Types
    - contents:
      - api/core/render.transformer.output_transformer.qmd
      - api/core/render.transformer.resolve_value_fn.qmd
      section: Deprecated
    - contents:
      - api/core/ExCard.qmd
      section: Experimental
    id: api/core
  - id: dummy-sidebar

================
File: App.qmd
================
# App { #shiny.App }

```python
App(self, ui, server, *, static_assets=None, debug=False)
```

Create a Shiny app instance.

## Parameters {.doc-section .doc-section-parameters}

<code>[**ui**]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`) \| [TagList](`htmltools.TagList`) \| [Callable](`typing.Callable`)\[\[[Request](`starlette.requests.Request`)\], [Tag](`htmltools.Tag`) \| [TagList](`htmltools.TagList`)\] \| [Path](`pathlib.Path`)]{.parameter-annotation}</code>

:   The UI definition for the app (e.g., a call to [](:func:`~shiny.ui.page_fluid`) or similar, with layouts and controls nested inside). You can also pass a function that takes a [](:class:`~starlette.requests.Request`) and returns a UI definition, if you need the UI definition to be created dynamically for each pageview.

<code>[**server**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Inputs](`shiny.session._session.Inputs`)\], None\] \| [Callable](`typing.Callable`)\[\[[Inputs](`shiny.session._session.Inputs`), [Outputs](`shiny.session._session.Outputs`), [Session](`shiny.session._session.Session`)\], None\] \| None]{.parameter-annotation}</code>

:   A function which is called once for each session, ensuring that each session is independent.

<code>[**static_assets**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Path](`pathlib.Path`) \| [Mapping](`typing.Mapping`)\[[str](`str`), [str](`str`) \| [Path](`pathlib.Path`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Static files to be served by the app. If this is a string or Path object, it must be a directory, and it will be mounted at `/`. If this is a dictionary, each key is a mount point and each value is a file or directory to be served at that mount point.

<code>[**debug**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to enable debug mode.

## Examples {.doc-section .doc-section-examples}

```{python}
#| eval: false
from shiny import  App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid("Hello Shiny!")

def server(input: Inputs, output: Outputs, session: Session):
    pass

app = App(app_ui, server)
```

## Attributes

| Name | Description |
| --- | --- |
| [lib_prefix](#shiny.App.lib_prefix) | str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str |
| [sanitize_error_msg](#shiny.App.sanitize_error_msg) | str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str |
| [sanitize_errors](#shiny.App.sanitize_errors) | bool(x) -> bool |

## Methods

| Name | Description |
| --- | --- |
| [call_pyodide](#shiny.App.call_pyodide) | Communicate with pyodide. |
| [on_shutdown](#shiny.App.on_shutdown) | Register a callback to be called when the app is shutting down. This can be useful for cleaning up app-wide resources, like connection pools, temporary directories, worker threads/processes, etc. |
| [run](#shiny.App.run) | Run the app. |
| [stop](#shiny.App.stop) | Stop the app (i.e., close all sessions). |

### call_pyodide { #shiny.App.call_pyodide }

```python
App.call_pyodide(scope, receive, send)
```

Communicate with pyodide.

#### Warning {.doc-section .doc-section-warning}

This method is not intended for public usage. It's exported for use by
shinylive.

### on_shutdown { #shiny.App.on_shutdown }

```python
App.on_shutdown(callback)
```

Register a callback to be called when the app is shutting down. This can be
useful for cleaning up app-wide resources, like connection pools, temporary
directories, worker threads/processes, etc.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**callback**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], None\]]{.parameter-annotation}</code>

:   The callback to call. It should take no arguments, and any return value will be ignored. Try not to raise an exception in the callback, as exceptions during cleanup can hide the original exception that caused the app to shut down.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], None\]]{.parameter-annotation}</code>

:   The callback, to allow this method to be used as a decorator.

### run { #shiny.App.run }

```python
App.run(**kwargs)
```

Run the app.

#### Parameters {.doc-section .doc-section-parameters}

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Keyword arguments passed to [](:func:`~shiny.run_app`).

### stop { #shiny.App.stop }

```python
App.stop()
```

Stop the app (i.e., close all sessions).

#### See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.Session.close`)

================
File: ExCard.qmd
================
# Card

Additional card components that compliment [ui.card](ui.card.qmd).


# experimental.ui.card_image { #shiny.experimental.ui.card_image }

```python
experimental.ui.card_image(
    file,
    *args,
    href=None,
    border_radius='top',
    mime_type=None,
    class_=None,
    height=None,
    fill=True,
    width=None,
    container=card_body,
    **kwargs,
)
```

A card image container

[](:func:`~shiny.experimental.ui.card_image`) creates a general container for an image within a
[](:func:`~shiny.ui.card`). This component is designed to be
provided as a direct child to [](:func:`~shiny.ui.card`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**file**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [Path](`pathlib.Path`) \| [PurePath](`pathlib.PurePath`) \| [io](`io`).[BytesIO](`io.BytesIO`) \| None]{.parameter-annotation}</code>

:   A file path pointing to an image. The image will be base64 encoded and provided to the `src` attribute of the `<img>` tag. Alternatively, you may set this value to `None` and provide the `src` yourself via `*args:TagAttrs` or `**kwargs:TagAttrValue` (e.g., `{"src": "HOSTED_PATH_TO_IMAGE"}` or `src="HOSTED_PATH_TO_IMAGE"`).

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A dictionary of tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.

<code>[**href**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An optional URL to link to.

<code>[**border_radius**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['top', 'bottom', 'all', 'none'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'top\']{.parameter-default}</code>

:   Where to apply `border-radius` on the image.

<code>[**mime_type**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The mime type of the `file`.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Additional CSS classes for the resolved [](:class:`~htmltools.Tag`) object.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit (e.g., `height="200px"`). `height` will not apply when a card is made `full_screen`. In this case, consider setting a `height` in [](:func:`~shiny.experimental.ui.card_body`).

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to allow this element to grow/shrink to fit its `card` container.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit (e.g., `width="100%"`).

<code>[**container**]{.parameter-name} [:]{.parameter-annotation-sep} [[ImgContainer](`shiny.experimental.ui._card.ImgContainer`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [card_body]{.parameter-default}</code>

:   Method to wrap the returned [](:class:`~htmltools.Tag`) object. Defaults to [](:func:`~shiny.experimental.ui.card_body`). If [](:func:`~shiny.experimental.ui.card_body`) is used, each image will be in separate cards. If the `container` method does not return a [](:class:`~shiny.ui.CardItem`), it allows for consecutive non-`CardItem` objects to be bundled into a single [](:func:`~shiny.experimental.ui.card_body`) within [](:func:`~shiny.ui.card`).

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional HTML attributes for the resolved [](:class:`~htmltools.Tag`).

================
File: ExceptionTypes.qmd
================
# Exception types



# types.SilentException { #shiny.types.SilentException }

```python
types.SilentException()
```

Throw a silent exception.

Normally, when an exception occurs inside a reactive context, it&#x27;s either:

- Displayed to the user (as a big red error message)
    - This happens when the exception is raised from an output context (e.g., [](:class:`shiny.render.ui`))
- Crashes the application
    - This happens when the exception is raised from an [](:func:`shiny.reactive.effect`)

This exception is used to silently throw inside a reactive context, meaning that
execution is paused, and no output is shown to users (or the python console).

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.types.SilentCancelOutputException`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui
from shiny.types import SilentException

app_ui = ui.page_fluid(
    ui.input_text(
        "txt",
        "Enter text to see it displayed below the input",
        width="400px",
    ),
    ui.output_ui("txt_out"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    def txt_out():
        if not input.txt():
            raise SilentException()
        return "Your input: " + input.txt()


app = App(app_ui, server)


```

# types.SilentCancelOutputException { #shiny.types.SilentCancelOutputException }

```python
types.SilentCancelOutputException()
```

Throw a silent exception and don&#x27;t clear output

Similar to [](:class:`~shiny.types.SilentException`), but if thrown in an output context,
existing output isn&#x27;t cleared.

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.types.SilentException`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui
from shiny.types import SilentCancelOutputException

app_ui = ui.page_fluid(
    ui.input_text(
        "txt",
        "Delete the input text completely: it won't get removed below the input",
        "Some text",
        width="400px",
    ),
    ui.output_ui("txt_out"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    def txt_out():
        if not input.txt():
            raise SilentCancelOutputException()
        return "Your input: " + input.txt()


app = App(app_ui, server)


```

# types.SafeException { #shiny.types.SafeException }

```python
types.SafeException()
```

Throw a safe exception.

When ``shiny.App.SANITIZE_ERRORS`` is ``True`` (which is the case
in some production environments like Posit Connect), exceptions are sanitized
to prevent leaking of sensitive information. This class provides a way to
generate an error that is OK to be displayed to the user.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui
from shiny.types import SafeException

app_ui = ui.page_fluid(ui.output_ui("safe"), ui.output_ui("unsafe"))


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    def safe():
        raise SafeException("This is a safe exception")

    @render.ui
    def unsafe():
        raise Exception("This is an unsafe exception")


app = App(app_ui, server)
app.sanitize_errors = True


```

================
File: ExtendedTask.qmd
================
# ExtendedTask

Supervise an extended, long-running task

# reactive.ExtendedTask { #shiny.reactive.ExtendedTask }

```python
reactive.ExtendedTask(self, func)
```



## Attributes

| Name | Description |
| --- | --- |
| [error](#shiny.reactive._extended_task.ExtendedTask.error) | Reactive value that tracks the error raised by the task, if the current status is "error". If the status is not "error", the value will be unset, and a silent exception will be raised if you try to read it. Calling code should generally not read this value directly, but instead use the `result()` method, which is designed to behave correctly regardless of the current status. |
| [status](#shiny.reactive._extended_task.ExtendedTask.status) | Reactive value that tracks the current status of the task. The value will be one of "initial", "running", "success", "error", or "cancelled". |
| [value](#shiny.reactive._extended_task.ExtendedTask.value) | Reactive value that tracks the result of the task, if the current status is "success". If the status is not "success", the value will be unset, and a silent exception will be raised if you try to read it. Calling code should generally not read this value directly, but instead use the `result()` method, which is designed to behave correctly regardless of the current status. |

## Methods

| Name | Description |
| --- | --- |
| [cancel](#shiny.reactive.ExtendedTask.cancel) | Cancel the current invocation, if any. If there are pending invocations, cancel those too. |
| [invoke](#shiny.reactive.ExtendedTask.invoke) | Request execution of the slow computation. If there's already a computation in progress, this will queue up the new invocation to be run after the current one. The arguments to this function are passed to the underlying function. |
| [result](#shiny.reactive.ExtendedTask.result) | Call from a reactive context (e.g. a render function, [](:func:`~shiny.reactive.calc`), or [](:func:`~shiny.reactive.effect`)) to get the result of the computation. |

### cancel { #shiny.reactive.ExtendedTask.cancel }

```python
reactive.ExtendedTask.cancel()
```

Cancel the current invocation, if any. If there are pending invocations, cancel
those too.

### invoke { #shiny.reactive.ExtendedTask.invoke }

```python
reactive.ExtendedTask.invoke(*args, **kwargs)
```

Request execution of the slow computation. If there&#x27;s already a computation in
progress, this will queue up the new invocation to be run after the current one.
The arguments to this function are passed to the underlying function.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [None]{.parameter-annotation}</code>

:   Immediately returns `None`. The results of the computation will be available via the `result()` method.

### result { #shiny.reactive.ExtendedTask.result }

```python
reactive.ExtendedTask.result()
```

Call from a reactive context (e.g. a render function,
[](:func:`~shiny.reactive.calc`), or [](:func:`~shiny.reactive.effect`)) to get the
result of the computation.

* If the computation has finished successfully, the result will be returned.

* If the computation has finished with an error, the error will be raised.

* If the computation has never run, or the most recent run was cancelled, a
  silent exception will be raised that will clear any downstream outputs.

* If the computation is currently running, a special type of silent exception
  will be raised that will cause the output to visually reflect that calculation
  is in progress.

# reactive.ExtendedTask.invoke { #shiny.reactive.ExtendedTask.invoke }

```python
reactive.ExtendedTask.invoke(*args, **kwargs)
```

Request execution of the slow computation. If there&#x27;s already a computation in
progress, this will queue up the new invocation to be run after the current one.
The arguments to this function are passed to the underlying function.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [None]{.parameter-annotation}</code>

:   Immediately returns `None`. The results of the computation will be available via the `result()` method.

# reactive.ExtendedTask.result { #shiny.reactive.ExtendedTask.result }

```python
reactive.ExtendedTask.result()
```

Call from a reactive context (e.g. a render function,
[](:func:`~shiny.reactive.calc`), or [](:func:`~shiny.reactive.effect`)) to get the
result of the computation.

* If the computation has finished successfully, the result will be returned.

* If the computation has finished with an error, the error will be raised.

* If the computation has never run, or the most recent run was cancelled, a
  silent exception will be raised that will clear any downstream outputs.

* If the computation is currently running, a special type of silent exception
  will be raised that will cause the output to visually reflect that calculation
  is in progress.

# reactive.ExtendedTask.cancel { #shiny.reactive.ExtendedTask.cancel }

```python
reactive.ExtendedTask.cancel()
```

Cancel the current invocation, if any. If there are pending invocations, cancel
those too.

================
File: Htmltools.qmd
================
# htmltools methods



# htmltools.HTMLDependency { #htmltools.HTMLDependency }

```python
HTMLDependency(
    self,
    name,
    version,
    *,
    source=None,
    script=None,
    stylesheet=None,
    all_files=False,
    meta=None,
    head=None,
)
```

Define an HTML dependency.

Define an HTML dependency (i.e. CSS and/or JavaScript bundled in a directory). HTML
dependencies make it possible to use libraries like jQuery, Bootstrap, and d3 in a
more composable and portable way than simply using script, link, and style tags.

## Parameters {.doc-section .doc-section-parameters}

<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   Library name.

<code>[**version**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [Version](`packaging.version.Version`)]{.parameter-annotation}</code>

:   Library version.

<code>[**source**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[HTMLDependencySource](`htmltools._core.HTMLDependencySource`) \| [HTMLDependencyUrl](`htmltools._core.HTMLDependencyUrl`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A specification for the location of dependency files.

<code>[**script**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ScriptItem](`htmltools._core.ScriptItem`) \| [list](`list`)\[[ScriptItem](`htmltools._core.ScriptItem`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ``<script>`` tags to include in the document's ``<head>``. Each tag definition should include at least the ``src`` attribute (which should be file path relative to the ``source`` file location).

<code>[**stylesheet**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[StylesheetItem](`htmltools._core.StylesheetItem`) \| [list](`list`)\[[StylesheetItem](`htmltools._core.StylesheetItem`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ``<link>`` tags to include in the document's ``<head>``. Each tag definition should include at least the ``href`` attribute (which should be file path relative to the ``source`` file location).

<code>[**all_files**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether all files under the ``source`` directory are dependency files. If ``False``, only the files specified in script and stylesheet are treated as dependency files.

<code>[**meta**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[MetaItem](`htmltools._core.MetaItem`) \| [list](`list`)\[[MetaItem](`htmltools._core.MetaItem`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ``<meta>`` tags to include in the document's ``<head>``.

<code>[**head**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools._core.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Tags to include in the document's ``<head>``.

## Examples {.doc-section .doc-section-examples}

```python
>>> dep = HTMLDependency(
        name="mypackage",
        version="1.0",
        source={
            "package": "mypackage",
            "subdir": "lib/",
        },
        script={"src": "foo.js"},
        stylesheet={"href": "css/foo.css"},
    )
```

```python
>>> x = div("Hello", dep)
>>> x.render()
```

## Methods

| Name | Description |
| --- | --- |
| [as_dict](#htmltools.HTMLDependency.as_dict) | Returns a dict of the dependency's attributes. |
| [as_html_tags](#htmltools.HTMLDependency.as_html_tags) | Render the dependency as a ``TagList()``. |
| [copy_to](#htmltools.HTMLDependency.copy_to) | Copy the dependency's files to the given path. |
| [source_path_map](#htmltools.HTMLDependency.source_path_map) | Returns a dict of the absolute 'source' filepath and the 'href' path it will point to in the HTML (given the lib_prefix). |

### as_dict { #htmltools.HTMLDependency.as_dict }

```python
HTMLDependency.as_dict(lib_prefix='lib', include_version=True)
```

Returns a dict of the dependency&#x27;s attributes.

### as_html_tags { #htmltools.HTMLDependency.as_html_tags }

```python
HTMLDependency.as_html_tags(lib_prefix='lib', include_version=True)
```

Render the dependency as a ``TagList()``.

### copy_to { #htmltools.HTMLDependency.copy_to }

```python
HTMLDependency.copy_to(path, include_version=True)
```

Copy the dependency&#x27;s files to the given path.

### source_path_map { #htmltools.HTMLDependency.source_path_map }

```python
HTMLDependency.source_path_map(lib_prefix='lib', include_version=True)
```

Returns a dict of the absolute &#x27;source&#x27; filepath and the &#x27;href&#x27; path it will
point to in the HTML (given the lib_prefix).

# htmltools.css { #htmltools.css }

```python
css(collapse_='', **kwargs)
```

    CSS string helper

    Convenience function for building CSS style declarations (i.e. the string that goes
    into a style attribute, or the parts that go inside curly braces in a full
    stylesheet).

##     Parameters {.doc-section .doc-section-----parameters}

    collapse_
        String to use to collapse properties into a single string; likely ``""`` (the
        default) for style attributes, and either ``"
"`` or ``None`` for style blocks.
    **kwargs
        Named style properties, where the name is the property name and the argument is
        the property value.

##     Returns {.doc-section .doc-section-----returns}

    :
        A string of CSS style declarations, or ``None`` if no properties were given.

##     Example {.doc-section .doc-section-----example}

    >>> from htmltools import css
    >>> css(font_size = "12px", backgroundColor = "red")
    'font-size:12px;background-color:red;'

##     Note {.doc-section .doc-section-----note}

    CSS uses '-' (minus) as a separator character in property names, which isn't allowed
    in Python's keyword arguments. This function allows you to use '_' (underscore) as a
    separator and/or camelCase notation instead.

================
File: index.qmd
================
# Function reference {.doc .doc-index}

## Page containers

Create a user interface page container.

| | |
| --- | --- |
| [ui.page_sidebar](ui.page_sidebar.qmd#shiny.ui.page_sidebar) | Create a page with a sidebar and a title. |
| [ui.page_navbar](ui.page_navbar.qmd#shiny.ui.page_navbar) | Create a page with a navbar and a title. |
| [ui.page_sidebar](ui.page_sidebar.qmd#shiny.ui.page_sidebar) | Create a page with a sidebar and a title. |
| [ui.page_fillable](ui.page_fillable.qmd#shiny.ui.page_fillable) | Create a fillable page. |
| [ui.page_fluid](ui.page_fluid.qmd#shiny.ui.page_fluid) | Create a fluid page. |
| [ui.page_fixed](ui.page_fixed.qmd#shiny.ui.page_fixed) | Create a fixed page. |
| [ui.page_bootstrap](ui.page_bootstrap.qmd#shiny.ui.page_bootstrap) | Create a Bootstrap UI page container. |
| [ui.page_auto](ui.page_auto.qmd#shiny.ui.page_auto) | A page container which automatically decides which page function to use. |
| [ui.page_output](ui.page_output.qmd#shiny.ui.page_output) | Create a page container where the entire body is a UI output. |

## UI Layouts

Control the layout of multiple UI components.

| | |
| --- | --- |
| [ui.sidebar](ui.sidebar.qmd#shiny.ui.sidebar) | Sidebar element |
| [ui.layout_sidebar](ui.layout_sidebar.qmd#shiny.ui.layout_sidebar) | Sidebar layout |
| [ui.layout_columns](ui.layout_columns.qmd#shiny.ui.layout_columns) | Create responsive, column-based grid layouts, based on a 12-column grid. |
| [ui.layout_column_wrap](ui.layout_column_wrap.qmd#shiny.ui.layout_column_wrap) | A grid-like, column-first layout |
| [ui.card](ui.card.qmd#shiny.ui.card) | A Bootstrap card component |
| [ui.card_header](ui.card_header.qmd#shiny.ui.card_header) | Card header container |
| [ui.card_footer](ui.card_footer.qmd#shiny.ui.card_footer) | Card footer container |
| [ui.popover](ui.popover.qmd#shiny.ui.popover) | Add a popover to a UI element. |
| [ui.tooltip](ui.tooltip.qmd#shiny.ui.tooltip) | Add a tooltip to a UI element. |
| [ui.accordion](ui.accordion.qmd#shiny.ui.accordion) | Create a vertically collapsing accordion. |
| [ui.accordion_panel](ui.accordion_panel.qmd#shiny.ui.accordion_panel) | Single accordion panel. |
| [ui.column](ui.column.qmd#shiny.ui.column) | Responsive row-column based layout |
| [ui.row](ui.row.qmd#shiny.ui.row) | Responsive row-column based layout |

## UI Inputs

Create UI that prompts the user for input values or interaction.

| | |
| --- | --- |
| [ui.input_select](ui.input_select.qmd#shiny.ui.input_select) | Create a select list that can be used to choose a single or multiple items from a list of values. |
| [ui.input_selectize](ui.input_selectize.qmd#shiny.ui.input_selectize) | Create a select list that can be used to choose a single or multiple items from a list of values. |
| [ui.input_slider](ui.input_slider.qmd#shiny.ui.input_slider) | Constructs a slider widget to select a number, date, or date-time from a range. |
| [ui.input_dark_mode](ui.input_dark_mode.qmd#shiny.ui.input_dark_mode) | Creates a dark mode switch input that toggles the app between dark and light modes. |
| [ui.input_date](ui.input_date.qmd#shiny.ui.input_date) | Creates a text input which, when clicked on, brings up a calendar that the user can click on to select dates. |
| [ui.input_date_range](ui.input_date_range.qmd#shiny.ui.input_date_range) | Creates a pair of text inputs which, when clicked on, bring up calendars that the user can click on to select dates. |
| [ui.input_checkbox](ui.input_checkbox.qmd#shiny.ui.input_checkbox) | Create a checkbox that can be used to specify logical values. |
| [ui.input_checkbox_group](ui.input_checkbox_group.qmd#shiny.ui.input_checkbox_group) | Create a group of checkboxes that can be used to toggle multiple choices independently. |
| [ui.input_switch](ui.input_switch.qmd#shiny.ui.input_switch) | Create a switch that can be used to specify logical values. Similar to [](:func:`~shiny.ui.input_checkbox`), but implies to the user that the change will take effect immediately. |
| [ui.input_radio_buttons](ui.input_radio_buttons.qmd#shiny.ui.input_radio_buttons) | Create a set of radio buttons used to select an item from a list. |
| [ui.input_numeric](ui.input_numeric.qmd#shiny.ui.input_numeric) | Create an input control for entry of numeric values. |
| [ui.input_text](ui.input_text.qmd#shiny.ui.input_text) | Create an input control for entry of text values. |
| [ui.input_text_area](ui.input_text_area.qmd#shiny.ui.input_text_area) | Create a textarea input control for entry of unstructured text values. |
| [ui.input_password](ui.input_password.qmd#shiny.ui.input_password) | Create an password control for entry of passwords. |
| [ui.input_action_button](ui.input_action_button.qmd#shiny.ui.input_action_button) | Creates an action button whose value is initially zero, and increments by one each time it is pressed. |
| [ui.input_action_link](ui.input_action_link.qmd#shiny.ui.input_action_link) | Creates a link whose value is initially zero, and increments by one each time it is pressed. |
| [ui.input_task_button](ui.input_task_button.qmd#shiny.ui.input_task_button) | Creates a button for launching longer-running operations. |

## Value boxes

Prominently display a value and label in a box that can be expanded to show more information.

| | |
| --- | --- |
| [ui.value_box](ui.value_box.qmd#shiny.ui.value_box) | Value box |
| [ui.value_box_theme](ui.value_box_theme.qmd#shiny.ui.value_box_theme) | Value box theme |
| [ui.showcase_bottom](ui.showcase_bottom.qmd#shiny.ui.showcase_bottom) | Showcase bottom |
| [ui.showcase_left_center](ui.showcase_left_center.qmd#shiny.ui.showcase_left_center) | Showcase left center |
| [ui.showcase_top_right](ui.showcase_top_right.qmd#shiny.ui.showcase_top_right) | Showcase top right |

## Navigation (tab) panels

Create segments of UI content.

| | |
| --- | --- |
| [ui.nav_panel](ui.nav_panel.qmd#shiny.ui.nav_panel) | Create a nav item pointing to some internal content. |
| [ui.nav_spacer](ui.nav_spacer.qmd#shiny.ui.nav_spacer) | Create space between nav items. |
| [ui.nav_menu](ui.nav_menu.qmd#shiny.ui.nav_menu) | Create a menu of nav items. |
| [ui.nav_control](ui.nav_control.qmd#shiny.ui.nav_control) | Place a control in the navigation container. |
| [ui.navset_bar](ui.navset_bar.qmd#shiny.ui.navset_bar) | Render nav items as a navbar. |
| [ui.navset_tab](ui.navset_tab.qmd#shiny.ui.navset_tab) | Render nav items as a tabset. |
| [ui.navset_pill](ui.navset_pill.qmd#shiny.ui.navset_pill) | Render nav items as a pillset. |
| [ui.navset_underline](ui.navset_underline.qmd#shiny.ui.navset_underline) | Render nav items whose active/focused navigation links are styled with an underline. |
| [ui.navset_card_tab](ui.navset_card_tab.qmd#shiny.ui.navset_card_tab) | Render nav items as a tabset inside a card container. |
| [ui.navset_card_pill](ui.navset_card_pill.qmd#shiny.ui.navset_card_pill) | Render nav items as a pillset inside a card container. |
| [ui.navset_card_underline](ui.navset_card_underline.qmd#shiny.ui.navset_card_underline) | Render nav items inside a card container. Active/focused navigation links are styled with an underline. |
| [ui.navset_pill_list](ui.navset_pill_list.qmd#shiny.ui.navset_pill_list) | Render nav items as a vertical pillset. |
| [ui.navset_hidden](ui.navset_hidden.qmd#shiny.ui.navset_hidden) | Render nav contents without the nav items. |

## UI panels

Visually group together a section of UI components.

| | |
| --- | --- |
| [ui.panel_absolute](ui.panel_absolute.qmd#shiny.ui.panel_absolute) | Create a panel of absolutely positioned content. |
| [ui.panel_fixed](ui.panel_fixed.qmd#shiny.ui.panel_fixed) | Create a panel of absolutely positioned content. |
| [ui.panel_conditional](ui.panel_conditional.qmd#shiny.ui.panel_conditional) | Create a conditional panel. |
| [ui.panel_title](ui.panel_title.qmd#shiny.ui.panel_title) | Create title(s) for the application. |
| [ui.panel_well](ui.panel_well.qmd#shiny.ui.panel_well) | Create a well panel. |

## Uploads & downloads

Allow users to upload and download files.

| | |
| --- | --- |
| [ui.input_file](ui.input_file.qmd#shiny.ui.input_file) | Create a file upload control that can be used to upload one or more files. |
| [ui.download_button](ui.download_button.qmd#shiny.ui.download_button) | Create a download button |
| [ui.download_link](ui.download_link.qmd#shiny.ui.download_link) | Create a download button. |

## Chat interface

Build a chatbot interface

| | |
| --- | --- |
| [ui.Chat](ui.Chat.qmd#shiny.ui.Chat) | Create a chat interface. |
| [ui.chat_ui](ui.chat_ui.qmd#shiny.ui.chat_ui) | UI container for a chat component (Shiny Core). |

## Custom UI

Lower-level UI functions for creating custom HTML/CSS/JS

| | |
| --- | --- |
| [ui.Theme](ui.Theme.qmd#shiny.ui.Theme) | Create a custom Shiny theme. |
| [ui.HTML](ui.HTML.qmd#shiny.ui.HTML) | Mark a string as raw HTML. This will prevent the string from being escaped when rendered inside an HTML tag. |
| [ui.TagList](ui.TagList.qmd#shiny.ui.TagList) | Create an HTML tag list (i.e., a fragment of HTML) |
| [ui.tags](ui.tags.qmd#shiny.ui.tags) | Functions for creating HTML tags. |
| [ui.markdown](ui.markdown.qmd#shiny.ui.markdown) | Convert a string of markdown to [](:func:`ui.HTML`). |
| [ui.include_css](ui.include_css.qmd#shiny.ui.include_css) | Include a CSS file. |
| [ui.include_js](ui.include_js.qmd#shiny.ui.include_js) | Include a JavaScript file. |
| [ui.insert_ui](ui.insert_ui.qmd#shiny.ui.insert_ui) | Insert UI objects. |
| [ui.remove_ui](ui.remove_ui.qmd#shiny.ui.remove_ui) | Remove UI objects. |
| [ui.busy_indicators.use](ui.busy_indicators.use.qmd#shiny.ui.busy_indicators.use) | Enable/disable busy indication |
| [ui.busy_indicators.options](ui.busy_indicators.options.qmd#shiny.ui.busy_indicators.options) | Customize spinning busy indicators. |
| [ui.fill.as_fillable_container](ui.fill.as_fillable_container.qmd#shiny.ui.fill.as_fillable_container) | Coerce a tag to a fillable container. |
| [ui.fill.as_fill_item](ui.fill.as_fill_item.qmd#shiny.ui.fill.as_fill_item) | Coerce a tag to a fill item. |
| [ui.fill.remove_all_fill](ui.fill.remove_all_fill.qmd#shiny.ui.fill.remove_all_fill) | Remove any filling layouts from a tag. |
| [ui.css.as_css_unit](ui.css.as_css_unit.qmd#shiny.ui.css.as_css_unit) | Convert a value into a CSS unit. |
| [ui.css.as_css_padding](ui.css.as_css_padding.qmd#shiny.ui.css.as_css_padding) | Convert a CSS unit or list of CSS units into a CSS padding value. |

## Update inputs

Programmatically update input values.

| | |
| --- | --- |
| [ui.update_select](ui.update_select.qmd#shiny.ui.update_select) | Change the value of a select input on the client. |
| [ui.update_selectize](ui.update_selectize.qmd#shiny.ui.update_selectize) | Change the value of a selectize.js powered input on the client. |
| [ui.update_slider](ui.update_slider.qmd#shiny.ui.update_slider) | Change the value of a slider input on the client. |
| [ui.update_dark_mode](ui.update_dark_mode.qmd#shiny.ui.update_dark_mode) |  |
| [ui.update_date](ui.update_date.qmd#shiny.ui.update_date) | Change the value of a date input on the client. |
| [ui.update_date_range](ui.update_date_range.qmd#shiny.ui.update_date_range) | Change the start and end values of a date range input on the client. |
| [ui.update_checkbox](ui.update_checkbox.qmd#shiny.ui.update_checkbox) | Change the value of a checkbox input on the client. |
| [ui.update_checkbox_group](ui.update_checkbox_group.qmd#shiny.ui.update_checkbox_group) | Change the value of a checkbox group input on the client. |
| [ui.update_switch](ui.update_switch.qmd#shiny.ui.update_switch) | Change the value of a switch input on the client. |
| [ui.update_radio_buttons](ui.update_radio_buttons.qmd#shiny.ui.update_radio_buttons) | Change the value of a radio input on the client. |
| [ui.update_numeric](ui.update_numeric.qmd#shiny.ui.update_numeric) | Change the value of a number input on the client. |
| [ui.update_text](ui.update_text.qmd#shiny.ui.update_text) | Change the value of a text input on the client. |
| [ui.update_text_area](ui.update_text_area.qmd#shiny.ui.update_text_area) | Change the value of a text input on the client. |
| [ui.update_navs](ui.update_navs.qmd#shiny.ui.update_navs) | Change the value of a navs container on the client. |
| [ui.update_action_button](ui.update_action_button.qmd#shiny.ui.update_action_button) | Change the label and/or icon of an action button on the client. |
| [ui.update_action_link](ui.update_action_link.qmd#shiny.ui.update_action_link) | Change the label and/or icon of an action link on the client. |
| [ui.update_task_button](ui.update_task_button.qmd#shiny.ui.update_task_button) | Change the state of a task button on the client. |

## Update UI Layouts



| | |
| --- | --- |
| [ui.update_sidebar](ui.update_sidebar.qmd#shiny.ui.update_sidebar) | Update a sidebar's visibility. |
| [ui.update_tooltip](ui.update_tooltip.qmd#shiny.ui.update_tooltip) | Update tooltip contents. |
| [ui.update_popover](ui.update_popover.qmd#shiny.ui.update_popover) | Update the contents or title of a popover. |
| [ui.update_accordion](ui.update_accordion.qmd#shiny.ui.update_accordion) | Dynamically set accordions' states. |
| [ui.update_accordion_panel](ui.update_accordion_panel.qmd#shiny.ui.update_accordion_panel) | Dynamically update accordion panel contents. |
| [ui.insert_accordion_panel](ui.insert_accordion_panel.qmd#shiny.ui.insert_accordion_panel) | Insert an [](:func:`~shiny.ui.accordion_panel`). |
| [ui.remove_accordion_panel](ui.remove_accordion_panel.qmd#shiny.ui.remove_accordion_panel) | Remove an [](:func:`~shiny.ui.accordion_panel`). |

## Rendering outputs

UI (output_*()) and server (render)ing functions for generating content server-side.

| | |
| --- | --- |
| [ui.output_plot](ui.output_plot.qmd#shiny.ui.output_plot) | Create a output container for a static plot. |
| [ui.output_image](ui.output_image.qmd#shiny.ui.output_image) | Create a output container for a static image. |
| [ui.output_table](ui.output_table.qmd#shiny.ui.output_table) | Create a output container for a table. |
| [ui.output_data_frame](ui.output_data_frame.qmd#shiny.ui.output_data_frame) | Create an output container for an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple). |
| [ui.output_text](ui.output_text.qmd#shiny.ui.output_text) | Create a output container for some text. |
| [ui.output_code](ui.output_code.qmd#shiny.ui.output_code) | Create a output container for code (monospaced text). |
| [ui.output_text_verbatim](ui.output_text_verbatim.qmd#shiny.ui.output_text_verbatim) | Create a output container for some text. |
| [ui.output_ui](ui.output_ui.qmd#shiny.ui.output_ui) | Create a output container for a UI (i.e., HTML) element. |
| [render.plot](render.plot.qmd#shiny.render.plot) | Reactively render a plot object as an HTML image. |
| [render.image](render.image.qmd#shiny.render.image) | Reactively render a image file as an HTML image. |
| [render.table](render.table.qmd#shiny.render.table) | Reactively render a pandas ``DataFrame`` object (or similar) as a basic HTML table. |
| [render.text](render.text.qmd#shiny.render.text) | Reactively render text. |
| [render.code](render.code.qmd#shiny.render.code) | Reactively render text as code (monospaced). |
| [render.ui](render.ui.qmd#shiny.render.ui) | Reactively render HTML content. |
| [render.express](render.express.qmd#shiny.render.express) | Reactively render HTML content with output captured as in Shiny Express |
| [render.download](render.download.qmd#shiny.render.download) | Decorator to register a function to handle a download. |
| [render.data_frame](render.data_frame.qmd#shiny.render.data_frame) | Decorator for a function that returns a [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object to render as an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple). |
| [render.DataGrid](render.DataGrid.qmd#shiny.render.DataGrid) | Holds the data and options for a [](:class:`~shiny.render.data_frame`) output, for a spreadsheet-like view. |
| [render.DataTable](render.DataTable.qmd#shiny.render.DataTable) | Holds the data and options for a [](:class:`~shiny.render.data_frame`) output, for a spreadsheet-like view. |

## Reactive programming



| | |
| --- | --- |
| [reactive.calc](reactive.calc.qmd#shiny.reactive.calc) | Mark a function as a reactive calculation. |
| [reactive.effect](reactive.effect.qmd#shiny.reactive.effect) | Mark a function as a reactive side effect. |
| [reactive.value](reactive.value.qmd#shiny.reactive.value) | Create a reactive value. |
| [reactive.Calc](reactive.Calc.qmd#shiny.reactive.Calc) | Mark a function as a reactive calculation. |
| [reactive.Effect](reactive.Effect.qmd#shiny.reactive.Effect) | Mark a function as a reactive side effect. |
| [reactive.Value](reactive.Value.qmd#shiny.reactive.Value) | Create a reactive value. |
| [reactive.event](reactive.event.qmd#shiny.reactive.event) | Mark a function to react only when an "event" occurs. |
| [reactive.isolate](reactive.isolate.qmd#shiny.reactive.isolate) | Create a non-reactive scope within a reactive scope. |
| [reactive.invalidate_later](reactive.invalidate_later.qmd#shiny.reactive.invalidate_later) | Scheduled Invalidation |
| [reactive.extended_task](reactive.extended_task.qmd#shiny.reactive.extended_task) | Decorator to mark an async function as a slow computation. This will cause the function to be run in a background asyncio task, and the results will be available via the [](:class:`~shiny.reactive.ExtendedTask`) object returned by the decorator. |
| [reactive.flush](reactive.flush.qmd#shiny.reactive.flush) | Run any pending invalidations (i.e., flush the reactive environment). |
| [reactive.poll](reactive.poll.qmd#shiny.reactive.poll) | Create a reactive polling object. |
| [reactive.file_reader](reactive.file_reader.qmd#shiny.reactive.file_reader) | Create a reactive file reader. |
| [reactive.lock](reactive.lock.qmd#shiny.reactive.lock) | A lock that should be held whenever manipulating the reactive graph. |
| [req](req.qmd#shiny.req) | Throw a silent exception for falsy values. |

## Create and run applications



| | |
| --- | --- |
| [run_app](run_app.qmd#shiny.run_app) | Starts a Shiny app. Press ``Ctrl+C`` (or ``Ctrl+Break`` on Windows) to stop the app. |
| [App](App.qmd#shiny.App) | Create a Shiny app instance. |
| [Inputs](Inputs.qmd#shiny.Inputs) | A class representing Shiny input values. |
| [Outputs](Outputs.qmd#shiny.Outputs) | A class representing Shiny output definitions. |
| [Session](Session.qmd#shiny.Session) | Interface definition for Session-like classes, like [](:class:`AppSession`), [](:class:`SessionProxy`), and [](:class:`~shiny.express.ExpressStubSession`). |

## Display messages



| | |
| --- | --- |
| [ui.help_text](ui.help_text.qmd#shiny.ui.help_text) | Create a help text element |
| [ui.notification_show](ui.notification_show.qmd#shiny.ui.notification_show) | Show a notification to the user. |
| [ui.notification_remove](ui.notification_remove.qmd#shiny.ui.notification_remove) | Remove a notification. |
| [ui.modal](ui.modal.qmd#shiny.ui.modal) | Creates the UI for a modal dialog, using Bootstrap's modal class. |
| [ui.modal_show](ui.modal_show.qmd#shiny.ui.modal_show) | Show a modal dialog. |
| [ui.modal_remove](ui.modal_remove.qmd#shiny.ui.modal_remove) | Remove a modal dialog box. |
| [ui.modal_button](ui.modal_button.qmd#shiny.ui.modal_button) | Creates a button that will dismiss a [](:func:`~shiny.ui.modal`). |
| [ui.Progress](ui.Progress.qmd#shiny.ui.Progress) | Initialize a progress bar. |

## Modules



| | |
| --- | --- |
| [module.ui](module.ui.qmd#shiny.module.ui) |  |
| [module.server](module.server.qmd#shiny.module.server) |  |

## Developer facing tools



| | |
| --- | --- |
| [Session](Session.qmd) |  |
| [Create output renderers](Renderer.qmd) | Package author methods for creating new output renderers. |
| [htmltools methods](Htmltools.qmd) |  |
| [ExtendedTask](ExtendedTask.qmd) | Supervise an extended, long-running task |

## Types



| | |
| --- | --- |
| [Miscellaneous types](MiscTypes.qmd) |  |
| [Tag types](TagTypes.qmd) |  |
| [Exception types](ExceptionTypes.qmd) |  |

## Deprecated



| | |
| --- | --- |
| [render.transformer.output_transformer](render.transformer.output_transformer.qmd#shiny.render.transformer.output_transformer) | Deprecated. Please use [](:class:`~shiny.render.renderer.Renderer`) instead. |
| [render.transformer.resolve_value_fn](render.transformer.resolve_value_fn.qmd#shiny.render.transformer.resolve_value_fn) | Resolve the value function |

## Experimental

These methods are under consideration and are considered unstable. However, if there is a method you are excited about, please let us know!


| | |
| --- | --- |
| [Card](ExCard.qmd) | Additional card components that compliment [ui.card](ui.card.qmd).  |

================
File: Inputs.qmd
================
# Inputs { #shiny.Inputs }

```python
Inputs(self, values, ns=Root)
```

A class representing Shiny input values.

This class provides access to a [](:class:`~shiny.Session`)&#x27;s input values. The
input values are reactive [](:class:`~shiny.reactive.Value`)s, and can be accessed with
the ``[]`` operator, or with ``.``. For example, if there is an input named ``x``,
it can be accessed via `input["x"]()` or ``input.x()``.

================
File: MiscTypes.qmd
================
# Miscellaneous types



# types.MISSING_TYPE { #shiny.types.MISSING_TYPE }

```python
types.MISSING_TYPE()
```



# types.MISSING { #shiny.types.MISSING }

`types.MISSING`



# types.FileInfo { #shiny.types.FileInfo }

```python
types.FileInfo()
```

Class for information about a file upload.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_file`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd

from shiny import App, Inputs, Outputs, Session, reactive, render, ui
from shiny.types import FileInfo

app_ui = ui.page_fluid(
    ui.input_file("file1", "Choose CSV File", accept=[".csv"], multiple=False),
    ui.input_checkbox_group(
        "stats",
        "Summary Stats",
        choices=["Row Count", "Column Count", "Column Names"],
        selected=["Row Count", "Column Count", "Column Names"],
    ),
    ui.output_table("summary"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.calc
    def parsed_file():
        file: list[FileInfo] | None = input.file1()
        if file is None:
            return pd.DataFrame()
        return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]
            file[0]["datapath"]
        )

    @render.table
    def summary():
        df = parsed_file()

        if df.empty:
            return pd.DataFrame()

        # Get the row count, column count, and column names of the DataFrame
        row_count = df.shape[0]
        column_count = df.shape[1]
        names = df.columns.tolist()
        column_names = ", ".join(str(name) for name in names)

        # Create a new DataFrame to display the information
        info_df = pd.DataFrame(
            {
                "Row Count": [row_count],
                "Column Count": [column_count],
                "Column Names": [column_names],
            }
        )

        # input.stats() is a list of strings; subset the columns based on the selected
        # checkboxes
        return info_df.loc[:, input.stats()]


app = App(app_ui, server)


```

## Attributes

| Name | Description |
| --- | --- |
| [datapath](#shiny.types.FileInfo.datapath) | The path to the file on the server. |
| [name](#shiny.types.FileInfo.name) | The name of the file being uploaded. |
| [size](#shiny.types.FileInfo.size) | The size of the file in bytes. |
| [type](#shiny.types.FileInfo.type) | The MIME type of the file. |

# types.ImgData { #shiny.types.ImgData }

```python
types.ImgData()
```

Return type for [](:class:`~shiny.render.image`).

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.image`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui
from shiny.types import ImgData

app_ui = ui.page_fluid(ui.output_image("image"))


def server(input: Inputs, output: Outputs, session: Session):
    @render.image
    def image():
        from pathlib import Path

        dir = Path(__file__).resolve().parent
        img: ImgData = {"src": str(dir / "posit-logo.png"), "width": "100px"}
        return img


app = App(app_ui, server)


## file: posit-logo.png
## type: binary


```

## Attributes

| Name | Description |
| --- | --- |
| [alt](#shiny.types.ImgData.alt) | The ``alt`` attribute of the ``<img>`` tag. |
| [coordmap](#shiny.types.ImgData.coordmap) | TODO |
| [height](#shiny.types.ImgData.height) | The ``height`` attribute of the ``<img>`` tag. |
| [src](#shiny.types.ImgData.src) | The ``src`` attribute of the ``<img>`` tag. |
| [style](#shiny.types.ImgData.style) | The ``style`` attribute of the ``<img>`` tag. |
| [width](#shiny.types.ImgData.width) | The ``width`` attribute of the ``<img>`` tag. |

# types.NavSetArg { #shiny.types.NavSetArg }

```python
types.NavSetArg()
```

A value suitable for passing to a navigation container (e.g.,
[](:func:`~shiny.ui.navset_tab`)).

## Methods

| Name | Description |
| --- | --- |
| [get_value](#shiny.types.NavSetArg.get_value) | Get the value of this navigation item (if any). |
| [resolve](#shiny.types.NavSetArg.resolve) | Resolve information provided by the navigation container. |

### get_value { #shiny.types.NavSetArg.get_value }

```python
types.NavSetArg.get_value()
```

Get the value of this navigation item (if any).

This value is only used to determine what navigation item should be shown
by default when none is specified (i.e., the first navigation item that
returns a value is used to determine the container&#x27;s ``selected`` value).

### resolve { #shiny.types.NavSetArg.resolve }

```python
types.NavSetArg.resolve(selected, context)
```

Resolve information provided by the navigation container.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation}</code>

:   The value of the navigation item to be shown on page load.

<code>[**context**]{.parameter-name} [:]{.parameter-annotation-sep} [[dict](`dict`)\[[str](`str`), [Any](`typing.Any`)\]]{.parameter-annotation}</code>

:   Additional context supplied by the navigation container.

# ui.Sidebar { #shiny.ui.Sidebar }

```python
ui.Sidebar(
    self,
    *,
    children,
    attrs,
    position='left',
    open=None,
    width=250,
    id=None,
    title=None,
    fg=None,
    bg=None,
    class_=None,
    max_height_mobile=None,
    gap=None,
    padding=None,
)
```

A sidebar object

Class returned from [](:func:`~shiny.ui.sidebar`). Please do not use this
class directly. Instead, supply the [](:func:`~shiny.ui.sidebar`) object to
[](:func:`~shiny.ui.layout_sidebar`).

## Attributes {.doc-section .doc-section-attributes}

<code>[**children**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A tuple of [](:class:`~htmltools.Tag`) objects that are the contents of the sidebar.

<code>[**attrs**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A dictionary of attributes that are supplied to the sidebar contents [](:class:`~htmltools.Tag`) container.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A valid CSS unit used for the width of the sidebar.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   Where the sidebar should appear relative to the main content, one of `"left"` or `"right"`.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[ResolvedId](`shiny._namespaces.ResolvedId`) \| None]{.parameter-annotation}</code>

:   The resolved ID. Required if wanting to reactively read (or update) the `collapsible` state in a Shiny app.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A character title to be used as the sidebar title, which will be wrapped in a `<div>` element with class `sidebar-title`. You can also provide a custom [](:class:`~htmltools.Tag`) for the title element, in which case you'll likely want to give this element `class = "sidebar-title"`.

<code>[**color**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A dictionary with items `"bg"` for background or `"fg"` for foreground color.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   CSS classes for the sidebar container element, in addition to the fixed `.sidebar` class.

<code>[**max_height_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation}</code>

:   A CSS length unit (passed through [](:func:`~shiny.ui.css.as_css_unit`)) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements provided to `*args`.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. `padding` may be one to four values.  * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while   the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left   and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left   respectively.

## Parameters {.doc-section .doc-section-parameters}

<code>[**children**]{.parameter-name} [:]{.parameter-annotation-sep} [[list](`list`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation}</code>

:   A tuple of [](:class:`~htmltools.Tag`) objects that are the contents of the sidebar.

<code>[**attrs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation}</code>

:   A dictionary of attributes that are supplied to the sidebar contents [](:class:`~htmltools.Tag`) container.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [250]{.parameter-default}</code>

:   A valid CSS unit used for the width of the sidebar.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['left', 'right'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'left\']{.parameter-default}</code>

:   Where the sidebar should appear relative to the main content, one of `"left"` or `"right"`.

<code>[**open**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SidebarOpenSpec](`shiny.ui._sidebar.SidebarOpenSpec`) \| [SidebarOpenValue](`shiny.ui._sidebar.SidebarOpenValue`) \| [Literal](`typing.Literal`)\['desktop'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial state of the sidebar. If a string, the possible values are:  * `"open"`: the sidebar starts open * `"closed"`: the sidebar starts closed * `"always"`: the sidebar is always open and cannot be closed  Alternatively, you can provide a dictionary with keys `"desktop"` and `"mobile"` to set different initial states for desktop and mobile. For example, when `{"desktop": "open", "mobile": "closed"}` the sidebar is initialized in the open state on desktop screens or in the closed state on mobile screens. You can also choose to place an always-open sidebar above the main content on mobile devices by setting `open={"mobile": "always-above"}`.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string. Required if wanting to reactively read (or update) the `collapsible` state in a Shiny app.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character title to be used as the sidebar title, which will be wrapped in a `<div>` element with class `sidebar-title`. You can also provide a custom [](:class:`~htmltools.Tag`) for the title element, in which case you'll likely want to give this element `class = "sidebar-title"`.

<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A background or foreground color.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   CSS classes for the sidebar container element, in addition to the fixed `.sidebar` class.

<code>[**max_height_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit (passed through [](:func:`~shiny.ui.css.as_css_unit`)) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements provided to `*args`.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. `padding` may be one to four values.  * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while   the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left   and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left   respectively.

## Methods

| Name | Description |
| --- | --- |
| [open](#shiny.ui.Sidebar.open) | Get or set the initial state of the sidebar. Returns a dataclass with `desktop` and `mobile` attributes. |

### open { #shiny.ui.Sidebar.open }

```python
ui.Sidebar.open(value=MISSING)
```

Get or set the initial state of the sidebar. Returns a dataclass with `desktop`
and `mobile` attributes.

# ui.CardItem { #shiny.ui.CardItem }

```python
ui.CardItem(self, item)
```

A wrapper around a [](:class:`~htmltools.Tag`) object that represents the content of a
card item (e.g., [](:func:`~shiny.ui.card_header`) or
[](:func:`~shiny.ui.card_footer`)).

This class is used to allow for consecutive non-card items to be bundled into a
single group within [](:func:`~shiny.ui.card`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**item**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A [](:class:`~htmltools.Tag`) object that represents the content of a card item (e.g., [](:func:`~shiny.ui.card_header`) or [](:func:`~shiny.ui.card_footer`)).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.card`) for creating a card component.
* [](:func:`~shiny.ui.card_header`) for creating a header within a card.
* [](:func:`~shiny.ui.card_footer`) for creating a footer within a card.

## Methods

| Name | Description |
| --- | --- |
| [resolve](#shiny.ui.CardItem.resolve) | Resolves an object with the `CardItem` class by returning the `item` provided at initialization. |
| [tagify](#shiny.ui.CardItem.tagify) | Tagify the `item` |

### resolve { #shiny.ui.CardItem.resolve }

```python
ui.CardItem.resolve()
```

Resolves an object with the `CardItem` class by returning the `item` provided at initialization.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   The `item` provided at initialization.

### tagify { #shiny.ui.CardItem.tagify }

```python
ui.CardItem.tagify()
```

Tagify the `item`

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagList](`htmltools.TagList`)]{.parameter-annotation}</code>

:   A tagified [](:class:`~htmltools.TagList`) object.

# ui.AccordionPanel { #shiny.ui.AccordionPanel }

```python
ui.AccordionPanel(self, *args, data_value, icon, title, id, **kwargs)
```

The internal class used to represent an accordion panel.

This class is used to represent an accordion panel. It is not intended to be
instantiated directly. Instead, use [](:func:`~shiny.ui.accordion_panel`).

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to appear in the accordion panel body, or tag attributes that are supplied to the returned [](:class:`~htmltools.Tag`) object.

<code>[**data_value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A character string that uniquely identifies this panel.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| None]{.parameter-annotation}</code>

:   A [](:class:`~htmltools.Tag`) which is positioned just before the `title`.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| None]{.parameter-annotation}</code>

:   A title to appear in the [](:func:`~shiny.ui.accordion_panel`)'s header.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation}</code>

:   A unique id for this panel.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Tag attributes to the `accordion-body` div Tag.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.update_accordion`)
* [](:func:`~shiny.ui.insert_accordion_panel`)
* [](:func:`~shiny.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Methods

| Name | Description |
| --- | --- |
| [resolve](#shiny.ui.AccordionPanel.resolve) | Resolve the [](:class:`~shiny.ui.AccordionPanel`) into a [](:class:`~htmltools.Tag`). |
| [tagify](#shiny.ui.AccordionPanel.tagify) | Resolve the [](:class:`~shiny.ui.AccordionPanel`) into a [](:class:`~htmltools.Tag`). |

### resolve { #shiny.ui.AccordionPanel.resolve }

```python
ui.AccordionPanel.resolve()
```

Resolve the [](:class:`~shiny.ui.AccordionPanel`) into a
[](:class:`~htmltools.Tag`).

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A [](:class:`~htmltools.Tag`) object representing the [](:class:`~shiny.ui.AccordionPanel`).

### tagify { #shiny.ui.AccordionPanel.tagify }

```python
ui.AccordionPanel.tagify()
```

Resolve the [](:class:`~shiny.ui.AccordionPanel`) into a
[](:class:`~htmltools.Tag`).

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A tagified `resolve()`d value.

# reactive.Context { #shiny.reactive.Context }

```python
reactive.Context(self)
```

A reactive context

## Methods

| Name | Description |
| --- | --- |
| [add_pending_flush](#shiny.reactive.Context.add_pending_flush) | Tell the reactive environment that this context should be flushed the next time flushReact() called. |
| [execute_flush_callbacks](#shiny.reactive.Context.execute_flush_callbacks) | Execute all flush callbacks |
| [invalidate](#shiny.reactive.Context.invalidate) | Invalidate this context. It will immediately call the callbacks that have been registered with onInvalidate(). |
| [on_flush](#shiny.reactive.Context.on_flush) | Register a function to be called when this context is flushed. |
| [on_invalidate](#shiny.reactive.Context.on_invalidate) | Register a function to be called when this context is invalidated |

### add_pending_flush { #shiny.reactive.Context.add_pending_flush }

```python
reactive.Context.add_pending_flush(priority)
```

Tell the reactive environment that this context should be flushed the
next time flushReact() called.

### execute_flush_callbacks { #shiny.reactive.Context.execute_flush_callbacks }

```python
reactive.Context.execute_flush_callbacks()
```

Execute all flush callbacks

### invalidate { #shiny.reactive.Context.invalidate }

```python
reactive.Context.invalidate()
```

Invalidate this context. It will immediately call the callbacks
that have been registered with onInvalidate().

### on_flush { #shiny.reactive.Context.on_flush }

```python
reactive.Context.on_flush(func)
```

Register a function to be called when this context is flushed.

### on_invalidate { #shiny.reactive.Context.on_invalidate }

```python
reactive.Context.on_invalidate(func)
```

Register a function to be called when this context is invalidated

# ui.css.CssUnit { #shiny.ui.css.CssUnit }

`ui.css.CssUnit`

Possible python types that can be converted into a CSS unit. Numeric values will be converted to pixels. Values equal to `0` will be converted to `"0"`. Strings will be passed through as-is.

# ui._input_slider.SliderValueArg { #shiny.ui._input_slider.SliderValueArg }

`ui._input_slider.SliderValueArg`

Type variable.

Usage::

  T = TypeVar(&#x27;T&#x27;)  # Can be anything
  A = TypeVar(&#x27;A&#x27;, str, bytes)  # Must be str or bytes

Type variables exist primarily for the benefit of static type
checkers.  They serve as the parameters for generic types as well
as for generic function definitions.  See class Generic for more
information on generic types.  Generic functions work as follows:

  def repeat(x: T, n: int) -&gt; List[T]:
      &#x27;&#x27;&#x27;Return a list containing n references to x.&#x27;&#x27;&#x27;
      return [x]*n

  def longest(x: A, y: A) -&gt; A:
      &#x27;&#x27;&#x27;Return the longest of two strings.&#x27;&#x27;&#x27;
      return x if len(x) &gt;= len(y) else y

The latter example&#x27;s signature is essentially the overloading
of (str, str) -&gt; str and (bytes, bytes) -&gt; bytes.  Also note
that if the arguments are instances of some subclass of str,
the return type is still plain str.

At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.

Type variables defined with covariant=True or contravariant=True
can be used to declare covariant or contravariant generic types.
See PEP 484 for more details. By default generic types are invariant
in all type variables.

Type variables can be introspected. e.g.:

  T.__name__ == &#x27;T&#x27;
  T.__constraints__ == ()
  T.__covariant__ == False
  T.__contravariant__ = False
  A.__constraints__ == (str, bytes)

Note that only type variables defined in global scope can be pickled.

# ui._input_slider.SliderStepArg { #shiny.ui._input_slider.SliderStepArg }

`ui._input_slider.SliderStepArg`

================
File: module.server.qmd
================
# module.server { #shiny.module.server }

```python
module.server(fn)
```

================
File: module.ui.qmd
================
# module.ui { #shiny.module.ui }

```python
module.ui(fn)
```

================
File: Outputs.qmd
================
# Outputs { #shiny.Outputs }

```python
Outputs(self, session, ns, *, outputs)
```

A class representing Shiny output definitions.

================
File: PlaywrightControls.qmd
================
# TODO- Testing summary



# playwright.controls.Accordion { #shiny.playwright.controls.Accordion }

`playwright.controls.Accordion(self, page, id)`

Accordion control for [](:func:`~shiny.ui.accordion`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.Accordion.loc) | Playwright `Locator` for each accordion items. |
| [loc_container](#shiny.playwright.controls.Accordion.loc_container) | Playwright `Locator` for the accordion container. |

## Methods

| Name | Description |
| --- | --- |
| [accordion_panel](#shiny.playwright.controls.Accordion.accordion_panel) | Returns the accordion panel with the specified data value. |
| [expect_height](#shiny.playwright.controls.Accordion.expect_height) | Expects the accordion to have the specified height. |
| [expect_panels](#shiny.playwright.controls.Accordion.expect_panels) | Expects the accordion to have the specified panels. |
| [expect_width](#shiny.playwright.controls.Accordion.expect_width) | Expects the accordion to have the specified width. |
| [set](#shiny.playwright.controls.Accordion.set) | Sets the state of the accordion panel. |

### accordion_panel { #shiny.playwright.controls.Accordion.accordion_panel }

`playwright.controls.Accordion.accordion_panel(data_value)`

Returns the accordion panel with the specified data value.

#### Parameters

<code><span class="parameter-name">data_value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The data value of the accordion panel.

### expect_height { #shiny.playwright.controls.Accordion.expect_height }

`playwright.controls.Accordion.expect_height(value, *, timeout=None)`

Expects the accordion to have the specified height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected height.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the height to be visible and interactable. Defaults to `None`.

### expect_panels { #shiny.playwright.controls.Accordion.expect_panels }

`playwright.controls.Accordion.expect_panels(value, *, timeout=None)`

Expects the accordion to have the specified panels.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\]</span></code>

:   The expected panels.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the panels to be visible and interactable. Defaults to `None`.

### expect_width { #shiny.playwright.controls.Accordion.expect_width }

`playwright.controls.Accordion.expect_width(value, *, timeout=None)`

Expects the accordion to have the specified width.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected width.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the width to be visible and interactable. Defaults to `None`.

### set { #shiny.playwright.controls.Accordion.set }

`playwright.controls.Accordion.set(selected, *, timeout=None)`

Sets the state of the accordion panel.

#### Parameters

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [list](`list`)\[[str](`str`)\]</span></code>

:   The selected accordion panel(s).

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the accordion panel to be visible and interactable. Defaults to `None`.

# playwright.controls.Card { #shiny.playwright.controls.Card }

`playwright.controls.Card(self, page, id)`

Card control for [](:func:`~shiny.ui.card`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.Card.loc) | Playwright `Locator` for the card's value. |
| [loc_body](#shiny.playwright.controls.Card.loc_body) | Playwright `Locator` for the card body. |
| [loc_container](#shiny.playwright.controls.Card.loc_container) | Playwright `Locator` for the card container. |
| [loc_footer](#shiny.playwright.controls.Card.loc_footer) | Playwright `Locator` for the card footer. |
| [loc_title](#shiny.playwright.controls.Card.loc_title) | Playwright `Locator` for the card title. |

## Methods

| Name | Description |
| --- | --- |
| [expect_footer](#shiny.playwright.controls.Card.expect_footer) | Expects the card footer to have a specific text. |
| [expect_header](#shiny.playwright.controls.Card.expect_header) | Expects the card header to have a specific text. |
| [expect_height](#shiny.playwright.controls.Card.expect_height) | Expects the card to have a specific height. |
| [expect_max_height](#shiny.playwright.controls.Card.expect_max_height) | Expects the card to have a specific maximum height. |
| [expect_min_height](#shiny.playwright.controls.Card.expect_min_height) | Expects the card to have a specific minimum height. |

### expect_footer { #shiny.playwright.controls.Card.expect_footer }

`playwright.controls.Card.expect_footer(value, *, timeout=None)`

Expects the card footer to have a specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None</span></code>

:   The expected text pattern or string
    Note: None if the footer is expected to not exist.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_header { #shiny.playwright.controls.Card.expect_header }

`playwright.controls.Card.expect_header(value, *, timeout=None)`

Expects the card header to have a specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None</span></code>

:   The expected text pattern or string.

    Note: `None` if the header is expected to not exist.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_height { #shiny.playwright.controls.Card.expect_height }

`playwright.controls.Card.expect_height(value, *, timeout=None)`

Expects the card to have a specific height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected height value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_max_height { #shiny.playwright.controls.Card.expect_max_height }

`playwright.controls.Card.expect_max_height(value, *, timeout=None)`

Expects the card to have a specific maximum height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected maximum height value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_min_height { #shiny.playwright.controls.Card.expect_min_height }

`playwright.controls.Card.expect_min_height(value, *, timeout=None)`

Expects the card to have a specific minimum height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected minimum height value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

# playwright.controls.DownloadButton { #shiny.playwright.controls.DownloadButton }

`playwright.controls.DownloadButton(self, page, id)`

DownloadButton control for [](:func:`~shiny.ui.download_button`)

# playwright.controls.DownloadLink { #shiny.playwright.controls.DownloadLink }

`playwright.controls.DownloadLink(self, page, id)`

DownloadLink control for [](:func:`~shiny.ui.download_link`).

# playwright.controls.InputActionButton { #shiny.playwright.controls.InputActionButton }

`playwright.controls.InputActionButton(self, page, id)`

Input action button control for [](:func:`~shiny.ui.input_action_button`).

# playwright.controls.InputActionLink { #shiny.playwright.controls.InputActionLink }

`playwright.controls.InputActionLink(self, page, id)`

Input action link control for [](:func:`~shiny.ui.input_action_link`).

# playwright.controls.InputCheckbox { #shiny.playwright.controls.InputCheckbox }

`playwright.controls.InputCheckbox(self, page, id)`

Input checkbox control for [](:func:`~shiny.ui.input_checkbox`).

# playwright.controls.InputCheckboxGroup { #shiny.playwright.controls.InputCheckboxGroup }

`playwright.controls.InputCheckboxGroup(self, page, id)`



## Methods

| Name | Description |
| --- | --- |
| [expect_choices](#shiny.playwright.controls.InputCheckboxGroup.expect_choices) | Expect the checkbox choices. |
| [expect_selected](#shiny.playwright.controls.InputCheckboxGroup.expect_selected) | Expect the selected checkboxes. |
| [set](#shiny.playwright.controls.InputCheckboxGroup.set) | Set the selected checkboxes. |

### expect_choices { #shiny.playwright.controls.InputCheckboxGroup.expect_choices }

`playwright.controls.InputCheckboxGroup.expect_choices(value, *, timeout=None)`

Expect the checkbox choices.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected choices.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_selected { #shiny.playwright.controls.InputCheckboxGroup.expect_selected }

`playwright.controls.InputCheckboxGroup.expect_selected(value, *, timeout=None)`

Expect the selected checkboxes.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected values of the selected checkboxes.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### set { #shiny.playwright.controls.InputCheckboxGroup.set }

`playwright.controls.InputCheckboxGroup.set(selected, *, timeout=None, **kwargs)`

Set the selected checkboxes.

#### Parameters

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[list](`list`)\[[str](`str`)\]</span></code>

:   The values of the selected checkboxes.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the action. Defaults to `None`.

# playwright.controls.InputDarkMode { #shiny.playwright.controls.InputDarkMode }

`playwright.controls.InputDarkMode(self, page, id)`

Input dark mode control for [](:func:`~shiny.ui.input_dark_mode`).

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controls.InputDarkMode.click) | Clicks the input dark mode. |
| [expect_mode](#shiny.playwright.controls.InputDarkMode.expect_mode) | Expect the `mode` attribute of the input dark mode to have a specific value. |
| [expect_page_mode](#shiny.playwright.controls.InputDarkMode.expect_page_mode) | Expect the page to have a specific dark mode value. |
| [expect_wc_attribute](#shiny.playwright.controls.InputDarkMode.expect_wc_attribute) | Expect the `wc` attribute of the input dark mode to have a specific value. |

### click { #shiny.playwright.controls.InputDarkMode.click }

`playwright.controls.InputDarkMode.click(timeout=None)`

Clicks the input dark mode.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the input dark mode to be clicked. Defaults to `None`.

### expect_mode { #shiny.playwright.controls.InputDarkMode.expect_mode }

`playwright.controls.InputDarkMode.expect_mode(value, *, timeout=None)`

Expect the `mode` attribute of the input dark mode to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected value of the `mode` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_page_mode { #shiny.playwright.controls.InputDarkMode.expect_page_mode }

`playwright.controls.InputDarkMode.expect_page_mode(value, *, timeout=None)`

Expect the page to have a specific dark mode value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected value of the page's dark mode.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_wc_attribute { #shiny.playwright.controls.InputDarkMode.expect_wc_attribute }

`playwright.controls.InputDarkMode.expect_wc_attribute(value, *, timeout=None)`

Expect the `wc` attribute of the input dark mode to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected value of the `wc` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

# playwright.controls.InputDate { #shiny.playwright.controls.InputDate }

`playwright.controls.InputDate(self, page, id)`



# playwright.controls.InputDateRange { #shiny.playwright.controls.InputDateRange }

`playwright.controls.InputDateRange(self, page, id)`

Input date range control for [](:func:`~shiny.ui.input_date_range`).

## Attributes

| Name | Description |
| --- | --- |
| [date_end](#shiny.playwright.controls.InputDateRange.date_end) | The end date input element. |
| [date_start](#shiny.playwright.controls.InputDateRange.date_start) | The start date input element. |
| [loc_end](#shiny.playwright.controls.InputDateRange.loc_end) | Playwright `Locator` of the end date input element. |
| [loc_separator](#shiny.playwright.controls.InputDateRange.loc_separator) | Playwright `Locator` of the separator between the two input elements. |
| [loc_start](#shiny.playwright.controls.InputDateRange.loc_start) | Playwright `Locator` of the start date input element. |

## Methods

| Name | Description |
| --- | --- |
| [expect_autoclose](#shiny.playwright.controls.InputDateRange.expect_autoclose) | Asserts that the input element has the expected autoclose value. |
| [expect_format](#shiny.playwright.controls.InputDateRange.expect_format) | Asserts that the input element has the expected format. |
| [expect_language](#shiny.playwright.controls.InputDateRange.expect_language) | Asserts that the input element has the expected language. |
| [expect_max_date](#shiny.playwright.controls.InputDateRange.expect_max_date) | Asserts that the input element has the expected maximum date. |
| [expect_min_date](#shiny.playwright.controls.InputDateRange.expect_min_date) | Asserts that the input element has the expected minimum date. |
| [expect_separator](#shiny.playwright.controls.InputDateRange.expect_separator) | Asserts that the input element has the expected separator. |
| [expect_startview](#shiny.playwright.controls.InputDateRange.expect_startview) | Asserts that the input element has the expected start view. |
| [expect_value](#shiny.playwright.controls.InputDateRange.expect_value) | Asserts that the input element has the expected value. |
| [expect_weekstart](#shiny.playwright.controls.InputDateRange.expect_weekstart) | Asserts that the input element has the expected week start. |
| [set](#shiny.playwright.controls.InputDateRange.set) | Sets the value of the input element. |

### expect_autoclose { #shiny.playwright.controls.InputDateRange.expect_autoclose }

`playwright.controls.InputDateRange.expect_autoclose(value, *, timeout=None)`

Asserts that the input element has the expected autoclose value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['true', 'false'\]</span></code>

:   The expected autoclose value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

### expect_format { #shiny.playwright.controls.InputDateRange.expect_format }

`playwright.controls.InputDateRange.expect_format(value, *, timeout=None)`

Asserts that the input element has the expected format.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected format.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the format to appear. Defaults to `None`.

### expect_language { #shiny.playwright.controls.InputDateRange.expect_language }

`playwright.controls.InputDateRange.expect_language(value, *, timeout=None)`

Asserts that the input element has the expected language.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected language.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the language to appear. Defaults to `None`.

### expect_max_date { #shiny.playwright.controls.InputDateRange.expect_max_date }

`playwright.controls.InputDateRange.expect_max_date(value, *, timeout=None)`

Asserts that the input element has the expected maximum date.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected maximum date.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the maximum date to appear. Defaults to `None`.

### expect_min_date { #shiny.playwright.controls.InputDateRange.expect_min_date }

`playwright.controls.InputDateRange.expect_min_date(value, *, timeout=None)`

Asserts that the input element has the expected minimum date.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected minimum date.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the minimum date to appear. Defaults to `None`.

### expect_separator { #shiny.playwright.controls.InputDateRange.expect_separator }

`playwright.controls.InputDateRange.expect_separator(value, *, timeout=None)`

Asserts that the input element has the expected separator.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected separator.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the separator to appear. Defaults to `None`.

### expect_startview { #shiny.playwright.controls.InputDateRange.expect_startview }

`playwright.controls.InputDateRange.expect_startview(value, *, timeout=None)`

Asserts that the input element has the expected start view.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected start view.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the start view to appear. Defaults to `None`.

### expect_value { #shiny.playwright.controls.InputDateRange.expect_value }

`playwright.controls.InputDateRange.expect_value(value, *, timeout=None)`

Asserts that the input element has the expected value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\]</span></code>

:   The expected value. The first element is the start date and the second element is the end date.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

### expect_weekstart { #shiny.playwright.controls.InputDateRange.expect_weekstart }

`playwright.controls.InputDateRange.expect_weekstart(value, *, timeout=None)`

Asserts that the input element has the expected week start.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`) \| [AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected week start.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the week start to appear. Defaults to `None`.

### set { #shiny.playwright.controls.InputDateRange.set }

`playwright.controls.InputDateRange.set(value, *, timeout=None)`

Sets the value of the input element.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`) \| None, [str](`str`) \| None\]</span></code>

:   The value to set. The first element is the start date and the second element is the end date.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to be set. Defaults to `None`.

# playwright.controls.InputFile { #shiny.playwright.controls.InputFile }

`playwright.controls.InputFile(self, page, id)`

Input file control for [](:func:`~shiny.ui.input_file`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_button](#shiny.playwright.controls.InputFile.loc_button) | Playwright `Locator` of the button. |
| [loc_file_display](#shiny.playwright.controls.InputFile.loc_file_display) | Playwright `Locator` of the file display. |
| [loc_progress](#shiny.playwright.controls.InputFile.loc_progress) | Playwright `Locator` of the progress bar. |

## Methods

| Name | Description |
| --- | --- |
| [expect_accept](#shiny.playwright.controls.InputFile.expect_accept) | Expect the `accept` attribute to have a specific value. |
| [expect_button_label](#shiny.playwright.controls.InputFile.expect_button_label) | Expect the button label to have a specific value. |
| [expect_capture](#shiny.playwright.controls.InputFile.expect_capture) | Expect the `capture` attribute to have a specific value. |
| [expect_complete](#shiny.playwright.controls.InputFile.expect_complete) | Expect the file upload to be complete. |
| [expect_multiple](#shiny.playwright.controls.InputFile.expect_multiple) | Expect the `multiple` attribute to have a specific value. |
| [expect_width](#shiny.playwright.controls.InputFile.expect_width) | Expect the width of the input file to have a specific value. |
| [set](#shiny.playwright.controls.InputFile.set) | Set the file upload. |

### expect_accept { #shiny.playwright.controls.InputFile.expect_accept }

`playwright.controls.InputFile.expect_accept(value, *, timeout=None)`

Expect the `accept` attribute to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[list](`list`)\[[str](`str`)\] \| [AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected value of the `accept` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_button_label { #shiny.playwright.controls.InputFile.expect_button_label }

`playwright.controls.InputFile.expect_button_label(value, *, timeout=None)`

Expect the button label to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the button label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_capture { #shiny.playwright.controls.InputFile.expect_capture }

`playwright.controls.InputFile.expect_capture(value, *, timeout=None)`

Expect the `capture` attribute to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['environment', 'user'\] \| None</span></code>

:   The expected value of the `capture` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_complete { #shiny.playwright.controls.InputFile.expect_complete }

`playwright.controls.InputFile.expect_complete(timeout=None)`

Expect the file upload to be complete.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_multiple { #shiny.playwright.controls.InputFile.expect_multiple }

`playwright.controls.InputFile.expect_multiple(value, *, timeout=None)`

Expect the `multiple` attribute to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   The expected value of the `multiple` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_width { #shiny.playwright.controls.InputFile.expect_width }

`playwright.controls.InputFile.expect_width(value, *, timeout=None)`

Expect the width of the input file to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected value of the width.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### set { #shiny.playwright.controls.InputFile.set }

`playwright.controls.InputFile.set(file_path, *, timeout=None, expect_complete_timeout=30 * 1000)`

Set the file upload.

#### Parameters

<code><span class="parameter-name">file_path</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`) \| [FilePayload](`playwright.sync_api.FilePayload`) \| [list](`list`)\[[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`)\] \| [list](`list`)\[[FilePayload](`playwright.sync_api.FilePayload`)\]</span></code>

:   The path to the file to upload.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the action. Defaults to `None`.

<code><span class="parameter-name">expect_complete_timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">30 * 1000</span></code>

:   The timeout for the expectation that the upload is complete. Defaults to `30 * 1000`.

# playwright.controls.InputNumeric { #shiny.playwright.controls.InputNumeric }

`playwright.controls.InputNumeric(self, page, id)`

Input numeric control for [](:func:`~shiny.ui.input_numeric`).

## Methods

| Name | Description |
| --- | --- |
| [expect_max](#shiny.playwright.controls.InputNumeric.expect_max) | Expect the maximum numeric value to be a specific value. |
| [expect_min](#shiny.playwright.controls.InputNumeric.expect_min) | Expect the minimum numeric value to be a specific value. |
| [expect_step](#shiny.playwright.controls.InputNumeric.expect_step) | Expect step value when incrementing/decrementing the numeric input. |

### expect_max { #shiny.playwright.controls.InputNumeric.expect_max }

`playwright.controls.InputNumeric.expect_max(value, *, timeout=None)`

Expect the maximum numeric value to be a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected maximum numeric value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_min { #shiny.playwright.controls.InputNumeric.expect_min }

`playwright.controls.InputNumeric.expect_min(value, *, timeout=None)`

Expect the minimum numeric value to be a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected minimum numeric value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_step { #shiny.playwright.controls.InputNumeric.expect_step }

`playwright.controls.InputNumeric.expect_step(value, *, timeout=None)`

Expect step value when incrementing/decrementing the numeric input.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected step value for the numeric input.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

# playwright.controls.InputPassword { #shiny.playwright.controls.InputPassword }

`playwright.controls.InputPassword(self, page, id)`

Input password control for [](:func:`~shiny.ui.input_password`).

## Methods

| Name | Description |
| --- | --- |
| [expect_width](#shiny.playwright.controls.InputPassword.expect_width) | Expect the `width` attribute of the input password to have a specific value. |

### expect_width { #shiny.playwright.controls.InputPassword.expect_width }

`playwright.controls.InputPassword.expect_width(value, *, timeout=None)`

Expect the `width` attribute of the input password to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected value of the `width` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

# playwright.controls.InputRadioButtons { #shiny.playwright.controls.InputRadioButtons }

`playwright.controls.InputRadioButtons(self, page, id)`

Input radio buttons control for [](:func:`~shiny.ui.input_radio_buttons`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_choice_labels](#shiny.playwright.controls.InputRadioButtons.loc_choice_labels) | Playwright `Locator` of the labels of the radio button choices. |
| [loc_choices](#shiny.playwright.controls.InputRadioButtons.loc_choices) | Playwright `Locator` of the radio button choices. |
| [loc_selected](#shiny.playwright.controls.InputRadioButtons.loc_selected) | Playwright `Locator` of the selected radio button. |

## Methods

| Name | Description |
| --- | --- |
| [expect_choices](#shiny.playwright.controls.InputRadioButtons.expect_choices) | Expect the radio button choices. |
| [expect_selected](#shiny.playwright.controls.InputRadioButtons.expect_selected) | Expect the selected radio button. |
| [set](#shiny.playwright.controls.InputRadioButtons.set) | Set the selected radio button. |

### expect_choices { #shiny.playwright.controls.InputRadioButtons.expect_choices }

`playwright.controls.InputRadioButtons.expect_choices(value, *, timeout=None)`

Expect the radio button choices.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected choices.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_selected { #shiny.playwright.controls.InputRadioButtons.expect_selected }

`playwright.controls.InputRadioButtons.expect_selected(value, *, timeout=None)`

Expect the selected radio button.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None</span></code>

:   The expected value of the selected radio button.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### set { #shiny.playwright.controls.InputRadioButtons.set }

`playwright.controls.InputRadioButtons.set(selected, *, timeout=None, **kwargs)`

Set the selected radio button.

#### Parameters

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The value of the selected radio button.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the action. Defaults to `None`.

# playwright.controls.InputSelect { #shiny.playwright.controls.InputSelect }

`playwright.controls.InputSelect(self, page, id)`

Input select control for [](:func:`~shiny.ui.input_select`).

## Methods

| Name | Description |
| --- | --- |
| [expect_selectize](#shiny.playwright.controls.InputSelect.expect_selectize) | Expect the input select to be selectize. |

### expect_selectize { #shiny.playwright.controls.InputSelect.expect_selectize }

`playwright.controls.InputSelect.expect_selectize(value, *, timeout=None)`

Expect the input select to be selectize.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   Whether the input select is selectize.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

# playwright.controls.InputSelectize { #shiny.playwright.controls.InputSelectize }

`playwright.controls.InputSelectize(self, page, id)`

Input selectize control for [](:func:`~shiny.ui.input_selectize`).

# playwright.controls.InputSlider { #shiny.playwright.controls.InputSlider }

`playwright.controls.InputSlider(self, page, id)`

Input slider control for [](:func:`~shiny.ui.input_slider`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_irs_label](#shiny.playwright.controls.InputSlider.loc_irs_label) | Playwright `Locator` of the input slider label. |

## Methods

| Name | Description |
| --- | --- |
| [expect_value](#shiny.playwright.controls.InputSlider.expect_value) | Asserts that the input element has the expected value. |
| [set](#shiny.playwright.controls.InputSlider.set) | Set the value of the slider. |

### expect_value { #shiny.playwright.controls.InputSlider.expect_value }

`playwright.controls.InputSlider.expect_value(value, *, timeout=None)`

Asserts that the input element has the expected value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

### set { #shiny.playwright.controls.InputSlider.set }

`playwright.controls.InputSlider.set(value, *, max_err_values=15, timeout=None)`

Set the value of the slider.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The value to set the slider to.

<code><span class="parameter-name">max_err_values</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">15</span></code>

:   The maximum number of error values to display if the value is not found. Defaults to 15.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

# playwright.controls.InputSliderRange { #shiny.playwright.controls.InputSliderRange }

`playwright.controls.InputSliderRange(self, page, id)`

Input slider range control for [](:func:`~shiny.ui.input_slider_range`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_irs_label_from](#shiny.playwright.controls.InputSliderRange.loc_irs_label_from) | Playwright `Locator` of the input slider label for the `from` handle. |
| [loc_irs_label_to](#shiny.playwright.controls.InputSliderRange.loc_irs_label_to) | Playwright `Locator` of the input slider label for the `to` handle. |

## Methods

| Name | Description |
| --- | --- |
| [expect_value](#shiny.playwright.controls.InputSliderRange.expect_value) | Asserts that the input element has the expected value. |
| [set](#shiny.playwright.controls.InputSliderRange.set) | Set the value of the slider. |

### expect_value { #shiny.playwright.controls.InputSliderRange.expect_value }

`playwright.controls.InputSliderRange.expect_value(value, *, timeout=None)`

Asserts that the input element has the expected value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\]</span></code>

:   The expected value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

### set { #shiny.playwright.controls.InputSliderRange.set }

`playwright.controls.InputSliderRange.set(value, *, max_err_values=15, timeout=None)`

Set the value of the slider.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`), [str](`str`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [str](`str`)\]</span></code>

:   The value to set the slider to.

<code><span class="parameter-name">max_err_values</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">15</span></code>

:   The maximum number of error values to display if the value is not found. Defaults to 15.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

# playwright.controls.InputSwitch { #shiny.playwright.controls.InputSwitch }

`playwright.controls.InputSwitch(self, page, id)`

Input switch control for [](:func:`~shiny.ui.input_switch`).

# playwright.controls.InputTaskButton { #shiny.playwright.controls.InputTaskButton }

`playwright.controls.InputTaskButton(self, page, id)`

Input task button control for [](:func:`~shiny.ui.input_task_button`).

## Methods

| Name | Description |
| --- | --- |
| [expect_auto_reset](#shiny.playwright.controls.InputTaskButton.expect_auto_reset) | Expect the `auto-reset` attribute of the input task button to have a specific value. |
| [expect_label](#shiny.playwright.controls.InputTaskButton.expect_label) | Expect the label of the input task button to have a specific value. |
| [expect_label_busy](#shiny.playwright.controls.InputTaskButton.expect_label_busy) | Expect the label of a busy input task button to have a specific value. |
| [expect_label_ready](#shiny.playwright.controls.InputTaskButton.expect_label_ready) | Expect the label of a ready input task button to have a specific value. |
| [expect_label_state](#shiny.playwright.controls.InputTaskButton.expect_label_state) | Expect the label of the input task button to have a specific value in a specific state. |
| [expect_state](#shiny.playwright.controls.InputTaskButton.expect_state) | Expect the state of the input task button to have a specific value. |

### expect_auto_reset { #shiny.playwright.controls.InputTaskButton.expect_auto_reset }

`playwright.controls.InputTaskButton.expect_auto_reset(value, timeout=None)`

Expect the `auto-reset` attribute of the input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   The expected value of the `auto-reset` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_label { #shiny.playwright.controls.InputTaskButton.expect_label }

`playwright.controls.InputTaskButton.expect_label(value, *, timeout=None)`

Expect the label of the input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_label_busy { #shiny.playwright.controls.InputTaskButton.expect_label_busy }

`playwright.controls.InputTaskButton.expect_label_busy(value, *, timeout=None)`

Expect the label of a busy input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_label_ready { #shiny.playwright.controls.InputTaskButton.expect_label_ready }

`playwright.controls.InputTaskButton.expect_label_ready(value, *, timeout=None)`

Expect the label of a ready input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_label_state { #shiny.playwright.controls.InputTaskButton.expect_label_state }

`playwright.controls.InputTaskButton.expect_label_state(state, value, *, timeout=None)`

Expect the label of the input task button to have a specific value in a specific state.

#### Parameters

<code><span class="parameter-name">state</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The state of the input task button.

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_state { #shiny.playwright.controls.InputTaskButton.expect_state }

`playwright.controls.InputTaskButton.expect_state(value, *, timeout=None)`

Expect the state of the input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['ready', 'busy'\] \| [str](`str`)</span></code>

:   The expected value of the state of the input task button.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

# playwright.controls.InputText { #shiny.playwright.controls.InputText }

`playwright.controls.InputText(self, page, id)`

Input text control for [](:func:`~shiny.ui.input_text`).

# playwright.controls.InputTextArea { #shiny.playwright.controls.InputTextArea }

`playwright.controls.InputTextArea(self, page, id)`

Input text area control for [](:func:`~shiny.ui.input_text_area`).

## Methods

| Name | Description |
| --- | --- |
| [expect_autoresize](#shiny.playwright.controls.InputTextArea.expect_autoresize) | Expect the `autoresize` attribute of the input text area to have a specific value. |
| [expect_cols](#shiny.playwright.controls.InputTextArea.expect_cols) | Expect the `cols` attribute of the input text area to have a specific value. |
| [expect_height](#shiny.playwright.controls.InputTextArea.expect_height) | Expect the `height` attribute of the input text area to have a specific value. |
| [expect_resize](#shiny.playwright.controls.InputTextArea.expect_resize) | Expect the `resize` attribute of the input text area to have a specific value. |
| [expect_rows](#shiny.playwright.controls.InputTextArea.expect_rows) | Expect the `rows` attribute of the input text area to have a specific value. |
| [expect_width](#shiny.playwright.controls.InputTextArea.expect_width) | Expect the `width` attribute of the input text area to have a specific value. |

### expect_autoresize { #shiny.playwright.controls.InputTextArea.expect_autoresize }

`playwright.controls.InputTextArea.expect_autoresize(value, *, timeout=None)`

Expect the `autoresize` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   The expected value of the `autoresize` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_cols { #shiny.playwright.controls.InputTextArea.expect_cols }

`playwright.controls.InputTextArea.expect_cols(value, *, timeout=None)`

Expect the `cols` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected value of the `cols` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_height { #shiny.playwright.controls.InputTextArea.expect_height }

`playwright.controls.InputTextArea.expect_height(value, *, timeout=None)`

Expect the `height` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected value of the `height` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_resize { #shiny.playwright.controls.InputTextArea.expect_resize }

`playwright.controls.InputTextArea.expect_resize(value, *, timeout=None)`

Expect the `resize` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Resize](`shiny.playwright.controls._controls.Resize`) \| None</span></code>

:   The expected value of the `resize` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_rows { #shiny.playwright.controls.InputTextArea.expect_rows }

`playwright.controls.InputTextArea.expect_rows(value, *, timeout=None)`

Expect the `rows` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected value of the `rows` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_width { #shiny.playwright.controls.InputTextArea.expect_width }

`playwright.controls.InputTextArea.expect_width(value, *, timeout=None)`

Expect the `width` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected value of the `width` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

# playwright.controls.NavItem { #shiny.playwright.controls.NavItem }

`playwright.controls.NavItem(self, page, id, data_value)`

Navigation item control for [](:func:`~shiny.ui.nav_item`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.NavItem.loc) | Playwright `Locator` for the nav item. |
| [loc_container](#shiny.playwright.controls.NavItem.loc_container) | Playwright `Locator` for the nav item container. |
| [loc_content](#shiny.playwright.controls.NavItem.loc_content) | Returns the locator for the content of the nav item. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controls.NavItem.click) | Clicks the nav item. |
| [expect_active](#shiny.playwright.controls.NavItem.expect_active) | Expects the nav item to be active or inactive. |
| [expect_content](#shiny.playwright.controls.NavItem.expect_content) | Expects the nav item content to have the specified text. |

### click { #shiny.playwright.controls.NavItem.click }

`playwright.controls.NavItem.click(timeout=None)`

Clicks the nav item.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the nav item to be visible and interactable. Defaults to `None`.

### expect_active { #shiny.playwright.controls.NavItem.expect_active }

`playwright.controls.NavItem.expect_active(value, *, timeout=None)`

Expects the nav item to be active or inactive.

#### Parameters

<code><span class="parameter-name">active</span></code>

:   `True` if the nav item is expected to be active, False otherwise.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_content { #shiny.playwright.controls.NavItem.expect_content }

`playwright.controls.NavItem.expect_content(value, *, timeout=None)`

Expects the nav item content to have the specified text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

# playwright.controls.NavsetBar { #shiny.playwright.controls.NavsetBar }

`playwright.controls.NavsetBar(self, page, id)`

NavsetBar control for [](:func:`~shiny.ui.navset_bar`).

# playwright.controls.NavsetCardPill { #shiny.playwright.controls.NavsetCardPill }

`playwright.controls.NavsetCardPill(self, page, id)`

NavsetCardPill control for [](:func:`~shiny.ui.navset_card_pill`).

# playwright.controls.NavsetCardTab { #shiny.playwright.controls.NavsetCardTab }

`playwright.controls.NavsetCardTab(self, page, id)`

NavsetCardTab control for [](:func:`~shiny.ui.navset_card_tab`).

# playwright.controls.NavsetCardUnderline { #shiny.playwright.controls.NavsetCardUnderline }

`playwright.controls.NavsetCardUnderline(self, page, id)`

NavsetCardUnderline control for [](:func:`~shiny.ui.navset_card_underline`).

# playwright.controls.NavsetHidden { #shiny.playwright.controls.NavsetHidden }

`playwright.controls.NavsetHidden(self, page, id)`

NavsetHidden control for [](:func:`~shiny.ui.navset_hidden`).

# playwright.controls.NavsetPill { #shiny.playwright.controls.NavsetPill }

`playwright.controls.NavsetPill(self, page, id)`

NavsetPill control for [](:func:`~shiny.ui.navset_pill`).

# playwright.controls.NavsetPillList { #shiny.playwright.controls.NavsetPillList }

`playwright.controls.NavsetPillList(self, page, id)`

NavsetPillList control for [](:func:`~shiny.ui.navset_pill_list`).

# playwright.controls.NavsetTab { #shiny.playwright.controls.NavsetTab }

`playwright.controls.NavsetTab(self, page, id)`

NavsetTab control for [](:func:`~shiny.ui.navset_tab`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.NavsetTab.loc) | Playwright `Locator` for the nav set tab. |
| [loc_container](#shiny.playwright.controls.NavsetTab.loc_container) | Playwright `Locator` for the nav set tab container. |

# playwright.controls.NavsetUnderline { #shiny.playwright.controls.NavsetUnderline }

`playwright.controls.NavsetUnderline(self, page, id)`

NavsetUnderline control for [](:func:`~shiny.ui.navset_underline`).

# playwright.controls.OutputCode { #shiny.playwright.controls.OutputCode }

`playwright.controls.OutputCode(self, page, id)`

Code output control for [](:func:`~shiny.ui.code_output`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputCode.loc) | Playwright `Locator` of the code output. |

## Methods

| Name | Description |
| --- | --- |
| [expect_has_placeholder](#shiny.playwright.controls.OutputCode.expect_has_placeholder) | Asserts that the code output has the expected placeholder. |

### expect_has_placeholder { #shiny.playwright.controls.OutputCode.expect_has_placeholder }

`playwright.controls.OutputCode.expect_has_placeholder(value=False, *, timeout=None)`

Asserts that the code output has the expected placeholder.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Whether the code output has a placeholder.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the placeholder to appear. Defaults to `None`.

# playwright.controls.OutputDataFrame { #shiny.playwright.controls.OutputDataFrame }

`playwright.controls.OutputDataFrame(self, page, id)`

OutputDataFrame control for [](:func:`~shiny.ui.output_data_frame`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputDataFrame.loc) | Playwright `Locator` for the data frame. |
| [loc_body](#shiny.playwright.controls.OutputDataFrame.loc_body) | Playwright `Locator` for the body of the data frame table. |
| [loc_container](#shiny.playwright.controls.OutputDataFrame.loc_container) | Playwright `Locator` for the data frame container. |
| [loc_head](#shiny.playwright.controls.OutputDataFrame.loc_head) | Playwright `Locator` for the head of the data frame table. |

## Methods

| Name | Description |
| --- | --- |
| [cell_locator](#shiny.playwright.controls.OutputDataFrame.cell_locator) | Returns the locator for a specific cell in the data frame. |
| [edit_cell](#shiny.playwright.controls.OutputDataFrame.edit_cell) | Edits the cell in the data frame. |
| [expect_cell](#shiny.playwright.controls.OutputDataFrame.expect_cell) | Expects the cell in the data frame to have the specified text. |
| [expect_cell_class](#shiny.playwright.controls.OutputDataFrame.expect_cell_class) | Expects the class of the cell |
| [expect_cell_title](#shiny.playwright.controls.OutputDataFrame.expect_cell_title) | Expects the validation message of the cell in the data frame. |
| [expect_class_state](#shiny.playwright.controls.OutputDataFrame.expect_class_state) | Expects the state of the class in the data frame. |
| [expect_column_label](#shiny.playwright.controls.OutputDataFrame.expect_column_label) | Expects the text in the specified column of the data frame. |
| [expect_column_labels](#shiny.playwright.controls.OutputDataFrame.expect_column_labels) | Expects the column labels in the data frame. |
| [expect_n_col](#shiny.playwright.controls.OutputDataFrame.expect_n_col) | Expects the number of columns in the data frame. |
| [expect_n_row](#shiny.playwright.controls.OutputDataFrame.expect_n_row) | Expects the number of rows in the data frame. |
| [save_cell](#shiny.playwright.controls.OutputDataFrame.save_cell) | Saves the value of the cell in the data frame. |
| [select_rows](#shiny.playwright.controls.OutputDataFrame.select_rows) | Selects the rows in the data frame. |
| [set_column_filter](#shiny.playwright.controls.OutputDataFrame.set_column_filter) | Filters the column in the data frame. |
| [set_column_sort](#shiny.playwright.controls.OutputDataFrame.set_column_sort) | Sorts the column in the data frame. |

### cell_locator { #shiny.playwright.controls.OutputDataFrame.cell_locator }

`playwright.controls.OutputDataFrame.cell_locator(row, col)`

Returns the locator for a specific cell in the data frame.

#### Parameters

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

### edit_cell { #shiny.playwright.controls.OutputDataFrame.edit_cell }

`playwright.controls.OutputDataFrame.edit_cell(text, *, row, col, timeout=None)`

Edits the cell in the data frame.

#### Parameters

<code><span class="parameter-name">value</span></code>

:   The value to edit in the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

### expect_cell { #shiny.playwright.controls.OutputDataFrame.expect_cell }

`playwright.controls.OutputDataFrame.expect_cell(value, *, row, col, timeout=None)`

Expects the cell in the data frame to have the specified text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text in the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_cell_class { #shiny.playwright.controls.OutputDataFrame.expect_cell_class }

`playwright.controls.OutputDataFrame.expect_cell_class(value, *, row, col, timeout=None)`

Expects the class of the cell

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected class of the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_cell_title { #shiny.playwright.controls.OutputDataFrame.expect_cell_title }

`playwright.controls.OutputDataFrame.expect_cell_title(value, *, row, col, timeout=None)`

Expects the validation message of the cell in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected validation message of the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_class_state { #shiny.playwright.controls.OutputDataFrame.expect_class_state }

`playwright.controls.OutputDataFrame.expect_class_state(value, *, row, col, timeout=None)`

Expects the state of the class in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected state of the class.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_column_label { #shiny.playwright.controls.OutputDataFrame.expect_column_label }

`playwright.controls.OutputDataFrame.expect_column_label(value, *, col, timeout=None)`

Expects the text in the specified column of the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected text in the column.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_column_labels { #shiny.playwright.controls.OutputDataFrame.expect_column_labels }

`playwright.controls.OutputDataFrame.expect_column_labels(value, *, timeout=None)`

Expects the column labels in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \| None</span></code>

:   The expected column labels.

    Note: None if the column labels are expected to not exist.

<code><span class="parameter-name">edit</span></code>

:   `True` if the data frame is to be in edit mode, `False` otherwise.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_n_col { #shiny.playwright.controls.OutputDataFrame.expect_n_col }

`playwright.controls.OutputDataFrame.expect_n_col(value, *, timeout=None)`

Expects the number of columns in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The expected number of columns.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_n_row { #shiny.playwright.controls.OutputDataFrame.expect_n_row }

`playwright.controls.OutputDataFrame.expect_n_row(value, *, timeout=None)`

Expects the number of rows in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The expected number of rows.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### save_cell { #shiny.playwright.controls.OutputDataFrame.save_cell }

`playwright.controls.OutputDataFrame.save_cell(text, *, row, col, save_key, timeout=None)`

Saves the value of the cell in the data frame.

#### Parameters

<code><span class="parameter-name">text</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The key to save the value of the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

### select_rows { #shiny.playwright.controls.OutputDataFrame.select_rows }

`playwright.controls.OutputDataFrame.select_rows(value, *, timeout=None)`

Selects the rows in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[list](`list`)\[[int](`int`)\]</span></code>

:   The list of row numbers to select.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

### set_column_filter { #shiny.playwright.controls.OutputDataFrame.set_column_filter }

`playwright.controls.OutputDataFrame.set_column_filter(col, *, text, timeout=None)`

Filters the column in the data frame.

#### Parameters

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number to filter.

<code><span class="parameter-name">text</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [list](`list`)\[[str](`str`)\] \| [tuple](`tuple`)\[[str](`str`), [str](`str`)\]</span></code>

:   The text to filter the column.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

### set_column_sort { #shiny.playwright.controls.OutputDataFrame.set_column_sort }

`playwright.controls.OutputDataFrame.set_column_sort(col, *, timeout=None)`

Sorts the column in the data frame.

#### Parameters

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number to sort.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

# playwright.controls.OutputImage { #shiny.playwright.controls.OutputImage }

`playwright.controls.OutputImage(self, page, id)`



# playwright.controls.OutputPlot { #shiny.playwright.controls.OutputPlot }

`playwright.controls.OutputPlot(self, page, id)`

Plot output control for [](:func:`~shiny.ui.plot_output`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputPlot.loc) | Playwright `Locator` of the plot output. |

# playwright.controls.OutputTable { #shiny.playwright.controls.OutputTable }

`playwright.controls.OutputTable(self, page, id)`

Table output control for [](:func:`~shiny.ui.table_output`).

## Methods

| Name | Description |
| --- | --- |
| [expect_cell](#shiny.playwright.controls.OutputTable.expect_cell) | Asserts that the table cell has the expected text. |
| [expect_column_labels](#shiny.playwright.controls.OutputTable.expect_column_labels) | Asserts that the table has the expected column labels. |
| [expect_column_text](#shiny.playwright.controls.OutputTable.expect_column_text) | Asserts that the column has the expected text. |
| [expect_n_col](#shiny.playwright.controls.OutputTable.expect_n_col) | Asserts that the table has the expected number of columns. |
| [expect_n_row](#shiny.playwright.controls.OutputTable.expect_n_row) | Asserts that the table has the expected number of rows. |

### expect_cell { #shiny.playwright.controls.OutputTable.expect_cell }

`playwright.controls.OutputTable.expect_cell(value, row, col, *, timeout=None)`

Asserts that the table cell has the expected text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text in the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the text to appear. Defaults to `None`.

### expect_column_labels { #shiny.playwright.controls.OutputTable.expect_column_labels }

`playwright.controls.OutputTable.expect_column_labels(value, *, timeout=None)`

Asserts that the table has the expected column labels.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \| None</span></code>

:   The expected column labels. If None, it asserts that the table has no column labels.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the column labels to appear. Defaults to `None`.

### expect_column_text { #shiny.playwright.controls.OutputTable.expect_column_text }

`playwright.controls.OutputTable.expect_column_text(col, value, *, timeout=None)`

Asserts that the column has the expected text.

#### Parameters

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number.

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected text in the column.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the text to appear. Defaults to `None`.

### expect_n_col { #shiny.playwright.controls.OutputTable.expect_n_col }

`playwright.controls.OutputTable.expect_n_col(value, *, timeout=None)`

Asserts that the table has the expected number of columns.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The expected number of columns in the table.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the table to have the expected number of columns. Defaults to `None`.

### expect_n_row { #shiny.playwright.controls.OutputTable.expect_n_row }

`playwright.controls.OutputTable.expect_n_row(value, *, timeout=None)`

Asserts that the table has the expected number of rows.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The expected number of rows in the table.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the table to have the expected number of rows. Defaults to `None`.

# playwright.controls.OutputText { #shiny.playwright.controls.OutputText }

`playwright.controls.OutputText(self, page, id)`

Text output control for [](:func:`~shiny.ui.text_output`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputText.loc) | Playwright `Locator` of the text output. |

## Methods

| Name | Description |
| --- | --- |
| [get_value](#shiny.playwright.controls.OutputText.get_value) | Gets the text value of the output. |

### get_value { #shiny.playwright.controls.OutputText.get_value }

`playwright.controls.OutputText.get_value(timeout=None)`

Gets the text value of the output.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

# playwright.controls.OutputTextVerbatim { #shiny.playwright.controls.OutputTextVerbatim }

`playwright.controls.OutputTextVerbatim(self, page, id)`

Verbatim text output control for [](:func:`~shiny.ui.text_output_verbatim`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputTextVerbatim.loc) | Playwright `Locator` of the verbatim text output. |

## Methods

| Name | Description |
| --- | --- |
| [expect_has_placeholder](#shiny.playwright.controls.OutputTextVerbatim.expect_has_placeholder) | Asserts that the verbatim text output has the expected placeholder. |

### expect_has_placeholder { #shiny.playwright.controls.OutputTextVerbatim.expect_has_placeholder }

`playwright.controls.OutputTextVerbatim.expect_has_placeholder(value=False, *, timeout=None)`

Asserts that the verbatim text output has the expected placeholder.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Whether the verbatim text output has a placeholder.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the placeholder to appear. Defaults to `None`.

# playwright.controls.OutputUi { #shiny.playwright.controls.OutputUi }

`playwright.controls.OutputUi(self, page, id)`

UI output control for [](:func:`~shiny.ui.ui_output`).

## Methods

| Name | Description |
| --- | --- |
| [expect_empty](#shiny.playwright.controls.OutputUi.expect_empty) | Asserts that the output is empty. |
| [expect_text](#shiny.playwright.controls.OutputUi.expect_text) | Asserts that the output has the expected text. |

### expect_empty { #shiny.playwright.controls.OutputUi.expect_empty }

`playwright.controls.OutputUi.expect_empty(value, *, timeout=None)`

Asserts that the output is empty.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   Whether the output is empty.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the output to be empty. Defaults to `None`.

### expect_text { #shiny.playwright.controls.OutputUi.expect_text }

`playwright.controls.OutputUi.expect_text(value, *, timeout=None)`

Asserts that the output has the expected text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected text.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the text to appear. Defaults to `None`.

# playwright.controls.Popover { #shiny.playwright.controls.Popover }

`playwright.controls.Popover(self, page, id)`

Popover control for [](:func:`~shiny.ui.popover`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_overlay_body](#shiny.playwright.controls.Popover.loc_overlay_body) | Playwright `Locator` for the popover body. |
| [loc_overlay_container](#shiny.playwright.controls.Popover.loc_overlay_container) | Playwright `Locator` for the popover container. |
| [loc_trigger](#shiny.playwright.controls.Popover.loc_trigger) | Playwright `Locator` for the trigger element that opens/closes the popover. |

## Methods

| Name | Description |
| --- | --- |
| [set](#shiny.playwright.controls.Popover.set) | Sets the state of the popover. |
| [toggle](#shiny.playwright.controls.Popover.toggle) | Toggles the state of the popover. |

### set { #shiny.playwright.controls.Popover.set }

`playwright.controls.Popover.set(open, timeout=None)`

Sets the state of the popover.

#### Parameters

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` to open the popover and `False` to close it.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the popover to be visible and interactable. Defaults to `None`.

### toggle { #shiny.playwright.controls.Popover.toggle }

`playwright.controls.Popover.toggle(timeout=None)`

Toggles the state of the popover.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the popover to be visible and interactable. Defaults to `None`.

# playwright.controls.Sidebar { #shiny.playwright.controls.Sidebar }

`playwright.controls.Sidebar(self, page, id)`

Sidebar control for func: `~shiny.ui.sidebar`.

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.Sidebar.loc) | Playwright `Locator` for the sidebar. |
| [loc_container](#shiny.playwright.controls.Sidebar.loc_container) | Playwright `Locator` for the sidebar layout. |
| [loc_handle](#shiny.playwright.controls.Sidebar.loc_handle) | Playwright `Locator` for the open/close handle of the sidebar. |
| [loc_position](#shiny.playwright.controls.Sidebar.loc_position) | Playwright `Locator` for the position of the sidebar. |

## Methods

| Name | Description |
| --- | --- |
| [expect_handle](#shiny.playwright.controls.Sidebar.expect_handle) | Asserts that the sidebar handle exists or does not exist. |
| [expect_open](#shiny.playwright.controls.Sidebar.expect_open) | Expect the sidebar to be open or closed. |
| [expect_position](#shiny.playwright.controls.Sidebar.expect_position) | Asserts that the sidebar is in the expected position. |
| [expect_text](#shiny.playwright.controls.Sidebar.expect_text) | Asserts that the sidebar has the expected text. |
| [set](#shiny.playwright.controls.Sidebar.set) | Sets the sidebar to be open or closed. |
| [toggle](#shiny.playwright.controls.Sidebar.toggle) | Toggles the sidebar open or closed. |

### expect_handle { #shiny.playwright.controls.Sidebar.expect_handle }

`playwright.controls.Sidebar.expect_handle(exists, *, timeout=None)`

Asserts that the sidebar handle exists or does not exist.

#### Parameters

<code><span class="parameter-name">exists</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` if the sidebar open/close handle should exist, `False` otherwise.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar handle to appear. Defaults to `None`.

### expect_open { #shiny.playwright.controls.Sidebar.expect_open }

`playwright.controls.Sidebar.expect_open(value, *, timeout=None)`

Expect the sidebar to be open or closed.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` if the sidebar should be open, `False` to be closed.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar to open or close. Defaults to `None`.

### expect_position { #shiny.playwright.controls.Sidebar.expect_position }

`playwright.controls.Sidebar.expect_position(value, *, timeout=None)`

Asserts that the sidebar is in the expected position.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['left', 'right'\]</span></code>

:   The expected position of the sidebar.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar to appear. Defaults to `None`.

### expect_text { #shiny.playwright.controls.Sidebar.expect_text }

`playwright.controls.Sidebar.expect_text(value, *, timeout=None)`

Asserts that the sidebar has the expected text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text in the sidebar.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the text to appear. Defaults to `None`.

### set { #shiny.playwright.controls.Sidebar.set }

`playwright.controls.Sidebar.set(open, *, timeout=None)`

Sets the sidebar to be open or closed.

#### Parameters

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` to open the sidebar and `False` to close it.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar to open or close. Defaults to `None`.

### toggle { #shiny.playwright.controls.Sidebar.toggle }

`playwright.controls.Sidebar.toggle(timeout=None)`

Toggles the sidebar open or closed.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar to toggle. Defaults to `None`.

# playwright.controls.Tooltip { #shiny.playwright.controls.Tooltip }

`playwright.controls.Tooltip(self, page, id)`

Tooltip control for [](:func:`~shiny.ui.tooltip`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.Tooltip.loc) | Playwright `Locator` for the tooltip content. |
| [loc_container](#shiny.playwright.controls.Tooltip.loc_container) | Playwright `Locator` for the container tooltip. |
| [loc_overlay_body](#shiny.playwright.controls.Tooltip.loc_overlay_body) | Playwright `Locator` for the overlay body. |
| [loc_overlay_container](#shiny.playwright.controls.Tooltip.loc_overlay_container) | Playwright `Locator` for the overlay container. |
| [loc_trigger](#shiny.playwright.controls.Tooltip.loc_trigger) | Playwright `Locator` for the trigger element. |

## Methods

| Name | Description |
| --- | --- |
| [set](#shiny.playwright.controls.Tooltip.set) | Sets the state of the tooltip. |
| [toggle](#shiny.playwright.controls.Tooltip.toggle) | Toggles the state of the tooltip. |

### set { #shiny.playwright.controls.Tooltip.set }

`playwright.controls.Tooltip.set(open, timeout=None)`

Sets the state of the tooltip.

#### Parameters

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` to open the tooltip and `False` to close it.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the tooltip to be visible and interactable. Defaults to `None`.

### toggle { #shiny.playwright.controls.Tooltip.toggle }

`playwright.controls.Tooltip.toggle(timeout=None)`

Toggles the state of the tooltip.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the tooltip to be visible and interactable. Defaults to `None`.

# playwright.controls.ValueBox { #shiny.playwright.controls.ValueBox }

`playwright.controls.ValueBox(self, page, id)`

Value Box control for [](:func:`~shiny.ui.value_box`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.ValueBox.loc) | Playwright `Locator` for the value box's value. |
| [loc_body](#shiny.playwright.controls.ValueBox.loc_body) | Playwright `Locator` for the value box body. |
| [loc_showcase](#shiny.playwright.controls.ValueBox.loc_showcase) | Playwright `Locator` for the value box showcase. |
| [loc_title](#shiny.playwright.controls.ValueBox.loc_title) | Playwright `Locator` for the value box title. |

## Methods

| Name | Description |
| --- | --- |
| [expect_body](#shiny.playwright.controls.ValueBox.expect_body) | Expects the value box body to have specific text. |
| [expect_height](#shiny.playwright.controls.ValueBox.expect_height) | Expects the value box to have a specific height. |
| [expect_title](#shiny.playwright.controls.ValueBox.expect_title) | Expects the value box title to have a specific text. |
| [expect_value](#shiny.playwright.controls.ValueBox.expect_value) | Expects the value box value to have a specific text. |

### expect_body { #shiny.playwright.controls.ValueBox.expect_body }

`playwright.controls.ValueBox.expect_body(value, *, timeout=None)`

Expects the value box body to have specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\]</span></code>

:   The expected text pattern or list of patterns/strings.

    Note: If testing against multiple elements, text should be an array.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_height { #shiny.playwright.controls.ValueBox.expect_height }

`playwright.controls.ValueBox.expect_height(value, *, timeout=None)`

Expects the value box to have a specific height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected height value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_title { #shiny.playwright.controls.ValueBox.expect_title }

`playwright.controls.ValueBox.expect_title(value, *, timeout=None)`

Expects the value box title to have a specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_value { #shiny.playwright.controls.ValueBox.expect_value }

`playwright.controls.ValueBox.expect_value(value, *, timeout=None)`

Expects the value box value to have a specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

================
File: PlaywrightExpect.qmd
================
# TODO - Playwright Expect summary



# playwright.expect.expect_to_change { #shiny.playwright.expect.expect_to_change }

`playwright.expect.expect_to_change(func, timeout_secs=10)`

Context manager that yields when the value returned by func() changes. Use this
around code that has a side-effect of changing some state asynchronously (such as
all browser actions), to prevent moving onto the next step of the test until this
one has actually taken effect.

## Parameters

<code><span class="parameter-name">func</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Callable](`typing.Callable`)\[\[\], [Any](`typing.Any`)\]</span></code>

:   A function that returns a value. The value returned by this function is
    compared to the value returned by subsequent calls to this function.

<code><span class="parameter-name">timeout_secs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[float](`float`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">10</span></code>

:   How long to wait for the value to change before raising TimeoutError.

## Raises

| Type                           | Description                                       |
|--------------------------------|---------------------------------------------------|
| [TimeoutError](`TimeoutError`) | If the value does not change within timeout_secs. |

## Example


    with expect_to_change(lambda: page.locator(&quot;#name&quot;).value()):
        page.keyboard.send_keys(&quot;hello&quot;)

# playwright.expect.expect_attribute_to_have_value { #shiny.playwright.expect.expect_attribute_to_have_value }

`playwright.expect.expect_attribute_to_have_value(loc, name, value, timeout=None)`

Expect an attribute to have a value. If `value` is `None`, then the attribute should not exist.

# playwright.expect.expect_to_have_class { #shiny.playwright.expect.expect_to_have_class }

`playwright.expect.expect_to_have_class(loc, cls, timeout=None)`

Expect a locator to contain a class value

# playwright.expect.expect_not_to_have_class { #shiny.playwright.expect.expect_not_to_have_class }

`playwright.expect.expect_not_to_have_class(loc, cls, timeout=None)`

Expect a locator not to contain a class value

# playwright.expect.expect_to_have_style { #shiny.playwright.expect.expect_to_have_style }

`playwright.expect.expect_to_have_style(loc, css_key, css_value, timeout=None)`

Expect the `style` attribute to have a value. If `value` is `None`, then the style attribute should not exist.

================
File: Pytest.qmd
================
# TODO - Pytest summary



# pytest.create_app_fixture { #shiny.pytest.create_app_fixture }

`pytest.create_app_fixture(app, scope='module')`

Create a fixture for a local Shiny app directory.

## Parameters

<code><span class="parameter-name">app</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Union](`typing.Union`)\[[PurePath](`pathlib.PurePath`), [str](`str`)\]</span></code>

:   The path to the Shiny app file.

<code><span class="parameter-name">scope</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ScopeName](`shiny.pytest._fixture.ScopeName`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'module'</span></code>

:   The scope of the fixture.

# pytest.ScopeName { #shiny.pytest.ScopeName }

`pytest.ScopeName`

================
File: reactive.calc.qmd
================
# reactive.Calc { #shiny.reactive.Calc }

```python
reactive.Calc(fn=None, *, session=MISSING)
```

Mark a function as a reactive calculation.

A reactive calculation is a function whose return value depends on other
reactive value(s) (i.e., [](:class:`~shiny.Inputs`), [](:class:`~shiny.reactive.Value`)s,
and other reactive calculations). Whenever a reactive value changes, any reactive
calculations that depend on it are &quot;invalidated&quot; and automatically re-execute if called while invalid. If a reactive calculation is marked as invalidated, any other reactive
calculations that recently called it are also marked as invalidated. In this way,
invalidations ripple through reactive calculations that depend on each other.

## Parameters {.doc-section .doc-section-parameters}

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} ['MISSING_TYPE \| Session \| None']{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Calc_](`shiny.reactive._reactives.Calc_`)\[[T](`shiny.reactive._reactives.T`)\] \| [Callable](`typing.Callable`)\[\[[CalcFunction](`shiny.reactive._reactives.CalcFunction`)\[[T](`shiny.reactive._reactives.T`)\]\], [Calc_](`shiny.reactive._reactives.Calc_`)\[[T](`shiny.reactive._reactives.T`)\]\]]{.parameter-annotation}</code>

:   A decorator that marks a function as a reactive calculation.

## Tip {.doc-section .doc-section-tip}

Reactive calculations should not produce any side effects; to reactively produce
side effects, use [](:func:`~shiny.reactive.effect`) instead.

Reactive calculations are analagous to reactive expressions in Shiny for R.

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.Inputs`)
* [](:class:`~shiny.reactive.Value`)
* [](:func:`~shiny.reactive.effect`)
* [](:func:`~shiny.reactive.invalidate_later`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random
import time

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.card(
        ui.layout_columns(
            ui.input_action_button("first", "Invalidate first (slow) computation"),
            ui.input_action_button("second", "Invalidate second (fast) computation"),
        ),
        ui.output_text_verbatim("result"),
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.calc
    def first():
        input.first()
        p = ui.Progress()
        for i in range(30):
            p.set(i / 30, message="Computing, please wait...")
            time.sleep(0.1)
        p.close()
        return random.randint(1, 1000)

    @reactive.calc
    def second():
        input.second()
        return random.randint(1, 1000)

    @render.text
    def result():
        return first() + second()


app = App(app_ui, server)


```

================
File: reactive.effect.qmd
================
# reactive.Effect { #shiny.reactive.Effect }

```python
reactive.Effect(fn=None, *, suspended=False, priority=0, session=MISSING)
```

Mark a function as a reactive side effect.

A reactive effect is like a reactive calculation ([](:func:`~shiny.reactive.calc`)) in
that it can read reactive values and call reactive calculations, and will
automatically re-execute when those dependencies change. But unlike reactive
calculations, it doesn&#x27;t return a result and can&#x27;t be used as an input to other
reactive expressions. Thus, reactive effects are only useful for their side effects (for
example, performing I/O).

Another contrast between reactive calculations and effects is their execution
strategy. Reactive calculations use lazy evaluation; that is, when their
dependencies change, they don&#x27;t re-execute right away but rather wait until they are
called by someone else. Indeed, if they are not called, then they will never
re-execute. In contrast, effects use eager evaluation; as soon as their dependencies
change, they schedule themselves to re-execute.

## Parameters {.doc-section .doc-section-parameters}

<code>[**suspended**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``TRUE``, start the effect in a suspended state (i.e., it will not execute until resumed and invalidated).

<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   The new priority. A higher value means higher priority: an effect with a higher priority value will execute before all effects with lower priority values. Positive, negative, and zero values are allowed.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} ['MISSING_TYPE \| Session \| None']{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Effect_](`shiny.reactive._reactives.Effect_`) \| [Callable](`typing.Callable`)\[\[[EffectFunction](`shiny.reactive._reactives.EffectFunction`) \| [EffectFunctionAsync](`shiny.reactive._reactives.EffectFunctionAsync`)\], [Effect_](`shiny.reactive._reactives.Effect_`)\]]{.parameter-annotation}</code>

:   A decorator that marks a function as a reactive effect ([](:class:`Effect_`)).

## Tip {.doc-section .doc-section-tip}

Reactive effects are analagous to observers in Shiny for R.

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.Inputs`)
* [](:class:`~shiny.reactive.Value`)
* [](:func:`~shiny.reactive.effect`)
* [](:func:`~shiny.reactive.invalidate_later`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(ui.input_action_button("btn", "Press me!"))


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.btn)
    def _():
        ui.insert_ui(
            ui.p("Number of clicks: ", input.btn()),
            selector="#btn",
            where="afterEnd",
        )


app = App(app_ui, server)


```

================
File: reactive.event.qmd
================
# reactive.event { #shiny.reactive.event }

```python
reactive.event(*args, ignore_none=True, ignore_init=False)
```

Mark a function to react only when an &quot;event&quot; occurs.

Shiny&#x27;s reactive programming framework is primarily designed for calculated values
([](:func:`~shiny.reactive.calc`)) and side-effect-causing actions
([](:func:`~shiny.reactive.effect`)) that respond to **any** of their inputs changing.
That&#x27;s often what is desired in Shiny apps, but not always: sometimes you want to
wait for a specific action to be taken from the user, like clicking an
[](:func:`~shiny.ui.input_action_button`), before calculating or taking an action. You
do not want the calculation or action to be prematurely triggered if other reactive
values that it calls are invalidated. The reactive value (or function) which triggers
other calculations or actions in this way is called an event.

These situations demand a more imperative, &quot;event handling&quot; style of programming,
which ``@reactive.event()`` provides. It does this by using the
[](:func:`~shiny.reactive.isolate`) primitive under-the-hood to essentially &quot;limit&quot; the
set of reactive dependencies to those in ``args``. In other words, the event can call
as many reactive values as it likes in its code body without taking a reactive
dependency on them; it will be invalidated only when a dependency listed in args is
invalidated.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], [object](`object`)\] \| [Callable](`typing.Callable`)\[\[\], [Awaitable](`typing.Awaitable`)\[[object](`object`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   One or more callables that represent the event; most likely this will be a reactive input value linked to a [](:func:`~shiny.ui.input_action_button`) or similar (e.g., ``input.click``), but it can also be a (reactive or non-reactive) function that returns a value.

<code>[**ignore_none**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to ignore the event if the value is ``None`` or ``0``.

<code>[**ignore_init**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``False``, the event triggers on the first run.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._reactives.T`)\]\], [Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._reactives.T`)\]\]]{.parameter-annotation}</code>

:   A decorator that marks a function as an event handler.

## Tip {.doc-section .doc-section-tip}

This decorator must be applied before the relevant reactivity decorator (i.e.,
``@reactive.event`` must be applied before ``@reactive.effect``, ``@reactive.calc``,
``@render.ui``, etc).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.markdown(
        f"""
        This example demonstrates how `@reactive.event()` can be used to restrict
        execution of: (1) a `@render` function, (2) `@reactive.calc`, or (3)
        `@reactive.effect`.

        In all three cases, the output is dependent on a random value that gets updated
        every 0.5 seconds (currently, it is {ui.output_ui("number", inline=True)}), but
        the output is only updated when the button is clicked.
        """
    ),
    ui.row(
        ui.column(
            3,
            ui.input_action_button("btn_out", "(1) Update number"),
            ui.output_text("out_out"),
        ),
        ui.column(
            3,
            ui.input_action_button("btn_calc", "(2) Show 1 / number"),
            ui.output_text("out_calc"),
        ),
        ui.column(
            3,
            ui.input_action_button("btn_effect", "(3) Log number"),
            ui.div(id="out_effect"),
        ),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    # Update a random number every second
    val = reactive.value(random.randint(0, 1000))

    @reactive.effect
    def _():
        reactive.invalidate_later(0.5)
        val.set(random.randint(0, 1000))

    # Always update this output when the number is updated
    @render.ui
    def number():
        return val.get()

    # Since ignore_none=False, the function executes before clicking the button.
    # (input.btn_out() is 0 on page load, but @@reactive.event() treats 0 as None for
    # action buttons.)
    @render.text
    @reactive.event(input.btn_out, ignore_none=False)
    def out_out():
        return str(val.get())

    @reactive.calc
    @reactive.event(input.btn_calc)
    def calc():
        return 1 / val.get()

    @render.text
    def out_calc():
        return str(calc())

    @reactive.effect
    @reactive.event(input.btn_effect)
    def _():
        ui.insert_ui(
            ui.p("Random number!", val.get()),
            selector="#out_effect",
            where="afterEnd",
        )


app = App(app_ui, server)


```

================
File: reactive.extended_task.qmd
================
# reactive.extended_task { #shiny.reactive.extended_task }

```python
reactive.extended_task(func=None)
```

Decorator to mark an async function as a slow computation. This will cause the
function to be run in a background asyncio task, and the results will be available
via the [](:class:`~shiny.reactive.ExtendedTask`) object returned by the decorator.

Unlike normal async render functions, effects, and calcs, `extended_task` async
computations do not block Shiny reactive processing from proceeding. This means that
they can be used to perform long-running tasks without freezing the session that
owns them, nor other sessions.

However, this also means that they cannot access reactive sources. This is because
processing of inputs and reactivity is not blocked, and so the reactive sources may
change while the computation is running, which is almost never the desired behavior.
If any reactive sources are needed by the computation, the decorated function must
take them as parameters, and the resulting `ExtendedTask` object must be invoked
with the corresponding arguments.

## Parameters {.doc-section .doc-section-parameters}

<code>[**func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Callable](`typing.Callable`)\[[P](`shiny.reactive._extended_task.P`), [Awaitable](`typing.Awaitable`)\[[R](`shiny.reactive._extended_task.R`)\]\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The function to decorate. It must be ``async``. It can take any parameters and return any value (including None).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[ExtendedTask](`shiny.reactive._extended_task.ExtendedTask`)\[[P](`shiny.reactive._extended_task.P`), [R](`shiny.reactive._extended_task.R`)\] \| [Callable](`typing.Callable`)\[\[[Callable](`typing.Callable`)\[[P](`shiny.reactive._extended_task.P`), [Awaitable](`typing.Awaitable`)\[[R](`shiny.reactive._extended_task.R`)\]\]\], [ExtendedTask](`shiny.reactive._extended_task.ExtendedTask`)\[[P](`shiny.reactive._extended_task.P`), [R](`shiny.reactive._extended_task.R`)\]\]]{.parameter-annotation}</code>

:   An ``ExtendedTask`` object that can be used to check the status of the computation and retrieve the result.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
from datetime import datetime

from shiny import App, reactive, render, ui

app_ui = ui.page_fixed(
    ui.h5("Current time"),
    ui.output_text("current_time"),
    ui.p(
        "Notice that the time above updates every second, even if you click the button below."
    ),
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_numeric("x", "x", 1),
            ui.input_numeric("y", "y", 2),
            ui.input_task_button("btn", "Compute, slowly"),
            ui.input_action_button("btn_cancel", "Cancel"),
        ),
        ui.h5("Sum of x and y"),
        ui.output_text("show_result"),
    ),
)


def server(input, output, session):
    @render.text
    def current_time():
        reactive.invalidate_later(1)
        return datetime.now().strftime("%H:%M:%S")

    @ui.bind_task_button(button_id="btn")
    @reactive.extended_task
    async def slow_compute(a: int, b: int) -> int:
        await asyncio.sleep(3)
        return a + b

    @reactive.effect
    @reactive.event(input.btn, ignore_none=False)
    def handle_click():
        slow_compute(input.x(), input.y())

    @reactive.effect
    @reactive.event(input.btn_cancel)
    def handle_cancel():
        slow_compute.cancel()

    @render.text
    def show_result():
        return str(slow_compute.result())


app = App(app_ui, server)


```

================
File: reactive.file_reader.qmd
================
# reactive.file_reader { #shiny.reactive.file_reader }

```python
reactive.file_reader(filepath, interval_secs=1, *, priority=1, session=MISSING)
```

Create a reactive file reader.

This is a decorator, meant to be applied to a no-argument function that reads data
from a file on disk. Whenever the file changes (or to be precise, the file size or
last modified time changes), past readers of the data are reactively invalidated.
This makes it incredibly easy to write apps that automatically update all of their
outputs as soon as files on disk change.

Note that `file_reader` works only on single files, not directories of files.

Both the `filepath` function and the decorated (file reading) function can read
reactive values and [](:func:`~shiny.reactive.calc`) objects. Any invalidations
triggered by reactive dependencies will apply to the reactive file reader object
immediately (not waiting for the `interval_secs` delay to expire).

## Parameters {.doc-section .doc-section-parameters}

<code>[**filepath**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [os](`os`).[PathLike](`os.PathLike`)\[[str](`str`)\] \| [Callable](`typing.Callable`)\[\[\], [str](`str`)\] \| [Callable](`typing.Callable`)\[\[\], [os](`os`).[PathLike](`os.PathLike`)\[[str](`str`)\]\]]{.parameter-annotation}</code>

:   Either a string indicating the file path to be monitored, or, a no-argument function that returns such a string. The latter is useful if the file to be monitored depends on some user input, the current date/time, etc.  The file path provided MUST exist, otherwise Shiny will treat it as an unhandled error and close the session.  If a function is used, make sure it is high performance (or is cached, i.e. use a :class:`~shiny.reactive.calc)`, as it will be called very frequently.

<code>[**interval_secs**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   The number of seconds to wait after each time the file metadata is checked. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.

<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   Reactive polling is implemented using an [](:func:`~shiny.reactive.effect`) to call `poll_func` on a timer; use the `priority` argument to control the order of this Effect's execution versus other Effects in your app. See [](:func:`~shiny.reactive.effect`) for more details.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \| [Session](`shiny.Session`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, a session is inferred via [](:func:`~shiny.session.get_current_session`). If there is no current session (i.e. `poll` is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._poll.T`)\]\], [Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._poll.T`)\]\]]{.parameter-annotation}</code>

:   A decorator that should be applied to a no-argument function that (expensively)

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [reads whatever data is desired. (This function may be a regular function or a]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [co-routine function.) The result of the decorator is a reactive]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [func:`~shiny.reactive.calc` that always returns up-to-date data, and invalidates]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [callers when changes are detected via polling.]{.parameter-annotation}</code>

:   

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.reactive.poll`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pathlib

import pandas as pd

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

dir = pathlib.Path(__file__).parent

app_ui = ui.page_fluid(ui.output_table("result"), class_="p-3")


@reactive.file_reader(dir / "mtcars.csv")
def read_file():
    return pd.read_csv(dir / "mtcars.csv")


def server(input: Inputs, output: Outputs, session: Session):
    @render.table
    def result():
        return read_file()


app = App(app_ui, server)


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: reactive.flush.qmd
================
# reactive.flush { #shiny.reactive.flush }

```python
reactive.flush()
```

Run any pending invalidations (i.e., flush the reactive environment).

## Warning {.doc-section .doc-section-warning}

You shouldn't ever need to call this function inside of a Shiny app. It's only
useful for testing and running reactive code interactively in the console.

================
File: reactive.invalidate_later.qmd
================
# reactive.invalidate_later { #shiny.reactive.invalidate_later }

```python
reactive.invalidate_later(delay, *, session=MISSING)
```

Scheduled Invalidation

When called from within a reactive context, [](:func:`~shiny.reactive.invalidate_later`)
schedules the reactive context to be invalidated in the given number of seconds.

## Parameters {.doc-section .doc-section-parameters}

<code>[**delay**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation}</code>

:   The number of seconds to wait before invalidating.

## Note {.doc-section .doc-section-note}

When called within a reactive function (i.e., [](:func:`~shiny.reactive.effect`),
[](:func:`~shiny.reactive.calc`), [](:class:`shiny.render.ui`), etc.), that reactive context
is invalidated (and re-executes) after the interval has passed. The re-execution
will reset the invalidation flag, so in a typical use case, the object will keep
re-executing and waiting for the specified interval. It's possible to stop this
cycle by adding conditional logic that prevents the ``invalidate_later`` from being
run.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(ui.output_text("value"))


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value():
        reactive.invalidate_later(0.5)
        return "Random int: " + str(random.randint(0, 10000))


app = App(app_ui, server)


```

================
File: reactive.isolate.qmd
================
# reactive.isolate { #shiny.reactive.isolate }

```python
reactive.isolate()
```

Create a non-reactive scope within a reactive scope.

Ordinarily, the simple act of reading a reactive value causes a relationship to be
established between the caller and the reactive value, where a change to the
reactive value will cause the caller to re-execute. (The same applies for the act of
getting a reactive calculation&#x27;s value.) `with isolate()` lets you read a reactive
value or calculation without establishing this relationship.

``with isolate()`` can also be useful for calling reactive calculations at the
console, which can be useful for debugging. To do so, wrap the calls to the reactive
calculation with ``with isolate()``.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Generator](`typing.Generator`)\[None, None, None\]]{.parameter-annotation}</code>

:   A context manager that executes the given expression in a scope where reactive values can be read, but do not cause the reactive scope of the caller to be re-evaluated when they change.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "Number of observations", min=0, max=1000, value=500),
    ui.input_action_button("go", "Go!", class_="btn-success"),
    ui.output_plot("plot"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot():
        # Take a reactive dependency on the action button...
        input.go()

        # ...but don't take a reactive dependency on the slider
        with reactive.isolate():
            np.random.seed(19680801)
            x = 100 + 15 * np.random.randn(input.n())

        fig, ax = plt.subplots()
        ax.hist(x, bins=30, density=True)
        return fig


app = App(app_ui, server)


```

================
File: reactive.lock.qmd
================
# reactive.lock { #shiny.reactive.lock }

```python
reactive.lock()
```

A lock that should be held whenever manipulating the reactive graph.

For example, [](:func:`~shiny.reactive.lock`) makes it safe to set a
[](:class:`~reactive.value`) and call [](:func:`~shiny.reactive.flush`) from a different
[](:class:`~asyncio.Task`) than the one that is running the Shiny
[](:class:`~shiny.Session`).

================
File: reactive.poll.qmd
================
# reactive.poll { #shiny.reactive.poll }

```python
reactive.poll(
    poll_func,
    interval_secs=1,
    *,
    equals=eq,
    priority=0,
    session=MISSING,
)
```

Create a reactive polling object.

Polling is a technique that approximates &quot;real-time&quot; or streaming updates, as if a
data source were pushing notifications each time it is updated. The data source does
not actually push notifications; a polling object repeatedly checks for changes in an
efficient way at specified intervals. If a change is detected, the polling object runs
a function to re-read the data source.

A reactive polling object is constructed using two functions: a polling function,
which is a fast-running, inexpensive function that is used to determine whether some
data source has changed (such as the timestamp of a file, or a `SELECT MAX(updated)
FROM table` query); and a slower-running reading function that actually loads and
returns the data that is desired. The `poll()` function is intended to be used as a
decorator: the poll function is passed as the `poll_func` arg to `@poll()`, while
the data reading function is the target of the decorator.

Reactive consumers can invoke the resulting polling object to get the current data,
and will automatically invalidate when the polling function detects a change.
Polling objects also cache the results of the read function; for this reason, apps
where all sessions depend on the same data source may want to declare the polling
object at the top level of app.py (outside of the server function).

Both `poll_func` and the decorated (data reading) function can read reactive values
and [](:func:`~shiny.reactive.calc`) objects. Any invalidations triggered by reactive
dependencies will apply to the reactive polling object immediately (not waiting for
the `interval_secs` delay to expire).

## Parameters {.doc-section .doc-section-parameters}

<code>[**poll_func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], [Any](`typing.Any`)\] \| [Callable](`typing.Callable`)\[\[\], [Awaitable](`typing.Awaitable`)\[[Any](`typing.Any`)\]\]]{.parameter-annotation}</code>

:   A function to be called frequently to determine whether a data source has changed. The return value should be something that can be compared inexpensively using `==`. Both regular functions and co-routine functions are allowed.  Note that the `poll_func` should NOT return a bool that indicates whether the data source has changed. Rather, each `poll_func` return value will be checked for equality with its preceding `poll_func` return value (using `==` semantics by default), and if it differs, the data source will be considered changed.

<code>[**interval_secs**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   The number of seconds to wait after each `poll_func` invocation before polling again. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.

<code>[**equals**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Any](`typing.Any`), [Any](`typing.Any`)\], [bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [eq]{.parameter-default}</code>

:   The function that will be used to compare each `poll_func` return value with its immediate predecessor.

<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Reactive polling is implemented using an [](:func:`~shiny.reactive.effect`) to call `poll_func` on a timer; use the `priority` argument to control the order of this Effect's execution versus other Effects in your app. See [](:func:`~shiny.reactive.effect`) for more details.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \| [Session](`shiny.Session`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, a session is inferred via [](:func:`~shiny.session.get_current_session`). If there is no current session (i.e. `poll` is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._poll.T`)\]\], [Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._poll.T`)\]\]]{.parameter-annotation}</code>

:   A decorator that should be applied to a no-argument function that (expensively) reads whatever data is desired. (This function may be a regular function or a co-routine function.) The result of the decorator is a reactive [](:func:`~shiny.reactive.calc`) that always returns up-to-date data, and invalidates callers when changes are detected via polling.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.reactive.file_reader`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
import random
import sqlite3
from datetime import datetime
from typing import Any, Awaitable

import pandas as pd

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

SYMBOLS = ["AAA", "BBB", "CCC", "DDD", "EEE", "FFF"]


def timestamp() -> str:
    return datetime.now().strftime("%x %X")


def rand_price() -> float:
    return round(random.random() * 250, 2)


# === Initialize the database =========================================


def init_db(con: sqlite3.Connection) -> None:
    cur = con.cursor()
    try:
        cur.executescript(
            """
            CREATE TABLE stock_quotes (timestamp text, symbol text, price real);
            CREATE INDEX idx_timestamp ON stock_quotes (timestamp);
            """
        )
        cur.executemany(
            "INSERT INTO stock_quotes (timestamp, symbol, price) VALUES (?, ?, ?)",
            [(timestamp(), symbol, rand_price()) for symbol in SYMBOLS],
        )
        con.commit()
    finally:
        cur.close()


conn = sqlite3.connect(":memory:")
init_db(conn)


# === Randomly update the database with an asyncio.task ==============


def update_db(con: sqlite3.Connection) -> None:
    """Update a single stock price entry at random"""

    cur = con.cursor()
    try:
        sym = SYMBOLS[random.randint(0, len(SYMBOLS) - 1)]
        print(f"Updating {sym}")
        cur.execute(
            "UPDATE stock_quotes SET timestamp = ?, price = ? WHERE symbol = ?",
            (timestamp(), rand_price(), sym),
        )
        con.commit()
    finally:
        cur.close()


async def update_db_task(con: sqlite3.Connection) -> Awaitable[None]:
    """Task that alternates between sleeping and updating prices"""
    while True:
        await asyncio.sleep(random.random() * 1.5)
        update_db(con)


asyncio.create_task(update_db_task(conn))


# === Create the reactive.poll object ===============================


def tbl_last_modified() -> Any:
    df = pd.read_sql_query("SELECT MAX(timestamp) AS timestamp FROM stock_quotes", conn)
    return df["timestamp"].to_list()


@reactive.poll(tbl_last_modified, 0.5)
def stock_quotes() -> pd.DataFrame:
    return pd.read_sql_query("SELECT timestamp, symbol, price FROM stock_quotes", conn)


# === Define the Shiny UI and server ===============================

app_ui = ui.page_fluid(
    ui.card(
        ui.markdown(
            """
            # `shiny.reactive.poll` demo

            This example app shows how to stream results from a database (in this
            case, an in-memory sqlite3) with the help of `shiny.reactive.poll`.
            """
        ),
        ui.input_selectize(
            "symbols", "Filter by symbol", [""] + SYMBOLS, multiple=True
        ),
        ui.output_data_frame("table"),
        fill=False,
    )
)


def server(input: Inputs, output: Outputs, session: Session) -> None:
    def filtered_quotes():
        df = stock_quotes()
        if input.symbols():
            df = df[df["symbol"].isin(input.symbols())]
        return df

    @render.data_frame
    def table():
        return filtered_quotes()


app = App(app_ui, server)


```

================
File: reactive.value.qmd
================
# reactive.Value { #shiny.reactive.Value }

```python
reactive.Value(self, value=MISSING, *, read_only=False)
```

Create a reactive value.

Reactive values are the source of reactivity in Shiny. Changes to reactive values
invalidate downstream reactive functions ([](:func:`~shiny.reactive.calc`),
[](:func:`~shiny.reactive.effect`), and `render` functions decorated with `@output`).
When these functions are invalidated, they get scheduled to re-execute.

Shiny input values are read-only reactive values. For example, `input.x` is a
reactive value object, and to get the current value, you can call `input.x()` or
`input.x.get()`. When you do that inside of a reactive function, the function takes
a dependency on the reactive value.

## Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   An optional initial value.

<code>[**read_only**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, then the reactive value cannot be `set()`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   An instance of a reactive value.

## Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[](:class:`~shiny.types.SilentException`)]{.parameter-annotation}</code>

:   If [](:func:`~shiny.reactive.Value.get`) is called before a value is provided/set.

## Note {.doc-section .doc-section-note}

A reactive value may only be read from within a reactive function (e.g.,
[](:func:`~shiny.reactive.calc`), [](:func:`~shiny.reactive.effect`),
[](:class:`shiny.render.text`), etc.) and, when doing so, the function takes a reactive
dependency on the value (i.e., when the value changes, the calling reactive function
will re-execute).

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.Inputs`)
* [](:func:`~shiny.reactive.calc`)
* [](:func:`~shiny.reactive.effect`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_action_button("minus", "-1"),
        ui.input_action_button("plus", "+1"),
    ),
    ui.output_text("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    val = reactive.value(0)

    @reactive.effect
    @reactive.event(input.minus)
    def _():
        newVal = val.get() - 1
        val.set(newVal)

    @reactive.effect
    @reactive.event(input.plus)
    def _():
        newVal = val.get() + 1
        val.set(newVal)

    @render.text
    def value():
        return str(val.get())


app = App(app_ui, server)


```

## Methods

| Name | Description |
| --- | --- |
| [freeze](#shiny.reactive.Value.freeze) | Freeze the reactive value. |
| [get](#shiny.reactive.Value.get) | Read the reactive value. |
| [is_set](#shiny.reactive.Value.is_set) | Check if the reactive value is set. |
| [set](#shiny.reactive.Value.set) | Set the reactive value to a new value. |
| [unset](#shiny.reactive.Value.unset) | Unset the reactive value. |

### freeze { #shiny.reactive.Value.freeze }

```python
reactive.Value.freeze()
```

Freeze the reactive value.

Freezing is equivalent to unsetting the value, but it does not invalidate
dependents.

### get { #shiny.reactive.Value.get }

```python
reactive.Value.get()
```

Read the reactive value.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`)]{.parameter-annotation}</code>

:   A value.

#### Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[](:class:`~shiny.types.SilentException`)]{.parameter-annotation}</code>

:   If the value is not set.

<code>[:]{.parameter-annotation-sep} [[RuntimeError](`RuntimeError`)]{.parameter-annotation}</code>

:   If called from outside a reactive function.

### is_set { #shiny.reactive.Value.is_set }

```python
reactive.Value.is_set()
```

Check if the reactive value is set.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   ``True`` if the value is set, ``False`` otherwise.

### set { #shiny.reactive.Value.set }

```python
reactive.Value.set(value)
```

Set the reactive value to a new value.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`)]{.parameter-annotation}</code>

:   A value.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   ``True`` if the value was set to a different value and ``False`` otherwise.

#### Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[RuntimeError](`RuntimeError`)]{.parameter-annotation}</code>

:   If called on a read-only reactive value.

### unset { #shiny.reactive.Value.unset }

```python
reactive.Value.unset()
```

Unset the reactive value.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [None]{.parameter-annotation}</code>

:   ``True`` if the value was set prior to this unsetting.

================
File: render.code.qmd
================
# render.code { #shiny.render.code }

```python
render.code(self, _fn=None, *, placeholder=True)
```

Reactively render text as code (monospaced).

When used in Shiny Express applications, this defaults to displaying the text in a
monospace font in a code block. When used in Shiny Core applications, this should be
paired with [](:func:`~shiny.ui.output_code`) in the UI.

## Parameters {.doc-section .doc-section-parameters}

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   (Express only) If the output is empty or ``None``, should an empty rectangle be displayed to serve as a placeholder? This does not affect behavior when the output is nonempty. (This argument is passed to [](:func:`~shiny.ui.output_code`).)

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns a string.

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.ui.output_code`) container (see [](:func:`~shiny.ui.output_code`) for
example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.code`)
* [](:func:`~shiny.ui.output_code`)

================
File: render.data_frame.qmd
================
# render.data_frame { #shiny.render.data_frame }

```python
render.data_frame(self, fn)
```

Decorator for a function that returns a [pandas](https://pandas.pydata.org/),
[polars](https://pola.rs/), or eager
[`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object
to render as an interactive table or grid. Features fast virtualized scrolling,
sorting, filtering, and row selection (single or multiple).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns any of the following:  1. A [](:class:`~shiny.render.DataGrid`) or [](:class:`~shiny.render.DataTable`) object,    which can be used to customize the appearance and behavior of the data frame    output. 2. A [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager    [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame`    object. This object will be internally upgraded to a default    `shiny.render.DataGrid(df)`.

## Row selection {.doc-section .doc-section-row-selection}

When using the row selection feature, you can access the selected rows by using the
`<data_frame_renderer>.cell_selection()` method, where `<data_frame_renderer>`
is the `@render.data_frame` function name that corresponds with the `id=` used in
[](:func:`~shiny.ui.outout_data_frame`). Internally,
`<data_frame_renderer>.cell_selection()` retrieves the selected cell
information from session's `input.<data_frame_renderer>_cell_selection()` value and
upgrades it for consistent subsetting.

For example, to filter your pandas data frame (`df`) down to the selected rows you can use:

* `df.iloc[list(input.<data_frame_renderer>_cell_selection()["rows"])]`
* `df.iloc[list(<data_frame_renderer>.cell_selection()["rows"])]`
* `<data_frame_renderer>.data_view(selected=True)`

The last method (`.data_view(selected=True)`) will also apply any sorting,
filtering, or edits that has been applied by the user.

## Editing cells {.doc-section .doc-section-editing-cells}

When a returned `DataTable` or `DataGrid` object has `editable=True`, app users will
be able to edit the cells in the table. After a cell has been edited, the edited
value will be sent to the server for processing. The handling methods are set via
`@<data_frame_renderer>.set_patch_fn` or `@<data_frame_renderer>.set_patches_fn`
decorators. By default, both decorators will return the corresponding value as a
string.

## Data methods {.doc-section .doc-section-data-methods}


There are several methods available to inspect and update data frame renderer. It is
important to know the side effects of each method to know how they interact with
each other.

* Data frame render method:
    * When this method is reactively executed, the `.data()` data frame is set to
      the underlying data frame and all `.cell_patches()` are removed.
    * When this method is reactively executed, **all user state is reset**. This
      includes the user's edits, sorting, filtering.
* `.data()`:
    * Reactive calculation that returns the render method's underlying data frame or
      the data frame supplied to `.update_data(data)`, whichever has been most
      recently set.
* `.cell_patches()`:
    * Reactive calculation that returns a list of user edits (or updated cell
      values) that will be applied to `.data()` to create the `.data_patched()` data
      frame.
* `.data_patched()`:
    * Reactive calculation that returns the `.data()` data frame with all
      `.cell_patches()` patches applied.
* `.data_view(*, selected: bool)`:
    * Reactive function that returns the `.data_patched()` data frame with the
      user's sorting and filtering applied. It represents the data frame as viewed
      by the user within the browser.
    * If `selected=True`, only the selected rows are returned.
* `.update_cell_value(value, row, col)`:
    * Sets a new entry in `.cell_patches()`.
    * Calling this method will **not** reset the user's sorting or filtering.
* `.update_data(data)`:
    * Updates the `.data()` data frame with new data.
    * Calling this method will remove all `.cell_patches()`.
    * Calling this method will **not** reset the user's sorting or filtering.

Note: All data methods are shallow copies of each other. If they are mutated in
place, it **will modify** the underlying data object and possibly alter other data
objects.

## Narwhals {.doc-section .doc-section-narwhals}


Shiny uses [`narwhals`](https://narwhals-dev.github.io/narwhals/) to manage data
frame interactions. From their website: "Extremely lightweight and extensible
compatibility layer between dataframe libraries!". This allows for seamless
integration between pandas, polars, and any other eagerly defined data frame type.

There are some reasonable limitations to the narwhals compatibility layer. As they
are found, they will be added to this list:
* When converting the column type who does not have a 1:1 mapping between libraries
  (such as pandas' columns containing `str` and `dict` items both share the same
  `object` data type), narwhals will only inspect the first row to disambiguate the
  cell type. This could lead to false negatives in the data type conversion. Shiny
  could inspect each column in an attempt to disambiguate the cell type, but this
  would be a costly operation. The best way to avoid this is to use consistent
  typing. For example, if your first row of the pandas column contains a string and
  the second row of the same column contains a `ui.TagList`, the column will
  incorrectly be interpreted as a string. To get around this, you can wrap all cells
  (or at the very lest the first cell) in the same column within a `ui.TagList` as
  it will not insert any tags, but it will cause the column to be interpreted as
  `html` where possible.   (tl/dr: Use consistent typing in your columns!)

## Tip {.doc-section .doc-section-tip}

This decorator should be applied **before** the ``@output`` decorator (if that
decorator is used). Also, the name of the decorated function (or
``@output(id=...)``) should match the ``id`` of a [](:func:`~shiny.ui.output_data_frame`)
container (see [](:func:`~shiny.ui.output_data_frame`) for example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.output_data_frame`)
* [](:class:`~shiny.render.DataGrid`) and [](:class:`~shiny.render.DataTable`) are the
  objects you can return from the rendering function to specify options.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)
import plotly.express as px
from shinywidgets import output_widget, render_widget

from shiny import App, reactive, render, req, ui

# Load the Gapminder dataset
df = px.data.gapminder()

# Prepare a summary DataFrame
summary_df = (
    df.groupby("country")
    .agg(
        {
            "pop": ["min", "max", "mean"],
            "lifeExp": ["min", "max", "mean"],
            "gdpPercap": ["min", "max", "mean"],
        }
    )
    .reset_index()
)

summary_df.columns = ["_".join(col).strip() for col in summary_df.columns.values]
summary_df.rename(columns={"country_": "country"}, inplace=True)

app_ui = ui.page_fillable(
    {"class": "p-3"},
    ui.markdown(
        "**Instructions**: Select one or more countries in the table below to see more information."
    ),
    ui.layout_columns(
        ui.card(ui.output_data_frame("summary_data"), height="400px"),
        ui.card(output_widget("country_detail_pop"), height="400px"),
        ui.card(output_widget("country_detail_percap"), height="400px"),
        col_widths=[12, 6, 6],
    ),
)


def server(input, output, session):
    @render.data_frame
    def summary_data():
        return render.DataGrid(summary_df.round(2), selection_mode="rows")

    @reactive.calc
    def filtered_df():
        data_selected = summary_data.data_view(selected=True)
        req(not data_selected.empty)
        countries = data_selected["country"]
        # Filter data for selected countries
        return df[df["country"].isin(countries)]

    @render_widget
    def country_detail_pop():
        return px.line(
            filtered_df(),
            x="year",
            y="pop",
            color="country",
            title="Population Over Time",
        )

    @render_widget
    def country_detail_percap():
        return px.line(
            filtered_df(),
            x="year",
            y="gdpPercap",
            color="country",
            title="GDP per Capita Over Time",
        )


app = App(app_ui, server)


```

## Methods

| Name | Description |
| --- | --- |
| [cell_patches](#shiny.render.data_frame.cell_patches) | Reactive calculation of the data frame's edits. |
| [cell_selection](#shiny.render.data_frame.cell_selection) | Reactive calculation of selected cell information. |
| [data](#shiny.render.data_frame.data) | Reactive calculation of the data frame's data. |
| [data_patched](#shiny.render.data_frame.data_patched) | Reactive calculation of the data frame's patched data. |
| [data_view](#shiny.render.data_frame.data_view) | Reactive function that retrieves the data how it is viewed within the browser. |
| [data_view_rows](#shiny.render.data_frame.data_view_rows) | Reactive calculation of the data frame's user view row numbers. |
| [filter](#shiny.render.data_frame.filter) | Reactive calculation of the data frame's column filters. |
| [input_cell_selection](#shiny.render.data_frame.input_cell_selection) | [Deprecated] Reactive calculation of selected cell information. |
| [selection_modes](#shiny.render.data_frame.selection_modes) | Reactive calculation of the data frame's possible selection modes. |
| [set_patch_fn](#shiny.render.data_frame.set_patch_fn) | Decorator to set the function that updates a single cell in the data frame. |
| [set_patches_fn](#shiny.render.data_frame.set_patches_fn) | Decorator to set the function that updates a batch of cells in the data frame. |
| [sort](#shiny.render.data_frame.sort) | Reactive calculation of the data frame's column sorting information. |
| [update_cell_selection](#shiny.render.data_frame.update_cell_selection) | Update the cell selection in the data frame. |
| [update_cell_value](#shiny.render.data_frame.update_cell_value) | Update the value of a cell in the data frame. |
| [update_data](#shiny.render.data_frame.update_data) | Update the data frame with new data. |
| [update_filter](#shiny.render.data_frame.update_filter) | Update the column filtering in the data frame. |
| [update_sort](#shiny.render.data_frame.update_sort) | Update the column sorting in the data frame. |

### cell_patches { #shiny.render.data_frame.cell_patches }

```python
render.data_frame.cell_patches()
```

Reactive calculation of the data frame&#x27;s edits.

This reactive calculation that returns a list of user edits (or updated cell
values) that will be applied to `.data()` to create the `.data_patched()` data
frame.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[list](`list`)\[[CellPatch](`shiny.render._data_frame_utils._patch.CellPatch`)\]]{.parameter-annotation}</code>

:   A list of cell patches to apply to the data frame.

### cell_selection { #shiny.render.data_frame.cell_selection }

```python
render.data_frame.cell_selection()
```

Reactive calculation of selected cell information.

This method is a wrapper around `input.<id>_cell_selection()`, where `<id>` is
the `id` of the data frame output. This method returns the selected rows and
will cause reactive updates as the selected rows change.

The value has been enhanced from it&#x27;s vanilla form to include the missing `cols` key
(or `rows` key) as a tuple of integers representing all column (or row) numbers.
This allows for consistent usage within code when subsetting your data. These
missing keys are not sent over the wire as they are independent of the selection.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[CellSelection](`shiny.render._data_frame_utils._selection.CellSelection`)]{.parameter-annotation}</code>

:   [](:class:`~shiny.render.CellSelection`) representing the indices of the selected cells. If no cells are currently selected, `None` is returned.

### data { #shiny.render.data_frame.data }

```python
render.data_frame.data()
```

Reactive calculation of the data frame&#x27;s data.

This reactive calculation returns the render method&#x27;s underlying data frame or
the data frame supplied to `.update_data(data)`, whichever has been most
recently set.

The returned value is a shallow copy of the original data frame. It is possible
that alterations to the `.data()` data frame could alter other associated data
frame values. Please be cautious when using this value directly.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   This reactive calculation returns the render method's underlying data frame or the data frame supplied to `.update_data(data)`, whichever has been most recently set.

### data_patched { #shiny.render.data_frame.data_patched }

```python
render.data_frame.data_patched()
```

Reactive calculation of the data frame&#x27;s patched data.

This method returns the `.data()` data frame with all `.cell_patches()` patches
applied.

The returned value is a shallow copy of the original data frame. It is possible
that alterations to the `.data_patched()` data frame could alter other
associated data frame values. Please be cautious when using this value directly.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   The patched data frame.

### data_view { #shiny.render.data_frame.data_view }

```python
render.data_frame.data_view(selected=False)
```

Reactive function that retrieves the data how it is viewed within the browser.

This function will return the `.data_patched()` data frame with the user&#x27;s
sorting and filtering applied. It represents the data frame as viewed by the
user within the browser.

The returned value is a shallow copy of the original data frame. It is possible
that alterations to the `.data_view()` data frame could alter other associated
date frame values. Please be cautious when using this value directly.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, subset the viewed data to the selected area. Defaults to `False` (all rows).

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   A view of the (possibly selected) data frame as seen in the browser.

#### See Also {.doc-section .doc-section-see-also}

* [`pandas.DataFrame.copy` API documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.copy.html)
* [`polars.DataFrame.clone` API documentation](https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.clone.html)
* [`narwhals.DataFrame.clone` API documentation](https://narwhals-dev.github.io/narwhals/api-reference/dataframe/#narwhals.dataframe.DataFrame.clone)

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import mtcars

from shiny import App, reactive, render, ui

app_ui = ui.page_fillable(
    ui.layout_columns(
        ui.card(
            ui.card_header(
                ui.markdown(
                    """
                    ##### Editable data frame
                    * Edit the cells!
                    * Sort the columns!
                    """
                )
            ),
            ui.output_data_frame("df_original"),
        ),
        ui.card(
            ui.card_header(
                ui.markdown(
                    """
                    ##### Updated data from the first data frame
                    * Select the rows!
                    * Filter and sort the columns!
                    """
                )
            ),
            ui.output_data_frame("df_edited"),
        ),
        ui.card(
            ui.card_header(
                ui.markdown(
                    """
                    ##### Selected data from the second data frame
                    * Sort the columns!
                    """
                )
            ),
            ui.output_data_frame("df_selected"),
        ),
        col_widths=[4, 4, 4],
    ),
)


def server(input, output, session):
    df = reactive.value(mtcars.iloc[:, range(4)])

    @render.data_frame
    def df_original():
        return render.DataGrid(
            df(),
            editable=True,
        )

    # Convert edited values to the correct data type
    @df_original.set_patch_fn
    def _(*, patch: render.CellPatch) -> render.CellValue:
        if patch["column_index"] in [0, 2]:
            return float(patch["value"])
        return int(patch["value"])

    @render.data_frame
    def df_edited():
        return render.DataGrid(
            # Reactive value is updated when the user edits the data within `df_original` output
            df_original.data_view(),
            selection_mode="rows",
            filters=True,
        )

    @render.data_frame
    def df_selected():
        return render.DataGrid(
            # Reactive value is updated when the user selects rows the data within `df_edited` output
            df_edited.data_view(selected=True),
            selection_mode="rows",
        )


app = App(app_ui, server)


## file: shared.py
from pathlib import Path

import pandas as pd

app_dir = Path(__file__).parent
mtcars = pd.read_csv(app_dir / "mtcars.csv")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

### data_view_rows { #shiny.render.data_frame.data_view_rows }

```python
render.data_frame.data_view_rows()
```

Reactive calculation of the data frame&#x27;s user view row numbers.

This value is a wrapper around `input.<id>_data_view_rows()`, where `<id>` is the
`id` of the data frame output.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[int](`int`), ...\]]{.parameter-annotation}</code>

:   The row numbers of the data frame that are currently being viewed in the browser after sorting and filtering has been applied.

### filter { #shiny.render.data_frame.filter }

```python
render.data_frame.filter()
```

Reactive calculation of the data frame&#x27;s column filters.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[ColumnFilter](`shiny.render._data_frame_utils._types.ColumnFilter`), ...\]]{.parameter-annotation}</code>

:   An array of `col`umn number and `value` information. If the column type is a number, a tuple of `(min, max)` is used for `value`. If no min (or max) value is set, `None` is used in its place. If the column type is a string, the string value is used for `value`.

### input_cell_selection { #shiny.render.data_frame.input_cell_selection }

```python
render.data_frame.input_cell_selection()
```

[Deprecated] Reactive calculation of selected cell information.

Please use `~shiny.render.data_frame`&#x27;s `.cell_selection()` method instead.

### selection_modes { #shiny.render.data_frame.selection_modes }

```python
render.data_frame.selection_modes()
```

Reactive calculation of the data frame&#x27;s possible selection modes.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectionModes](`shiny.render._data_frame_utils._selection.SelectionModes`)]{.parameter-annotation}</code>

:   The possible selection modes for the data frame.

### set_patch_fn { #shiny.render.data_frame.set_patch_fn }

```python
render.data_frame.set_patch_fn(fn)
```

Decorator to set the function that updates a single cell in the data frame.

The default patch function returns the value as is.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[PatchFn](`shiny.render._data_frame_utils._patch.PatchFn`) \| [PatchFnSync](`shiny.render._data_frame_utils._patch.PatchFnSync`)]{.parameter-annotation}</code>

:   A function that accepts a kwarg `patch` and returns the processed `patch.value` for the cell.

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import mtcars

from shiny import App, reactive, render, ui

app_ui = ui.page_fillable(
    ui.layout_columns(
        ui.card(
            ui.card_header(
                ui.markdown(
                    """
                    ##### Editable data frame
                    * Edit the cells!
                    * Sort the columns!
                    """
                )
            ),
            ui.output_data_frame("df_original"),
        ),
        ui.card(
            ui.card_header(
                ui.markdown(
                    """
                    ##### Updated data from the first data frame
                    * Select the rows!
                    * Filter and sort the columns!
                    """
                )
            ),
            ui.output_data_frame("df_edited"),
        ),
        ui.card(
            ui.card_header(
                ui.markdown(
                    """
                    ##### Selected data from the second data frame
                    * Sort the columns!
                    """
                )
            ),
            ui.output_data_frame("df_selected"),
        ),
        col_widths=[4, 4, 4],
    ),
)


def server(input, output, session):
    df = reactive.value(mtcars.iloc[:, range(4)])

    @render.data_frame
    def df_original():
        return render.DataGrid(
            df(),
            editable=True,
        )

    # Convert edited values to the correct data type
    @df_original.set_patch_fn
    def _(*, patch: render.CellPatch) -> render.CellValue:
        if patch["column_index"] in [0, 2]:
            return float(patch["value"])
        return int(patch["value"])

    @render.data_frame
    def df_edited():
        return render.DataGrid(
            # Reactive value is updated when the user edits the data within `df_original` output
            df_original.data_view(),
            selection_mode="rows",
            filters=True,
        )

    @render.data_frame
    def df_selected():
        return render.DataGrid(
            # Reactive value is updated when the user selects rows the data within `df_edited` output
            df_edited.data_view(selected=True),
            selection_mode="rows",
        )


app = App(app_ui, server)


## file: shared.py
from pathlib import Path

import pandas as pd

app_dir = Path(__file__).parent
mtcars = pd.read_csv(app_dir / "mtcars.csv")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

### set_patches_fn { #shiny.render.data_frame.set_patches_fn }

```python
render.data_frame.set_patches_fn(fn)
```

Decorator to set the function that updates a batch of cells in the data frame.

The default patches function calls the async `._patch_fn()` on each input patch
and returns the updated patch values.

There are no checks made on the quantity of patches returned. The user can
return more, less, or the same number of patches as the input patches. This
allows for the app author to own more control over which columns are updated and
how they are updated.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[PatchesFn](`shiny.render._data_frame_utils._patch.PatchesFn`) \| [PatchesFnSync](`shiny.render._data_frame_utils._patch.PatchesFnSync`)]{.parameter-annotation}</code>

:   A function that accepts a kwarg `patches` and returns a list of (possibly updated) patches to apply to the data frame.

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from __future__ import annotations

from pathlib import Path

import pandas as pd

from shiny import App, reactive, render, ui

app_ui = ui.page_fillable(
    {"class": "p-3"},
    ui.markdown(
        """
        #### Instructions:
        * Run the app locally so that the edits to the underlying CSV file will persist.
        * Edit the cells in the table.

        #### Note:
        The data frame will not be re-rendered as the result of `df()` has not updated.

        Once the `df()` is invalidated, all local edits are forgotten, and the data frame will be re-rendered. However, since the edits were saved to the CSV file, the edits will persist between refreshes (when run locally).
        """
    ),
    ui.card(
        ui.output_data_frame("my_data_frame"),
    ),
)

here = Path(__file__).parent


def server(input, output, session):
    mtcars_df = reactive.value(pd.read_csv(here / "mtcars.csv").iloc[:, range(4)])

    # A copy of the data frame that will store all the edits
    edited_df = reactive.value(None)

    # Copy mtcars_df to edited_df when mtcars_df changes and on initial load
    @reactive.effect
    def _sync_mtcars_to_edited_df():
        edited_df.set(mtcars_df())

    @render.data_frame
    def my_data_frame():
        return render.DataGrid(
            mtcars_df(),
            editable=True,
        )

    # Save the edited values to the data source (ex: the CSV file)
    @my_data_frame.set_patches_fn
    def _(*, patches: list[render.CellPatch]) -> list[render.CellPatch]:
        for patch in patches:
            if patch["column_index"] in [0, 2]:
                patch["value"] = float(patch["value"])
            else:
                patch["value"] = int(patch["value"])

        # "Save to the database" by writing the edited data to a CSV file
        df = edited_df().copy()
        for patch in patches:
            df.iloc[patch["row_index"], patch["column_index"]] = patch["value"]
        edited_df.set(df)
        df.to_csv(here / "mtcars.csv", index=False)
        print("Saved the edited data to './mtcars.csv'")

        return patches


app = App(app_ui, server)


## file: mtcars.csv
mpg,cyl,disp,hp
21.0,6,160.0,110
21.0,6,160.0,110
22.8,4,108.0,93
21.4,6,258.0,110
18.7,8,360.0,175
18.1,6,225.0,105
14.3,8,360.0,245
24.4,4,146.7,62
22.8,4,140.8,95
19.2,6,167.6,123
17.8,6,167.6,123
16.4,8,275.8,180
17.3,8,275.8,180
15.2,8,275.8,180
10.4,8,472.0,205
10.4,8,460.0,215
14.7,8,440.0,230
32.4,4,78.7,66
30.4,4,75.7,52
33.9,4,71.1,65
21.5,4,120.1,97
15.5,8,318.0,150
15.2,8,304.0,150
13.3,8,350.0,245
19.2,8,400.0,175
27.3,4,79.0,66
26.0,4,120.3,91
30.4,4,95.1,113
15.8,8,351.0,264
19.7,6,145.0,175
15.0,8,301.0,335
21.4,4,121.0,109


```

### sort { #shiny.render.data_frame.sort }

```python
render.data_frame.sort()
```

Reactive calculation of the data frame&#x27;s column sorting information.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[ColumnSort](`shiny.render._data_frame_utils._types.ColumnSort`), ...\]]{.parameter-annotation}</code>

:   An array of `col`umn number and _is `desc`ending_ information.

### update_cell_selection { #shiny.render.data_frame.update_cell_selection }

```python
render.data_frame.update_cell_selection(selection)
```

Update the cell selection in the data frame.

Currently only single (`"type": "row"`) or multiple (`"type": "rows"`) row
selection is supported.

If the current data frame selection mode is `"none"` and a non-none selection is
provided, a warning will be raised and no rows will be selected. If cells are
supposes to be selected, the selection mode returned from the render function
must (currently) be set to `"row"` or `"rows"`.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**selection**]{.parameter-name} [:]{.parameter-annotation-sep} [[CellSelection](`shiny.render._data_frame_utils._selection.CellSelection`) \| [Literal](`typing.Literal`)\['all'\] \| None \| [BrowserCellSelection](`shiny.render._data_frame_utils._selection.BrowserCellSelection`)]{.parameter-annotation}</code>

:   The cell selection to apply to the data frame. This can be a `CellSelection` object, `"all"` to select all cells (if possible), or `None` to clear the selection.

### update_cell_value { #shiny.render.data_frame.update_cell_value }

```python
render.data_frame.update_cell_value(value, *, row, col)
```

Update the value of a cell in the data frame.

Calling this method will set a new entry in `.cell_patches()`. It will not reset
the user&#x27;s sorting or filtering of their rendered data frame.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[CellValue](`shiny.render._data_frame_utils._patch.CellValue`)]{.parameter-annotation}</code>

:   The new value to set the cell to.

<code>[**row**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation}</code>

:   The row index of the cell to update.

<code>[**column**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The column index of the cell to update.

### update_data { #shiny.render.data_frame.update_data }

```python
render.data_frame.update_data(data)
```

Update the data frame with new data.

Calling this method will update the `.data()` data frame with new data and will
remove all `.cell_patches()`. It will not reset the user&#x27;s sorting or filtering
of their rendered data frame. Any incompatible sorting or filtering settings
will be silently dropped.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**data**]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   The new data to render.

### update_filter { #shiny.render.data_frame.update_filter }

```python
render.data_frame.update_filter(filter)
```

Update the column filtering in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**filter**]{.parameter-name} [:]{.parameter-annotation-sep} [[ListOrTuple](`shiny.types.ListOrTuple`)\[[ColumnFilter](`shiny.render._data_frame_utils._types.ColumnFilter`)\] \| None]{.parameter-annotation}</code>

:   A list of column filtering information. If `None`, filtering will be removed.

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import mtcars

from shiny import App, reactive, render, ui

app_ui = ui.page_fillable(
    ui.card(
        ui.layout_column_wrap(
            ui.input_action_button("btn", "Filter on columns 0, 1, and 3"),
            ui.input_action_button("reset", "Reset column filters"),
            fill=False,
        ),
        ui.output_data_frame("df"),
    ),
)


def server(input, output, session):
    data = reactive.value(mtcars.iloc[:, range(4)])

    @render.data_frame
    def df():
        return render.DataGrid(data(), filters=True)

    @reactive.effect
    @reactive.event(input.reset)
    async def _():
        await df.update_filter(None)

    @reactive.effect
    @reactive.event(input.btn)
    async def _():
        await df.update_filter(
            [
                {"col": 0, "value": [19, 25]},
                {"col": 1, "value": [None, 6]},
                {"col": 3, "value": [100, None]},
            ]
        )


app = App(app_ui, server, debug=True)


## file: shared.py
from pathlib import Path

import pandas as pd

app_dir = Path(__file__).parent
mtcars = pd.read_csv(app_dir / "mtcars.csv")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

### update_sort { #shiny.render.data_frame.update_sort }

```python
render.data_frame.update_sort(sort)
```

Update the column sorting in the data frame.

The sort will be applied in reverse order so that the first value has the highest
precedence. This mean _ties_ will go to the second sort column (and so on).

#### Parameters {.doc-section .doc-section-parameters}

<code>[**sort**]{.parameter-name} [:]{.parameter-annotation-sep} [[ListOrTuple](`shiny.types.ListOrTuple`)\[[ColumnSort](`shiny.render._data_frame_utils._types.ColumnSort`) \| [int](`int`)\] \| [int](`int`) \| [ColumnSort](`shiny.render._data_frame_utils._types.ColumnSort`) \| None]{.parameter-annotation}</code>

:   A list of column sorting information. If `None`, sorting will be removed. `int` values will be upgraded to `{"col": int, "desc": <DESC>}` where `<DESC>` is `True` if the column is number like and `False` otherwise.

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import mtcars

from shiny import App, reactive, render, ui

app_ui = ui.page_fillable(
    ui.card(
        ui.layout_column_wrap(
            ui.input_action_button("btn", "Sort on columns 1↑ and 3↓"),
            ui.input_action_button("reset", "Reset sorting"),
            fill=False,
        ),
        ui.output_data_frame("df"),
    ),
)


def server(input, output, session):
    data = reactive.value(mtcars.iloc[:, range(4)])

    @render.data_frame
    def df():
        return render.DataGrid(data())

    @reactive.effect
    @reactive.event(input.reset)
    async def _():
        await df.update_sort(None)

    @reactive.effect
    @reactive.event(input.btn)
    async def _():
        await df.update_sort([{"col": 1, "desc": False}, {"col": 3, "desc": True}])


app = App(app_ui, server, debug=True)


## file: shared.py
from pathlib import Path

import pandas as pd

app_dir = Path(__file__).parent
mtcars = pd.read_csv(app_dir / "mtcars.csv")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: render.DataGrid.qmd
================
# render.DataGrid { #shiny.render.DataGrid }

```python
render.DataGrid(
    self,
    data,
    *,
    width='fit-content',
    height=None,
    summary=True,
    filters=False,
    editable=False,
    selection_mode='none',
    styles=None,
    row_selection_mode='deprecated',
)
```

Holds the data and options for a [](:class:`~shiny.render.data_frame`) output, for a
spreadsheet-like view.

This class is used to wrap the returned data frame from a `@render.data_frame`
render function. It allows you to specify options for the data grid, such as the
width and height of the grid, whether to show a summary message, whether to show
filter inputs, whether the cells are editable, and how the cells are selected.

While there are currently no execution or parameter differences between `DataGrid`
and `DataTable` other than CSS styling in the browser, the two classes are kept
separate to allow for future extensibility.

## Parameters {.doc-section .doc-section-parameters}

<code>[**data**]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   A [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'fit-content\']{.parameter-default}</code>

:   A _maximum_ amount of horizontal space for the data grid to occupy, in CSS units (e.g. `"400px"`) or as a number, which will be interpreted as pixels. The default is `fit-content`, which sets the grid's width according to its contents. Set this to `100%` to use the maximum available horizontal space.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A _maximum_ amount of vertical space for the data grid to occupy, in CSS units (e.g. `"400px"`) or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the grid will scroll. Set the height to `"auto"` to allow the grid to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).

<code>[**summary**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If `True` (the default), shows a message like "Viewing rows 1 through 10 of 20" below the grid when not all of the rows are being shown. If `False`, the message is not displayed. You can also specify a string template to customize the message, containing `{start}`, `{end}`, and `{total}` tokens. For example: `"Viendo filas {start} a {end} de {total}"`.

<code>[**filters**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, shows a row of filter inputs below the headers, one for each column.

<code>[**editable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.

<code>[**selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectionModeInput](`shiny.render._data_frame_utils._selection.SelectionModeInput`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'none\']{.parameter-default}</code>

:   Single string or a `set`/`list`/`tuple` of string values to define possible ways to select data within the data frame.  Supported values: * Use `"none"` to disable any cell selections or editing. * Use `"row"` to allow a single row to be selected at a time. * Use `"rows"` to allow multiple rows to be selected by clicking on them individually.  Resolution rules: * If `"none"` is supplied, all other values will be ignored. * If both `"row"` and `"rows"` are supplied, `"row"` will be dropped (supporting `"rows"`).

<code>[**styles**]{.parameter-name} [:]{.parameter-annotation-sep} [[StyleInfo](`shiny.render._data_frame_utils._styles.StyleInfo`) \| [list](`list`)\[[StyleInfo](`shiny.render._data_frame_utils._styles.StyleInfo`)\] \| [StyleFn](`shiny.render._data_frame_utils._styles.StyleFn`)\[[IntoDataFrameT](`shiny.render._data_frame_utils._types.IntoDataFrameT`)\] \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If `styles=None`, no styling will be applied.  Style info object key/value description: * `location`: This value `"body"` and is not required. * `rows`: The row numbers to which the style should be applied. If `None`, the     style will be applied to all rows. * `cols`: The column numbers to which the style should be applied. If `None`,     the style will be applied to all columns. * `style`: A dictionary of CSS properties and values to apply to the selected     rows and columns. Traditional _kebab-cased_ CSS property names (e.g.     `background-color`) will work in addition to _camelCased_ CSS property names     (e.g. `backgroundColor`). * `class`: A string of CSS class names to apply to the selected rows and columns.  If both `style` and `class` are missing or `None`, nothing will be applied. If both `rows` and `cols` are missing or `None`, the style will be applied to the complete data frame.

<code>[**row_selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[RowSelectionModeDeprecated](`shiny.render._data_frame_utils._selection.RowSelectionModeDeprecated`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'deprecated\']{.parameter-default}</code>

:   Deprecated. Please use `selection_mode=` instead.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   An object suitable for being returned from a `@render.data_frame`-decorated output function.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.output_data_frame`) - The UI placeholder for a data frame output.
* [](:class:`~shiny.render.data_frame`) - The `render` method for data frames.
* [](:class:`~shiny.render.DataTable`) - A more _tabular_ view of the data.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd
import seaborn as sns

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.head_content(
        ui.tags.meta(name="viewport", content="width=device-width, initial-scale=1")
    ),
    ui.input_select(
        "selection_mode",
        "Selection mode",
        {
            "none": "(None)",
            "row": "Single row",
            "rows": "Multiple rows",
        },
        selected="rows",
    ),
    ui.input_switch("filters", "Filters", True),
    ui.input_switch("editable", "Editable", True),
    ui.layout_column_wrap(
        ui.card(
            ui.card_header("Data Frame as ", ui.tags.code("render.DataGrid")),
            ui.output_data_frame("grid"),
        ),
        ui.card(
            ui.card_header("Data Frame as ", ui.tags.code("render.DataTable")),
            ui.output_data_frame("table"),
        ),
        width=1 / 2,
    ),
    class_="p-3",
)


def server(input: Inputs, output: Outputs, session: Session):
    df: reactive.value[pd.DataFrame] = reactive.value(
        sns.load_dataset("anagrams").iloc[:, 1:]
    )

    def update_data_with_patch(patch):
        df_copy = df().copy()
        fn = str if patch["column_index"] == 0 else int
        df_copy.iat[patch["row_index"], patch["column_index"]] = fn(patch["value"])
        df.set(df_copy)

    height = 350
    width = "fit-content"

    @render.data_frame
    def grid():
        return render.DataGrid(
            df(),
            width=width,
            height=height,
            filters=input.filters(),
            editable=input.editable(),
            selection_mode=input.selection_mode(),
        )

    @grid.set_patch_fn
    def _(*, patch: render.CellPatch):
        update_data_with_patch(patch)
        return patch["value"]

    @render.data_frame
    def table():
        return render.DataTable(
            df(),
            width=width,
            height=height,
            filters=input.filters(),
            editable=input.editable(),
            selection_mode=input.selection_mode(),
        )

    @table.set_patch_fn
    def _(*, patch: render.CellPatch):
        update_data_with_patch(patch)
        return patch["value"]


app = App(app_ui, server)


```



```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd

from shiny import App, Inputs, render, ui

green_styles = [
    {
        "rows": [2, 4],
        "cols": [2, 4],
        "style": {
            "background-color": "mediumspringgreen",
            "width": "300px",
            "height": "100px",
        },
    }
]

n = 6
df = pd.DataFrame(
    {
        "a": range(n),
        "b": range(n, n * 2),
        "c": range(n * 2, n * 3),
        "d": range(n * 3, n * 4),
        "e": range(n * 4, n * 5),
    }
)

hi_styles = [
    {
        # No `rows` or `cols` means apply to all cells
        "class": "posit-bg",
        "style": {
            "border": "transparent",
            "color": "transparent",
        },
    },
    {
        "rows": [3],
        "cols": [2],
        "class": "posit-blue-bg",
        "style": {
            "width": "100px",
            "height": "75px",
        },
    },
    {
        "cols": [1, 3, 5],
        "class": "posit-blue-bg",
    },
    {
        "cols": [7],
        "rows": [0, 1, 2, 3, 5],
        "class": "posit-orange-bg",
    },
]

n = 7
hi_pd = pd.DataFrame(
    {
        "a": range(n),
        "b": range(n, n * 2),
        "c": range(n * 2, n * 3),
        "d": range(n * 3, n * 4),
        "e": range(n * 4, n * 5),
        "f": range(n * 5, n * 6),
        "g": range(n * 6, n * 7),
        "h": range(n * 7, n * 8),
        "i": range(n * 8, n * 9),
    }
)


app_ui = ui.page_fillable(
    ui.h2("Data Frame with Styles applied to 4 cells"),
    ui.output_data_frame("my_df"),
    ui.hr(),
    ui.tags.style(
        ui.HTML(
            """
        .posit-bg {
            background-color: #242a26 ;
        }
        .posit-blue-bg {
            background-color: #447099 ;
        }
        .posit-orange-bg {
            background-color: #ED642F ;
        }
        """
        )
    ),
    ui.h2(
        "Custom styles applied to all cells within a data frame ", ui.HTML("&#128075;")
    ),
    ui.output_data_frame("hi_df"),
)


def server(input: Inputs):
    @render.data_frame
    def my_df():
        return render.DataGrid(
            df,
            styles=green_styles,
        )

    @render.data_frame
    def hi_df():
        return render.DataGrid(
            hi_pd,
            styles=hi_styles,
        )


app = App(app_ui, server)


```

## Methods

| Name | Description |
| --- | --- |
| [to_payload](#shiny.render.DataGrid.to_payload) | Converts the `DataGrid` object to a payload dictionary. |

### to_payload { #shiny.render.DataGrid.to_payload }

```python
render.DataGrid.to_payload()
```

Converts the `DataGrid` object to a payload dictionary.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[FrameJson](`shiny.render._data_frame_utils._types.FrameJson`)]{.parameter-annotation}</code>

:   The payload dictionary representing the `DataGrid` object.

================
File: render.DataTable.qmd
================
# render.DataTable { #shiny.render.DataTable }

```python
render.DataTable(
    self,
    data,
    *,
    width='fit-content',
    height='500px',
    summary=True,
    filters=False,
    editable=False,
    selection_mode='none',
    styles=None,
    row_selection_mode='deprecated',
)
```

Holds the data and options for a [](:class:`~shiny.render.data_frame`) output, for a
spreadsheet-like view.

This class is used to wrap the returned data frame from a `@render.data_frame`
render function. It allows you to specify options for the data table, such as the
width and height of the table, whether to show a summary message, whether to show
filter inputs, whether the cells are editable, and how the cells are selected.

While there are currently no execution or parameter differences between `DataGrid`
and `DataTable` other than CSS styling in the browser, the two classes are kept
separate to allow for future extensibility.

## Parameters {.doc-section .doc-section-parameters}

<code>[**data**]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   A [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'fit-content\']{.parameter-default}</code>

:   A _maximum_ amount of vertical space for the data table to occupy, in CSS units (e.g. `"400px"`) or as a number, which will be interpreted as pixels. The default is `fit-content`, which sets the table's width according to its contents. Set this to `100%` to use the maximum available horizontal space.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'500px\']{.parameter-default}</code>

:   A _maximum_ amount of vertical space for the data table to occupy, in CSS units (e.g. `"400px"`) or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the table body will scroll. Set the height to `None` to allow the table to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).

<code>[**summary**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If `True` (the default), shows a message like "Viewing rows 1 through 10 of 20" below the grid when not all of the rows are being shown. If `False`, the message is not displayed. You can also specify a string template to customize the message, containing `{start}`, `{end}`, and `{total}` tokens. For example: `"Viendo filas {start} a {end} de {total}"`.

<code>[**filters**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, shows a row of filter inputs below the headers, one for each column.

<code>[**editable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.

<code>[**selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectionModeInput](`shiny.render._data_frame_utils._selection.SelectionModeInput`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'none\']{.parameter-default}</code>

:   Single string or a `set`/`list`/`tuple` of string values to define possible ways to select data within the data frame.  Supported values: * Use `"none"` to disable any cell selections or editing. * Use `"row"` to allow a single row to be selected at a time. * Use `"rows"` to allow multiple rows to be selected by clicking on them individually.  Resolution rules: * If `"none"` is supplied, all other values will be ignored. * If both `"row"` and `"rows"` are supplied, `"row"` will be dropped (supporting `"rows"`).

<code>[**styles**]{.parameter-name} [:]{.parameter-annotation-sep} [[StyleInfo](`shiny.render._data_frame_utils._styles.StyleInfo`) \| [list](`list`)\[[StyleInfo](`shiny.render._data_frame_utils._styles.StyleInfo`)\] \| [StyleFn](`shiny.render._data_frame_utils._styles.StyleFn`)\[[IntoDataFrameT](`shiny.render._data_frame_utils._types.IntoDataFrameT`)\] \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If `styles=None`, no styling will be applied.  Style info object key/value description: * `location`: This value `"body"` and is not required. * `rows`: The row numbers to which the style should be applied. If `None`, the     style will be applied to all rows. * `cols`: The column numbers to which the style should be applied. If `None`,     the style will be applied to all columns. * `style`: A dictionary of CSS properties and values to apply to the selected     rows and columns. Traditional _kebab-cased_ CSS property names (e.g.     `background-color`) will work in addition to _camelCased_ CSS property names     (e.g. `backgroundColor`). * `class`: A string of CSS class names to apply to the selected rows and columns.  If both `style` and `class` are missing or `None`, nothing will be applied. If both `rows` and `cols` are missing or `None`, the style will be applied to the complete data frame.

<code>[**row_selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['deprecated'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'deprecated\']{.parameter-default}</code>

:   Deprecated. Please use `mode={row_selection_mode}_row` instead.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   An object suitable for being returned from a `@render.data_frame`-decorated output function.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.output_data_frame`) - The UI placeholder for a data frame output.
* [](:class:`~shiny.render.data_frame`) - The `render` method for data frames.
* [](:class:`~shiny.render.DataTable`) - A more _grid_ view of the data.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd
import seaborn as sns

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.head_content(
        ui.tags.meta(name="viewport", content="width=device-width, initial-scale=1")
    ),
    ui.input_select(
        "selection_mode",
        "Selection mode",
        {
            "none": "(None)",
            "row": "Single row",
            "rows": "Multiple rows",
        },
        selected="rows",
    ),
    ui.input_switch("filters", "Filters", True),
    ui.input_switch("editable", "Editable", True),
    ui.layout_column_wrap(
        ui.card(
            ui.card_header("Data Frame as ", ui.tags.code("render.DataGrid")),
            ui.output_data_frame("grid"),
        ),
        ui.card(
            ui.card_header("Data Frame as ", ui.tags.code("render.DataTable")),
            ui.output_data_frame("table"),
        ),
        width=1 / 2,
    ),
    class_="p-3",
)


def server(input: Inputs, output: Outputs, session: Session):
    df: reactive.value[pd.DataFrame] = reactive.value(
        sns.load_dataset("anagrams").iloc[:, 1:]
    )

    def update_data_with_patch(patch):
        df_copy = df().copy()
        fn = str if patch["column_index"] == 0 else int
        df_copy.iat[patch["row_index"], patch["column_index"]] = fn(patch["value"])
        df.set(df_copy)

    height = 350
    width = "fit-content"

    @render.data_frame
    def grid():
        return render.DataGrid(
            df(),
            width=width,
            height=height,
            filters=input.filters(),
            editable=input.editable(),
            selection_mode=input.selection_mode(),
        )

    @grid.set_patch_fn
    def _(*, patch: render.CellPatch):
        update_data_with_patch(patch)
        return patch["value"]

    @render.data_frame
    def table():
        return render.DataTable(
            df(),
            width=width,
            height=height,
            filters=input.filters(),
            editable=input.editable(),
            selection_mode=input.selection_mode(),
        )

    @table.set_patch_fn
    def _(*, patch: render.CellPatch):
        update_data_with_patch(patch)
        return patch["value"]


app = App(app_ui, server)


```



```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd

from shiny import App, Inputs, render, ui

green_styles = [
    {
        "rows": [2, 4],
        "cols": [2, 4],
        "style": {
            "background-color": "mediumspringgreen",
            "width": "300px",
            "height": "100px",
        },
    }
]

n = 6
df = pd.DataFrame(
    {
        "a": range(n),
        "b": range(n, n * 2),
        "c": range(n * 2, n * 3),
        "d": range(n * 3, n * 4),
        "e": range(n * 4, n * 5),
    }
)

hi_styles = [
    {
        # No `rows` or `cols` means apply to all cells
        "class": "posit-bg",
        "style": {
            "border": "transparent",
            "color": "transparent",
        },
    },
    {
        "rows": [3],
        "cols": [2],
        "class": "posit-blue-bg",
        "style": {
            "width": "100px",
            "height": "75px",
        },
    },
    {
        "cols": [1, 3, 5],
        "class": "posit-blue-bg",
    },
    {
        "cols": [7],
        "rows": [0, 1, 2, 3, 5],
        "class": "posit-orange-bg",
    },
]

n = 7
hi_pd = pd.DataFrame(
    {
        "a": range(n),
        "b": range(n, n * 2),
        "c": range(n * 2, n * 3),
        "d": range(n * 3, n * 4),
        "e": range(n * 4, n * 5),
        "f": range(n * 5, n * 6),
        "g": range(n * 6, n * 7),
        "h": range(n * 7, n * 8),
        "i": range(n * 8, n * 9),
    }
)


app_ui = ui.page_fillable(
    ui.h2("Data Frame with Styles applied to 4 cells"),
    ui.output_data_frame("my_df"),
    ui.hr(),
    ui.tags.style(
        ui.HTML(
            """
        .posit-bg {
            background-color: #242a26 ;
        }
        .posit-blue-bg {
            background-color: #447099 ;
        }
        .posit-orange-bg {
            background-color: #ED642F ;
        }
        """
        )
    ),
    ui.h2(
        "Custom styles applied to all cells within a data frame ", ui.HTML("&#128075;")
    ),
    ui.output_data_frame("hi_df"),
)


def server(input: Inputs):
    @render.data_frame
    def my_df():
        return render.DataGrid(
            df,
            styles=green_styles,
        )

    @render.data_frame
    def hi_df():
        return render.DataGrid(
            hi_pd,
            styles=hi_styles,
        )


app = App(app_ui, server)


```

## Methods

| Name | Description |
| --- | --- |
| [to_payload](#shiny.render.DataTable.to_payload) | Converts the `DataTable` object to a payload dictionary. |

### to_payload { #shiny.render.DataTable.to_payload }

```python
render.DataTable.to_payload()
```

Converts the `DataTable` object to a payload dictionary.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[FrameJson](`shiny.render._data_frame_utils._types.FrameJson`)]{.parameter-annotation}</code>

:   The payload dictionary representing the `DataTable` object.

================
File: render.download.qmd
================
# render.download { #shiny.render.download }

```python
render.download(
    self,
    fn=None,
    *,
    filename=None,
    media_type=None,
    encoding='utf-8',
    label='Download',
)
```

Decorator to register a function to handle a download.

This decorator is used to register a function that will be called when the user
clicks a download link or button. The decorated function may be sync or async, and
should do one of the following:

* Return a string. This will be assumed to be a filename; Shiny will return this
  file to the browser, and the downloaded file will have the same filename as the
  original, with an inferred mime type. This is the most convenient IF the file
  already exists on disk. But if the function must create a temporary file, then
  this method should not be used, because the temporary file will not be deleted by
  Shiny. Use the `yield` method instead.
* `yield` one or more strings or bytestrings (`b"..."` or
  `io.BytesIO().getvalue()`). If strings are yielded, they&#x27;ll be encoded in UTF-8.
  (This is better for temp files as after you&#x27;re done yielding you can delete the
  temp file, or use a tempfile.TemporaryFile context manager) With this method, it&#x27;s
  important that the `@render.download` decorator have a `filename` argument, as the
  decorated function won&#x27;t help with that.

## Parameters {.doc-section .doc-section-parameters}

<code>[**filename**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Callable](`typing.Callable`)\[\[\], [str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The filename of the download.

<code>[**media_type**]{.parameter-name} [:]{.parameter-annotation-sep} [None \| [str](`str`) \| [Callable](`typing.Callable`)\[\[\], [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The media type of the download.

<code>[**encoding**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'utf-8\']{.parameter-default}</code>

:   The encoding of the download.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Download\']{.parameter-default}</code>

:   (Express only) A label for the button. Defaults to "Download".

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The decorated function.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.download_button`)
* [](:func:`~shiny.ui.download_link`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
import io
import os
from datetime import date
from typing import Any

import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui


def make_example(id: str, label: str, title: str, desc: str, extra: Any = None):
    return ui.column(
        4,
        ui.div(
            {"class": "card mb-4"},
            ui.div(title, class_="card-header"),
            ui.div(
                {"class": "card-body"},
                ui.p(desc, class_="card-text text-muted"),
                extra,
                ui.download_button(id, label, class_="btn-primary"),
            ),
        ),
    )


app_ui = ui.page_fluid(
    ui.row(
        make_example(
            "download1",
            label="Download CSV",
            title="Simple case",
            desc="Downloads a pre-existing file, using its existing name on disk.",
        ),
    ),
    ui.row(
        make_example(
            "download2",
            label="Download plot",
            title="Dynamic data generation",
            desc="Downloads a PNG that's generated on the fly.",
            extra=[
                ui.input_text("title", "Plot title", "Random scatter plot"),
                ui.input_slider(
                    "num_points", "Number of data points", min=1, max=100, value=50
                ),
            ],
        ),
    ),
    ui.row(
        make_example(
            "download3",
            "Download",
            "Dynamic filename",
            "Demonstrates that filenames can be generated on the fly (and use Unicode characters!).",
        ),
    ),
    ui.row(
        make_example(
            "download4",
            "Download",
            "Failed downloads",
            "Throws an error in the download handler, download should not succeed.",
        ),
    ),
    ui.row(
        make_example(
            "download5",
            "Download",
            "Undefined download",
            "This button doesn't have corresponding server code registered to it, download should result in 404 error",
        ),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.download()
    def download1():
        """
        This is the simplest case. The implementation simply returns the name of a file.
        Note that the function name (`download1`) determines which download_button()
        corresponds to this function.
        """

        path = os.path.join(os.path.dirname(__file__), "mtcars.csv")
        return path

    @render.download(filename="image.png")
    def download2():
        """
        Another way to implement a file download is by yielding bytes; either all at
        once, like in this case, or by yielding multiple times. When using this
        approach, you should pass a filename argument to @render.download, which
        determines what the browser will name the downloaded file.
        """

        print(input.num_points())
        x = np.random.uniform(size=input.num_points())
        y = np.random.uniform(size=input.num_points())
        plt.figure()
        plt.scatter(x, y)
        plt.title(input.title())
        with io.BytesIO() as buf:
            plt.savefig(buf, format="png")
            yield buf.getvalue()

    @render.download(
        filename=lambda: f"新型-{date.today().isoformat()}-{np.random.randint(100, 999)}.csv"
    )
    async def download3():
        await asyncio.sleep(0.25)
        yield "one,two,three\n"
        yield "新,1,2\n"
        yield "型,4,5\n"

    @output(id="download4")
    @render.download(filename="failuretest.txt")
    async def _():
        yield "hello"
        raise Exception("This error was caused intentionally")


app = App(app_ui, server)


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: render.express.qmd
================
# render.express { #shiny.render.express }

```python
render.express(
    self,
    _fn=None,
    *,
    inline=False,
    container=None,
    fill=False,
    fillable=False,
    **kwargs,
)
```

Reactively render HTML content with output captured as in Shiny Express

This is similar to [](:class:`~shiny.render.ui`), except that [](:class:`~shiny.render.ui`)
uses the return value from the the decorated function, whereas this function works
like Shiny Express: as it executes each line of the decorated function, it calls
:func:`~sys.displayhook()` on the result. This has the effect of &quot;capturing&quot; the
output of each line.

This decorator can be thought of as a combination of [](:class:`~shiny.render.ui`) (for
rendering and sending the dynamic UI to the client), and `~shiny.express.expressify`
(for capturing the output of each line).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns `None`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.render.ui`)
* [](:func:`~shiny.ui.output_ui`)
* [](:func:`~shiny.express.expressify`)
* [](:func:`~shiny.express.ui.hold`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.input_text("name", "Name", "Socrates"),
    ui.input_text("years", "Years", "470-399 BC"),
    ui.output_ui("person"),
)


def server(input, output, session):

    @render.express
    def person():
        from shiny.express import ui

        with ui.card(class_="mt-3"):
            ui.h3(input.name())
            input.years()


app = App(app_ui, server)


```

================
File: render.image.qmd
================
# render.image { #shiny.render.image }

```python
render.image(self, _fn=None, *, delete_file=False)
```

Reactively render a image file as an HTML image.

## Parameters {.doc-section .doc-section-parameters}

<code>[**delete_file**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the image file will be deleted after rendering.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns an [](:func:`~shiny.types.ImgData`) object.

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.ui.output_image`) container (see [](:func:`~shiny.ui.output_image`)
for example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.output_image`)
* [](:class:`~shiny.types.ImgData`)
* [](:class:`~shiny.render.plot`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui
from shiny.types import ImgData

app_ui = ui.page_fluid(ui.output_image("image"))


def server(input: Inputs, output: Outputs, session: Session):
    @render.image
    def image():
        from pathlib import Path

        dir = Path(__file__).resolve().parent
        img: ImgData = {"src": str(dir / "posit-logo.png"), "width": "100px"}
        return img


app = App(app_ui, server)


## file: posit-logo.png
## type: binary


```

================
File: render.plot.qmd
================
# render.plot { #shiny.render.plot }

```python
render.plot(
    self,
    _fn=None,
    *,
    alt=None,
    width=MISSING,
    height=MISSING,
    **kwargs,
)
```

Reactively render a plot object as an HTML image.

## Parameters {.doc-section .doc-section-parameters}

<code>[**alt**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Alternative text for the image if it cannot be displayed or viewed (i.e., the user uses a screen reader).

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   Width of the plot in pixels. If ``None`` or ``MISSING``, the width will be determined by the size of the corresponding [](:func:`~shiny.ui.output_plot`). (You should not need to use this argument in most Shiny apps--set the desired width on [](:func:`~shiny.ui.output_plot`) instead.)

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   Height of the plot in pixels. If ``None`` or ``MISSING``, the height will be determined by the size of the corresponding [](:func:`~shiny.ui.output_plot`). (You should not need to use this argument in most Shiny apps--set the desired height on [](:func:`~shiny.ui.output_plot`) instead.)

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional keyword arguments passed to the relevant method for saving the image (e.g., for matplotlib, arguments to ``savefig()``; for PIL and plotnine, arguments to ``save()``).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns any of the following:  1. A [](:class:`matplotlib.figure.Figure`) instance. 2. An [](:class:`matplotlib.artist.Artist`) instance. 3. A list/tuple of Figure/Artist instances. 4. An object with a 'figure' attribute pointing to a    [](:class:`matplotlib.figure.Figure`) instance. 5. A [](:class:`PIL.Image.Image`) instance.

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [It's also possible to use the ``matplotlib.pyplot`` interface; in that case, your]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [function should just call pyplot functions and not return anything. (Note that if]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [the decorated function is async, then it's not safe to use pyplot. Shiny will detect]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [this case and throw an error asking you to use matplotlib's object-oriented]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [interface instead.)]{.parameter-annotation}</code>

:   

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.ui.output_plot`) container (see [](:func:`~shiny.ui.output_plot`) for
example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.output_plot`)
* [](:class:`~shiny.render.image`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_slider(
        "n", "input_slider()", min=10, max=100, value=50, step=5, animate=True
    ),
    ui.output_plot("p"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot
    def p():
        np.random.seed(19680801)
        x_rand = 100 + 15 * np.random.randn(437)
        fig, ax = plt.subplots()
        ax.hist(x_rand, int(input.n()), density=True)
        return fig


app = App(app_ui, server)


```

================
File: render.table.qmd
================
# render.table { #shiny.render.table }

```python
render.table(
    self,
    _fn=None,
    *,
    index=False,
    classes='table shiny-table w-auto',
    border=0,
    **kwargs,
)
```

Reactively render a pandas ``DataFrame`` object (or similar) as a basic HTML
table.

Consider using [](:class:`~shiny.render.data_frame`) instead of this renderer, as
it provides high performance virtual scrolling, built-in filtering and sorting,
and a better default appearance. This renderer may still be helpful if you
use pandas styling features that are not currently supported by
[](:class:`~shiny.render.data_frame`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**index**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to print index (row) labels. (Ignored for pandas [](:class:`~pandas.io.formats.style.Styler`) objects; call ``style.hide(axis="index")`` from user code instead.)

<code>[**classes**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'table shiny-table w-auto\']{.parameter-default}</code>

:   CSS classes (space separated) to apply to the resulting table. By default, we use `table shiny-table w-auto` which is designed to look reasonable with Bootstrap 5. (Ignored for pandas [](:class:`~pandas.io.formats.style.Styler`) objects; call ``style.set_table_attributes('class="dataframe table shiny-table w-auto"')`` from user code instead.)

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional keyword arguments passed to ``pandas.DataFrame.to_html()`` or ``pandas.io.formats.style.Styler.to_html()``.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns any of the following:  1. A pandas [](:class:`~pandas.DataFrame`) object. 2. A pandas [](:class:`~pandas.io.formats.style.Styler`) object. 3. Any object that has a `.to_pandas()` method (e.g., a Polars data frame or    Arrow table).

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.ui.output_table`) container (see [](:func:`~shiny.ui.output_table`)
for example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.output_table`) for the corresponding UI component to this render function.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pathlib

import pandas as pd

from shiny import App, Inputs, Outputs, Session, render, ui

dir = pathlib.Path(__file__).parent
mtcars = pd.read_csv(dir / "mtcars.csv")


app_ui = ui.page_fluid(
    ui.input_checkbox("highlight", "Highlight min/max values"),
    ui.output_table("result"),
    # Legend
    ui.panel_conditional(
        "input.highlight",
        ui.panel_absolute(
            "Yellow is maximum, grey is minimum",
            bottom="6px",
            right="6px",
            class_="p-1 bg-light border",
        ),
    ),
    class_="p-3",
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.table
    def result():
        if not input.highlight():
            # If we're not highlighting values, we can simply
            # return the pandas data frame as-is; @render.table
            # will call .to_html() on it.
            return mtcars
        else:
            # We need to use the pandas Styler API. The default
            # formatting options for Styler are not the same as
            # DataFrame.to_html(), so we set a few options to
            # make them match.
            return (
                mtcars.style.set_table_attributes(
                    'class="dataframe shiny-table table w-auto"'
                )
                .hide(axis="index")
                .format(
                    {
                        "mpg": "{0:0.1f}",
                        "disp": "{0:0.1f}",
                        "drat": "{0:0.2f}",
                        "wt": "{0:0.3f}",
                        "qsec": "{0:0.2f}",
                    }
                )
                .set_table_styles(
                    [dict(selector="th", props=[("text-align", "right")])]
                )
                .highlight_min(color="silver")
                .highlight_max(color="yellow")
            )


app = App(app_ui, server)


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: render.text.qmd
================
# render.text { #shiny.render.text }

```python
render.text(self, _fn=None, *, inline=False)
```

Reactively render text.

When used in Shiny Express applications, this defaults to displaying the text as
normal text on the web page. When used in Shiny Core applications, this should be
paired with [](:func:`~shiny.ui.output_text`) in the UI.

## Parameters {.doc-section .doc-section-parameters}

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   (Express only). If ``True``, the result is displayed inline. (This argument is passed to [](:func:`~shiny.ui.output_text`).)

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns a string.

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.ui.output_text`) container (see [](:func:`~shiny.ui.output_text`) for
example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.code`)
* [](:func:`~shiny.ui.output_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_text("txt", "Enter the text to display below:", "delete me"),
    ui.row(
        ui.column(6, ui.code("ui.output_text()"), ui.output_text("text")),
        ui.column(
            6,
            ui.code("ui.output_text_verbatim(placeholder=True)"),
            ui.output_text_verbatim("verb", placeholder=True),
        ),
    ),
    ui.row(
        ui.column(6),
        ui.column(
            6,
            ui.code("ui.output_text_verbatim(placeholder=False)"),
            ui.output_text_verbatim("verb_no_placeholder", placeholder=False),
        ),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def text():
        return input.txt()

    @render.text
    def verb():
        return input.txt()

    @render.text
    def verb_no_placeholder():
        return input.txt()


app = App(app_ui, server)


```

================
File: render.transformer.output_transformer.qmd
================
# render.transformer.output_transformer { #shiny.render.transformer.output_transformer }

```python
render.transformer.output_transformer(
    transform_fn=None,
    *,
    default_ui=None,
    default_ui_passthrough_args=None,
)
```

Deprecated. Please use [](:class:`~shiny.render.renderer.Renderer`) instead.

Output transformer decorator.

This decorator method is a convenience method to generate the appropriate types and
internal implementation for an overloaded renderer method. This method will provide
you with all the necessary types to define two different overloads: one for when the
decorator is called without parentheses and another for when it is called with
parentheses where app authors can pass in parameters to the renderer.

## Transform function {.doc-section .doc-section-transform-function}


The output renderer's transform function (`transform_fn`) is the key building block
for `output_transformer`. It is a package author function that calls the app-defined
output value function (`value_fn`) transforms the result of type `IT` into type
`OT`.

The transform function is supplied meta output information, the (app-supplied) value
function, and any keyword arguments supplied to the output tranformer decorator:

* The first parameter to the handler function has the class
  [](:class:`~shiny.render.transformer.TransformerMetadata`) and is typically called
  `_meta`. This information gives context to the handler while trying to
  resolve the app-supplied value function (typically called `_fn`).
* The second parameter is the app-defined output value function (e.g. `_fn`). It's
  return type (`IT`) determines what types can be returned by the app-supplied
  output value function. For example, if `_fn` has the type `ValueFnAsync[str | None]`,
  both the `str` and `None` types are allowed to be returned from the app-supplied
  output value function.
* The remaining parameters are the keyword arguments (e.g. `alt:Optional[str] =
  None` or `**kwargs: object`) that app authors may supply to the renderer (when the
  renderer decorator is called with parentheses). Variadic positional parameters
  (e.g. `*args`) are not allowed. All keyword arguments should have a type and
  default value. No default value is needed for keyword arguments that are passed
  through (e.g. `**kwargs: Any`).

The transform function's return type (`OT`) determines the output type of the
[](:class:`~shiny.render.transformer.OutputRenderer`). Note that in many cases (but not
all!) `IT` and `OT` will be the same. The `None` type should typically be defined in
both `IT` and `OT`. If `IT` allows for `None` values, it (typically) signals that
nothing should be rendered. If `OT` allows for `None` and returns a `None` value,
shiny will not render the output.

## Notes {.doc-section .doc-section-notes}


* When defining the renderer decorator overloads, if you have extra parameters of
  `**kwargs: object`, you may get a type error about incompatible signatures. To fix
  this, you can use `**kwargs: Any` instead or add `_fn: None = None` as the first
  parameter in the overload containing the `**kwargs: object`.

* The `transform_fn` should be defined as an asynchronous function but should only
  asynchronously yield (i.e. use `await` syntax) when the value function (the second
  parameter of type `ValueFn[IT]`) is awaitable. If the value function is not
  awaitable (i.e. it is a _synchronous_ function), then the execution of the
  transform function should also be synchronous.

## Parameters {.doc-section .doc-section-parameters}

<code>[**transform_fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[TransformFn](`shiny.render.transformer._transformer.TransformFn`)\[[IT](`shiny.render.transformer._transformer.IT`), [P](`shiny.render.transformer._transformer.P`), [OT](`shiny.render.transformer._transformer.OT`)\] \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Asynchronous function used to determine the app-supplied output value function return type (`IT`), the transformed type (`OT`), and the keyword arguments (`P`) app authors can supply to the renderer decorator.

<code>[**default_ui**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[DefaultUIFn](`shiny.render.renderer._renderer.DefaultUIFn`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Optional function that takes an `output_id` string and returns a Shiny UI object that can be used to display the output. This allows render functions to respond to `_repr_html_` method calls in environments like Jupyter.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[OutputTransformer](`shiny.render.transformer._transformer.OutputTransformer`)\[[IT](`shiny.render.transformer._transformer.IT`), [OT](`shiny.render.transformer._transformer.OT`), [P](`shiny.render.transformer._transformer.P`)\] \| [Callable](`typing.Callable`)\[\[[TransformFn](`shiny.render.transformer._transformer.TransformFn`)\[[IT](`shiny.render.transformer._transformer.IT`), [P](`shiny.render.transformer._transformer.P`), [OT](`shiny.render.transformer._transformer.OT`)\]\], [OutputTransformer](`shiny.render.transformer._transformer.OutputTransformer`)\[[IT](`shiny.render.transformer._transformer.IT`), [OT](`shiny.render.transformer._transformer.OT`), [P](`shiny.render.transformer._transformer.P`)\]\]]{.parameter-annotation}</code>

:   An [](:class:`~shiny.render.transformer.OutputTransformer`) object that can be used to define two overloads for your renderer function. One overload is for when the renderer is called without parentheses and the other is for when the renderer is called with parentheses.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from __future__ import annotations

from typing import Literal, overload

from shiny import App, Inputs, Outputs, Session, ui
from shiny.render.transformer import (
    TransformerMetadata,
    ValueFn,
    output_transformer,
    resolve_value_fn,
)

#######
# DEPRECATED. Please see `shiny.render.renderer.Renderer` for the latest API.
# This example is kept for backwards compatibility.
#
#
# Package authors can create their own output transformer methods by leveraging
# `output_transformer` decorator.
#
# The transformer is kept simple for demonstration purposes, but it can be much more
# complex (e.g. shiny.render.plotly)
#######


# Create renderer components from the async handler function: `capitalize_components()`
@output_transformer()
async def CapitalizeTransformer(
    # Contains information about the render call: `name` and `session`
    _meta: TransformerMetadata,
    # The app-supplied output value function
    _fn: ValueFn[str | None],
    *,
    # Extra parameters that app authors can supply to the render decorator
    # (e.g. `@render_capitalize(to="upper")`)
    to: Literal["upper", "lower"] = "upper",
) -> str | None:
    # Get the value
    value = await resolve_value_fn(_fn)
    # Equvalent to:
    # if shiny.render.transformer.is_async_callable(_fn):
    #     value = await _fn()
    # else:
    #     value = _fn()

    # Render nothing if `value` is `None`
    if value is None:
        return None

    if to == "upper":
        return value.upper()
    if to == "lower":
        return value.lower()
    raise ValueError(f"Invalid value for `to`: {to}")


# First, create an overload where users can supply the extra parameters.
# Example of usage:
# ```
# @render_capitalize(to="upper")
# def value():
#     return input.caption()
# ```
# Note: Return type is `OutputRendererDecorator`
@overload
def render_capitalize(
    *,
    to: Literal["upper", "lower"] = "upper",
) -> CapitalizeTransformer.OutputRendererDecorator: ...


# Second, create an overload where users are not using parentheses to the method.
# While it doesn't look necessary, it is needed for the type checker.
# Example of usage:
# ```
# @render_capitalize
# def value():
#     return input.caption()
# ```
# Note: `_fn` type is the transformer's `ValueFn`
# Note: Return type is the transformer's `OutputRenderer`
@overload
def render_capitalize(
    _fn: CapitalizeTransformer.ValueFn,
) -> CapitalizeTransformer.OutputRenderer: ...


# Lastly, implement the renderer.
# Note: `_fn` type is the transformer's `ValueFn` or `None`
# Note: Return type is the transformer's `OutputRenderer` or `OutputRendererDecorator`
def render_capitalize(
    _fn: CapitalizeTransformer.ValueFn | None = None,
    *,
    to: Literal["upper", "lower"] = "upper",
) -> (
    CapitalizeTransformer.OutputRenderer | CapitalizeTransformer.OutputRendererDecorator
):
    return CapitalizeTransformer(
        _fn,
        CapitalizeTransformer.params(to=to),
    )


#######
# End of package author code
#######

app_ui = ui.page_fluid(
    ui.h1("Capitalization renderer"),
    ui.input_text("caption", "Caption:", "Data summary"),
    "Renderer called with out parentheses:",
    ui.output_text_verbatim("no_parens"),
    "To upper:",
    ui.output_text_verbatim("to_upper"),
    "To lower:",
    ui.output_text_verbatim("to_lower"),
)


def server(input: Inputs, output: Outputs, session: Session):
    # Without parentheses
    @render_capitalize
    def no_parens():
        return input.caption()

    # With parentheses. Equivalent to `@render_capitalize()`
    @render_capitalize(to="upper")
    def to_upper():
        return input.caption()

    @render_capitalize(to="lower")
    # Works with async output value functions
    async def to_lower():
        return input.caption()


app = App(app_ui, server)


```

================
File: render.transformer.resolve_value_fn.qmd
================
# render.transformer.resolve_value_fn { #shiny.render.transformer.resolve_value_fn }

```python
render.transformer.resolve_value_fn(value_fn)
```

Resolve the value function

This function is used to resolve the value function (`value_fn`) to an object of
type `IT`. If the value function is asynchronous, it will be awaited. If the value
function is synchronous, it will be called.

While always using an async method within an output transform function is not
appropriate, this method may be safely used to avoid boilerplate.

Replace this:
```python
if is_async_callable(_fn):
    x = await _fn()
else:
    x = cast(ValueFnSync[IT], _fn)()
```

With this:
```python
x = await resolve_value_fn(_fn)
```

## Parameters {.doc-section .doc-section-parameters}

<code>[**value_fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[ValueFn](`shiny.render.transformer._transformer.ValueFn`)\[[IT](`shiny.render.transformer._transformer.IT`)\]]{.parameter-annotation}</code>

:   App-supplied output value function which returns type `IT`. This function can be synchronous or asynchronous.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[IT](`shiny.render.transformer._transformer.IT`)]{.parameter-annotation}</code>

:   The resolved value from `value_fn`.

================
File: render.ui.qmd
================
# render.ui { #shiny.render.ui }

```python
render.ui(self, _fn=None)
```

Reactively render HTML content.

Note: If you want to write your function with Shiny Express syntax, where the UI
components are automatically captured as the code is evaluated, use
[](:func:`~shiny.express.render.express`) instead of this function.

This function is used to render HTML content, but it requires that the funciton
returns the content, using Shiny Core syntax.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns an object of type [](:class:`~htmltools.TagChild`).

## Tips {.doc-section .doc-section-tips}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.ui.output_ui`) container (see [](:func:`~shiny.ui.output_ui`) for
example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.render.express`)
* [](:func:`~shiny.express.expressify`)
* [](:func:`~shiny.ui.output_ui`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_action_button("add", "Add more controls"),
    ui.output_ui("moreControls"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    @reactive.event(input.add)
    def moreControls():
        return ui.TagList(
            ui.input_slider("n", "N", min=1, max=1000, value=500),
            ui.input_text("label", "Label"),
        )


app = App(app_ui, server)


```

================
File: Renderer.qmd
================
# Create output renderers

Package author methods for creating new output renderers.

# render.renderer.Renderer { #shiny.render.renderer.Renderer }

```python
render.renderer.Renderer(self, _fn=None)
```

Output renderer class

An output renderer is a class that will take in a callable function (value
function), transform the returned value into a JSON-serializable object, and send
the result to the browser.

When the value function is received, the renderer will be auto registered with
the current session&#x27;s `Output` class, hooking it into Shiny&#x27;s reactive graph. By
auto registering as an `Output`, it allows for App authors to skip adding `@output`
above the renderer. (If programmatic `id` is needed, `@output(id="foo")` can still be
used!)

There are two methods that must be implemented by the subclasses:
`.auto_output_ui(self)` and either `.transform(self, value: IT)` or `.render(self)`.

* In Express mode, the output renderer will automatically render its UI via
  `.auto_output_ui(self)`. This helper method allows App authors to skip adding a
  `ui.output_*` function to their UI, making Express mode even more concise. If more
  control is needed over the UI, `@ui.hold` can be used to suppress the auto
  rendering of the UI. When using `@ui.hold` on a renderer, the renderer&#x27;s UI will
  need to be added to the app to connect the rendered output to Shiny&#x27;s reactive
  graph.
* The `render` method is responsible for executing the value function and performing
  any transformations for the output value to be JSON-serializable (`None` is a
  valid value!). To avoid the boilerplate of resolving the value function and
  returning early if `None` is received, package authors may implement the
  `.transform(self, value: IT)` method. The `transform` method&#x27;s sole job is to
  _transform_ non-`None` values into an object that is JSON-serializable.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from __future__ import annotations

# Import the custom renderer implementations
from renderers import render_capitalize, render_upper

from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(
    ui.h1("Capitalization renderer"),
    ui.input_text("caption", "Caption:", "Data summary"),
    "@render_upper: ",
    ui.output_text_verbatim("upper", placeholder=True),
    "@render_upper(): ",
    ui.output_text_verbatim("upper_with_paren", placeholder=True),
    "@render_capitalize: ",
    ui.output_text_verbatim("cap_upper", placeholder=True),
    "@render_capitalize(to='lower'): ",
    ui.output_text_verbatim("cap_lower", placeholder=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    # Hovering over `@render_upper` will display the class documentation
    @render_upper
    def upper():
        return input.caption()

    # Hovering over `@render_upper` will display the class documentation as there is no
    # `__init__()` documentation
    @render_upper()
    def upper_with_paren():
        return input.caption()

    # Hovering over `@render_capitalize` will display the class documentation
    @render_capitalize
    def cap_upper():
        return input.caption()

    # Hovering over `@render_capitalize` will display the `__init__()` documentation
    @render_capitalize(to_case="lower")
    def cap_lower():
        return input.caption()


app = App(app_ui, server)


## file: renderers.py
from __future__ import annotations

from typing import Literal, Optional

from shiny.render.renderer import Renderer, ValueFn
from shiny.ui import output_text_verbatim


class render_capitalize(Renderer[str]):
    # The documentation for the class will be displayed when the user hovers over the
    # decorator when **no** parenthesis are used. Ex: `@render_capitalize`
    # If no documentation is supplied to the `__init__()` method, then this
    # documentation will be displayed when parenthesis are used on the decorator.
    """
    Render capitalize class documentation goes here.
    """

    to_case: Literal["upper", "lower", "ignore"]
    """
    The case to render the value in.
    """
    placeholder: bool
    """
    Whether to render a placeholder value. (Defaults to `True`)
    """

    def auto_output_ui(self):
        """
        Express UI for the renderer
        """
        return output_text_verbatim(self.output_id, placeholder=True)

    def __init__(
        self,
        _fn: Optional[ValueFn[str]] = None,
        *,
        to_case: Literal["upper", "lower", "ignore"] = "upper",
        placeholder: bool = True,
    ) -> None:
        # If a different set of documentation is supplied to the `__init__` method,
        # then this documentation will be displayed when parenthesis are used on the decorator.
        # Ex: `@render_capitalize()`
        """
        Render capitalize documentation goes here.

        It is a good idea to talk about parameters here!

##         Parameters {.doc-section .doc-section---------parameters}

        to_case
            The case to render the value. (`"upper"`)

            Options:
            - `"upper"`: Render the value in upper case.
            - `"lower"`: Render the value in lower case.
            - `"ignore"`: Do not alter the case of the value.

        placeholder
            Whether to render a placeholder value. (`True`)
        """
        # Do not pass params
        super().__init__(_fn)
        self.to_case = to_case
        self.placeholder = placeholder

    async def render(self) -> str | None:
        value = await self.fn()
        if value is None:
            # If `None` is returned, then do not render anything.
            return None

        ret = str(value)
        if self.to_case == "upper":
            return ret.upper()
        if self.to_case == "lower":
            return ret.lower()
        if self.to_case == "ignore":
            return ret
        raise ValueError(f"Invalid value for `to_case`: {self.to_case}")


class render_upper(Renderer[str]):
    """
    Minimal capitalize string transformation renderer.

    No parameters are supplied to this renderer. This allows us to skip the `__init__()`
    method and `__init__()` documentation. If you hover over this decorator with and
    without parenthesis, you will see this documentation in both situations.

    Note: This renderer is equivalent to `render_capitalize(to="upper")`.
    """

    def auto_output_ui(self):
        """
        Express UI for the renderer
        """
        return output_text_verbatim(self.output_id, placeholder=True)

    async def transform(self, value: str) -> str:
        """
        Transform the value to upper case.

        This method is shorthand for the default `render()` method. It is useful to
        transform non-`None` values. (Any `None` value returned by the app author will
        be forwarded to the browser.)

##         Parameters {.doc-section .doc-section---------parameters}

        value
            The a non-`None` value to transform.

##         Returns {.doc-section .doc-section---------returns}

        str
            The transformed value. (Must be a subset of `Jsonifiable`.)
        """

        return str(value).upper()


```

## Attributes

| Name | Description |
| --- | --- |
| [fn](#shiny.render.renderer._renderer.Renderer.fn) | App-supplied output value function which returns type `IT`. This function is always asyncronous as the original app-supplied function possibly wrapped to execute asynchonously. |
| [output_id](#shiny.render.renderer._renderer.Renderer.output_id) | Output function name or ID (provided to `@output(id=)`). |

## Methods

| Name | Description |
| --- | --- |
| [auto_output_ui](#shiny.render.renderer.Renderer.auto_output_ui) | Express mode method that automatically generates the output's UI. |
| [render](#shiny.render.renderer.Renderer.render) | Renders the output value function. |
| [transform](#shiny.render.renderer.Renderer.transform) | Transform an output value into a JSON-serializable object. |

### auto_output_ui { #shiny.render.renderer.Renderer.auto_output_ui }

```python
render.renderer.Renderer.auto_output_ui()
```

Express mode method that automatically generates the output&#x27;s UI.

### render { #shiny.render.renderer.Renderer.render }

```python
render.renderer.Renderer.render()
```

Renders the output value function.

This method is called when the renderer is requested to render its output.

The `Renderer`&#x27;s `render()` implementation goes as follows:

* Execute the value function supplied to the renderer.
* If the output value is `None`, `None` will be returned.
* If the output value is not `None`, the `.transform()` method will be called to
  transform the value into a JSON-serializable object.

When overwriting this method in a subclass, the implementation should execute
the value function `.fn` and return the transformed value (which is
JSON-serializable).

### transform { #shiny.render.renderer.Renderer.transform }

```python
render.renderer.Renderer.transform(value)
```

Transform an output value into a JSON-serializable object.

When subclassing `Renderer`, this method can be implemented to transform
non-`None` values into a JSON-serializable object.

If a `.render()` method is not implemented, this method **must** be implemented.
When the output is requested, the `Renderer`&#x27;s `.render()` method will execute
the output value function, return `None` if the value is `None`, and call this
method to transform the value into a JSON-serializable object.

Note, only one of `.transform()` or `.render()` should be implemented.

# render.renderer.Jsonifiable { #shiny.render.renderer.Jsonifiable }

`render.renderer.Jsonifiable`



# render.renderer.ValueFn { #shiny.render.renderer.ValueFn }

`render.renderer.ValueFn`

App-supplied output value function which returns type `IT` or `None`. This function can
be synchronous or asynchronous.

# render.renderer.AsyncValueFn { #shiny.render.renderer.AsyncValueFn }

```python
render.renderer.AsyncValueFn(self, fn)
```

App-supplied output value function which returns type `IT`.
asynchronous.

Type definition: `Callable[[], Awaitable[IT]]`

## Methods

| Name | Description |
| --- | --- |
| [get_async_fn](#shiny.render.renderer.AsyncValueFn.get_async_fn) | Return the async value function. |
| [get_sync_fn](#shiny.render.renderer.AsyncValueFn.get_sync_fn) | Retrieve the original, synchronous value function function. |
| [is_async](#shiny.render.renderer.AsyncValueFn.is_async) | Was the original function asynchronous? |

### get_async_fn { #shiny.render.renderer.AsyncValueFn.get_async_fn }

```python
render.renderer.AsyncValueFn.get_async_fn()
```

Return the async value function.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], [Awaitable](`typing.Awaitable`)\[[IT](`shiny.render.renderer._renderer.IT`) \| None\]\]]{.parameter-annotation}</code>

:   Async wrapped value function supplied to the `AsyncValueFn` constructor.

### get_sync_fn { #shiny.render.renderer.AsyncValueFn.get_sync_fn }

```python
render.renderer.AsyncValueFn.get_sync_fn()
```

Retrieve the original, synchronous value function function.

If the original function was asynchronous, a runtime error will be thrown.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], [IT](`shiny.render.renderer._renderer.IT`) \| None\]]{.parameter-annotation}</code>

:   Original, synchronous function supplied to the `AsyncValueFn` constructor.

### is_async { #shiny.render.renderer.AsyncValueFn.is_async }

```python
render.renderer.AsyncValueFn.is_async()
```

Was the original function asynchronous?

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   Whether the original function is asynchronous.

# render.renderer.RendererT { #shiny.render.renderer.RendererT }

`render.renderer.RendererT`

Generic output renderer class to pass the original Renderer subclass through a decorator
function.

When accepting and returning a `Renderer` class, utilize this TypeVar as to not reduce
the variable type to `Renderer[Any]`

================
File: req.qmd
================
# req { #shiny.req }

```python
req(*args, cancel_output=False)
```

Throw a silent exception for falsy values.

This is a convenient shorthand for throwing [](:class:`~shiny.types.SilentException`) /
[](:class:`~shiny.types.SilentCancelOutputException`) if any of the arguments are falsy.

The term &quot;falsy&quot; generally indicates that a value is considered `False` when
encountered in a logical context. We use the term a little loosely here; our usage
tries to match the intuitive notions of &quot;Is this value missing or available?&quot;, or
&quot;Has the user provided an answer?&quot;, or in the case of action buttons, &quot;Has the
button been clicked?&quot;. So `False`, `None`, `0`, and `""` would be examples of Falsy
values.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny._validation.T`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Any number of arguments to check.

<code>[**cancel_output**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [Literal](`typing.Literal`)\['progress'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, throw [](:class:`~shiny.types.SilentCancelOutputException`) instead of [](:class:`~shiny.types.SilentException`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny._validation.T`) \| None]{.parameter-annotation}</code>

:   The first argument. If no arguments are provided, returns ``None``.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, req, ui
from shiny.types import SafeException

app_ui = ui.page_fluid(
    ui.input_action_button("safe", "Throw a safe error"),
    ui.output_ui("safe"),
    ui.input_action_button("unsafe", "Throw an unsafe error"),
    ui.output_ui("unsafe"),
    ui.input_text(
        "txt",
        "Enter some text below, then remove it. Notice how the text is never fully removed.",
    ),
    ui.output_ui("txt_out"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.calc
    def safe_click():
        req(input.safe())
        return input.safe()

    @render.ui
    def safe():
        raise SafeException(f"You've clicked {str(safe_click())} times")

    @render.ui
    def unsafe():
        req(input.unsafe())
        raise Exception(f"Super secret number of clicks: {str(input.unsafe())}")

    @reactive.effect
    def _():
        req(input.unsafe())
        print("unsafe clicks:", input.unsafe())
        # raise Exception("Observer exception: this should cause a crash")

    @render.ui
    def txt_out():
        req(input.txt(), cancel_output=True)
        return input.txt()


app = App(app_ui, server)
app.sanitize_errors = True


```

================
File: run_app.qmd
================
# run_app { #shiny.run_app }

```python
run_app(
    app='app:app',
    host='127.0.0.1',
    port=8000,
    *,
    autoreload_port=0,
    reload=False,
    reload_dirs=None,
    reload_includes=RELOAD_INCLUDES_DEFAULT,
    reload_excludes=RELOAD_EXCLUDES_DEFAULT,
    ws_max_size=16777216,
    log_level=None,
    app_dir='.',
    factory=False,
    launch_browser=False,
    dev_mode=True,
    **kwargs,
)
```

Starts a Shiny app. Press ``Ctrl+C`` (or ``Ctrl+Break`` on Windows) to stop the app.

## Parameters {.doc-section .doc-section-parameters}

<code>[**app**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [shiny](`shiny`).[App](`shiny.App`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'app:app\']{.parameter-default}</code>

:   The app to run. The default, ``app:app``, represents the "usual" case where the application is named ``app`` inside a ``app.py`` file within the current working directory. In other cases, the app location can be specified as a ``<module>:<attribute>`` string where the ``:<attribute>`` is only necessary if the application is named something other than ``app``. Note that ``<module>`` can be a relative path to a ``.py`` file or a directory (with an ``app.py`` file inside of it); and in this case, the relative path is resolved relative to the ``app_dir`` directory.

<code>[**host**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'127.0.0.1\']{.parameter-default}</code>

:   The address that the app should listen on.

<code>[**port**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [8000]{.parameter-default}</code>

:   The port that the app should listen on. Set to 0 to use a random port.

<code>[**autoreload_port**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   The port that should be used for an additional websocket that is used to support hot-reload. Set to 0 to use a random port.

<code>[**reload**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Enable auto-reload.

<code>[**reload_dirs**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A list of directories (in addition to the app directory) to watch for changes that will trigger an app reload.

<code>[**reload_includes**]{.parameter-name} [:]{.parameter-annotation-sep} [[list](`list`)\[[str](`str`)\] \| [tuple](`tuple`)\[[str](`str`), ...\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [RELOAD_INCLUDES_DEFAULT]{.parameter-default}</code>

:   List or tuple of file globs to indicate which files should be monitored for changes. Can be combined with `reload_excludes`.

<code>[**reload_excludes**]{.parameter-name} [:]{.parameter-annotation-sep} [[list](`list`)\[[str](`str`)\] \| [tuple](`tuple`)\[[str](`str`), ...\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [RELOAD_EXCLUDES_DEFAULT]{.parameter-default}</code>

:   List or tuple of file globs to indicate which files should be excluded from reload monitoring. Can be combined with `reload_includes`

<code>[**ws_max_size**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [16777216]{.parameter-default}</code>

:   WebSocket max size message in bytes.

<code>[**log_level**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Log level.

<code>[**app_dir**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'.\']{.parameter-default}</code>

:   The directory to look for ``app`` under (by adding this to the ``PYTHONPATH``).

<code>[**factory**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Treat ``app`` as an application factory, i.e. a () -> <ASGI app> callable.

<code>[**launch_browser**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Launch app browser after app starts, using the Python webbrowser module.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional keyword arguments which are passed to ``uvicorn.run``. For more information see [Uvicorn documentation](https://www.uvicorn.org/).

## Tip {.doc-section .doc-section-tip}

The ``shiny run`` command-line interface (which comes installed with Shiny) provides
the same functionality as `shiny.run_app()`.

## Examples {.doc-section .doc-section-examples}

```{python}
#|eval: false
from shiny import run_app

# Run ``app`` inside ``./app.py``
run_app()

# Run ``app`` inside ``./myapp.py`` (or ``./myapp/app.py``)
run_app("myapp")

# Run ``my_app`` inside ``./myapp.py`` (or ``./myapp/app.py``)
run_app("myapp:my_app")

# Run ``my_app`` inside ``../myapp.py`` (or ``../myapp/app.py``)
run_app("myapp:my_app", app_dir="..")
```

================
File: Run.qmd
================
# TODO - Run summary



# run.run_shiny_app { #shiny.run.run_shiny_app }

`run.run_shiny_app(app_file, *, start_attempts=3, port=0, cwd=None, wait_for_start=True, timeout_secs=30, bufsize=64 * 1024)`

Run a Shiny app in a subprocess.

## Parameters

<code><span class="parameter-name">app_file</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Union](`typing.Union`)\[[str](`str`), [PurePath](`pathlib.PurePath`)\]</span></code>

:   The path to the Shiny app file.

<code><span class="parameter-name">port</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">0</span></code>

:   The port to run the app on. If 0, a random port will be chosen.

<code><span class="parameter-name">cwd</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The working directory to run the app in.

<code><span class="parameter-name">wait_for_start</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   If True, wait for the app to become ready before returning.

<code><span class="parameter-name">timeout_secs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[float](`float`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">30</span></code>

:   The maximum number of seconds to wait for the app to become ready.

<code><span class="parameter-name">bufsize</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">64 * 1024</span></code>

:   The buffer size to use for stdout and stderr.

# run.ShinyAppProc { #shiny.run.ShinyAppProc }

`run.ShinyAppProc(self, proc, port, *, app_file)`

Class that represents a running Shiny app process.

This class is a context manager that can be used to run a Shiny app in a subprocess. It provides a way to interact
with the app and terminate it when it is no longer needed.

## Attributes

| Name | Description |
| --- | --- |
| [file](#shiny.run.ShinyAppProc.file) | The path to the Shiny app file. |
| [port](#shiny.run.ShinyAppProc.port) | The port that the Shiny app is running on. |
| [proc](#shiny.run.ShinyAppProc.proc) | The subprocess object that represents the running Shiny app. |
| [stderr](#shiny.run.ShinyAppProc.stderr) | The standard error stream of the Shiny app subprocess. |
| [stdout](#shiny.run.ShinyAppProc.stdout) | The standard output stream of the Shiny app subprocess. |
| [url](#shiny.run.ShinyAppProc.url) | The URL that the Shiny app is running on. |

## Methods

| Name | Description |
| --- | --- |
| [close](#shiny.run.ShinyAppProc.close) | Closes the connection and terminates the process. |
| [wait_until_ready](#shiny.run.ShinyAppProc.wait_until_ready) | Waits until the shiny app is ready to serve requests. |

### close { #shiny.run.ShinyAppProc.close }

`run.ShinyAppProc.close()`

Closes the connection and terminates the process.

This method is responsible for closing the connection and terminating the process associated with it.

### wait_until_ready { #shiny.run.ShinyAppProc.wait_until_ready }

`run.ShinyAppProc.wait_until_ready(timeout_secs)`

Waits until the shiny app is ready to serve requests.

#### Parameters

<code><span class="parameter-name">timeout_secs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[float](`float`)</span></code>

:   The maximum number of seconds to wait for the app to become ready.

#### Raises

| Type                                 | Description                                                          |
|--------------------------------------|----------------------------------------------------------------------|
| [ConnectionError](`ConnectionError`) | If there is an error while starting the shiny app.                   |
| [TimeoutError](`TimeoutError`)       | If the shiny app does not become ready within the specified timeout. |

================
File: Session.qmd
================
# Session



# session.get_current_session { #shiny.session.get_current_session }

```python
session.get_current_session()
```

Get the current user session.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session._session.Session`)\]]{.parameter-annotation}</code>

:   The current session if one is active, otherwise ``None``.

## Note {.doc-section .doc-section-note}

Shiny apps should not need to call this function directly. Instead, it is intended to
be used by Shiny developers who wish to create new functions that should only be
called from within an active Shiny session.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.session.require_active_session`)

# session.require_active_session { #shiny.session.require_active_session }

```python
session.require_active_session(session)
```

Raise an exception if no Shiny session is currently active.

## Parameters {.doc-section .doc-section-parameters}

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session._session.Session`)\]]{.parameter-annotation}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Session](`shiny.session._session.Session`)]{.parameter-annotation}</code>

:   The session.

## Note {.doc-section .doc-section-note}

Shiny apps should not need to call this function directly. Instead, it is intended to
be used by Shiny developers who wish to create new functions that should only be
called from within an active Shiny session.

## Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[ValueError](`ValueError`)]{.parameter-annotation}</code>

:   If session is not active.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.session.get_current_session`)

# session.session_context { #shiny.session.session_context }

```python
session.session_context(session)
```

A context manager for current session.

## Parameters {.doc-section .doc-section-parameters}

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session._session.Session`)\]]{.parameter-annotation}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, the instance is inferred via [](:func:`~shiny.session.get_current_session`).

# reactive.get_current_context { #shiny.reactive.get_current_context }

```python
reactive.get_current_context()
```

Get the current reactive context.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Context](`shiny.reactive._core.Context`)]{.parameter-annotation}</code>

:   A `~shiny.reactive.Context` class.

## Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[RuntimeError](`RuntimeError`)]{.parameter-annotation}</code>

:   If called outside of a reactive context.

# session.Session.send_custom_message { #shiny.session.Session.send_custom_message }

```python
session.Session.send_custom_message(type, message)
```

Send a message to the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**type**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The type of message to send.

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[dict](`dict`)\[[str](`str`), [object](`object`)\]]{.parameter-annotation}</code>

:   The message to send.

## Note {.doc-section .doc-section-note}

Sends messages to the client which can be handled in JavaScript with
``Shiny.addCustomMessageHandler(type, function(message){...})``. Once the
message handler is added, it will be invoked each time ``send_custom_message()``
is called on the server.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_text("msg", "Enter a message"),
    ui.input_action_button("submit", "Submit the message"),
    # It'd be better to use ui.insert_ui() in order to implement this kind of
    # functionality...this is just a basic demo of how custom message handling works.
    ui.tags.div(id="messages"),
    ui.tags.script(
        """
        $(function() {
            Shiny.addCustomMessageHandler("append_msg", function(message) {
                $("<p>").text(message.msg).appendTo("#messages");
            });
        });
        """
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.submit)
    async def _():
        await session.send_custom_message("append_msg", {"msg": input.msg()})


app = App(app_ui, server, debug=True)


```

# session.Session.send_input_message { #shiny.session.Session.send_input_message }

```python
session.Session.send_input_message(id, message)
```

Send an input message to the session.

Sends a message to an input on the session&#x27;s client web page; if the input is
present and bound on the page at the time the message is received, then the
input binding object&#x27;s ``receiveMessage(el, message)`` method will be called.
This method should generally not be called directly from Shiny apps, but through
friendlier wrapper functions like ``ui.update_text()``.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An id matching the id of an input to update.

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[dict](`dict`)\[[str](`str`), [object](`object`)\]]{.parameter-annotation}</code>

:   The message to send.

# session.Session.on_flush { #shiny.session.Session.on_flush }

```python
session.Session.on_flush(fn, once=True)
```

Register a function to call before the next reactive flush.

## Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], None\] \| [Callable](`typing.Callable`)\[\[\], [Awaitable](`typing.Awaitable`)\[None\]\]]{.parameter-annotation}</code>

:   The function to call.

<code>[**once**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to call the function only once or on every flush.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], None\]]{.parameter-annotation}</code>

:   A function that can be used to cancel the registration.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import datetime

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_action_button("flush", "Trigger flush"),
    ui.output_ui("n_clicks"),
    ui.div(id="flush_time"),
)


def server(input: Inputs, output: Outputs, session: Session):
    def log():
        msg = "A reactive flush occurred at " + datetime.now().strftime("%H:%M:%S:%f")
        print(msg)
        ui.insert_ui(
            ui.p(msg),
            selector="#flush_time",
        )

    session.on_flush(log, once=False)

    @render.ui
    def n_clicks():
        return "Number of clicks: " + str(input.flush())


app = App(app_ui, server)


```

# session.Session.on_flushed { #shiny.session.Session.on_flushed }

```python
session.Session.on_flushed(fn, once=True)
```

Register a function to call after the next reactive flush.

## Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], None\] \| [Callable](`typing.Callable`)\[\[\], [Awaitable](`typing.Awaitable`)\[None\]\]]{.parameter-annotation}</code>

:   The function to call.

<code>[**once**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to call the function only once or on every flush.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], None\]]{.parameter-annotation}</code>

:   A function that can be used to cancel the registration.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import datetime

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_action_button("flush", "Trigger flush"),
    ui.output_ui("n_clicks"),
    ui.div(id="flush_time"),
)


def server(input: Inputs, output: Outputs, session: Session):
    def log():
        msg = "A reactive flush occurred at " + datetime.now().strftime("%H:%M:%S:%f")
        print(msg)
        ui.insert_ui(
            ui.p(msg),
            selector="#flush_time",
        )

    session.on_flushed(log, once=False)

    @render.ui
    def n_clicks():
        return "Number of clicks: " + str(input.flush())


app = App(app_ui, server)


```

# session.Session.on_ended { #shiny.session.Session.on_ended }

```python
session.Session.on_ended(fn)
```

Registers a function to be called after the client has disconnected.

## Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], None\] \| [Callable](`typing.Callable`)\[\[\], [Awaitable](`typing.Awaitable`)\[None\]\]]{.parameter-annotation}</code>

:   The function to call.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], None\]]{.parameter-annotation}</code>

:   A function that can be used to cancel the registration.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import datetime

from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("close", "Close the session"),
)


def server(input: Inputs, output: Outputs, session: Session):
    def log():
        print("Session ended at: " + datetime.now().strftime("%H:%M:%S"))

    session.on_ended(log)

    @reactive.effect
    @reactive.event(input.close)
    async def _():
        await session.close()


app = App(app_ui, server)


```

# session.Session.dynamic_route { #shiny.session.Session.dynamic_route }

```python
session.Session.dynamic_route(name, handler)
```

Register a function to call when a dynamically generated, session-specific,
route is requested.

Provides a convenient way to serve-up session-dependent values for other
clients/applications to consume.

## Parameters {.doc-section .doc-section-parameters}

<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A name for the route (used to determine part of the URL path).

<code>[**handler**]{.parameter-name} [:]{.parameter-annotation-sep} [[DynamicRouteHandler](`shiny.session._session.DynamicRouteHandler`)]{.parameter-annotation}</code>

:   The function to call when a request is made to the route. This function should take a single argument (a [](:class:`starlette.requests.Request`) object) and return a [](:class:`starlette.types.ASGIApp`) object.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The URL path for the route.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from starlette.requests import Request
from starlette.responses import JSONResponse

from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("serve", "Click to serve"), ui.div(id="messages")
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.serve)
    def _():
        async def my_handler(request: Request) -> JSONResponse:
            return JSONResponse({"n_clicks": input.serve()}, status_code=200)

        path = session.dynamic_route("my_handler", my_handler)

        print("Serving at: ", path)

        ui.insert_ui(
            ui.tags.script(
                f"""
                fetch('{path}')
                  .then(r => r.json())
                  .then(x => {{ $('#messages').text(`Clicked ${{x.n_clicks}} times`); }});
                """
            ),
            selector="body",
        )


app = App(app_ui, server)


```

# input_handler.input_handlers { #shiny.input_handler.input_handlers }

`input_handler.input_handlers`

Manage Shiny input handlers.

Add and/or remove input handlers of a given ``type``. Shiny uses these handlers to
pre-process input values from the client (after being deserialized) before passing them
to the ``input`` argument of an [](:class:`~shiny.App`)&#x27;s ``server`` function.

The ``type`` is based on the ``getType()`` JavaScript method on the relevant Shiny
input binding. See `this article <https://shiny.posit.co/articles/js-custom-input.html>`_
for more information on how to create custom input bindings. (The article is about
Shiny for R, but the JavaScript and general principles are the same.)



## Methods {.doc-section .doc-section-methods}

add(type: str, force: bool = False) -&gt; Callable[[InputHandlerType], None]
    Register an input handler. This method returns a decorator that registers the
    decorated function as the handler for the given ``type``. This handler should
    accept three arguments:
    - the input ``value``
    - the input ``name``
    - the [](:class:`~shiny.Session`) object
remove(type: str)
    Unregister an input handler.



## Note {.doc-section .doc-section-note}

``add()`` ing an input handler will make it persist for the duration of the Python
process (unless Shiny is explicitly reloaded). For that reason, verbose naming is
encouraged to minimize the risk of colliding with other Shiny input binding(s) which
happen to use the same ``type`` (if the binding is bundled with a package, we
recommend the format of &quot;packageName.widgetName&quot;).



## Example {.doc-section .doc-section-example}

```{python}
#| eval: false
from shiny.input_handler import input_handlers
@input_handlers.add("mypackage.intify")
def _(value, name, session):
    return int(value)
```

On the Javascript side, the associated input binding must have a corresponding
``getType`` method:

```{python}
#| eval: false
getType: function(el) {
    return "mypackage.intify";
}
```

================
File: TagTypes.qmd
================
# Tag types



# htmltools.Tag { #htmltools.Tag }

```python
Tag(self, _name, *args, _add_ws=True, **kwargs)
```

The HTML tag class.

A Tag object consists of a name, attributes, and children. The name is a string, the
attributes are held in a TagAttrDict object, and the children are held in a TagList
object.

This class usually should not be instantiated directly. Instead, use the tag wrapper
functions in ``htmltools.tags``, like ``div()`` or ``a()``.

## Parameters {.doc-section .doc-section-parameters}

<code>[**_name**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The tag's name.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools._core.TagChild`) \| [TagAttrs](`htmltools._core.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Children for the tag.

<code>[**_add_ws**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools._core.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   A ``bool`` indicating whether to add whitespace surrounding the tag (see Note for details).

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools._core.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes for the tag.

## Attributes {.doc-section .doc-section-attributes}

<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The tag's name.

<code>[**attrs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrDict](`htmltools._core.TagAttrDict`)]{.parameter-annotation}</code>

:   The tag's attributes.

<code>[**children**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagList](`htmltools._core.TagList`)]{.parameter-annotation}</code>

:   The tag's children.

## Note {.doc-section .doc-section-note}

The `_add_ws` parameter controls whether whitespace is added around the tag. Inline
tags (like `span()` and `a()`) default to  `False` and block tags (like `div()` and
`p()`) default to `True`.

When a tag with `_add_ws=True` is rendered to HTML, whitespace (including
indentation) is added before the opening tag (like `<div>`), after the closing tag
(like `</div>`), and also between the opening tag and its first child. This usually
results in formatting that is easier to read.

The only times that whitespace is not added around tags is when two sibling tags
have `_add_ws=False`, or when a tag and its first child both have `_add_ws=False`.
Bare strings are treated as children with `_add_ws=False`.

If you need fine control over whitespace in the output HTML, you can create tags
with `_add_ws=False` and manually add whitespace, like `div("\n", span("a"),
_add_ws=False)`.

## Examples {.doc-section .doc-section-examples}

```python
>>> from htmltools import div
>>> x = div("hello", id="foo", class_="bar")
>>> x
<div id="foo" class="bar">hello</div>
>>> x.show()
```

## Methods

| Name | Description |
| --- | --- |
| [add_class](#htmltools.Tag.add_class) | Add a class value to the HTML class attribute. |
| [add_style](#htmltools.Tag.add_style) | Add a style value(s) to the HTML style attribute. |
| [append](#htmltools.Tag.append) | Append tag children to the end of the list. |
| [extend](#htmltools.Tag.extend) | Extend the children by appending an iterable of children. |
| [get_dependencies](#htmltools.Tag.get_dependencies) | Get any HTML dependencies. |
| [get_html_string](#htmltools.Tag.get_html_string) | Get the HTML string representation of the tag. |
| [has_class](#htmltools.Tag.has_class) | Check if the tag has a particular class value. |
| [insert](#htmltools.Tag.insert) | Insert tag children before a given index. |
| [remove_class](#htmltools.Tag.remove_class) | Remove a class value from the HTML class attribute. |
| [render](#htmltools.Tag.render) | Get string representation as well as its HTML dependencies. |
| [save_html](#htmltools.Tag.save_html) | Save to a HTML file. |
| [show](#htmltools.Tag.show) | Preview as a complete HTML document. |
| [tagify](#htmltools.Tag.tagify) | Convert any tagifiable children to Tag/TagList objects. |

### add_class { #htmltools.Tag.add_class }

```python
Tag.add_class(class_, *, prepend=False)
```

Add a class value to the HTML class attribute.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The class name to add.

<code>[**prepend**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Bool that determines if the `class` is added to the beginning or end of the class attribute.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`htmltools._core.TagT`)]{.parameter-annotation}</code>

:   The modified tag.

### add_style { #htmltools.Tag.add_style }

```python
Tag.add_style(style, *, prepend=False)
```

Add a style value(s) to the HTML style attribute.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**style**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [HTML](`htmltools._core.HTML`)]{.parameter-annotation}</code>

:   CSS properties and values already properly formatted. Each should already contain trailing semicolons.

<code>[**prepend**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Bool that determines if the `style` is added to the beginning or end of the style attribute.

#### See Also {.doc-section .doc-section-see-also}

[](:func:`~htmltools.css`)

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`htmltools._core.TagT`)]{.parameter-annotation}</code>

:   The modified tag.

### append { #htmltools.Tag.append }

```python
Tag.append(*args)
```

Append tag children to the end of the list.

### extend { #htmltools.Tag.extend }

```python
Tag.extend(x)
```

Extend the children by appending an iterable of children.

### get_dependencies { #htmltools.Tag.get_dependencies }

```python
Tag.get_dependencies(dedup=True)
```

Get any HTML dependencies.

### get_html_string { #htmltools.Tag.get_html_string }

```python
Tag.get_html_string(indent=0, eol='\n')
```

Get the HTML string representation of the tag.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**indent**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   The number of spaces to indent the tag.

<code>[**eol**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\n\']{.parameter-default}</code>

:   The end-of-line character(s).

### has_class { #htmltools.Tag.has_class }

```python
Tag.has_class(class_)
```

Check if the tag has a particular class value.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The class name to check for.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   ``True`` if the tag has the class, ``False`` otherwise.

### insert { #htmltools.Tag.insert }

```python
Tag.insert(index, x)
```

Insert tag children before a given index.

### remove_class { #htmltools.Tag.remove_class }

```python
Tag.remove_class(class_)
```

Remove a class value from the HTML class attribute.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The class name to remove.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`htmltools._core.TagT`)]{.parameter-annotation}</code>

:   The modified tag.

### render { #htmltools.Tag.render }

```python
Tag.render()
```

Get string representation as well as its HTML dependencies.

### save_html { #htmltools.Tag.save_html }

```python
Tag.save_html(file, *, libdir='lib', include_version=True)
```

Save to a HTML file.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**file**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The file to save to.

<code>[**libdir**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'lib\']{.parameter-default}</code>

:   The directory to save the dependencies to.

<code>[**include_version**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to include the version number in the dependency folder name.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [The path to the generated HTML file.]{.parameter-annotation}</code>

:   

### show { #htmltools.Tag.show }

```python
Tag.show(renderer='auto')
```

Preview as a complete HTML document.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**renderer**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'ipython', 'browser'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The renderer to use.

### tagify { #htmltools.Tag.tagify }

```python
Tag.tagify()
```

Convert any tagifiable children to Tag/TagList objects.

# htmltools.TagAttrs { #htmltools.TagAttrs }

`TagAttrs`

For dictionaries of tag attributes (e.g., `{"id": "foo"}`), which can be passed as
unnamed arguments to Tag functions like `div()`.

# htmltools.TagAttrValue { #htmltools.TagAttrValue }

`TagAttrValue`

Types that can be passed in as attributes to `Tag` functions. These values will be
converted to strings before being stored as tag attributes.

# htmltools.TagChild { #htmltools.TagChild }

`TagChild`

Types of objects that can be passed as children to Tag functions like `div()`. The `Tag`
functions and the `TagList()` constructor can accept these as unnamed arguments; they
will be flattened and normalized to `TagNode` objects.

# htmltools.TagList { #htmltools.TagList }

```python
TagList(self, *args)
```

Create an HTML tag list (i.e., a fragment of HTML)

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools._core.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   The tag children to add to the list.

## Examples {.doc-section .doc-section-examples}

```python
>>> from htmltools import TagList, div
>>> TagList("hello", div(id="foo", class_="bar"))
hello
<div id="foo" class="bar"></div>
```

## Methods

| Name | Description |
| --- | --- |
| [append](#htmltools.TagList.append) | Append tag children to the end of the list. |
| [extend](#htmltools.TagList.extend) | Extend the children by appending an iterable of children. |
| [get_dependencies](#htmltools.TagList.get_dependencies) | Get any dependencies needed to render the HTML. |
| [get_html_string](#htmltools.TagList.get_html_string) | Return the HTML string for this tag list. |
| [insert](#htmltools.TagList.insert) | Insert tag children before a given index. |
| [render](#htmltools.TagList.render) | Get string representation as well as its HTML dependencies. |
| [save_html](#htmltools.TagList.save_html) | Save to a HTML file. |
| [show](#htmltools.TagList.show) | Preview as a complete HTML document. |
| [tagify](#htmltools.TagList.tagify) | Convert any tagifiable children to Tag/TagList objects. |

### append { #htmltools.TagList.append }

```python
TagList.append(item, *args)
```

Append tag children to the end of the list.

### extend { #htmltools.TagList.extend }

```python
TagList.extend(other)
```

Extend the children by appending an iterable of children.

### get_dependencies { #htmltools.TagList.get_dependencies }

```python
TagList.get_dependencies(dedup=True)
```

Get any dependencies needed to render the HTML.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**dedup**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to deduplicate the dependencies.

### get_html_string { #htmltools.TagList.get_html_string }

```python
TagList.get_html_string(
    indent=0,
    eol='\n',
    *,
    add_ws=True,
    _escape_strings=True,
)
```

Return the HTML string for this tag list.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**indent**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Number of spaces to indent each line of the HTML.

<code>[**eol**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\n\']{.parameter-default}</code>

:   End-of-line character(s).

<code>[**add_ws**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to add whitespace between the opening tag and the first child. If either this is True, or the child's add_ws attribute is True, then whitespace will be added; if they are both False, then no whitespace will be added.

### insert { #htmltools.TagList.insert }

```python
TagList.insert(i, item)
```

Insert tag children before a given index.

### render { #htmltools.TagList.render }

```python
TagList.render()
```

Get string representation as well as its HTML dependencies.

### save_html { #htmltools.TagList.save_html }

```python
TagList.save_html(file, *, libdir='lib', include_version=True)
```

Save to a HTML file.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**file**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The file to save to.

<code>[**libdir**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'lib\']{.parameter-default}</code>

:   The directory to save the dependencies to.

<code>[**include_version**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to include the version number in the dependency folder name.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The path to the generated HTML file.

### show { #htmltools.TagList.show }

```python
TagList.show(renderer='auto')
```

Preview as a complete HTML document.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**renderer**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'ipython', 'browser'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The renderer to use.

### tagify { #htmltools.TagList.tagify }

```python
TagList.tagify()
```

Convert any tagifiable children to Tag/TagList objects.

# htmltools.TagFunction { #htmltools.TagFunction }

```python
TagFunction()
```



# htmltools.Tagifiable { #htmltools.Tagifiable }

```python
Tagifiable()
```

Objects with `tagify()` methods are considered `Tagifiable`. Note that an object
returns a `TagList`, the children of the `TagList` must also be tagified.

# htmltools.MetadataNode { #htmltools.MetadataNode }

```python
MetadataNode()
```

================
File: ui.accordion_panel.qmd
================
# ui.accordion_panel { #shiny.ui.accordion_panel }

```python
ui.accordion_panel(title, *args, value=MISSING, icon=None, **kwargs)
```

Single accordion panel.

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A title to appear in the [](:func:`~shiny.ui.accordion_panel`)'s header.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to the accordion panel body. Or tag attributes that are supplied to the returned [](:class:`~htmltools.Tag`) object.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\] \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A character string that uniquely identifies this panel. If `MISSING`, the `title` will be used.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~htmltools.Tag`) which is positioned just before the `title`.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Tag attributes to the `accordion-body` div Tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[AccordionPanel](`shiny.ui._accordion.AccordionPanel`)]{.parameter-annotation}</code>

:   `AccordionPanel` object.

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.update_accordion`)
* [](:func:`~shiny.ui.insert_accordion_panel`)
* [](:func:`~shiny.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

items = [
    ui.accordion_panel(f"Section {letter}", f"Some narrative for section {letter}")
    for letter in "ABCDE"
]

app_ui = ui.page_fluid(
    # Provide an id to create a shiny input binding
    ui.accordion(*items, id="acc"),
    ui.h4("Accordion:"),
    ui.output_text_verbatim("acc_val", placeholder=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        print(input.acc())

    @render.text
    def acc_val():
        return "input.acc(): " + str(input.acc())


app = App(app_ui, server)


```

================
File: ui.accordion.qmd
================
# ui.accordion { #shiny.ui.accordion }

```python
ui.accordion(
    *args,
    id=None,
    open=None,
    multiple=True,
    class_=None,
    width=None,
    height=None,
    **kwargs,
)
```

Create a vertically collapsing accordion.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[AccordionPanel](`shiny.ui._accordion.AccordionPanel`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   [](:class:`~shiny.ui.AccordionPanel`) objects returned from [](:func:`~shiny.ui.accordion_panel`). Or tag attributes that are supplied to the returned [](:class:`~htmltools.Tag`) object.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, you can use `input.id()` in your server logic to determine which of the [](:func:`~shiny.ui.accordion_panel`)s are currently active. The value will correspond to the [](:func:`~shiny.ui.accordion_panel`)'s `value` argument.

<code>[**open**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`) \| [str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A list of [](:func:`~shiny.ui.accordion_panel`) values to open (i.e., show) by default. The default value of `None` will open the first [](:func:`~shiny.ui.accordion_panel`). Use a value of `True` to open all (or `False` to open none) of the items. It's only possible to open more than one panel when `multiple=True`.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether multiple [](:func:`~shiny.ui.accordion_panel`) can be open at once.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Additional CSS classes to include on the accordion div.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit; for example, height="100%".

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit; for example, height="100%".

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to this tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   Accordion panel Tag object.

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.accordion_panel`)
* [](:func:`~shiny.ui.update_accordion`)
* [](:func:`~shiny.ui.insert_accordion_panel`)
* [](:func:`~shiny.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui


def make_items():
    return [
        ui.accordion_panel(f"Section {letter}", f"Some narrative for section {letter}")
        for letter in "ABCDE"
    ]


# # First shown by default
# ui.accordion(*make_items())

# # Nothing shown by default
# ui.accordion(*make_items(), open=False)
# # Everything shown by default
# ui.accordion(*make_items(), open=True)

# # Show particular sections
# ui.accordion(*make_items(), open="Section B")
# ui.accordion(*make_items(), open=["Section A", "Section B"])


app_ui = ui.page_fluid(
    ui.markdown("#### Accordion: (`multiple=False`)"),
    # Provide an id to create a shiny input binding
    ui.accordion(*make_items(), id="acc_single", multiple=False),
    ui.output_text_verbatim("acc_single_val", placeholder=True),
    ui.tags.br(),
    ui.markdown("#### Accordion: (`multiple=True`)"),
    ui.accordion(*make_items(), id="acc_multiple"),
    ui.output_text_verbatim("acc_multiple_val", placeholder=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def acc_single_val():
        return "input.acc_single(): " + str(input.acc_single())

    @render.text
    def acc_multiple_val():
        return "input.acc_multiple(): " + str(input.acc_multiple())


app = App(app_ui, server)


```

================
File: ui.busy_indicators.options.qmd
================
# ui.busy_indicators.options { #shiny.ui.busy_indicators.options }

```python
ui.busy_indicators.options(
    spinner_type=None,
    spinner_color=None,
    spinner_size=None,
    spinner_delay=None,
    spinner_selector=None,
    fade_opacity=None,
    fade_selector=None,
    pulse_background=None,
    pulse_height=None,
    pulse_speed=None,
)
```

Customize spinning busy indicators.

Busy indicators provide a visual cue to users when the server is busy calculating
outputs or otherwise performing tasks (e.g., producing downloads). This function
allows you to customize the appearance of those busy indicators. To apply the
customization, include the result of this function inside the app&#x27;s UI.

## Parameters {.doc-section .doc-section-parameters}

<code>[**spinner_type**]{.parameter-name} [:]{.parameter-annotation-sep} [[BusySpinnerType](`shiny.ui._busy_spinner_types.BusySpinnerType`) \| [Path](`pathlib.Path`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The type of spinner. Pre-bundled types are listed in the `BusySpinnerType` type.  A `Path` to a local SVG file can also be provided. The SVG should adhere to the following rules: * The SVG itself should contain the animation. * It should avoid absolute sizes (the spinner's containing DOM element size is     set in CSS by `spinner_size`, so it should fill that container). * It should avoid setting absolute colors (the spinner's containing DOM     element color is set in CSS by `spinner_color`, so it should inherit that     color).

<code>[**spinner_color**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The color of the spinner. This can be any valid CSS color. Defaults to the app's "primary" color (if Bootstrap is on the page).

<code>[**spinner_size**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The size of the spinner. This can be any valid CSS size.

<code>[**spinner_delay**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The amount of time to wait before showing the spinner. This can be any valid CSS time and can useful for not showing the spinner if the computation finishes quickly.

<code>[**spinner_selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string containing a CSS selector for scoping the spinner customization. The default (`None`) will apply the spinner customization to the parent element of the spinner.

<code>[**fade_opacity**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The opacity (a number between 0 and 1) for recalculating output. Set to 1 to "disable" the fade.

<code>[**fade_selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A string containing a CSS selector for scoping the fade customization. The default (`None`) applies the fade customization to the parent element.

<code>[**pulse_background**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CCS background definition for the pulse. The default uses a [linear-gradient](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient) of the theme's indigo, purple, and pink colors.

<code>[**pulse_height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The height of the pulsing banner. This can be any valid CSS size.

<code>[**pulse_speed**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The speed of the pulsing banner. This can be any valid CSS time.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.busy_indicators.use`) for enabling/disabling busy indicators.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import os
import time

import numpy as np
import seaborn as sns

from shiny import App, render, ui

app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_selectize(
            "indicator_types",
            "Busy indicator types",
            ["spinners", "pulse"],
            multiple=True,
            selected=["spinners", "pulse"],
        ),
        ui.download_button("download", "Download source"),
    ),
    ui.card(
        ui.card_header(
            "Plot that takes a few seconds to render",
            ui.input_task_button("simulate", "Simulate"),
            class_="d-flex justify-content-between align-items-center",
        ),
        ui.output_plot("plot"),
    ),
    ui.busy_indicators.options(spinner_type="bars3"),
    ui.output_ui("indicator_types_ui"),
    title="Busy indicators demo",
)


def server(input):

    @render.plot
    def plot():
        input.simulate()
        time.sleep(3)
        sns.lineplot(x=np.arange(100), y=np.random.randn(100))

    @render.ui
    def indicator_types_ui():
        return ui.busy_indicators.use(
            spinners="spinners" in input.indicator_types(),
            pulse="pulse" in input.indicator_types(),
        )

    @render.download
    def download():
        time.sleep(3)
        path = os.path.join(os.path.dirname(__file__), "app-core.py")
        return path


app = App(app_ui, server)


```

================
File: ui.busy_indicators.use.qmd
================
# ui.busy_indicators.use { #shiny.ui.busy_indicators.use }

```python
ui.busy_indicators.use(spinners=True, pulse=True, fade=True)
```

Enable/disable busy indication

Busy indicators provide a visual cue to users when the server is busy calculating
outputs or otherwise performing tasks (e.g., producing downloads). When enabled
(they are by default), a spinner is shown on each calculating/recalculating output,
and a pulsing banner is shown at the top of the page when the app is otherwise busy.
To disable, include the result of this function in anywhere in the app&#x27;s UI.

## Parameters {.doc-section .doc-section-parameters}

<code>[**spinners**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to show a spinner on each calculating/recalculating output.

<code>[**pulse**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to show a pulsing banner at the top of the page when the app is busy.

<code>[**fade**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to fade recalculating outputs. A value of `False` is equivalent to `shiny.ui.busy_indicators.options(fade_opacity=1)`.

## Note {.doc-section .doc-section-note}

When both `spinners` and `pulse` are set to `True`, the pulse is disabled when
spinner(s) are active.
When both `spinners` and `pulse` are set to `False`, no busy indication is shown
(other than the gray-ing out of recalculating outputs).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.busy_indicators.options`) for customizing busy indicators.

================
File: ui.card_footer.qmd
================
# ui.card_footer { #shiny.ui.card_footer }

```python
ui.card_footer(*args, **kwargs)
```

Card footer container

A general container for the &quot;footer&quot; of a [](:func:`~shiny.ui.card`). This component is designed
to be provided as a direct child to [](:func:`~shiny.ui.card`).

The footer has a different background color and border than the rest of the card.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to the footer container. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional HTML attributes for the returned Tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[CardItem](`shiny.ui._card.CardItem`)]{.parameter-annotation}</code>

:   A [](:class:`~shiny.ui.CardItem`) object.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.card`) for creating a card component.
* [](:func:`~shiny.ui.card_footer`) for creating a footer within the card.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, ui

app_ui = ui.page_fluid(
    ui.card(
        ui.card_header("This is the header"),
        ui.p("This is the body."),
        ui.p("This is still the body."),
        ui.card_footer("This is the footer"),
        full_screen=True,
    )
)


app = App(app_ui, server=None)


```

================
File: ui.card_header.qmd
================
# ui.card_header { #shiny.ui.card_header }

```python
ui.card_header(*args, container=tags.div, **kwargs)
```

Card header container

A general container for the &quot;header&quot; of a [](:func:`~shiny.ui.card`). This component is designed
to be provided as a direct child to [](:func:`~shiny.ui.card`).

The header has a different background color and border than the rest of the card.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to the header container. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.

<code>[**container**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagFunction](`htmltools.TagFunction`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [tags.div]{.parameter-default}</code>

:   Method for the returned Tag object. Defaults to [](:func:`~shiny.ui.tags.div`).

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional HTML attributes for the returned Tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[CardItem](`shiny.ui._card.CardItem`)]{.parameter-annotation}</code>

:   A [](:class:`~shiny.ui.CardItem`) object.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.card`) for creating a card component.
* [](:func:`~shiny.ui.card_footer`) for creating a footer within the card.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, ui

app_ui = ui.page_fluid(
    ui.card(
        ui.card_header("This is the header"),
        ui.p("This is the body."),
        ui.p("This is still the body."),
        ui.card_footer("This is the footer"),
        full_screen=True,
    )
)


app = App(app_ui, server=None)


```

================
File: ui.card.qmd
================
# ui.card { #shiny.ui.card }

```python
ui.card(
    *args,
    full_screen=False,
    height=None,
    max_height=None,
    min_height=None,
    fill=True,
    class_=None,
    id=None,
    **kwargs,
)
```

A Bootstrap card component

A general purpose container for grouping related UI elements together with a border
and optional padding. To learn more about `card()`s, see [this
article](https://rstudio.github.io/bslib/articles/cards.html).

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`) \| [CardItem](`shiny.ui._card.CardItem`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements.

<code>[**full_screen**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit (e.g., `height="200px"`). Doesn't apply when a card is made `full_screen`.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to allow the card to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Additional CSS classes for the returned Tag.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Provide a unique identifier for the [](:func:`~shiny.ui.card`) or to report its full screen state to Shiny. For example, using `id="my_card"`, you can observe the card's full screen state with `input.my_card_full_screen()`.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   HTML attributes on the returned Tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   An [](:func:`~shiny.ui.tags.div`) tag.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.card_header`) for creating a header within the card.
* [](:func:`~shiny.ui.card_footer`) for creating a footer within the card.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, ui

app_ui = ui.page_fluid(
    ui.card(
        ui.card_header("This is the header"),
        ui.p("This is the body."),
        ui.p("This is still the body."),
        ui.card_footer("This is the footer"),
        full_screen=True,
    ),
)


app = App(app_ui, server=None)


```

================
File: ui.chat_ui.qmd
================
# ui.chat_ui { #shiny.ui.chat_ui }

```python
ui.chat_ui(
    id,
    *,
    messages=None,
    placeholder='Enter a message...',
    width='min(680px, 100%)',
    height='auto',
    fill=True,
    **kwargs,
)
```

UI container for a chat component (Shiny Core).

This function is for locating a [](:class:`~shiny.ui.Chat`) instance in a Shiny Core
app. If you are using Shiny Express, use the [](:method:`~shiny.ui.Chat.ui`) method
instead.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A unique identifier for the chat UI.

<code>[**messages**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Sequence](`typing.Sequence`)\[[str](`str`) \| [ChatMessage](`shiny.ui._chat_types.ChatMessage`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A sequence of messages to display in the chat. Each message can be either a string or a dictionary with a `content` and `role` key. The `content` key should contain the message text, and the `role` key can be "assistant" or "user".

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Enter a message...\']{.parameter-default}</code>

:   Placeholder text for the chat input.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'min(680px, 100%)\']{.parameter-default}</code>

:   The width of the chat container.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The height of the chat container.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether the chat should vertically take available space inside a fillable container.

<code>[**kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes for the chat container element.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, ui

app_ui = ui.page_fillable(
    ui.panel_title("Hello Shiny Chat"),
    ui.chat_ui("chat"),
    fillable_mobile=True,
)

# Create a welcome message
welcome = ui.markdown(
    """
    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will
    simply repeat it back to you. For more examples, see this
    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/examples/chat).
    """
)


def server(input, output, session):
    chat = ui.Chat(id="chat", messages=[welcome])

    # Define a callback to run when the user submits a message
    @chat.on_user_submit
    async def _():
        # Get the user's input
        user = chat.user_input()
        # Append a response to the chat
        await chat.append_message(f"You said: {user}")


app = App(app_ui, server)


```

================
File: ui.Chat.qmd
================
# ui.Chat { #shiny.ui.Chat }

```python
ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)
```

Create a chat interface.

A UI component for building conversational interfaces. With it, end users can submit
messages, which will cause a `.on_user_submit()` callback to run. In that callback,
a response can be generated based on the chat&#x27;s `.messages()`, and appended to the
chat using `.append_message()` or `.append_message_stream()`.

Here&#x27;s a rough outline for how to implement a `Chat`:

```python
from shiny.express import ui

# Create and display chat instance
chat = ui.Chat(id="my_chat")
chat.ui()

# Define a callback to run when the user submits a message
@chat.on_user_submit
async def _():
    # Get messages currently in the chat
    messages = chat.messages()
    # Create a response message stream
    response = await my_model.generate_response(messages, stream=True)
    # Append the response into the chat
    await chat.append_message_stream(response)
```

In the outline above, `my_model.generate_response()` is a placeholder for
the function that generates a response based on the chat&#x27;s messages. This function
will look different depending on the model you&#x27;re using, but it will generally
involve passing the messages to the model and getting a response back. Also, you&#x27;ll
typically have a choice to `stream=True` the response generation, and in that case,
you&#x27;ll use `.append_message_stream()` instead of `.append_message()` to append the
response to the chat. Streaming is preferrable when available since it allows for
more responsive and scalable chat interfaces.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A unique identifier for the chat session. In Shiny Core, make sure this id matches a corresponding [](:func:`~shiny.ui.chat_ui`) call in the UI.

<code>[**messages**]{.parameter-name} [:]{.parameter-annotation-sep} [[Sequence](`typing.Sequence`)\[[Any](`typing.Any`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A sequence of messages to display in the chat. Each message can be a dictionary with a `content` and `role` key. The `content` key should contain the message text, and the `role` key can be "assistant", "user", or "system". Note that system messages are not actually displayed in the chat, but will still be stored in the chat's `.messages()`.

<code>[**on_error**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'actual', 'sanitize', 'unhandled'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   How to handle errors that occur in response to user input. When `"unhandled"`, the app will stop running when an error occurs. Otherwise, a notification is displayed to the user and the app continues to run.  * `"auto"`: Sanitize the error message if the app is set to sanitize errors,   otherwise display the actual error message. * `"actual"`: Display the actual error message to the user. * `"sanitize"`: Sanitize the error message before displaying it to the user. * `"unhandled"`: Do not display any error message to the user.

<code>[**tokenizer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TokenEncoding](`shiny.ui._chat_tokenizer.TokenEncoding`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The tokenizer to use for calculating token counts, which is required to impose `token_limits` in `.messages()`. If not provided, a default generic tokenizer is attempted to be loaded from the tokenizers library. A specific tokenizer may also be provided by following the `TokenEncoding` (tiktoken or tozenizers) protocol (e.g., `tiktoken.encoding_for_model("gpt-4o")`).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, ui

app_ui = ui.page_fillable(
    ui.panel_title("Hello Shiny Chat"),
    ui.chat_ui("chat"),
    fillable_mobile=True,
)

# Create a welcome message
welcome = ui.markdown(
    """
    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will
    simply repeat it back to you. For more examples, see this
    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/examples/chat).
    """
)


def server(input, output, session):
    chat = ui.Chat(id="chat", messages=[welcome])

    # Define a callback to run when the user submits a message
    @chat.on_user_submit
    async def _():
        # Get the user's input
        user = chat.user_input()
        # Append a response to the chat
        await chat.append_message(f"You said: {user}")


app = App(app_ui, server)


```

## Methods

| Name | Description |
| --- | --- |
| [append_message](#shiny.ui.Chat.append_message) | Append a message to the chat. |
| [append_message_stream](#shiny.ui.Chat.append_message_stream) | Append a message as a stream of message chunks. |
| [clear_messages](#shiny.ui.Chat.clear_messages) | Clear all chat messages. |
| [destroy](#shiny.ui.Chat.destroy) | Destroy the chat instance. |
| [messages](#shiny.ui.Chat.messages) | Reactively read chat messages |
| [on_user_submit](#shiny.ui.Chat.on_user_submit) | Define a function to invoke when user input is submitted. |
| [set_user_message](#shiny.ui.Chat.set_user_message) | Deprecated. Use `update_user_input(value=value)` instead. |
| [transform_assistant_response](#shiny.ui.Chat.transform_assistant_response) | Transform assistant responses. |
| [transform_user_input](#shiny.ui.Chat.transform_user_input) | Transform user input. |
| [ui](#shiny.ui.Chat.ui) | Place a chat component in the UI. |
| [update_user_input](#shiny.ui.Chat.update_user_input) | Update the user input. |
| [user_input](#shiny.ui.Chat.user_input) | Reactively read the user's message. |

### append_message { #shiny.ui.Chat.append_message }

```python
ui.Chat.append_message(message)
```

Append a message to the chat.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Any](`typing.Any`)]{.parameter-annotation}</code>

:   The message to append. A variety of message formats are supported including a string, a dictionary with `content` and `role` keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others.

#### Note {.doc-section .doc-section-note}

Use `.append_message_stream()` instead of this method when `stream=True` (or
similar) is specified in model's completion method.

### append_message_stream { #shiny.ui.Chat.append_message_stream }

```python
ui.Chat.append_message_stream(message)
```

Append a message as a stream of message chunks.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Iterable](`typing.Iterable`)\[[Any](`typing.Any`)\] \| [AsyncIterable](`typing.AsyncIterable`)\[[Any](`typing.Any`)\]]{.parameter-annotation}</code>

:   An iterable or async iterable of message chunks to append. A variety of message chunk formats are supported, including a string, a dictionary with `content` and `role` keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others.

#### Note {.doc-section .doc-section-note}

Use this method (over `.append_message()`) when `stream=True` (or similar) is
specified in model's completion method.

### clear_messages { #shiny.ui.Chat.clear_messages }

```python
ui.Chat.clear_messages()
```

Clear all chat messages.

### destroy { #shiny.ui.Chat.destroy }

```python
ui.Chat.destroy()
```

Destroy the chat instance.

### messages { #shiny.ui.Chat.messages }

```python
ui.Chat.messages(
    format=MISSING,
    token_limits=None,
    transform_user='all',
    transform_assistant=False,
)
```

Reactively read chat messages

Obtain chat messages within a reactive context. The default behavior is
intended for passing messages along to a model for response generation where
you typically want to:

1. Cap the number of tokens sent in a single request (i.e., `token_limits`).
2. Apply user input transformations (i.e., `transform_user`), if any.
3. Not apply assistant response transformations (i.e., `transform_assistant`)
   since these are predominantly for display purposes (i.e., the model shouldn&#x27;t
   concern itself with how the responses are displayed).

#### Parameters {.doc-section .doc-section-parameters}

<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \| [ProviderMessageFormat](`shiny.ui._chat_provider_types.ProviderMessageFormat`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The message format to return. The default value of `MISSING` means chat messages are returned as [](:class:`ChatMessage`) objects (a dictionary with `content` and `role` keys). Other supported formats include:  * `"anthropic"`: Anthropic message format. * `"google"`: Google message (aka content) format. * `"langchain"`: LangChain message format. * `"openai"`: OpenAI message format. * `"ollama"`: Ollama message format.

<code>[**token_limits**]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[int](`int`), [int](`int`)\] \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Limit the conversation history based on token limits. If specified, only the most recent messages that fit within the token limits are returned. This is useful for avoiding "exceeded token limit" errors when sending messages to the relevant model, while still providing the most recent context available. A specified value must be a tuple of two integers. The first integer is the maximum number of tokens that can be sent to the model in a single request. The second integer is the amount of tokens to reserve for the model's response. Note that token counts based on the `tokenizer` provided to the `Chat` constructor.

<code>[**transform_user**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['all', 'last', 'none'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'all\']{.parameter-default}</code>

:   Whether to return user input messages with transformation applied. This only matters if a `transform_user_input` was provided to the chat constructor. The default value of `"all"` means all user input messages are transformed. The value of `"last"` means only the last user input message is transformed. The value of `"none"` means no user input messages are transformed.

<code>[**transform_assistant**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to return assistant messages with transformation applied. This only matters if an `transform_assistant_response` was provided to the chat constructor.

#### Note {.doc-section .doc-section-note}

Messages are listed in the order they were added. As a result, when this method
is called in a `.on_user_submit()` callback (as it most often is), the last
message will be the most recent one submitted by the user.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[ChatMessage](`shiny.ui._chat_types.ChatMessage`), ...\]]{.parameter-annotation}</code>

:   A tuple of chat messages.

### on_user_submit { #shiny.ui.Chat.on_user_submit }

```python
ui.Chat.on_user_submit(fn=None)
```

Define a function to invoke when user input is submitted.

Apply this method as a decorator to a function (`fn`) that should be invoked when the
user submits a message. The function should take no arguments.

In many cases, the implementation of `fn` should do at least the following:

1. Call `.messages()` to obtain the current chat history.
2. Generate a response based on those messages.
3. Append the response to the chat history using `.append_message()` (
   or `.append_message_stream()` if the response is streamed).

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[SubmitFunction](`shiny.ui._chat.SubmitFunction`) \| [SubmitFunctionAsync](`shiny.ui._chat.SubmitFunctionAsync`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A function to invoke when user input is submitted.

#### Note {.doc-section .doc-section-note}

This method creates a reactive effect that only gets invalidated when the user
submits a message. Thus, the function `fn` can read other reactive dependencies,
but it will only be re-invoked when the user submits a message.

### set_user_message { #shiny.ui.Chat.set_user_message }

```python
ui.Chat.set_user_message(value)
```

Deprecated. Use `update_user_input(value=value)` instead.

### transform_assistant_response { #shiny.ui.Chat.transform_assistant_response }

```python
ui.Chat.transform_assistant_response(fn=None)
```

Transform assistant responses.

Use this method as a decorator on a function (`fn`) that transforms assistant
responses before displaying them in the chat. This is useful for post-processing
model responses before displaying them to the user.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[TransformAssistantResponseFunction](`shiny.ui._chat.TransformAssistantResponseFunction`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A function that takes a string and returns either a string, [](:class:`shiny.ui.HTML`), or `None`. If `fn` returns a string, it gets interpreted and parsed as a markdown on the client (and the resulting HTML is then sanitized). If `fn` returns [](:class:`shiny.ui.HTML`), it will be displayed as-is. If `fn` returns `None`, the response is effectively ignored.

#### Note {.doc-section .doc-section-note}

When doing an `.append_message_stream()`, `fn` gets called on every chunk of the
response (thus, it should be performant), and can optionally access more
information (i.e., arguments) about the stream. The 1st argument (required)
contains the accumulated content, the 2nd argument (optional) contains the
current chunk, and the 3rd argument (optional) is a boolean indicating whether
this chunk is the last one in the stream.

### transform_user_input { #shiny.ui.Chat.transform_user_input }

```python
ui.Chat.transform_user_input(fn=None)
```

Transform user input.

Use this method as a decorator on a function (`fn`) that transforms user input
before storing it in the chat messages returned by `.messages()`. This is
useful for implementing RAG workflows, like taking a URL and scraping it for
text before sending it to the model.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[TransformUserInput](`shiny.ui._chat.TransformUserInput`) \| [TransformUserInputAsync](`shiny.ui._chat.TransformUserInputAsync`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A function to transform user input before storing it in the chat `.messages()`. If `fn` returns `None`, the user input is effectively ignored, and `.on_user_submit()` callbacks are suspended until more input is submitted. This behavior is often useful to catch and handle errors that occur during transformation. In this case, the transform function should append an error message to the chat (via `.append_message()`) to inform the user of the error.

### ui { #shiny.ui.Chat.ui }

```python
ui.Chat.ui(
    messages=None,
    placeholder='Enter a message...',
    width='min(680px, 100%)',
    height='auto',
    fill=True,
    **kwargs,
)
```

Place a chat component in the UI.

This method is only relevant fpr Shiny Express. In Shiny Core, use
[](:func:`~shiny.ui.chat_ui`) instead to insert the chat UI.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**messages**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Sequence](`typing.Sequence`)\[[str](`str`) \| [ChatMessage](`shiny.ui._chat_types.ChatMessage`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A sequence of messages to display in the chat. Each message can be either a string or a dictionary with `content` and `role` keys. The `content` key should contain the message text, and the `role` key can be "assistant" or "user".

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Enter a message...\']{.parameter-default}</code>

:   Placeholder text for the chat input.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'min(680px, 100%)\']{.parameter-default}</code>

:   The width of the chat container.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The height of the chat container.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether the chat should vertically take available space inside a fillable container.

<code>[**kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes for the chat container element.

### update_user_input { #shiny.ui.Chat.update_user_input }

```python
ui.Chat.update_user_input(value=None, placeholder=None)
```

Update the user input.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value to set the user input to.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The placeholder text for the user input.

### user_input { #shiny.ui.Chat.user_input }

```python
ui.Chat.user_input(transform=False)
```

Reactively read the user&#x27;s message.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**transform**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to apply the user input transformation function (if one was provided).

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation}</code>

:   The user input message (before any transformation).

#### Note {.doc-section .doc-section-note}

Most users shouldn't need to use this method directly since the last item in
`.messages()` contains the most recent user input. It can be useful for:

  1. Taking a reactive dependency on the user's input outside of a `.on_user_submit()` callback.
  2. Maintaining message state separately from `.messages()`.

================
File: ui.column.qmd
================
# ui.column { #shiny.ui.column }

```python
ui.column(width, *args, offset=0, **kwargs)
```

Responsive row-column based layout

See [](:func:`~shiny.ui.row`) for more information.

## Parameters {.doc-section .doc-section-parameters}

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation}</code>

:   The width of the column (an integer between 1 and 12).

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to place within the column.

<code>[**offset**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   The number of columns to offset this column from the end of the previous column.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to place on the column tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.row`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.row(
        ui.column(4, ui.input_slider("n", "N", min=0, max=100, value=20)),
        ui.column(8, ui.output_plot("plot")),
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.css.as_css_padding.qmd
================
# ui.css.as_css_padding { #shiny.ui.css.as_css_padding }

```python
ui.css.as_css_padding(padding)
```

Convert a CSS unit or list of CSS units into a CSS padding value.

## Parameters {.doc-section .doc-section-parameters}

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.ui.css._css_unit.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\] \| None]{.parameter-annotation}</code>

:   A CSS unit or list of CSS units.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation}</code>

:   A CSS padding value.

## Examples {.doc-section .doc-section-examples}

```{python}
from shiny.ui.css import as_css_padding

as_css_padding([0, "1em"])
```

================
File: ui.css.as_css_unit.qmd
================
# ui.css.as_css_unit { #shiny.ui.css.as_css_unit }

```python
ui.css.as_css_unit(value)
```

Convert a value into a CSS unit.

## Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [None \| [CssUnit](`shiny.ui.css._css_unit.CssUnit`)]{.parameter-annotation}</code>

:   A value to convert into a CSS unit.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [None \| [str](`str`)]{.parameter-annotation}</code>

:   If the `value` is `None`, then `None`. If the value is `0`, then `"0"`. If the `value` is numeric, then a formatted pixel value. Otherwise, the `value` as-is.

## Examples {.doc-section .doc-section-examples}

```{python}
from shiny.ui.css import as_css_unit

as_css_unit(0)
```
```{python}
as_css_unit(300)
```
```{python}
as_css_unit("1em")
```

================
File: ui.download_button.qmd
================
# ui.download_button { #shiny.ui.download_button }

```python
ui.download_button(id, label, *, icon=None, width=None, **kwargs)
```

Create a download button

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An id for the download.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to display on the button.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The width of the button.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes for the button.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.download`)
* [](:func:`~shiny.ui.download_link`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
import random
from datetime import date

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.download_button("downloadData", "Download"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.download(
        filename=lambda: f"新型-{date.today().isoformat()}-{random.randint(100, 999)}.csv"
    )
    async def downloadData():
        await asyncio.sleep(0.25)
        yield "one,two,three\n"
        yield "新,1,2\n"
        yield "型,4,5\n"


app = App(app_ui, server)


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: ui.download_link.qmd
================
# ui.download_link { #shiny.ui.download_link }

```python
ui.download_link(id, label, *, icon=None, width=None, **kwargs)
```

Create a download button.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An id for the download.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to display on the button.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The width of the button.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes for the button.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.download`)
* [](:func:`~shiny.ui.download_button`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
import random
from datetime import date

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.download_link("downloadData", "Download"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.download(
        filename=lambda: f"新型-{date.today().isoformat()}-{random.randint(100, 999)}.csv"
    )
    async def downloadData():
        await asyncio.sleep(0.25)
        yield "one,two,three\n"
        yield "新,1,2\n"
        yield "型,4,5\n"


app = App(app_ui, server)


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: ui.fill.as_fill_item.qmd
================
# ui.fill.as_fill_item { #shiny.ui.fill.as_fill_item }

```python
ui.fill.as_fill_item(tag)
```

Coerce a tag to a fill item.

Filling layouts are built on the foundation of _fillable containers_ and _fill
items_ (_fill carriers_ are both _fillable containers_ and _fill items_). This is
why most UI components (e.g., [](:func:`~shiny.ui.card`),
[](:func:`~shiny.ui.layout_sidebar`)) possess both `fillable` and `fill` arguments (to
control their fill behavior). However, sometimes it&#x27;s useful to add, remove, and/or
test fillable/fill properties on arbitrary [](:class:`~htmltools.Tag`), which these
functions are designed to do.

## Parameters {.doc-section .doc-section-parameters}

<code>[**tag**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`shiny.ui.fill._fill.TagT`)]{.parameter-annotation}</code>

:   a Tag object.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`shiny.ui.fill._fill.TagT`)]{.parameter-annotation}</code>

:   A copy of the original [](:class:`~htmltools.Tag`) object (`tag`) with additional attributes (and an [](:class:`~htmltools.HTMLDependency`)).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.fill.as_fillable_container`)
* [](:func:`~shiny.ui.fill.remove_all_fill`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from __future__ import annotations

import htmltools

from shiny import App, ui
from shiny.ui import fill


def outer_inner() -> htmltools.Tag:
    inner = ui.div(
        id="inner",
        style=htmltools.css(
            height="200px",
            border="3px blue solid",
        ),
    )
    outer = ui.div(
        inner,
        id="outer",
        style=htmltools.css(
            height="300px",
            border="3px red solid",
        ),
    )
    return outer


outer0 = outer_inner()

outer1 = outer_inner()
outer1.children[0] = fill.as_fill_item(outer1.children[0])

outer2 = outer_inner()
outer2 = fill.as_fillable_container(outer2)
outer2.children[0] = fill.as_fill_item(outer2.children[0])


app_ui = ui.page_fluid(
    ui.markdown(
        """\
        # `as_fill_item()`

        For an item to fill its parent element,
        * the item must have `as_fill_item()` be called on it
        * the parent container must have `as_fillable_container()` called on it

        If both methods are called, the inner child will naturally expand into its parent container.
        """
    ),
    ui.row(
        ui.column(4, ui.h5("Default behavior")),
        ui.column(4, ui.h5(ui.markdown("`as_fill_item(blue)`"))),
        ui.column(
            4,
            ui.h5(ui.markdown("`as_fill_item(blue)` + `as_fillable_container(red)`")),
        ),
    ),
    ui.row(
        ui.column(4, ui.div(outer0)),
        ui.column(4, ui.div(outer1)),
        ui.column(4, ui.span(outer2)),
    ),
)


app = App(app_ui, server=None)


```

================
File: ui.fill.as_fillable_container.qmd
================
# ui.fill.as_fillable_container { #shiny.ui.fill.as_fillable_container }

```python
ui.fill.as_fillable_container(tag)
```

Coerce a tag to a fillable container.

Filling layouts are built on the foundation of _fillable containers_ and _fill
items_ (_fill carriers_ are both _fillable containers_ and _fill items_). This is
why most UI components (e.g., [](:func:`~shiny.ui.card`),
[](:func:`~shiny.ui.layout_sidebar`)) possess both `fillable` and `fill` arguments (to
control their fill behavior). However, sometimes it&#x27;s useful to add, remove, and/or
test fillable/fill properties on arbitrary [](:class:`~htmltools.Tag`), which these
functions are designed to do.

## Parameters {.doc-section .doc-section-parameters}

<code>[**tag**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`shiny.ui.fill._fill.TagT`)]{.parameter-annotation}</code>

:   a Tag object.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`shiny.ui.fill._fill.TagT`)]{.parameter-annotation}</code>

:   A copy of the original [](:class:`~htmltools.Tag`) object (`tag`) with additional attributes (and an [](:class:`~htmltools.HTMLDependency`)).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.fill.as_fill_item`)
* [](:func:`~shiny.ui.fill.remove_all_fill`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from __future__ import annotations

import htmltools

from shiny import App, ui
from shiny.ui import fill


def outer_inner() -> htmltools.Tag:
    inner = ui.div(
        id="inner",
        style=htmltools.css(
            height="200px",
            border="3px blue solid",
        ),
    )
    outer = ui.div(
        inner,
        id="outer",
        style=htmltools.css(
            height="300px",
            border="3px red solid",
        ),
    )
    return outer


outer0 = outer_inner()

outer1 = outer_inner()
outer1 = fill.as_fillable_container(outer1)

outer2 = outer_inner()
outer2 = fill.as_fillable_container(outer2)
outer2.children[0] = fill.as_fill_item(outer2.children[0])

app_ui = ui.page_fluid(
    ui.markdown(
        """\
        # `as_fillable_container()`

        For an item to fill its parent element,
        * the item must have `as_fill_item()` be called on it
        * the parent container must have `as_fillable_container()` called on it

        If both methods are called, the inner child will naturally expand into its parent container.
        """
    ),
    ui.row(
        ui.column(4, ui.h5("Default behavior")),
        ui.column(4, ui.h5(ui.markdown("`as_fillable_container(red)`"))),
        ui.column(
            4,
            ui.h5(ui.markdown("`as_fill_item(blue)` + `as_fillable_container(red)`")),
        ),
    ),
    ui.row(
        ui.column(4, ui.div(outer0)),
        ui.column(4, ui.div(outer1)),
        ui.column(4, ui.span(outer2)),
    ),
)


app = App(app_ui, server=None)


```

================
File: ui.fill.remove_all_fill.qmd
================
# ui.fill.remove_all_fill { #shiny.ui.fill.remove_all_fill }

```python
ui.fill.remove_all_fill(tag)
```

Remove any filling layouts from a tag.

Filling layouts are built on the foundation of _fillable containers_ and _fill
items_ (_fill carriers_ are both _fillable containers_ and _fill items_). This is
why most UI components (e.g., [](:func:`~shiny.ui.card`),
[](:func:`~shiny.ui.layout_sidebar`)) possess both `fillable` and `fill` arguments (to
control their fill behavior). However, sometimes it&#x27;s useful to add, remove, and/or
test fillable/fill properties on arbitrary [](:class:`~htmltools.Tag`), which these
functions are designed to do.

## Parameters {.doc-section .doc-section-parameters}

<code>[**tag**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`shiny.ui.fill._fill.TagT`)]{.parameter-annotation}</code>

:   a Tag object.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagT](`shiny.ui.fill._fill.TagT`)]{.parameter-annotation}</code>

:   A copy of the original [](:class:`~htmltools.Tag`) object with filling layout attributes removed.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.fill.as_fill_item`)
* [](:func:`~shiny.ui.fill.as_fillable_container`)

================
File: ui.help_text.qmd
================
# ui.help_text { #shiny.ui.help_text }

```python
ui.help_text(*args, **kwargs)
```

Create a help text element

Help text is stylized text which can be added to the user interface to provide additional explanation
or context. Text passed to [](:func:`~shiny.ui.help_text`) receives the Bootstrap `help-block` class.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to include inside the help text.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to add to the text container.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

================
File: ui.HTML.qmd
================
# ui.HTML { #shiny.ui.HTML }

```python
ui.HTML(self, html)
```

Mark a string as raw HTML. This will prevent the string from being escaped when
rendered inside an HTML tag.

## Examples {.doc-section .doc-section-examples}

```python
>>> from htmltools import HTML, div
>>> div("<p>Hello</p>")
<div>&lt;p&gt;Hello&lt;/p&gt;</div>
>>> div(HTML("<p>Hello</p>"))
<div><p>Hello</p></div>
```

================
File: ui.include_css.qmd
================
# ui.include_css { #shiny.ui.include_css }

```python
ui.include_css(path, *, method='link')
```

Include a CSS file.

## Parameters {.doc-section .doc-section-parameters}

<code>[**path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`) \| [str](`str`)]{.parameter-annotation}</code>

:   A path to a CSS file.

<code>[**method**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['link', 'link_files', 'inline'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'link\']{.parameter-default}</code>

:   One of the following:  * ``"link"`` is the link to the CSS file via a [](:func:`~shiny.ui.tags.link`) tag. This   method is generally preferable to ``"inline"`` since it allows the browser to   cache the file. * ``"link_files"`` is the same as ``"link"``, but also allow for the CSS file to   request other files within ``path``'s immediate parent directory (e.g.,   ``@import()`` another file). Note that this isn't the default behavior because   you should **be careful not to include files in the same directory as ``path``   that contain sensitive information**. A good general rule of thumb to follow   is to have ``path`` be located in a subdirectory of the app directory. For   example, if the app's source is located at ``/app/app.py``, then ``path``   should be somewhere like ``/app/css/custom.css`` (and all the other relevant   accompanying 'safe' files should be located under ``/app/css/``). * ``"inline"`` is the inline the CSS file contents within a   [](:func:`~shiny.ui.tags.style`) tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   If ``method="inline"``, returns a [](:func:`~shiny.ui.tags.style`) tag; otherwise, returns a [](:func:`~shiny.ui.tags.link`) tag.

## Note {.doc-section .doc-section-note}

By default this places a [](:func:`~shiny.ui.tags.link`) (or [](:func:`~shiny.ui.tags.style`)) tag in
the [](:func:`~shiny.ui.tags.body`) of the document, which isn't optimal for performance, and
may result in a Flash of Unstyled Content (FOUC). To instead place the CSS in the
[](:func:`~shiny.ui.tags.head`) of the document, you can wrap it in ``head_content``:

```{python}
#| eval: false
from htmltools import head_content
from shiny import ui

ui.page_fluid(
    ui.head_content(ui.include_css("custom.css")),

    # You can also inline css by passing a dictionary with a `style` element.
    ui.div(
        {"style": "font-weight: bold;"},
        ui.p("Some text!"),
    )
)
```

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.tags.style`)
* [](:func:`~shiny.ui.tags.link`)
* [](:func:`~shiny.ui.include_js`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from pathlib import Path

from shiny import App, ui

css_file = Path(__file__).parent / "css" / "styles.css"

app_ui = ui.page_fluid(
    "Almost before we knew it, we had left the ground!!!",
    ui.include_css(css_file),
    ui.div(
        # Style individual elements with an attribute dictionary.
        {"style": "font-weight: bold"},
        ui.p("Bold text"),
    ),
)

app = App(app_ui, None)


## file: css/styles.css
body {
  font-size: 3rem;
  background-color: pink
}


```

================
File: ui.include_js.qmd
================
# ui.include_js { #shiny.ui.include_js }

```python
ui.include_js(path, *, method='link', **kwargs)
```

Include a JavaScript file.

## Parameters {.doc-section .doc-section-parameters}

<code>[**path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`) \| [str](`str`)]{.parameter-annotation}</code>

:   A path to a JS file.

<code>[**method**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['link', 'link_files', 'inline'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'link\']{.parameter-default}</code>

:   One of the following:  * ``"link"`` is the link to the CSS file via a [](:func:`~shiny.ui.tags.link`) tag. This   method is generally preferable to ``"inline"`` since it allows the browser to   cache the file. * ``"link_files"`` is the same as ``"link"``, but also allow for the CSS file to   request other files within ``path``'s immediate parent directory (e.g.,   ``@import()`` another file). Note that this isn't the default behavior because   you should **be careful not to include files in the same directory as ``path``   that contain sensitive information**. A good general rule of thumb to follow   is to have ``path`` be located in a subdirectory of the app directory. For   example, if the app's source is located at ``/app/app.py``, then ``path``   should be somewhere like ``/app/css/custom.css`` (and all the other relevant   accompanying 'safe' files should be located under ``/app/css/``). * ``"inline"`` is the inline the CSS file contents within a   [](:func:`~shiny.ui.tags.style`) tag.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes which are passed on to `~shiny.ui.tags.script`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A [](:func:`~shiny.ui.tags.script`) tag.

## Note {.doc-section .doc-section-note}

This places a [](:func:`~shiny.ui.tags.script`) tag in the [](:func:`~shiny.ui.tags.body`) of the
document. If you want to place the tag in the [](:func:`~shiny.ui.tags.head`) of the
document instead, you can wrap it in ``head_content`` (in this case, just
make sure you're aware that the DOM probably won't be ready when the script
is executed).

```{python}
#| eval: false
ui.page_fluid(
    ui.head_content(ui.include_js("custom.js")),
)

# Alternately you can inline Javscript by changing the method.
ui.page_fluid(
    ui.head_content(ui.include_js("custom.js", method = "inline")),
)
```

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.tags.script`)
* [](:func:`~shiny.ui.include_css`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from pathlib import Path

from shiny import App, ui

js_file = Path(__file__).parent / "js" / "app.js"

app_ui = ui.page_fluid(
    "If you see this page before 'OK'-ing the alert box, something went wrong",
    ui.include_js(js_file),
)


app = App(app_ui, None)


## file: js/app.js
alert("If you're seeing this, the javascript file was included successfully.");


```

================
File: ui.input_action_button.qmd
================
# ui.input_action_button { #shiny.ui.input_action_button }

```python
ui.input_action_button(
    id,
    label,
    *,
    icon=None,
    width=None,
    disabled=False,
    **kwargs,
)
```

Creates an action button whose value is initially zero, and increments by one each
time it is pressed.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**disabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, the button will not be clickable. Use [](:func:`~shiny.ui.update_action_button`) to dynamically enable/disable the button.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the button.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
An integer representing the number of clicks.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_action_button`)
* [](:func:`~shiny.ui.input_action_link`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "Number of observations", min=0, max=1000, value=500),
    ui.input_action_button("go", "Go!", class_="btn-success"),
    ui.output_plot("plot"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    # Use reactive.event() to invalidate the plot only when the button is pressed
    # (not when the slider is changed)
    @reactive.event(input.go, ignore_none=False)
    def plot():
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(input.n())
        fig, ax = plt.subplots()
        ax.hist(x, bins=30, density=True)
        return fig


app = App(app_ui, server)


```



```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_text("name", "Your Name"),
    ui.input_action_button("greet", "Say Hello", disabled=True),
    ui.output_ui("hello"),
)


def server(input: Inputs):
    @reactive.effect
    @reactive.event(input.name)
    def set_button_state():
        if input.name():
            ui.update_action_button("greet", disabled=False)
        else:
            ui.update_action_button("greet", disabled=True)

    @render.ui
    @reactive.event(input.greet)
    def hello():
        return ui.p(f"Hello, {input.name()}!", class_="fs-1 text-primary mt-3")


app = App(app_ui, server)


```

================
File: ui.input_action_link.qmd
================
# ui.input_action_link { #shiny.ui.input_action_link }

```python
ui.input_action_link(id, label, *, icon=None, **kwargs)
```

Creates a link whose value is initially zero, and increments by one each time it is
pressed.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the link.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
An integer representing the number of clicks.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_action_link`)
* [](:func:`~shiny.ui.input_action_button`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "Number of observations", min=0, max=1000, value=500),
    ui.input_action_link("go", "Go!"),
    ui.output_plot("plot"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    # reactive.event() to invalidate the plot when the button is pressed but not when
    # the slider is changed
    @reactive.event(input.go, ignore_none=False)
    def plot():
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(input.n())
        fig, ax = plt.subplots()
        ax.hist(x, bins=30, density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.input_checkbox_group.qmd
================
# ui.input_checkbox_group { #shiny.ui.input_checkbox_group }

```python
ui.input_checkbox_group(
    id,
    label,
    choices,
    *,
    selected=None,
    inline=False,
    width=None,
)
```

Create a group of checkboxes that can be used to toggle multiple choices
independently.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[ChoicesArg](`shiny.ui._input_check_radio.ChoicesArg`)]{.parameter-annotation}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, the result is displayed inline.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A tuple of string(s) with the selected value(s) (if any).
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_checkbox_group`)
* [](:func:`~shiny.ui.input_checkbox`)
* [](:func:`~shiny.ui.input_radio_buttons`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, req, ui

app_ui = ui.page_fluid(
    ui.input_checkbox_group(
        "colors",
        "Choose color(s):",
        {
            "red": ui.span("Red", style="color: #FF0000;"),
            "green": ui.span("Green", style="color: #00AA00;"),
            "blue": ui.span("Blue", style="color: #0000AA;"),
        },
    ),
    ui.output_ui("val"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    def val():
        req(input.colors())
        return "You chose " + ", ".join(input.colors())


app = App(app_ui, server)


```

================
File: ui.input_checkbox.qmd
================
# ui.input_checkbox { #shiny.ui.input_checkbox }

```python
ui.input_checkbox(id, label, value=False, *, width=None)
```

Create a checkbox that can be used to specify logical values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
``True`` if checked, ``False`` otherwise.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_switch`)
* [](:func:`~shiny.ui.update_checkbox`)
* [](:func:`~shiny.ui.input_checkbox_group`)
* [](:func:`~shiny.ui.input_radio_buttons`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_checkbox("somevalue", "Some value", False),
    ui.output_ui("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    def value():
        return input.somevalue()


app = App(app_ui, server)


```

================
File: ui.input_dark_mode.qmd
================
# ui.input_dark_mode { #shiny.ui.input_dark_mode }

```python
ui.input_dark_mode(id=None, mode=None, **kwargs)
```

Creates a dark mode switch input that toggles the app between dark and light modes.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An optional ID for the dark mode switch. When included, the current color mode is reported in the value of the input with this ID.

<code>[**mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[BootstrapColorMode](`shiny.ui._input_dark_mode.BootstrapColorMode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial mode of the dark mode switch. By default or when set to `None`, the user's system settings for the preferred color scheme will be used. Otherwise, set to `"light"` or `"dark"` to force the initial mode.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to be added to the dark mode switch, such as `class_` or `style`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A dark mode toggle switch UI element.

## References {.doc-section .doc-section-references}

* <https://getbootstrap.com/docs/5.3/customize/color-modes>

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_navbar(
    ui.nav_panel(
        "One",
        ui.layout_sidebar(
            ui.sidebar(
                ui.input_slider("n", "N", min=0, max=100, value=20),
            ),
            ui.output_plot("plot"),
        ),
    ),
    ui.nav_panel(
        "Two",
        ui.layout_column_wrap(
            ui.card("Second page content."),
            ui.card(
                ui.card_header("Server-side color mode setting"),
                ui.input_action_button("make_light", "Switch to light mode"),
                ui.input_action_button("make_dark", "Switch to dark mode"),
            ),
        ),
    ),
    ui.nav_spacer(),
    ui.nav_control(ui.input_dark_mode(id="mode")),
    title="Shiny Dark Mode",
    id="page",
    fillable="One",
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.make_light)
    def _():
        ui.update_dark_mode("light")

    @reactive.effect
    @reactive.event(input.make_dark)
    def _():
        ui.update_dark_mode("dark")

    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)

        # Theme the plot to match light/dark mode
        fig.patch.set_facecolor("none")
        ax.set_facecolor("none")

        color_fg = "black" if input.mode() == "light" else "silver"
        ax.tick_params(axis="both", colors=color_fg)
        ax.spines["bottom"].set_color(color_fg)
        ax.spines["top"].set_color(color_fg)
        ax.spines["left"].set_color(color_fg)
        ax.spines["right"].set_color(color_fg)

        return fig


app = App(app_ui, server)


```

================
File: ui.input_date_range.qmd
================
# ui.input_date_range { #shiny.ui.input_date_range }

```python
ui.input_date_range(
    id,
    label,
    *,
    start=None,
    end=None,
    min=None,
    max=None,
    format='yyyy-mm-dd',
    startview='month',
    weekstart=0,
    language='en',
    separator=' to ',
    width=None,
    autoclose=True,
)
```

Creates a pair of text inputs which, when clicked on, bring up calendars that the
user can click on to select dates.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**start**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial start date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**end**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial end date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.

<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'yyyy-mm-dd\']{.parameter-default}</code>

:   The format of the date to display in the browser.

<code>[**startview**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'month\']{.parameter-default}</code>

:   The date range shown when the input object is first clicked. Can be "month" (the default), "year", or "decade".

<code>[**weekstart**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Which day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).

<code>[**language**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'en\']{.parameter-default}</code>

:   The language used for month and day names. Default is "en". Other valid values include "ar", "az", "bg", "bs", "ca", "cs", "cy", "da", "de", "el", "en-AU", "en-GB", "eo", "es", "et", "eu", "fa", "fi", "fo", "fr-CH", "fr", "gl", "he", "hr", "hu", "hy", "id", "is", "it-CH", "it", "ja", "ka", "kh", "kk", "ko", "kr", "lt", "lv", "me", "mk", "mn", "ms", "nb", "nl-BE", "nl", "no", "pl", "pt-BR", "pt", "ro", "rs-latin", "rs", "ru", "sk", "sl", "sq", "sr-latin", "sr", "sv", "sw", "th", "tr", "uk", "vi", "zh-CN", and "zh-TW".

<code>[**separator**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\' to \']{.parameter-default}</code>

:   String to display between the start and end input boxes.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**autoclose**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to close the datepicker immediately when a date is selected.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Note {.doc-section .doc-section-note}

The date ``format`` string specifies how the date will be displayed in the browser.
It allows the following values:

- ``yy``: Year without century (12)
- ``yyyy``: Year with century (2012)
- ``mm``: Month number, with leading zero (01-12)
- ``m``: Month number, without leading zero (1-12)
- ``M``: Abbreviated month name
- ``MM``: Full month name
- ``dd``: Day of month with leading zero
- ``d``: Day of month without leading zero
- ``D``: Abbreviated weekday name
- ``DD``: Full weekday name

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A tuple of [](:class:`~datetime.date`) objects.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_date_range`)
* [](:func:`~shiny.ui.input_date`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import date

from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(
    # Default start and end is the current date in the client's time zone
    ui.input_date_range("daterange1", "Date range:"),
    # Set start and end dates
    ui.input_date_range(
        "daterange2", "Set start and end date:", start="2001-01-01", end="2010-12-31"
    ),
    # Start and end are always specified in yyyy-mm-dd, even if the display
    # format is different
    ui.input_date_range(
        "daterange3",
        "Min, max, start, and end dates are set with custom format and separator:",
        start="2001-01-01",
        end="2010-12-31",
        min="2001-01-01",
        max="2012-12-21",
        format="mm/dd/yy",
        separator=" - ",
    ),
    # Pass in Date objects
    ui.input_date_range(
        "daterange4",
        "Default start and end use date objects:",
        start=date(2001, 1, 1),
        end=date(2010, 12, 31),
    ),
    # Use different language and different first day of week
    ui.input_date_range(
        "daterange5",
        "Language is German and we starts on Monday:",
        language="de",
        weekstart=1,
    ),
    # Start with decade view instead of default month view
    ui.input_date_range(
        "daterange6", "Start Date picker in Decade view:", startview="decade"
    ),
    # Set width of the daterange field
    ui.input_date_range("daterange7", "Set width of text input:", width="600px"),
    # Set autoclose to false
    ui.input_date_range("daterange8", "Auto close is disabled:", autoclose=False),
)


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(app_ui, server)


```

================
File: ui.input_date.qmd
================
# ui.input_date { #shiny.ui.input_date }

```python
ui.input_date(
    id,
    label,
    *,
    value=None,
    min=None,
    max=None,
    format='yyyy-mm-dd',
    startview='month',
    weekstart=0,
    language='en',
    width=None,
    autoclose=True,
    datesdisabled=None,
    daysofweekdisabled=None,
)
```

Creates a text input which, when clicked on, brings up a calendar that the user can
click on to select dates.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The starting date. Either a [](:class:`~datetime.date`) object, or a string in `yyyy-mm-dd` format. If None (the default), will use the current date in the client's time zone.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.

<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'yyyy-mm-dd\']{.parameter-default}</code>

:   The format of the date to display in the browser. Defaults to `"yyyy-mm-dd"`.

<code>[**startview**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'month\']{.parameter-default}</code>

:   The date range shown when the input object is first clicked. Can be "month" (the default), "year", or "decade".

<code>[**weekstart**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Which day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).

<code>[**language**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'en\']{.parameter-default}</code>

:   The language used for month and day names. Default is "en". Other valid values include "ar", "az", "bg", "bs", "ca", "cs", "cy", "da", "de", "el", "en-AU", "en-GB", "eo", "es", "et", "eu", "fa", "fi", "fo", "fr-CH", "fr", "gl", "he", "hr", "hu", "hy", "id", "is", "it-CH", "it", "ja", "ka", "kh", "kk", "ko", "kr", "lt", "lv", "me", "mk", "mn", "ms", "nb", "nl-BE", "nl", "no", "pl", "pt-BR", "pt", "ro", "rs-latin", "rs", "ru", "sk", "sl", "sq", "sr-latin", "sr", "sv", "sw", "th", "tr", "uk", "vi", "zh-CN", and "zh-TW".

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**autoclose**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to close the datepicker immediately when a date is selected.

<code>[**datesdisabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Which dates should be disabled (in `yyyy-mm-dd` format).

<code>[**daysofweekdisabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[list](`list`)\[[int](`int`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Days of the week that should be disabled. Should be a integer vector with values from 0 (Sunday) to 6 (Saturday).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Note {.doc-section .doc-section-note}

The date ``format`` string specifies how the date will be displayed in the browser.
It allows the following values:

- ``yy``: Year without century (12)
- ``yyyy``: Year with century (2012)
- ``mm``: Month number, with leading zero (01-12)
- ``m``: Month number, without leading zero (1-12)
- ``M``: Abbreviated month name
- ``MM``: Full month name
- ``dd``: Day of month with leading zero
- ``d``: Day of month without leading zero
- ``D``: Abbreviated weekday name
- ``DD``: Full weekday name

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A [](:class:`~datetime.date`) object.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_date`)
* [](:func:`~shiny.ui.input_date_range`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import date

from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(
    ui.input_date("date1", "Has default date:", value="2016-02-29"),
    # Default value is the date in client's time zone
    ui.input_date("date2", "Client's current date:"),
    # value is always yyyy-mm-dd, even if the display format is different
    ui.input_date("date3", "Format mm/dd/yy:", value="2016-02-29", format="mm/dd/yy"),
    # Pass in a Date object
    ui.input_date("date4", "Default uses date object:", value=date(2016, 2, 29)),
    # Use different language and different first day of week
    ui.input_date(
        "date5",
        "Language is German and the week starts on Monday:",
        language="ru",
        weekstart=1,
    ),
    # Start with decade view instead of default month view
    ui.input_date("date6", "Start Date picker in Decade view:", startview="decade"),
    # Disable Mondays and Tuesdays.
    ui.input_date("date7", "Disable Monday and Tuesday:", daysofweekdisabled=[1, 2]),
    # Disable specific dates.
    ui.input_date(
        "date8",
        "Disable specific dates:",
        value="2016-02-29",
        datesdisabled=["2016-03-01", "2016-03-02"],
    ),
    # Set min and max dates.
    ui.input_date(
        "date9",
        "Set min and max dates:",
        value="2016-02-03",
        min="2016-02-01",
        max="2016-02-29",
    ),
    # Set width of the date field
    ui.input_date("date10", "Set width of text input:", width="600px"),
    # Set autoclose to false
    ui.input_date("date11", "Auto close is disabled:", autoclose=False),
)


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(app_ui, server)


```

================
File: ui.input_file.qmd
================
# ui.input_file { #shiny.ui.input_file }

```python
ui.input_file(
    id,
    label,
    *,
    multiple=False,
    accept=None,
    width=None,
    button_label='Browse...',
    placeholder='No file selected',
    capture=None,
)
```

Create a file upload control that can be used to upload one or more files.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether the user should be allowed to select and upload multiple files at once.

<code>[**accept**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Unique file type specifier(s) which give the browser a hint as to the type of file the server expects. Many browsers use this to prevent the user from selecting an invalid file. Examples of valid values include a case insensitive extension (e.g. ``.csv`` or ``.rds``), a valid MIME type (e.g. ``text/plain`` or ``application/pdf``) or one of ``audio/*``, ``video/*``, or ``image/*`` meaning any audio, video, or image type, respectively.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**button_label**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Browse...\']{.parameter-default}</code>

:   The label used on the button.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'No file selected\']{.parameter-default}</code>

:   The text to show on the input before a file has been uploaded.

<code>[**capture**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['environment', 'user'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   On mobile devices, this can be used to open the device's camera for input. If "environment", it will open the rear-facing camera. If "user", it will open the front-facing camera. By default, it will accept either still photos or video. To accept only still photos, use ``accept="image/*"``; to accept only video, use ``accept="video/*"``.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}


::: {.callout-note title="Server value"}
A list of dictionaries (one for each file upload) with the following keys:

* ``name``: The filename provided by the web browser. This is *not* the path to read
    to get at the actual data that was uploaded (see 'datapath').
* ``size``: The size of the uploaded data, in bytes.
* ``type``: The MIME type reported by the browser (for example, 'text/plain'), or
    empty string if the browser didn't know.
* ``datapath``: The path to a temp file that contains the data that was uploaded.
    This file may be deleted if the user performs another upload operation.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.download_button`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd

from shiny import App, Inputs, Outputs, Session, reactive, render, ui
from shiny.types import FileInfo

app_ui = ui.page_fluid(
    ui.input_file("file1", "Choose CSV File", accept=[".csv"], multiple=False),
    ui.input_checkbox_group(
        "stats",
        "Summary Stats",
        choices=["Row Count", "Column Count", "Column Names"],
        selected=["Row Count", "Column Count", "Column Names"],
    ),
    ui.output_table("summary"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.calc
    def parsed_file():
        file: list[FileInfo] | None = input.file1()
        if file is None:
            return pd.DataFrame()
        return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]
            file[0]["datapath"]
        )

    @render.table
    def summary():
        df = parsed_file()

        if df.empty:
            return pd.DataFrame()

        # Get the row count, column count, and column names of the DataFrame
        row_count = df.shape[0]
        column_count = df.shape[1]
        names = df.columns.tolist()
        column_names = ", ".join(str(name) for name in names)

        # Create a new DataFrame to display the information
        info_df = pd.DataFrame(
            {
                "Row Count": [row_count],
                "Column Count": [column_count],
                "Column Names": [column_names],
            }
        )

        # input.stats() is a list of strings; subset the columns based on the selected
        # checkboxes
        return info_df.loc[:, input.stats()]


app = App(app_ui, server)


```

================
File: ui.input_numeric.qmd
================
# ui.input_numeric { #shiny.ui.input_numeric }

```python
ui.input_numeric(id, label, value, *, min=None, max=None, step=None, width=None)
```

Create an input control for entry of numeric values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation}</code>

:   Initial value.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Interval to use when stepping between min and max.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A numeric value.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_numeric`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_numeric("obs", "Observations:", 10, min=1, max=100),
    ui.output_text_verbatim("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value():
        return input.obs()


app = App(app_ui, server)


```

================
File: ui.input_password.qmd
================
# ui.input_password { #shiny.ui.input_password }

```python
ui.input_password(id, label, value='', *, width=None, placeholder=None)
```

Create an password control for entry of passwords.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\']{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g., '400px', or '100%'.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The placeholder of the input.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A string of the password input. The default value is unless value is provided.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_password("password", "Password:"),
    ui.input_action_button("go", "Go"),
    ui.output_text_verbatim("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    @reactive.event(input.go)
    def value():
        return input.password()


app = App(app_ui, server)


```

================
File: ui.input_radio_buttons.qmd
================
# ui.input_radio_buttons { #shiny.ui.input_radio_buttons }

```python
ui.input_radio_buttons(
    id,
    label,
    choices,
    *,
    selected=None,
    inline=False,
    width=None,
)
```

Create a set of radio buttons used to select an item from a list.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[ChoicesArg](`shiny.ui._input_check_radio.ChoicesArg`)]{.parameter-annotation}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the result is displayed inline.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A string with the selected value.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_radio_buttons`)
* [](:func:`~shiny.ui.input_checkbox_group`)
* [](:func:`~shiny.ui.input_checkbox`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_radio_buttons(
        "rb",
        "Choose one:",
        {
            "html": ui.HTML("<span style='color:red;'>Red Text</span>"),
            "text": "Normal text",
        },
    ),
    ui.output_ui("val"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    def val():
        return "You chose " + input.rb()


app = App(app_ui, server)


```

================
File: ui.input_select.qmd
================
# ui.input_select { #shiny.ui.input_select }

```python
ui.input_select(
    id,
    label,
    choices,
    *,
    selected=None,
    multiple=False,
    selectize=False,
    width=None,
    size=None,
    remove_button=None,
    options=None,
)
```

Create a select list that can be used to choose a single or multiple items from a
list of values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectChoicesArg](`shiny.ui._input_select.SelectChoicesArg`)]{.parameter-annotation}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Is selection of multiple items allowed?

<code>[**selectize**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to use selectize.js or not.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**size**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Number of items to show in the selection box; a larger number will result in a taller box. Normally, when ``multiple=False``, a select input will be a drop-down list, but when size is set, it will be a box instead.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
If `multiple=False`, the server value is a string with the value of the selected item.
If `multiple=True`, the server value is a tuple containing the values of the
selected items. When ``multiple=True`` and nothing is selected, this value
will be ``None``.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_selectize`)
* [](:func:`~shiny.ui.update_select`)
* [](:func:`~shiny.ui.input_radio_buttons`)
* [](:func:`~shiny.ui.input_checkbox_group`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_select(
        "state",
        "Choose a state:",
        {
            "East Coast": {"NY": "New York", "NJ": "New Jersey", "CT": "Connecticut"},
            "West Coast": {"WA": "Washington", "OR": "Oregon", "CA": "California"},
            "Midwest": {"MN": "Minnesota", "WI": "Wisconsin", "IA": "Iowa"},
        },
    ),
    ui.output_text("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value():
        return "You choose: " + str(input.state())


app = App(app_ui, server)


```

================
File: ui.input_selectize.qmd
================
# ui.input_selectize { #shiny.ui.input_selectize }

```python
ui.input_selectize(
    id,
    label,
    choices,
    *,
    selected=None,
    multiple=False,
    width=None,
    remove_button=None,
    options=None,
)
```

Create a select list that can be used to choose a single or multiple items from a
list of values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectChoicesArg](`shiny.ui._input_select.SelectChoicesArg`)]{.parameter-annotation}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Is selection of multiple items allowed?

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**remove_button**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether to add a remove button. This uses the `clear_button` and `remove_button` selectize plugins which can also be supplied as options. By default it will apply a remove button to multiple selections, but not single selections.

<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[dict](`dict`)\[[str](`str`), [Jsonifiable](`shiny.types.Jsonifiable`) \| [JSEval](`shiny.ui._utils.JSEval`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A dictionary of options. See the documentation of selectize.js for possible options. If you want to pass a JavaScript function, wrap the string in `ui.JS`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
If `multiple=False`, the server value is a string with the value of the selected item.
If `multiple=True`, the server value is a tuple containing the values of the
selected items. When ``multiple=True`` and nothing is selected, this value
will be ``None``.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_select`)
* [](:func:`~shiny.ui.input_radio_buttons`)
* [](:func:`~shiny.ui.input_checkbox_group`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from html import escape  # noqa: F401

from shiny import App, Inputs, Outputs, Session, render, ui

states = {
    "East Coast": {"NY": "New York", "NJ": "New Jersey", "CT": "Connecticut"},
    "West Coast": {"WA": "Washington", "OR": "Oregon", "CA": "California"},
    "Midwest": {"MN": "Minnesota", "WI": "Wisconsin", "IA": "Iowa"},
}

app_ui = ui.page_fluid(
    ui.input_selectize(
        "state",
        "Choose a state:",
        states,
        multiple=True,
    ),
    ui.output_text("value"),
    ui.input_selectize(
        "state2",
        "Selectize Options",
        states,
        multiple=True,
        options=(
            {
                "placeholder": "Enter text",
                "render": ui.js_eval(
                    '{option: function(item, escape) {return "<div><strong>Select " + escape(item.label) + "</strong></div>";}}'
                ),
                "create": True,
            }
        ),
    ),
    ui.input_selectize(
        "state3",
        "Selectize plugins",
        states,
        multiple=True,
        options={"plugins": ["clear_button"]},
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value():
        return "You choose: " + str(input.state())


app = App(app_ui, server)


```

================
File: ui.input_slider.qmd
================
# ui.input_slider { #shiny.ui.input_slider }

```python
ui.input_slider(
    id,
    label,
    min,
    max,
    value,
    *,
    step=None,
    ticks=False,
    animate=False,
    width=None,
    sep=',',
    pre=None,
    post=None,
    time_format=None,
    timezone=None,
    drag_range=True,
)
```

Constructs a slider widget to select a number, date, or date-time from a range.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)]{.parameter-annotation}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)]{.parameter-annotation}</code>

:   The maximum allowed value.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`) \| [Iterable](`typing.Iterable`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)\]]{.parameter-annotation}</code>

:   Initial value.

<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderStepArg](`shiny.ui._input_slider.SliderStepArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Interval to use when stepping between min and max.

<code>[**ticks**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   ``False`` to hide tick marks, ``True`` to show them according to some simple heuristics.

<code>[**animate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [AnimationOptions](`shiny.ui._input_slider.AnimationOptions`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   ``True`` to show simple animation controls with default settings; ``False`` not to; or a custom settings list, such as those created using [](:class:`~AnimationOptions`).

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**sep**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\',\']{.parameter-default}</code>

:   Separator between thousands places in numbers.

<code>[**pre**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A prefix string to put in front of the value.

<code>[**post**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A suffix string to put after the value.

<code>[**time_format**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Only used if the slider values are [](:class:`~datetime.date`) or [](:class:`~datetime.datetime`) objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is "%F" (like "2015-07-01"), and for Datetimes, the default is "%F %T" (like "2015-07-01 15:32:10").

<code>[**timezone**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Only used if the values are [](:class:`~datetime.datetime`) objects. A string specifying the time zone offset for the displayed times, in the format "+HHMM" or "-HHMM". If ``None`` (the default), times will be displayed in the browser's time zone. The value "+0000" will result in UTC time.

<code>[**drag_range**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   This option is used only if it is a range slider (with two values). If ``True`` (the default), the range can be dragged. In other words, the min and max can be dragged together. If ``False``, the range cannot be dragged.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A number, date, or date-time (depending on the class of value), or in the case of
slider range, a tuple of two numbers/dates/date-times.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_slider`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("obs", "Number of bins:", min=10, max=100, value=30),
    ui.output_plot("distPlot"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot
    def distPlot():
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.obs(), density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.input_switch.qmd
================
# ui.input_switch { #shiny.ui.input_switch }

```python
ui.input_switch(id, label, value=False, *, width=None)
```

Create a switch that can be used to specify logical values. Similar to
[](:func:`~shiny.ui.input_checkbox`), but implies to the user that the change will take effect
immediately.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
``True`` if checked, ``False`` otherwise.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_checkbox`)
* [](:func:`~shiny.ui.update_switch`)
* [](:func:`~shiny.ui.input_checkbox_group`)
* [](:func:`~shiny.ui.input_radio_buttons`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_switch("somevalue", "Some value", False),
    ui.output_text("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value():
        return input.somevalue()


app = App(app_ui, server)


```

================
File: ui.input_task_button.qmd
================
# ui.input_task_button { #shiny.ui.input_task_button }

```python
ui.input_task_button(
    id,
    label,
    *args,
    icon=None,
    label_busy='Processing...',
    icon_busy=MISSING,
    width=None,
    type='primary',
    auto_reset=True,
    **kwargs,
)
```

Creates a button for launching longer-running operations.

Its value is initially zero, and increments by one each time it is pressed. It is
similar to [](:func:`~shiny.ui.input_action_button`), except it prevents the user from
clicking when its operation is already in progress.

Upon click, it automatically displays a customizable progress message and disables
itself; and after the server has dealt with whatever reactivity is triggered from
the click, the button automatically resets to its original appearance and re-enables
itself.

In some advanced use cases, it may be necessary to keep a task button in its busy
state even after the normal reactive processing has completed. Calling
:func:`~shiny.ui.update_task_button(id, state = "busy")` from the server will opt
out of any currently pending reset for a specific task button. After doing so, the
button can be re-enabled by calling ``update_task_button(id, state = &quot;ready&quot;)``
after each click&#x27;s work is complete.

You can also pass an explicit ``auto_reset = FALSE`` to ``input_task_button()``,
which means that button will _never_ be automatically re-enabled and will require
``update_task_button(id, state = &quot;ready&quot;)`` to be called each time.

Note that, as a general rule, Shiny&#x27;s ``update`` family of functions do not take
effect at the instant that they are called, but are held until the end of the
current reactive cycle. So if you have many different reactive calculations and
outputs, you don&#x27;t have to be too careful about when you call
``update_task_button(id, state = &quot;ready&quot;)``, as the button on the client will not
actually re-enable until the same moment that all of the updated outputs
simultaneously sent to the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A button label.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   [Experimental] Can be used to add additional states besides "ready" and "busy". Pass a [](:func:`~shiny.ui.tags.span`) with ``slot="state_name"`` for each new state, and call [](:func:`~shiny.ui.update_task_button`) with ``state="state_name"`` to switch the button to that state.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**label_busy**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Processing...\']{.parameter-default}</code>

:   A label to appear when the button is busy.

<code>[**icon_busy**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   An icon to appear inline with the button/link when the button is busy.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**type**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'primary\']{.parameter-default}</code>

:   One of the Bootstrap theme colors ('primary', 'default', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'), or None to leave off the Bootstrap-specific button CSS classes. Defaults to 'primary'.

<code>[**auto_reset**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to automatically reset the button to "ready" after the task completes. If False, the button will remain in the "busy" state until [](:func:`~shiny.ui.update_task_button`) is called with ``state="ready"``. Also note that even if ``auto_reset=True``, calling [](:func:`~shiny.ui.update_task_button`) with ``state="busy"`` will prevent the button from automatically resetting.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the button.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
An integer representing the number of clicks.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.update_task_button`)
* [](:func:`~shiny.ui.input_action_button`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
from datetime import datetime

from shiny import App, reactive, render, ui

app_ui = ui.page_fixed(
    ui.h5("Current time"),
    ui.output_text("current_time"),
    ui.p(
        "Notice that the time above updates every second, even if you click the button below."
    ),
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_numeric("x", "x", 1),
            ui.input_numeric("y", "y", 2),
            ui.input_task_button("btn", "Compute, slowly"),
            ui.input_action_button("btn_cancel", "Cancel"),
        ),
        ui.h5("Sum of x and y"),
        ui.output_text("show_result"),
    ),
)


def server(input, output, session):
    @render.text
    def current_time():
        reactive.invalidate_later(1)
        return datetime.now().strftime("%H:%M:%S")

    @ui.bind_task_button(button_id="btn")
    @reactive.extended_task
    async def slow_compute(a: int, b: int) -> int:
        await asyncio.sleep(3)
        return a + b

    @reactive.effect
    @reactive.event(input.btn, ignore_none=False)
    def handle_click():
        slow_compute(input.x(), input.y())

    @reactive.effect
    @reactive.event(input.btn_cancel)
    def handle_cancel():
        slow_compute.cancel()

    @render.text
    def show_result():
        return str(slow_compute.result())


app = App(app_ui, server)


```

================
File: ui.input_text_area.qmd
================
# ui.input_text_area { #shiny.ui.input_text_area }

```python
ui.input_text_area(
    id,
    label,
    value='',
    *,
    width=None,
    height=None,
    cols=None,
    rows=None,
    placeholder=None,
    resize=None,
    autoresize=False,
    autocomplete=None,
    spellcheck=None,
)
```

Create a textarea input control for entry of unstructured text values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\']{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g., '400px', or '100%'.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS height, e.g., '400px', or '100%'.

<code>[**cols**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[int](`int`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Value of the visible character columns of the input, e.g., 80. This argument will only take effect if there is not a CSS width rule defined for this element; such a rule could come from the width argument of this function or from a containing page layout such as [](:func:`~shiny.ui.page_fluid`).

<code>[**rows**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[int](`int`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value of the visible character rows of the input, e.g., 6. If the height argument is specified, height will take precedence in the browser's rendering.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A hint as to what can be entered into the control.

<code>[**resize**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['none', 'both', 'horizontal', 'vertical'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Which directions the textarea box can be resized. Can be one of "both", "none", "vertical", and "horizontal". The default, ``None``, will use the client browser's default setting for resizing textareas.

<code>[**autoresize**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If True, then the textarea will automatically resize the height to fit the input text.

<code>[**autocomplete**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether to enable browser autocompletion of the text input (default is "off"). If `None`, then it will use the browser's default behavior. Other possible values include "on", "name", "username", and "email". See [Mozilla's autocomplete documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for more.

<code>[**spellcheck**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['true', 'false'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether to enable browser spell checking of the text input (default is ``None``). If None, then it will use the browser's default behavior.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}


::: {.callout-note title="Server value"}
A string containing the current text input. The default value is ``""`` unless
``value`` is provided.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_text_area(
        "caption_regular",
        "Caption:",
        "Data summary\nwith\nmultiple\nlines",
    ),
    ui.output_text_verbatim("value_regular", placeholder=True),
    ui.input_text_area(
        "caption_autoresize",
        ui.markdown("Caption (w/ `autoresize=True`):"),
        "Data summary\nwith\nmultiple\nlines",
        autoresize=True,
    ),
    ui.output_text_verbatim("value_autoresize", placeholder=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value_regular():
        return input.caption_regular()

    @render.text
    def value_autoresize():
        return input.caption_autoresize()


app = App(app_ui, server)


```

================
File: ui.input_text.qmd
================
# ui.input_text { #shiny.ui.input_text }

```python
ui.input_text(
    id,
    label,
    value='',
    *,
    width=None,
    placeholder=None,
    autocomplete='off',
    spellcheck=None,
)
```

Create an input control for entry of text values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\']{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g., '400px', or '100%'.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A hint as to what can be entered into the control.

<code>[**autocomplete**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'off\']{.parameter-default}</code>

:   Whether to enable browser autocompletion of the text input. If `None`, then it will use the browser's default behavior. Some values include "on", "off", "name", "username", and "email". See [https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) to learn more about `autocomplete`'s supported values.

<code>[**spellcheck**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['true', 'false'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether to enable browser spell checking of the text input (default is ``None``). If None, then it will use the browser's default behavior.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A string containing the current text input. The default value is ``""`` unless
``value`` is provided.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_text_area`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_text("caption", "Caption:", "Data summary"),
    ui.output_text_verbatim("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value():
        return input.caption()


app = App(app_ui, server)


```

================
File: ui.insert_accordion_panel.qmd
================
# ui.insert_accordion_panel { #shiny.ui.insert_accordion_panel }

```python
ui.insert_accordion_panel(
    id,
    panel,
    target=None,
    position='after',
    session=None,
)
```

Insert an [](:func:`~shiny.ui.accordion_panel`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that matches an existing [](:func:`~shiny.ui.accordion`)'s `id`.

<code>[**panel**]{.parameter-name} [:]{.parameter-annotation-sep} [[AccordionPanel](`shiny.ui._accordion.AccordionPanel`)]{.parameter-annotation}</code>

:   An [](:func:`~shiny.ui.accordion_panel`) object to insert.

<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The `value` of an existing panel to insert next to.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['after', 'before'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'after\']{.parameter-default}</code>

:   Should `panel` be added before or after the target? When `target=None`, `"after"` will append after the last panel and `"before"` will prepend before the first panel.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.accordion_panel`)
* [](:func:`~shiny.ui.update_accordion`)
* [](:func:`~shiny.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random

from shiny import App, Inputs, Outputs, Session, reactive, ui


def make_panel(letter: str) -> ui.AccordionPanel:
    return ui.accordion_panel(
        f"Section {letter}", f"Some narrative for section {letter}"
    )


items = [make_panel(letter) for letter in "ABCDE"]

app_ui = ui.page_fluid(
    ui.input_action_button("add_panel", "Add random panel", class_="mt-3 mb-3"),
    ui.accordion(*items, id="acc", multiple=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.add_panel)
    def _():
        ui.insert_accordion_panel("acc", make_panel(str(random.randint(0, 10000))))


app = App(app_ui, server)


```

================
File: ui.insert_ui.qmd
================
# ui.insert_ui { #shiny.ui.insert_ui }

```python
ui.insert_ui(
    ui,
    selector,
    where='beforeEnd',
    multiple=False,
    immediate=False,
    session=None,
)
```

Insert UI objects.

## Parameters {.doc-section .doc-section-parameters}

<code>[**ui**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   The UI object you want to insert. This can be anything that you usually put inside your app's UI function. If you're inserting multiple elements in one call, make sure to wrap them in either a [](:func:`~htmltools.TagList`) or a [](:func:`~shiny.ui.tags.div`) (the latter option has the advantage that you can give it an id to make it easier to reference or remove it later on). If you want to insert raw HTML, use [](:class:`~shiny.ui.HTML`).

<code>[**selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that is accepted by jQuery's selector (i.e. the string ``s`` to be placed in a ``$(s)`` jQuery call) which determines the element(s) relative to which you want to insert your UI object.

<code>[**where**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'beforeEnd\']{.parameter-default}</code>

:   Where your UI object should go relative to the selector: "beforeBegin": before the selector element itself; "beforeEnd": just inside the selector element, after its last child (default); "afterEnd": after the selector element itself. Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   In case your selector matches more than one element, ``multiple`` determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).

<code>[**immediate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session._session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}

This function allows you to dynamically add arbitrary UI into your app, whenever you
want, as many times as you want. Unlike [](:class:`~shiny.render.ui`), the UI generated
with `insert_ui` is persistent: once it's created, it stays there until removed by
[](:func:`~shiny.ui.remove_ui`). Each new call to `insert_ui` creates more UI objects, in addition
to the ones already there (all independent from one another). To update a part of
the UI (ex: an input object), you must use the appropriate render function or a
customized reactive function.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.remove_ui`)
* [](:class:`~shiny.render.ui`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("add", "Add UI"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.add)
    def _():
        ui.insert_ui(
            ui.input_text("txt" + str(input.add()), "Enter some text"),
            selector="#add",
            where="afterEnd",
        )


app = App(app_ui, server)


```

================
File: ui.layout_column_wrap.qmd
================
# ui.layout_column_wrap { #shiny.ui.layout_column_wrap }

```python
ui.layout_column_wrap(
    *args,
    width=MISSING,
    fixed_width=False,
    heights_equal='all',
    fill=True,
    fillable=True,
    height=None,
    min_height=None,
    max_height=None,
    height_mobile=None,
    gap=None,
    class_=None,
    **kwargs,
)
```

A grid-like, column-first layout

Wraps a 1d sequence of UI elements into a 2d grid. The number of columns
(and rows) in the grid depends on the column width and the size of the display.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Unnamed arguments should be UI elements (e.g., [](:func:`~shiny.ui.card`)). Named arguments become attributes on the containing [](:class:`~htmltools.Tag`) element.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.ui.css.CssUnit`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The desired width of each card. It can be one of the following:  * A (unit-less) number between 0 and 1, specified as `1/num`, where `num`   represents the number of desired columns. * A CSS length unit representing either the minimum (when `fixed_width=False`)   or fixed width (`fixed_width=True`). * `None`, which allows power users to set the `grid-template-columns` CSS   property manually, either via a `style` attribute or a CSS stylesheet. * If missing, a value of `200px` will be used.

<code>[**fixed_width**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   When `width` is greater than 1 or is a CSS length unit, e.g., `"200px"`, `fixed_width` indicates whether that `width` value represents the absolute size of each column (`fixed_width=TRUE`) or the minimum size of a column (`fixed_width=FALSE`).  When `fixed_width=FALSE`, new columns are added to a row when `width` space is available and columns will never exceed the container or viewport size.  When `fixed_width=TRUE`, all columns will be exactly `width` wide, which may result in columns overflowing the parent container.

<code>[**heights_equal**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['all', 'row'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'all\']{.parameter-default}</code>

:   If `"all"` (the default), every card in every row of the grid will have the same height. If `"row"`, then every card in _each_ row of the grid will have the same height, but heights may vary between rows.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not each element is wrapped in a fillable container.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A valid CSS unit (e.g., `height="200px"`). Use `min_height` and `max_height` in a filling layout to ensure that the layout container does not shrink below a `min_height` or grow beyond a `max_height`.

<code>[**height_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit to use for the height when on mobile devices (or narrow windows).

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit to use for the gap between columns.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS class to apply to the containing element.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to apply to the containing element.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A [](:class:`~htmltools.Tag`) element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.layout_columns`) for laying out elements into a responsive
  12-column grid.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, ui

y = ui.card("A simple card")

app_ui = ui.page_fluid(
    # Always has 2 columns (on non-mobile)
    ui.layout_column_wrap(y, y, y, width=1 / 2),
    ui.hr(),
    # Has three columns when viewport is wider than 750px
    ui.layout_column_wrap(y, y, y, width="250px"),
)


app = App(app_ui, server=None)


```

================
File: ui.layout_columns.qmd
================
# ui.layout_columns { #shiny.ui.layout_columns }

```python
ui.layout_columns(
    *args,
    col_widths=None,
    row_heights=None,
    fill=True,
    fillable=True,
    gap=None,
    class_=None,
    height=None,
    min_height=None,
    max_height=None,
    **kwargs,
)
```

Create responsive, column-based grid layouts, based on a 12-column grid.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Child elements or attributes to be added to the layout.

<code>[**col_widths**]{.parameter-name} [:]{.parameter-annotation-sep} [[BreakpointsUser](`shiny.ui._layout_columns.BreakpointsUser`)\[[int](`int`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The widths of the columns, possibly at different breakpoints. Can be one of the following:  * `None` (the default): Automatically determines a sensible number of columns   based on the number of children given to the layout. * A list or tuple of integers between 1 and 12, where each element represents   the number of columns for the relevant UI element. Column widths are recycled   to extend the values in `col_widths` to match the actual number of items in   the layout, and children are wrapped onto the next row when a row exceeds 12   column units. For example, `col_widths=(4, 8, 12)` allocates 4 columns to the   first element, 8 columns to the second element, and 12 columns to the third   element (which wraps to the next row). Negative values are also allowed, and   are treated as empty columns. For example, `col_widths=(-2, 8, -2)` would   allocate 8 columns to an element (with 2 empty columns on either side). * A dictionary of column widths at different breakpoints. The keys should be   one of `"xs"`, `"sm"`, `"md"`, `"lg"`, `"xl"`, or `"xxl"`, and the values are   either of the above. For example, `col_widths={"sm": (3, 3, 6), "lg": (4)}`.

<code>[**row_heights**]{.parameter-name} [:]{.parameter-annotation-sep} [[BreakpointsUser](`shiny.ui._layout_columns.BreakpointsUser`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The heights of the rows, possibly at different breakpoints. Can be one of the following:  * A numeric vector, where each value represents the   [fractional unit](https://css-tricks.com/introduction-fr-css-unit/)   (`fr`) height of the relevant row. If there are more rows than values   provided, the pattern will be repeated. For example, `row_heights=(1, 2)`   allows even rows to take up twice as much space as odd rows. * A list of numeric or CSS length units, where each value represents the height   of the relevant row. If more rows are needed than values provided, the pattern   will repeat. For example, `row_heights=["auto", 1]` allows the height of odd   rows to be driven my it's contents and even rows to be   [`1fr`](https://css-tricks.com/introduction-fr-css-unit/). * A single string containing CSS length units. In this case, the value is   supplied directly to `grid-auto-rows`. * A dictionary of row heights at different breakpoints, where each key is a   breakpoint name (one of `"xs"`, `"sm"`, `"md"`, `"lg"`, `"xl"`, or `"xxl"`)   and where the values may be any of the above options.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not each element is wrapped in a fillable container.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit to use for the gap between columns.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   CSS class(es) to apply to the containing element.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A valid CSS unit (e.g., `height="200px"`). Use `min_height` and `max_height` in a filling layout to ensure that the layout container does not shrink below a `min_height` or grow beyond a `max_height`.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to apply to the containing element.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   An [](:class:`~htmltools.Tag`) element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.layout_column_wrap`) for laying out elements into a uniform grid.

## Reference {.doc-section .doc-section-reference}

* [Bootstrap CSS Grid](https://getbootstrap.com/docs/5.3/layout/grid/)
* [Bootstrap Breakpoints](https://getbootstrap.com/docs/5.3/layout/breakpoints/)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from model_plots import *  # model plots and cards

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.panel_title(ui.h2("Model Dashboard")),
    ui.markdown("Using `ui.layout_columns()` for the layout."),
    ui.layout_columns(
        card_loss,
        card_acc,
        card_feat,
        col_widths={"sm": (5, 7, 12)},
        # row_heights=(2, 3),
        # height="700px",
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot
    def loss_over_time():
        return plot_loss_over_time()

    @render.plot
    def accuracy_over_time():
        return plot_accuracy_over_time()

    @render.plot
    def feature_importance():
        return plot_feature_importance()


app = App(app_ui, server)


## file: model_plots.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import ui


def plot_loss_over_time():
    epochs = np.arange(1, 101)
    loss = 1000 / np.sqrt(epochs) + np.random.rand(100) * 25

    fig = plt.figure(figsize=(10, 6))
    plt.plot(epochs, loss)
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    return fig


def plot_accuracy_over_time():
    epochs = np.arange(1, 101)
    accuracy = np.sqrt(epochs) / 12 + np.random.rand(100) * 0.15
    accuracy = [np.min([np.max(accuracy[:i]), 1]) for i in range(1, 101)]

    fig = plt.figure(figsize=(10, 6))
    plt.plot(epochs, accuracy)
    plt.xlabel("Epochs")
    plt.ylabel("Accuracy")
    return fig


def plot_feature_importance():
    features = ["Product Category", "Price", "Brand", "Rating", "Number of Reviews"]
    importance = np.random.rand(5)

    fig = plt.figure(figsize=(10, 6))
    plt.barh(features, importance)
    plt.xlabel("Importance")
    return fig


card_loss = ui.card(
    ui.card_header("Loss Over Time"),
    ui.output_plot("loss_over_time"),
    full_screen=True,
)

card_acc = ui.card(
    ui.card_header("Accuracy Over Time"),
    ui.output_plot("accuracy_over_time"),
    full_screen=True,
)

card_feat = ui.card(
    ui.card_header("Feature Importance"),
    ui.output_plot("feature_importance"),
    full_screen=True,
)


```

================
File: ui.layout_sidebar.qmd
================
# ui.layout_sidebar { #shiny.ui.layout_sidebar }

```python
ui.layout_sidebar(
    sidebar,
    *args,
    fillable=True,
    fill=True,
    bg=None,
    fg=None,
    border=None,
    border_radius=None,
    border_color=None,
    gap=None,
    padding=None,
    height=None,
    **kwargs,
)
```

Sidebar layout

Create a sidebar layout component which can be dropped inside any Shiny UI page
method (e.g. [](:func:`~shiny.ui.page_fillable`)) or
[](:func:`~shiny.ui.card`) context.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   One argument needs to be of class [](:class:`~shiny.ui.Sidebar`) object created by [](:func:`~shiny.ui.sidebar`). The remaining arguments will contain the contents to the main content area. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not the main content area should be wrapped in a fillable container. See [](:func:`~shiny.ui.fill.as_fillable_container`) for details.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not the sidebar layout should be wrapped in a fillable container. See [](:func:`~shiny.ui.fill.as_fill_item`) for details.

<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A background or foreground color.

<code>[**border**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether or not to show a border around the sidebar layout.

<code>[**border_radius**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether or not to round the corners of the sidebar layout.

<code>[**border_color**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A border color.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements provided to `*args`. This value will only be used if `fillable` is `True`.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. `padding` may be one to four values.  * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while   the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left   and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left   respectively.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit to use for the height.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[CardItem](`shiny.ui._card.CardItem`)]{.parameter-annotation}</code>

:   A [](:class:`~htmltools.Tag`) object.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.sidebar`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_slider("n", "N", min=0, max=100, value=20),
        ),
        ui.output_plot("plot"),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.markdown.qmd
================
# ui.markdown { #shiny.ui.markdown }

```python
ui.markdown(text, *, render_func=None, **kwargs)
```

Convert a string of markdown to [](:func:`ui.HTML`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**text**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string of text containing markdown.

<code>[**render_func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Callable](`typing.Callable`)\[\[[str](`str`)\], [str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A function (with at least 1 argument) which accepts a string of markdown and returns a string of HTML. By default, a customized instance of the `markdown_id.main.MarkdownIt` class (which supports Github-flavored markdown) from the ``markdown-it`` package is used.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional keyword arguments passed to the ``render_func``.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[HTML](`shiny.ui.HTML`)]{.parameter-annotation}</code>

:   An [](:class:`~shiny.ui.HTML`) string of the rendered markdown.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, ui

ui_app = ui.page_fluid(
    ui.markdown(
        """
        # Hello World

        This is **markdown** and here is some `code`:

        ```python
        print('Hello world!')
        ```
        """
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(ui_app, server)


```

================
File: ui.modal_button.qmd
================
# ui.modal_button { #shiny.ui.modal_button }

```python
ui.modal_button(label, icon=None, **kwargs)
```

Creates a button that will dismiss a [](:func:`~shiny.ui.modal`).

[](:func:`~shiny.ui.modal_button`) is usually
passed to the `footer` of a [](:func:`~shiny.ui.modal`) to add a button to the footer that will close
the [](:func:`~shiny.ui.modal`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the button.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.modal`)
* [](:func:`~shiny.ui.modal_show`)
* [](:func:`~shiny.ui.modal_remove`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("show", "Show modal dialog"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.show)
    def _():
        m = ui.modal(
            "This is a somewhat important message.",
            title="Somewhat important message",
            easy_close=True,
            footer=None,
        )
        ui.modal_show(m)


app = App(app_ui, server)


```

================
File: ui.modal_remove.qmd
================
# ui.modal_remove { #shiny.ui.modal_remove }

```python
ui.modal_remove(session=None)
```

Remove a modal dialog box.

[](:func:`~shiny.ui.modal_remove`) provides a way to remove a modal programmatically.
Modals can also be removed manually by the user if a [](:func:`~shiny.ui.modal_button`)
is provided, or if the modal is created with `easy_close=True`.

## Parameters {.doc-section .doc-section-parameters}

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) instance that contains the modal to remove. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.modal_show`)
* [](:func:`~shiny.ui.modal`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui


def run_model(delay=10.0):
    import time

    # Pretend to run a model for `delay` seconds
    start_time = time.time()
    while time.time() - start_time < delay:
        pass
    return time.time()


def the_modal():
    return ui.modal(
        "The model is running, please wait.",
        title="Running model",
        easy_close=False,
        footer=None,
    )


app_ui = ui.page_fluid(
    ui.input_action_button("run", "Run Model"),
)


def server(input: Inputs, output: Outputs, session: Session):
    model_result = reactive.value()

    @reactive.effect
    @reactive.event(input.run)
    def do_run_model():
        # Show the modal, blocking interaction with the UI
        ui.modal_show(the_modal())

        result = run_model(delay=4)

        # Now that we have model results, remove the modal
        # and update the model result reactive value
        ui.modal_remove()
        model_result.set(result)


app = App(app_ui, server)


```

================
File: ui.modal_show.qmd
================
# ui.modal_show { #shiny.ui.modal_show }

```python
ui.modal_show(modal, session=None)
```

Show a modal dialog.

[](:func:`~shiny.ui.modal_show`) is used to display a modal that has been
created with [](:func:`~shiny.ui.modal`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**modal**]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   Typically a [](:func:`~shiny.ui.modal`) instance.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) instance to display the modal in. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.modal_remove`)
* [](:func:`~shiny.ui.modal`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("show", "Show modal dialog"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.show)
    def _():
        m = ui.modal(
            "This is a somewhat important message.",
            title="Somewhat important message",
            easy_close=True,
            footer=None,
        )
        ui.modal_show(m)


app = App(app_ui, server)


```

================
File: ui.modal.qmd
================
# ui.modal { #shiny.ui.modal }

```python
ui.modal(
    *args,
    title=None,
    footer=MISSING,
    size='m',
    easy_close=False,
    fade=True,
    **kwargs,
)
```

Creates the UI for a modal dialog, using Bootstrap&#x27;s modal class.

A modal is a dialog box that appears in front of the app. Modals are
typically used for showing important messages, or for presenting UI that requires
input from the user, such as a user name and/or password input.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements for the body of the modal.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An optional title for the modal dialog.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   UI for footer. Use ``None`` for no footer.

<code>[**size**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['m', 's', 'l', 'xl'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'m\']{.parameter-default}</code>

:   The size of the modal dialogue box. Use one of "s" for small, "m" (the default) for medium, or "l" for large.

<code>[**easy_close**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the modal dialog can be dismissed by clicking outside the dialog box, or by pressing the Escape key. If ``False`` (the default), the modal dialog can't be dismissed in those ways; instead it must be dismissed by clicking on a ``modal_button()``, or from a call to ``modal_remove()`` on the server.

<code>[**fade**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If ``False``, the modal dialog will have no fade-in animation (it will simply appear rather than fade in to view).

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the modal's body tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.modal_show`)
* [](:func:`~shiny.ui.modal_remove`)
* [](:func:`~shiny.ui.modal_button`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("show", "Show modal dialog"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.show)
    def _():
        m = ui.modal(
            "This is a somewhat important message.",
            title="Somewhat important message",
            easy_close=True,
            footer=None,
        )
        ui.modal_show(m)


app = App(app_ui, server)


```

================
File: ui.nav_control.qmd
================
# ui.nav_control { #shiny.ui.nav_control }

```python
ui.nav_control(*args)
```

Place a control in the navigation container.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to display as the nav item.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, ui

app_ui = ui.page_fluid(
    ui.navset_card_underline(
        ui.nav_control(ui.a("Shiny", href="https://shiny.posit.co", target="_blank")),
        ui.nav_control(
            ui.a(
                "Learn Shiny",
                href="https://shiny.posit.co/py/docs/overview.html",
                target="_blank",
            )
        ),
    ),
    id="tab",
)


def server(input, output, session):
    pass


app = App(app_ui, server)


```

================
File: ui.nav_menu.qmd
================
# ui.nav_menu { #shiny.ui.nav_menu }

```python
ui.nav_menu(title, *args, value=None, icon=None, align='left')
```

Create a menu of nav items.

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A title to display. Can be a character string or UI elements (i.e., tags).

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavPanel](`shiny.ui._navs.NavPanel`) \| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`~shiny.ui.nav_panel`)) and/or strings. Strings will be rendered as a section header unless the string is a set of two or more hyphens (e.g., ``---``), in which case it will be rendered as a divider.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value of the item. Use this value to determine whether the item is active (when an ``id`` is provided to the nav container) or to programmatically select the item (e.g., [](:func:`~shiny.ui.update_navs`)). You can also provide the value to the ``selected`` argument of the navigation container (e.g., [](:func:`~shiny.ui.navset_tab`)).

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**align**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['left', 'right'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'left\']{.parameter-default}</code>

:   Horizontal alignment of the dropdown menu relative to dropdown toggle.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[NavMenu](`shiny.ui._navs.NavMenu`)]{.parameter-annotation}</code>

:   A UI element representing both the navigation menu.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_card_pill(
        ui.nav_menu(
            "Nav Menu items",
            ui.nav_panel("A", "Panel A content"),
            ui.nav_panel("B", "Panel B content"),
            ui.nav_panel("C", "Panel C content"),
        ),
        id="selected_card_pill",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_card_pill()


app = App(app_ui, server)


```

================
File: ui.nav_panel.qmd
================
# ui.nav_panel { #shiny.ui.nav_panel }

```python
ui.nav_panel(title, *args, value=None, icon=None)
```

Create a nav item pointing to some internal content.

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A title to display. Can be a character string or UI elements (i.e., tags).

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to display when the item is active.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value of the item. Use this value to determine whether the item is active (when an ``id`` is provided to the nav container) or to programmatically select the item (e.g., [](:func:`~shiny.ui.update_navs`)). You can also provide the value to the ``selected`` argument of the navigation container (e.g., [](:func:`~shiny.ui.navset_tab`)).

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, ui

app_ui = ui.page_fluid(
    ui.navset_bar(
        ui.nav_panel("Page 1", "Page 1 content"),
        ui.nav_panel(
            "Page 2",
            ui.navset_card_underline(
                ui.nav_panel("Tab 1", "Tab 1 content"),
                ui.nav_panel("Tab 2", "Tab 2 content"),
                ui.nav_panel("Tab 3", "Tab 3 content"),
            ),
        ),
        title="Nav Panel Example",
    ),
)


def server(input: Inputs):
    pass


app = App(app_ui, server)


```

================
File: ui.nav_spacer.qmd
================
# ui.nav_spacer { #shiny.ui.nav_spacer }

```python
ui.nav_spacer()
```

Create space between nav items.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_underline(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_spacer(),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        id="selected_navset_underline",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_underline()


app = App(app_ui, server)


```

================
File: ui.nav.qmd
================
# ui.nav { #shiny.ui.nav }

`ui.nav(title, *args, value=None, icon=None)`

Deprecated. Please use `nav_panel()` instead of `nav()`.

================
File: ui.navset_bar.qmd
================
# ui.navset_bar { #shiny.ui.navset_bar }

```python
ui.navset_bar(
    *args,
    title,
    id=None,
    selected=None,
    sidebar=None,
    fillable=True,
    gap=None,
    padding=None,
    position='static-top',
    header=None,
    footer=None,
    bg=None,
    inverse=False,
    underline=True,
    collapsible=True,
    fluid=True,
)
```

Render nav items as a navbar.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   Title to display in the navbar.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Sidebar](`shiny.ui._sidebar.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.ui.Sidebar`) component to display on every [](:func:`~shiny.ui.nav_panel`) page.

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [list](`list`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to allow fill items to grow/shrink to fit the browser window. If `True`, all `nav()` pages are fillable. A character vector, matching the value of `nav()`s to be filled, may also be provided. Note that, if a `sidebar` is provided, `fillable` makes the main content portion fillable.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit defining the gap (i.e., spacing) between elements provided to `*args`. This value is only used when the navbar is `fillable`.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding to use for the body. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. The length can be between one and four. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively. This value is only used when the navbar is `fillable`.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['static-top', 'fixed-top', 'fixed-bottom', 'sticky-top'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'static-top\']{.parameter-default}</code>

:   Determines whether the navbar should be displayed at the top of the page with normal scrolling behavior ("static-top"), pinned at the top ("fixed-top"), or pinned at the bottom ("fixed-bottom"). Note that using "fixed-top" or "fixed-bottom" will cause the navbar to overlay your body content, unless you add padding (e.g., ``tags.style("body {padding-top: 70px;}")``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Background color of the navbar (a CSS color).

<code>[**inverse**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Either ``True`` for a light text color or ``False`` for a dark text color.

<code>[**collapsible**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   ``True`` to automatically collapse the navigation elements into an expandable menu on mobile devices or narrow window widths.

<code>[**fluid**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   ``True`` to use fluid layout; ``False`` to use fixed layout.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.page_navbar`)
* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_bar(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        ui.nav_menu(
            "Other links",
            ui.nav_panel("D", "Panel D content"),
            "----",
            "Description:",
            ui.nav_control(
                ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
            ),
        ),
        id="selected_navset_bar",
        title="Navset Bar",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_bar()


app = App(app_ui, server)


```

================
File: ui.navset_card_pill.qmd
================
# ui.navset_card_pill { #shiny.ui.navset_card_pill }

```python
ui.navset_card_pill(
    *args,
    id=None,
    selected=None,
    title=None,
    sidebar=None,
    header=None,
    footer=None,
    placement='above',
)
```

Render nav items as a pillset inside a card container.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Sidebar](`shiny.ui._sidebar.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`shiny.ui.Sidebar`) component to display on every [](:func:`~shiny.ui.nav_panel`) page.

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['above', 'below'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'above\']{.parameter-default}</code>

:   Placement of the nav items relative to the content.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_card_pill(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        ui.nav_menu(
            "Other links",
            ui.nav_panel("D", "Panel D content"),
            "----",
            "Description:",
            ui.nav_control(
                ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
            ),
        ),
        id="selected_navset_card_pill",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_card_pill()


app = App(app_ui, server)


```

================
File: ui.navset_card_tab.qmd
================
# ui.navset_card_tab { #shiny.ui.navset_card_tab }

```python
ui.navset_card_tab(
    *args,
    id=None,
    selected=None,
    title=None,
    sidebar=None,
    header=None,
    footer=None,
)
```

Render nav items as a tabset inside a card container.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Sidebar](`shiny.ui._sidebar.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A `Sidebar` component to display on every `nav()` page.

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_card_tab(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        ui.nav_menu(
            "Other links",
            ui.nav_panel("D", "Panel D content"),
            "----",
            "Description:",
            ui.nav_control(
                ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
            ),
        ),
        id="selected_navset_card_tab",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_card_tab()


app = App(app_ui, server)


```

================
File: ui.navset_card_underline.qmd
================
# ui.navset_card_underline { #shiny.ui.navset_card_underline }

```python
ui.navset_card_underline(
    *args,
    id=None,
    selected=None,
    title=None,
    sidebar=None,
    header=None,
    footer=None,
    placement='above',
)
```

Render nav items inside a card container. Active/focused navigation links are styled with an underline.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Sidebar](`shiny.ui._sidebar.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`shiny.ui.Sidebar`) component to display on every [](:func:`~shiny.ui.nav_panel`) page.

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['above', 'below'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'above\']{.parameter-default}</code>

:   Placement of the nav items relative to the content.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_card_underline(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        ui.nav_menu(
            "Other links",
            ui.nav_panel("D", "Panel D content"),
            "----",
            "Description:",
            ui.nav_control(
                ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
            ),
        ),
        id="selected_navset_card_underline",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_card_underline()


app = App(app_ui, server)


```

================
File: ui.navset_hidden.qmd
================
# ui.navset_hidden { #shiny.ui.navset_hidden }

```python
ui.navset_hidden(*args, id=None, selected=None, header=None, footer=None)
```

Render nav contents without the nav items.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_radio_buttons(
            "controller", "Controller", ["1", "2", "3"], selected="1"
        )
    ),
    ui.navset_hidden(
        ui.nav_panel(None, "Panel 1 content", value="panel1"),
        ui.nav_panel(None, "Panel 2 content", value="panel2"),
        ui.nav_panel(None, "Panel 3 content", value="panel3"),
        id="hidden_tabs",
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.controller)
    def _():
        ui.update_navs("hidden_tabs", selected="panel" + str(input.controller()))


app = App(app_ui, server)


```

================
File: ui.navset_pill_list.qmd
================
# ui.navset_pill_list { #shiny.ui.navset_pill_list }

```python
ui.navset_pill_list(
    *args,
    id=None,
    selected=None,
    header=None,
    footer=None,
    well=True,
    widths=(4, 8),
)
```

Render nav items as a vertical pillset.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match its ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**well**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   ``True`` to place a well (gray rounded rectangle) around the navigation list.

<code>[**widths**]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[int](`int`), [int](`int`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [(4, 8)]{.parameter-default}</code>

:   Column widths of the navigation list and tabset content areas respectively.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_pill_list(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        ui.nav_menu(
            "Other links",
            ui.nav_panel("D", "Panel D content"),
            "----",
            "Description:",
            ui.nav_control(
                ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
            ),
        ),
        id="selected_navset_pill_list",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_pill_list()


app = App(app_ui, server)


```

================
File: ui.navset_pill.qmd
================
# ui.navset_pill { #shiny.ui.navset_pill }

```python
ui.navset_pill(*args, id=None, selected=None, header=None, footer=None)
```

Render nav items as a pillset.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_pill(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        ui.nav_menu(
            "Other links",
            ui.nav_panel("D", "Panel D content"),
            "----",
            "Description:",
            ui.nav_control(
                ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
            ),
        ),
        id="selected_navset_pill",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_pill()


app = App(app_ui, server)


```

================
File: ui.navset_tab.qmd
================
# ui.navset_tab { #shiny.ui.navset_tab }

```python
ui.navset_tab(*args, id=None, selected=None, header=None, footer=None)
```

Render nav items as a tabset.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_underline`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_tab(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        ui.nav_menu(
            "Other links",
            ui.nav_panel("D", "Panel D content"),
            "----",
            "Description:",
            ui.nav_control(
                ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
            ),
        ),
        id="selected_navset_tab",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_tab()


app = App(app_ui, server)


```

================
File: ui.navset_underline.qmd
================
# ui.navset_underline { #shiny.ui.navset_underline }

```python
ui.navset_underline(*args, id=None, selected=None, header=None, footer=None)
```

Render nav items whose active/focused navigation links are styled with an underline.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A collection of nav items (e.g., [](:func:`shiny.ui.nav_panel`)).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav_panel`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.nav_control`)
* [](:func:`~shiny.ui.nav_spacer`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)
* [](:func:`~shiny.ui.navset_card_underline`)
* [](:func:`~shiny.ui.navset_pill_list`)
* [](:func:`~shiny.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
    ui.navset_underline(
        ui.nav_panel("A", "Panel A content"),
        ui.nav_panel("B", "Panel B content"),
        ui.nav_panel("C", "Panel C content"),
        ui.nav_menu(
            "Other links",
            ui.nav_panel("D", "Panel D content"),
            "----",
            "Description:",
            ui.nav_control(
                ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
            ),
        ),
        id="selected_navset_underline",
    ),
    ui.h5("Selected:"),
    ui.output_code("selected"),
)


def server(input, output, session):
    @render.code
    def selected():
        return input.selected_navset_underline()


app = App(app_ui, server)


```

================
File: ui.notification_remove.qmd
================
# ui.notification_remove { #shiny.ui.notification_remove }

```python
ui.notification_remove(id, *, session=None)
```

Remove a notification.

[](:func:`~shiny.ui.notification_remove`) provides a way to remove a notification programmatically.
Notifications can also be removed manually by the user, or automatically after a
specififed amont of time passes.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The ``id`` of the notification to remove.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) in which the notification appears. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The notification's ``id``.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.notification_show`)
* [](:func:`~shiny.ui.modal`)

## Example {.doc-section .doc-section-example}

See [](:func:`shiny.ui.notification_show`).

================
File: ui.notification_show.qmd
================
# ui.notification_show { #shiny.ui.notification_show }

```python
ui.notification_show(
    ui,
    *,
    action=None,
    duration=5,
    close_button=True,
    id=None,
    type='default',
    session=None,
)
```

Show a notification to the user.

A notification is a message that appears near the bottom corner of the app.
Notifications normally disappear after a short period of time, and should multiple
notifications appear together, they will stack on top of one another.

## Parameters {.doc-section .doc-section-parameters}

<code>[**ui**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   Contents of the notification message.

<code>[**action**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Message content that represents an action. For example, this could be a link that the user can click on. This is separate from ui so customized layouts can handle the main notification content separately from the action content.

<code>[**duration**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[int](`int`) \| [float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [5]{.parameter-default}</code>

:   Number of seconds to display the message before it disappears. Use ``None`` to prevent the message from disappearing automatically. The user will need to click the corner of the notification to close it.

<code>[**close_button**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If ``True``, display a button which will make the notification disappear when clicked. If ``False`` do not display.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An optional unique identifier for the notification. If supplied, any existing notification with the same ``id`` will be replaced with this one (otherwise, a new notification is created).

<code>[**type**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['default', 'message', 'warning', 'error'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'default\']{.parameter-default}</code>

:   A string which controls the color of the notification. This should be one of "default" (gray), "message" (blue), "warning" (yellow), or "error" (red).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) in which the notification should appear.  If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The notification's ``id``.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.notification_remove`)
* [](:func:`~shiny.ui.modal`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("show", "Show"),
    " ",
    ui.input_action_button("remove", "Remove"),
)


def server(input: Inputs, output: Outputs, session: Session):
    ids: list[str] = []
    n: int = 0

    @reactive.effect
    @reactive.event(input.show)
    def _():
        nonlocal ids
        nonlocal n
        # Save the ID for removal later
        id = ui.notification_show("Message " + str(n), duration=None)
        ids.append(id)
        n += 1

    @reactive.effect
    @reactive.event(input.remove)
    def _():
        nonlocal ids
        if ids:
            ui.notification_remove(ids.pop())


app = App(app_ui, server, debug=True)


```

================
File: ui.output_code.qmd
================
# ui.output_code { #shiny.ui.output_code }

```python
ui.output_code(id, placeholder=True)
```

Create a output container for code (monospaced text).

This is similar to [](:func:`~shiny.ui.output_text`), except that it displays the text
in a fixed-width container with a gray-ish background color and border.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If the output is empty or ``None``, should an empty rectangle be displayed to serve as a placeholder? (This does not affect behavior when the output is nonempty.)

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Note {.doc-section .doc-section-note}

This function is currently the same as [](:func:`~shiny.ui.output_text_verbatim`), but
this may change in future versions of Shiny.

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.text`)
* [](:func:`~shiny.ui.output_text`)
* [](:func:`~shiny.ui.output_text_verbatim`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.output_text`)

================
File: ui.output_data_frame.qmd
================
# ui.output_data_frame { #shiny.ui.output_data_frame }

```python
ui.output_data_frame(id)
```

Create an output container for an interactive table or grid. Features fast
virtualized scrolling, sorting, filtering, and row selection (single or multiple).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:class:`shiny.render.data_frame`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)
import plotly.express as px
from shinywidgets import output_widget, render_widget

from shiny import App, reactive, render, req, ui

# Load the Gapminder dataset
df = px.data.gapminder()

# Prepare a summary DataFrame
summary_df = (
    df.groupby("country")
    .agg(
        {
            "pop": ["min", "max", "mean"],
            "lifeExp": ["min", "max", "mean"],
            "gdpPercap": ["min", "max", "mean"],
        }
    )
    .reset_index()
)

summary_df.columns = ["_".join(col).strip() for col in summary_df.columns.values]
summary_df.rename(columns={"country_": "country"}, inplace=True)

app_ui = ui.page_fillable(
    {"class": "p-3"},
    ui.markdown(
        "**Instructions**: Select one or more countries in the table below to see more information."
    ),
    ui.layout_columns(
        ui.card(ui.output_data_frame("summary_data"), height="400px"),
        ui.card(output_widget("country_detail_pop"), height="400px"),
        ui.card(output_widget("country_detail_percap"), height="400px"),
        col_widths=[12, 6, 6],
    ),
)


def server(input, output, session):
    @render.data_frame
    def summary_data():
        return render.DataGrid(summary_df.round(2), selection_mode="rows")

    @reactive.calc
    def filtered_df():
        data_selected = summary_data.data_view(selected=True)
        req(not data_selected.empty)
        countries = data_selected["country"]
        # Filter data for selected countries
        return df[df["country"].isin(countries)]

    @render_widget
    def country_detail_pop():
        return px.line(
            filtered_df(),
            x="year",
            y="pop",
            color="country",
            title="Population Over Time",
        )

    @render_widget
    def country_detail_percap():
        return px.line(
            filtered_df(),
            x="year",
            y="gdpPercap",
            color="country",
            title="GDP per Capita Over Time",
        )


app = App(app_ui, server)


```

================
File: ui.output_image.qmd
================
# ui.output_image { #shiny.ui.output_image }

```python
ui.output_image(
    id,
    width='100%',
    height='400px',
    *,
    inline=False,
    click=False,
    dblclick=False,
    hover=False,
    brush=False,
    fill=False,
)
```

Create a output container for a static image.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'100%\']{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'400px\']{.parameter-default}</code>

:   The CSS height, e.g. '100%' or '600px'.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the result is displayed inline.

<code>[**click**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [ClickOpts](`shiny.ui._plot_output_opts.ClickOpts`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   This can be a boolean or an object created by [](:func:`~shiny.ui.click_opts`). The default is `False`, but if you use `True` (or equivalently, `click_opts()`), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via `input.xx_click()`, where `xx` is replaced with the ID of this plot. The input value will be a dictionary with `x` and `y` elements indicating the mouse position.

<code>[**dblclick**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [DblClickOpts](`shiny.ui._plot_output_opts.DblClickOpts`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   This is just like the `click` parameter, but for double-click events.

<code>[**hover**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [HoverOpts](`shiny.ui._plot_output_opts.HoverOpts`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Similar to the `click` argument, this can be a boolean or an object created by [](:func:`~shiny.ui.hover_opts`). The default is `False`, but if you use `True` (or equivalently, `hover_opts()`), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via `input.xx_hover()`, where `xx` is replaced with the ID of this plot. The input value will be a dictionary with `x` and `y` elements indicating the mouse position. To control the hover time or hover delay type, use [](:func:`~shiny.ui.hover_opts`).

<code>[**brush**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [BrushOpts](`shiny.ui._plot_output_opts.BrushOpts`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Similar to the `click` argument, this can be a boolean or an object created by [](:func:`~shiny.ui.brush_opts`). The default is `False`, but if you use `True` (or equivalently, `brush_opts()`), the plot will allow the user to "brush" in the plotting area, and will send information about the brushed area to the server, and the value will be accessible via `input.plot_brush()`. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with `xmin`, `xmax`, `ymin`, and `ymax` elements indicating the brush area. To control the brush behavior, use [](:func:`~shiny.ui.brush_opts`). Multiple `output_image`/`output_plot` calls may share the same `id` value; brushing one image or plot will cause any other brushes with the same `id` to disappear.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether or not to allow the image output to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.image`)
* [](:func:`~shiny.ui.output_plot`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui
from shiny.types import ImgData

app_ui = ui.page_fluid(ui.output_image("image"))


def server(input: Inputs, output: Outputs, session: Session):
    @render.image
    def image():
        from pathlib import Path

        dir = Path(__file__).resolve().parent
        img: ImgData = {"src": str(dir / "posit-logo.png"), "width": "100px"}
        return img


app = App(app_ui, server)


## file: posit-logo.png
## type: binary


```

================
File: ui.output_plot.qmd
================
# ui.output_plot { #shiny.ui.output_plot }

```python
ui.output_plot(
    id,
    width='100%',
    height='400px',
    *,
    inline=False,
    click=False,
    dblclick=False,
    hover=False,
    brush=False,
    fill=MISSING,
)
```

Create a output container for a static plot.

Place a [](:class:`~shiny.render.plot`) result in the user interface. See
[](:class:`~shiny.render.plot`) for more details on what types of plots are supported.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'100%\']{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'400px\']{.parameter-default}</code>

:   The CSS height, e.g. '100%' or '600px'.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the result is displayed inline.

<code>[**click**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [ClickOpts](`shiny.ui._plot_output_opts.ClickOpts`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   This can be a boolean or an object created by [](:func:`~shiny.ui.click_opts`). The default is `False`, but if you use `True` (or equivalently, `click_opts()`), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via `input.xx_click()`, where `xx` is replaced with the ID of this plot. The input value will be a dictionary with `x` and `y` elements indicating the mouse position.

<code>[**dblclick**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [DblClickOpts](`shiny.ui._plot_output_opts.DblClickOpts`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   This is just like the `click` parameter, but for double-click events.

<code>[**hover**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [HoverOpts](`shiny.ui._plot_output_opts.HoverOpts`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Similar to the `click` argument, this can be a boolean or an object created by [](:func:`~shiny.ui.hover_opts`). The default is `False`, but if you use `True` (or equivalently, `hover_opts()`), the plot will send coordinates to the server whenever it is clicked, and the value will be accessible via `input.xx_hover()`, where `xx` is replaced with the ID of this plot. The input value will be a dictionary with `x` and `y` elements indicating the mouse position. To control the hover time or hover delay type, use [](:func:`~shiny.ui.hover_opts`).

<code>[**brush**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [BrushOpts](`shiny.ui._plot_output_opts.BrushOpts`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Similar to the `click` argument, this can be a boolean or an object created by [](:func:`~shiny.ui.brush_opts`). The default is `False`, but if you use `True` (or equivalently, `brush_opts()`), the plot will allow the user to "brush" in the plotting area, and will send information about the brushed area to the server, and the value will be accessible via `input.plot_brush()`. Brushing means that the user will be able to draw a rectangle in the plotting area and drag it around. The value will be a named list with `xmin`, `xmax`, `ymin`, and `ymax` elements indicating the brush area. To control the brush behavior, use [](:func:`~shiny.ui.brush_opts`). Multiple `output_image`/`output_plot` calls may share the same `id` value; brushing one image or plot will cause any other brushes with the same `id` to disappear.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   Whether or not to allow the plot output to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)). If no `fill` value is provided, it will default to the inverse of `inline`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.plot`)
* [](:func:`~shiny.ui.output_image`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_slider(
        "n", "input_slider()", min=10, max=100, value=50, step=5, animate=True
    ),
    ui.output_plot("p"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot
    def p():
        np.random.seed(19680801)
        x_rand = 100 + 15 * np.random.randn(437)
        fig, ax = plt.subplots()
        ax.hist(x_rand, int(input.n()), density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.output_table.qmd
================
# ui.output_table { #shiny.ui.output_table }

```python
ui.output_table(id, **kwargs)
```

Create a output container for a table.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to add to the container.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.table`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pathlib

import pandas as pd

from shiny import App, Inputs, Outputs, Session, render, ui

dir = pathlib.Path(__file__).parent
mtcars = pd.read_csv(dir / "mtcars.csv")


app_ui = ui.page_fluid(
    ui.input_checkbox("highlight", "Highlight min/max values"),
    ui.output_table("result"),
    # Legend
    ui.panel_conditional(
        "input.highlight",
        ui.panel_absolute(
            "Yellow is maximum, grey is minimum",
            bottom="6px",
            right="6px",
            class_="p-1 bg-light border",
        ),
    ),
    class_="p-3",
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.table
    def result():
        if not input.highlight():
            # If we're not highlighting values, we can simply
            # return the pandas data frame as-is; @render.table
            # will call .to_html() on it.
            return mtcars
        else:
            # We need to use the pandas Styler API. The default
            # formatting options for Styler are not the same as
            # DataFrame.to_html(), so we set a few options to
            # make them match.
            return (
                mtcars.style.set_table_attributes(
                    'class="dataframe shiny-table table w-auto"'
                )
                .hide(axis="index")
                .format(
                    {
                        "mpg": "{0:0.1f}",
                        "disp": "{0:0.1f}",
                        "drat": "{0:0.2f}",
                        "wt": "{0:0.3f}",
                        "qsec": "{0:0.2f}",
                    }
                )
                .set_table_styles(
                    [dict(selector="th", props=[("text-align", "right")])]
                )
                .highlight_min(color="silver")
                .highlight_max(color="yellow")
            )


app = App(app_ui, server)


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: ui.output_text_verbatim.qmd
================
# ui.output_text_verbatim { #shiny.ui.output_text_verbatim }

```python
ui.output_text_verbatim(id, placeholder=False)
```

Create a output container for some text.

Place a [](:class:`~shiny.render.text`) result in the user interface.
Differs from [](:func:`~shiny.ui.output_text`) in that it wraps the text in a
fixed-width container with a gray-ish background color and border.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If the output is empty or ``None``, should an empty rectangle be displayed to serve as a placeholder? (This does not affect behavior when the output is nonempty.)

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.text`)
* [](:func:`~shiny.ui.output_text`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.output_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_text("caption", "Caption:", "Data summary"),
    ui.output_text_verbatim("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value():
        return input.caption()


app = App(app_ui, server)


```

================
File: ui.output_text.qmd
================
# ui.output_text { #shiny.ui.output_text }

```python
ui.output_text(id, inline=False, container=None)
```

Create a output container for some text.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the result is displayed inline.

<code>[**container**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagFunction](`htmltools.TagFunction`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Callable that returns the output container.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Note {.doc-section .doc-section-note}

Text is HTML-escaped prior to rendering.

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.text`)
* [](:func:`~shiny.ui.output_text_verbatim`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_text("txt", "Enter the text to display below:", "delete me"),
    ui.row(
        ui.column(6, ui.code("ui.output_text()"), ui.output_text("text")),
        ui.column(
            6,
            ui.code("ui.output_text_verbatim(placeholder=True)"),
            ui.output_text_verbatim("verb", placeholder=True),
        ),
    ),
    ui.row(
        ui.column(6),
        ui.column(
            6,
            ui.code("ui.output_text_verbatim(placeholder=False)"),
            ui.output_text_verbatim("verb_no_placeholder", placeholder=False),
        ),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def text():
        return input.txt()

    @render.text
    def verb():
        return input.txt()

    @render.text
    def verb_no_placeholder():
        return input.txt()


app = App(app_ui, server)


```

================
File: ui.output_ui.qmd
================
# ui.output_ui { #shiny.ui.output_ui }

```python
ui.output_ui(
    id,
    inline=False,
    container=None,
    fill=False,
    fillable=False,
    **kwargs,
)
```

Create a output container for a UI (i.e., HTML) element.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the result is displayed inline.

<code>[**container**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagFunction](`htmltools.TagFunction`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Callable that returns the output container.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether or not to allow the UI output to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether or not the UI output area should be considered a fillable (i.e., flexbox) container.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the output container.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.ui`)
* [](:func:`~shiny.ui.output_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_action_button("add", "Add more controls"),
    ui.output_ui("moreControls"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    @reactive.event(input.add)
    def moreControls():
        return ui.TagList(
            ui.input_slider("n", "N", min=1, max=1000, value=500),
            ui.input_text("label", "Label"),
        )


app = App(app_ui, server)


```

================
File: ui.page_auto.qmd
================
# ui.page_auto { #shiny.ui.page_auto }

```python
ui.page_auto(
    *args,
    title=MISSING,
    window_title=MISSING,
    lang=MISSING,
    theme=MISSING,
    fillable=MISSING,
    full_width=False,
    page_fn=None,
    **kwargs,
)
```

A page container which automatically decides which page function to use.

If there is a top-level [](:func:`~shiny.ui.nav_panel`), [](:func:`~shiny.ui.page_auto`)
will use [](:func:`~shiny.ui.page_navbar`). Otherwise, if there is a top-level sidebar,
[](:func:`~shiny.ui.page_sidebar`) is used.

If there are neither top-level nav panels nor sidebars, this will use the `fillable`
and `full_width` arguments to determine which page function to use:

1. If `fillable` is `True`, [](:func:`~shiny.ui.page_fillable`) is used.
2. Otherwise, if `full_width` is `True`, [](:func:`~shiny.ui.page_fluid`) is used.
3. If neither are `True`, [](:func:`~shiny.ui.page_fixed`) is used.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements. These are used to determine which page function to use, and they are also passed along to that page function.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A title shown on the page.

<code>[**window_title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The browser window title. If no value is provided, this will use the value of ``title``.

<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The default, `None`, results in an empty string.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [Path](`pathlib.Path`) \| [Theme](`shiny.ui._html_deps_external.Theme`) \| [ThemeProvider](`shiny.ui._html_deps_external.ThemeProvider`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A custom Shiny theme created using the [](:class:`~shiny.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.ui.include_css`) to add custom CSS.

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   If there is a top-level sidebar or nav, then the value is passed through to the [](:func:`~shiny.ui.page_sidebar`) or [](:func:`~shiny.ui.page_navbar`) function. Otherwise, if ``True``, use [](:func:`~shiny.ui.page_fillable`), where the content fills the window; if ``False`` (the default), the value of ``full_width`` will determine which page function is used.

<code>[**full_width**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   This has an effect only if there are no sidebars or top-level navs, and ``fillable`` is ``False``. If this is ``False`` (the default), use use [](:func:`~shiny.ui.page_fixed`); if ``True``, use [](:func:`~shiny.ui.page_fillable`).

<code>[**page_fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[..., [Tag](`htmltools.Tag`)\] \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The page function to use. If ``None`` (the default), will automatically choose one based on the arguments provided. If not ``None``, this will override all heuristics for choosing page functions.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional arguments, which are passed to the page function.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

================
File: ui.page_bootstrap.qmd
================
# ui.page_bootstrap { #shiny.ui.page_bootstrap }

```python
ui.page_bootstrap(*args, title=None, lang=None, theme=None, **kwargs)
```

Create a Bootstrap UI page container.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The browser window title (defaults to the host URL of the page). Can also be set as a side effect via [](:func:`~shiny.ui.panel_title`).

<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The default, `None`, results in an empty string.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Path](`pathlib.Path`) \| [Theme](`shiny.ui._html_deps_external.Theme`) \| [ThemeProvider](`shiny.ui._html_deps_external.ThemeProvider`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A custom Shiny theme created using the [](:class:`~shiny.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.ui.include_css`) to add custom CSS.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes on the the `<body>` tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.page_fluid`)
* [](:func:`~shiny.ui.page_navbar`)

================
File: ui.page_fillable.qmd
================
# ui.page_fillable { #shiny.ui.page_fillable }

```python
ui.page_fillable(
    *args,
    padding=None,
    gap=None,
    fillable_mobile=False,
    title=None,
    lang=None,
    theme=None,
    **kwargs,
)
```

Create a fillable page.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding to use for the body. See [](:func:`~shiny.ui.css.as_css_padding`) for more details.

<code>[**fillable_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether or not the page should fill the viewport's height on mobile devices (i.e., narrow windows).

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit passed through [](:func:`~shiny.ui.css.as_css_unit`) defining the `gap` (i.e., spacing) between elements provided to `*args`.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The browser window title (defaults to the host URL of the page). Can also be set as a side effect via [](:func:`~shiny.ui.panel_title`).

<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The default, `None`, results in an empty string.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Path](`pathlib.Path`) \| [Theme](`shiny.ui._html_deps_external.Theme`) \| [ThemeProvider](`shiny.ui._html_deps_external.ThemeProvider`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A custom Shiny theme created using the [](:class:`~shiny.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.ui.include_css`) to add custom CSS.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.page_fluid`)
* [](:func:`~shiny.ui.page_fixed`)

================
File: ui.page_fixed.qmd
================
# ui.page_fixed { #shiny.ui.page_fixed }

```python
ui.page_fixed(*args, title=None, lang=None, theme=None, **kwargs)
```

Create a fixed page.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The browser window title (defaults to the host URL of the page). Can also be set as a side effect via [](:func:`~shiny.ui.panel_title`).

<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The default, `None`, results in an empty string.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Path](`pathlib.Path`) \| [Theme](`shiny.ui._html_deps_external.Theme`) \| [ThemeProvider](`shiny.ui._html_deps_external.ThemeProvider`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A custom Shiny theme created using the [](:class:`~shiny.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.ui.include_css`) to add custom CSS.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes on the page level container.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.page_fluid`)
* [](:func:`~shiny.ui.page_bootstrap`)
* [](:func:`~shiny.ui.page_navbar`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fixed(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_slider("n", "N", min=0, max=100, value=20),
        ),
        ui.output_plot("plot"),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.page_fluid.qmd
================
# ui.page_fluid { #shiny.ui.page_fluid }

```python
ui.page_fluid(*args, title=None, lang=None, theme=None, **kwargs)
```

Create a fluid page.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The browser window title (defaults to the host URL of the page). Can also be set as a side effect via [](:func:`~shiny.ui.panel_title`).

<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The default, `None`, results in an empty string.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Path](`pathlib.Path`) \| [Theme](`shiny.ui._html_deps_external.Theme`) \| [ThemeProvider](`shiny.ui._html_deps_external.ThemeProvider`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A custom Shiny theme created using the [](:class:`~shiny.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.ui.include_css`) to add custom CSS.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes on the page level container.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.page_fixed`)
* [](:func:`~shiny.ui.page_bootstrap`)
* [](:func:`~shiny.ui.page_navbar`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_slider("n", "N", min=0, max=100, value=20),
        ),
        ui.output_plot("plot"),
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.page_navbar.qmd
================
# ui.page_navbar { #shiny.ui.page_navbar }

```python
ui.page_navbar(
    *args,
    title=None,
    id=None,
    selected=None,
    sidebar=None,
    fillable=False,
    fillable_mobile=False,
    gap=None,
    padding=None,
    position='static-top',
    header=None,
    footer=None,
    bg=None,
    inverse=False,
    underline=True,
    collapsible=True,
    fluid=True,
    window_title=MISSING,
    lang=None,
    theme=None,
)
```

Create a page with a navbar and a title.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[NavSetArg](`shiny.types.NavSetArg`) \| [MetadataNode](`htmltools.MetadataNode`) \| [Sequence](`typing.Sequence`)\[[MetadataNode](`htmltools.MetadataNode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Tag](`htmltools.Tag`) \| [TagList](`htmltools.TagList`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The browser window title (defaults to the host URL of the page). Can also be set as a side effect via [](:func:`~shiny.ui.panel_title`).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match its ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Sidebar](`shiny.ui._sidebar.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:func:`~shiny.ui.sidebar`) component to display on every page.

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [list](`list`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether or not the main content area should be considered a fillable (i.e., flexbox) container.

<code>[**fillable_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether or not ``fillable`` should apply on mobile devices.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit defining the gap (i.e., spacing) between elements provided to `*args`. This value is only used when the navbar is _fillable_.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding to use for the body. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. The length can be between one and four. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively. This value is only used when the navbar is _fillable_.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['static-top', 'fixed-top', 'fixed-bottom'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'static-top\']{.parameter-default}</code>

:   Determines whether the navbar should be displayed at the top of the page with normal scrolling behavior ("static-top"), pinned at the top ("fixed-top"), or pinned at the bottom ("fixed-bottom"). Note that using "fixed-top" or "fixed-bottom" will cause the navbar to overlay your body content, unless you add padding (e.g., ``tags.style("body {padding-top: 70px;}")``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Background color of the navbar (a CSS color).

<code>[**inverse**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Either ``True`` for a light text color or ``False`` for a dark text color.

<code>[**collapsible**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   ``True`` to automatically collapse the elements into an expandable menu on mobile devices or narrow window widths.

<code>[**fluid**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   ``True`` to use fluid layout; ``False`` to use fixed layout.

<code>[**window_title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The browser's window title (defaults to the host URL of the page). Can also be set as a side effect via [](:func:`~shiny.ui.panel_title`).

<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The default, `None`, results in an empty string.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Path](`pathlib.Path`) \| [Theme](`shiny.ui._html_deps_external.Theme`) \| [ThemeProvider](`shiny.ui._html_deps_external.ThemeProvider`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A custom Shiny theme created using the [](:class:`~shiny.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.ui.include_css`) to add custom CSS.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.nav`)
* [](:func:`~shiny.ui.nav_menu`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.page_fluid`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.ui.nav`).

================
File: ui.page_output.qmd
================
# ui.page_output { #shiny.ui.page_output }

```python
ui.page_output(id)
```

Create a page container where the entire body is a UI output.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An output id.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element which is meant to be used as a page container.

================
File: ui.page_sidebar.qmd
================
# ui.page_sidebar { #shiny.ui.page_sidebar }

```python
ui.page_sidebar(
    sidebar,
    *args,
    title=None,
    fillable=False,
    fillable_mobile=False,
    window_title=MISSING,
    lang=None,
    theme=None,
    **kwargs,
)
```

Create a page with a sidebar and a title.

## Parameters {.doc-section .doc-section-parameters}

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Sidebar](`shiny.ui._sidebar.Sidebar`)]{.parameter-annotation}</code>

:   Content to display in the sidebar.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Tag](`htmltools.Tag`) \| [TagList](`htmltools.TagList`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A title to display at the top of the page.

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether or not the main content area should be considered a fillable (i.e., flexbox) container.

<code>[**fillable_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether or not ``fillable`` should apply on mobile devices.

<code>[**window_title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The browser's window title (defaults to the host URL of the page). Can also be set as a side effect via [](:func:`~shiny.ui.panel_title`).

<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The default, `None`, results in an empty string.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Path](`pathlib.Path`) \| [Theme](`shiny.ui._html_deps_external.Theme`) \| [ThemeProvider](`shiny.ui._html_deps_external.ThemeProvider`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A custom Shiny theme created using the [](:class:`~shiny.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.ui.include_css`) to add custom CSS.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes passed to [](:func:`~shiny.ui.layout_sidebar`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_slider("n", "N", min=0, max=100, value=20),
    ),
    ui.card(
        ui.output_plot("plot"),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.panel_absolute.qmd
================
# ui.panel_absolute { #shiny.ui.panel_absolute }

```python
ui.panel_absolute(
    *args,
    top=None,
    left=None,
    right=None,
    bottom=None,
    width=None,
    height=None,
    draggable=False,
    fixed=False,
    cursor='auto',
    **kwargs,
)
```

Create a panel of absolutely positioned content.

Creates a `<div>` tag whose CSS position is set to absolute (or fixed if ``fixed =
True``). In HTML, absolute coordinates are specified relative to an element&#x27;s
nearest parent element whose position is not set to static (the default).
If no such parent is found, the coordinates are relative to the page borders.
If you&#x27;re not sure what that means, just keep in mind that you may get
strange results if you use this function from inside of certain types of panels.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to include inside the panel.

<code>[**top**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Distance between the top of the panel and the top of the page or parent container.

<code>[**left**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Distance between the left side of the panel and the left of the page or parent container.

<code>[**right**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Distance between the right side of the panel and the right of the page or parent container.

<code>[**bottom**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Distance between the bottom of the panel and the bottom of the page or parent container.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Width of the panel.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Height of the panel.

<code>[**draggable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, allows the user to move the panel by clicking and dragging.

<code>[**fixed**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Positions the panel relative to the browser window and prevents it from being scrolled with the rest of the page.

<code>[**cursor**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'move', 'default', 'inherit'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The type of cursor that should appear when the user mouses over the panel. Use ``"move"`` for a north-east-south-west icon, ``"default"`` for the usual cursor arrow, or ``"inherit"`` for the usual cursor behavior (including changing to an I-beam when the cursor is over text). The default is ``"auto"``, which is equivalent to ``"move" if draggable else "inherit"``.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes added to the content's container tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagList](`htmltools.TagList`)]{.parameter-annotation}</code>

:   A UI element

## Tip {.doc-section .doc-section-tip}

The position (``top``, ``left``, ``right``, ``bottom``) and size (``width``,
``height``) parameters are all optional, but you should specify exactly two of top,
bottom, and height and exactly two of left, right, and width for predictable
results.

Like most other distance parameters in Shiny, the position and size parameters take
a number (interpreted as pixels) or a valid CSS size string, such as `"100px"`
(100 pixels) or `"25%"`.

For arcane HTML reasons, to have the panel fill the page or parent,
specify 0 for ``top``, ``left``, ``right``, and ``bottom`` rather than the more
obvious `width = "100%"` and `height = "100%"`.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(
    ui.panel_title("A basic absolute panel example", "Demo"),
    ui.panel_absolute(
        ui.panel_well(
            "Drag me around!", ui.input_slider("n", "N", min=0, max=100, value=20)
        ),
        draggable=True,
        width="300px",
        right="50px",
        top="25%",
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(app_ui, server)


```

================
File: ui.panel_conditional.qmd
================
# ui.panel_conditional { #shiny.ui.panel_conditional }

```python
ui.panel_conditional(condition, *args, **kwargs)
```

Create a conditional panel.

Show UI elements only if a ``JavaScript`` condition is ``true``.

## Parameters {.doc-section .doc-section-parameters}

<code>[**condition**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A JavaScript expression that will be evaluated repeatedly to determine whether the panel should be displayed.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to include inside the panel.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to place on the panel tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Note {.doc-section .doc-section-note}

In the JS expression, you can refer to input and output JavaScript objects that
contain the current values of input and output. For example, if you have an input
with an ``id`` of ``foo``, then you can use ``input.foo`` to read its value.
(Be sure not to modify the input/output objects, as this may cause unpredictable
behavior.)

You are not recommended to use special JavaScript characters such as a period . in
the input id's, but if you do use them anyway, for example, `id = "foo.bar"`, you
will have to use `input["foo.bar"]` instead of ``input.foo.bar`` to read the input
value.

## Tip {.doc-section .doc-section-tip}

A more powerful (but slower) way to conditionally show UI content is to use
[](:class:`~shiny.render.ui`).

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.render.ui`)
* [](:func:`~shiny.ui.output_ui`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(
    ui.input_checkbox("show", "Show radio buttons", False),
    ui.panel_conditional(
        "input.show", ui.input_radio_buttons("radio", "Choose ", ["slider", "select"])
    ),
    ui.panel_conditional(
        "input.show && input.radio === 'slider'",
        ui.input_slider("slider", None, min=0, max=100, value=50),
    ),
    ui.panel_conditional(
        "input.show && input.radio === 'select'",
        ui.input_select("select", None, ["A", "B", "C"]),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(app_ui, server)


```

================
File: ui.panel_fixed.qmd
================
# ui.panel_fixed { #shiny.ui.panel_fixed }

```python
ui.panel_fixed(
    *args,
    top=None,
    left=None,
    right=None,
    bottom=None,
    width=None,
    height=None,
    draggable=False,
    cursor='auto',
    **kwargs,
)
```

Create a panel of absolutely positioned content.

This function is equivalent to calling [](:func:`~shiny.ui.panel_absolute`) with
``fixed=True`` (i.e., the panel does not scroll with the rest of the page). See
[](:func:`~shiny.ui.panel_absolute`) for more information.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to include inside the panel.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Arguments passed along to [](:func:`~shiny.ui.panel_absolute`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagList](`htmltools.TagList`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.panel_absolute`)

================
File: ui.panel_main.qmd
================
# ui.panel_main { #shiny.ui.panel_main }

`ui.panel_main(*args, width=8, **kwargs)`

Deprecated. Please supply the `*args` of [](:func:`~shiny.ui.panel_main`) directly to [](:func:`~shiny.ui.layout_sidebar`).

================
File: ui.panel_sidebar.qmd
================
# ui.panel_sidebar { #shiny.ui.panel_sidebar }

`ui.panel_sidebar(*args, width=4, **kwargs)`

Deprecated. Please use [](:func:`~shiny.ui.sidebar`) instead.

================
File: ui.panel_title.qmd
================
# ui.panel_title { #shiny.ui.panel_title }

```python
ui.panel_title(title, window_title=MISSING)
```

Create title(s) for the application.

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [Tag](`htmltools.Tag`) \| [TagList](`htmltools.TagList`)]{.parameter-annotation}</code>

:   A title to display in the app's UI.

<code>[**window_title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A title to display on the browser tab.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagList](`htmltools.TagList`)]{.parameter-annotation}</code>

:   A UI element.

## Note {.doc-section .doc-section-note}

This result of this function causes a side effect of adding a title tag to the head
of the document (this is necessary for the browser to display the title in the
browser window). You can also specify a page title explicitly using the title
parameter of the top-level page function (e.g., [](:func:`~shiny.ui.page_fluid`)).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(ui.panel_title("Page title", "Window title"))


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(app_ui, server)


```

================
File: ui.panel_well.qmd
================
# ui.panel_well { #shiny.ui.panel_well }

```python
ui.panel_well(*args, **kwargs)
```

Create a well panel.

Creates a panel with a slightly inset border and gray background. Equivalent to
Bootstrap&#x27;s ``well`` CSS class.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to include inside the panel.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to place on the panel tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

================
File: ui.popover.qmd
================
# ui.popover { #shiny.ui.popover }

```python
ui.popover(
    trigger,
    *args,
    title=None,
    id=None,
    placement='auto',
    options=None,
    **kwargs,
)
```

Add a popover to a UI element.

Display additional information when clicking on a UI element (typically a
button).

## Parameters {.doc-section .doc-section-parameters}

<code>[**trigger**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   The UI element to serve as the popover trigger (typically a [](:func:`~shiny.ui.input_action_button`) or similar). If `trigger` renders as multiple HTML elements (e.g., it's a [](:class:`~shiny.ui.TagList`)), the last HTML element is used for the trigger. If the `trigger` should contain all of those elements, wrap the object in a [](:func:`~shiny.ui.tags.div`) or [](:func:`~shiny.ui.tags.span`).

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements for the popover's body. Character strings are automatically escaped unless marked as [](:class:`~shiny.ui.HTML`).

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A title (header) for the popover.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string. Required to re-actively respond to the visibility of the popover (via the `input.<ID>()` value) and/or update the visibility/contents of the popover.

<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'top', 'right', 'bottom', 'left'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The placement of the popover relative to its trigger.

<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[dict](`dict`)\[[str](`str`), [Any](`typing.Any`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A list of additional `options <https://getbootstrap.com/docs/5.3/components/popovers/#options>`_.

## Closing popovers {.doc-section .doc-section-closing-popovers}


In addition to clicking the `close_button`, popovers can be closed by pressing the
Esc/Space key when the popover (and/or its trigger) is focused.

## Accessibility of Popover Triggers {.doc-section .doc-section-accessibility-of-popover-triggers}


Because the user needs to interact with the `trigger` element to see the `popover`,
it's best practice to use an element that is typically accessible via keyboard
interactions, like a button or a link.

If you use a non-interactive element, like a `<span>` or text, `popover()` will
automatically add the `tabindex="0"` attribute to the trigger element to make sure
that users can reach the element with the keyboard. This means that in most cases
you can use any element you want as the trigger.

One place where it's important to consider the accessibility of the trigger is when
using an icon without any accompanying text. In these cases, many icon elements are
created with the assumption that the icon is decorative, which will make it
inaccessible to users of assistive technologies.

When using an icon as the primary trigger, ensure that the icon does not have
`aria-hidden="true"` or `role="presentation"` attributes. Icon packages typically
provide a way to specify a title for the icon, as well as a way to specify that the
icon is not decorative. The title should be a short description of the purpose of
the trigger, rather than a description of the icon itself.

For example:

```python
icon_title = "Settings"
def bs_gear_icon(title: str):
    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon("gear", title = icon_title)`
    return ui.HTML(f'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-gear " style="height:1em;width:1em;fill:currentColor;" aria-hidden="true" role="img" ><title>{title}</title><path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"></path><path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"></path></svg>')

ui.popover(
    bs_gear_icon(icon_title),
    title = icon_title,
    ui.input_slider("n", "Number of points", 1, 100, 50)
)
```

```python
icon_title = "Settings"
def fa_gear_icon(title: str):
    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa("gear", a11y = "sem", title = icon_title)`
    return ui.HTML(f'<svg aria-label="{title}" role="img" viewBox="0 0 512 512" style="height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;"><title>{title}</title><path d="M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z"/></svg>')
ui.popover(
    fa_gear_icon(icon_title),
    title = icon_title,
    ui.input_slider("n", "Number of points", 1, 100, 50)
)
```

## See Also {.doc-section .doc-section-see-also}

* <https://getbootstrap.com/docs/5.3/components/popovers/>
* [](:func:`~shiny.ui.update_popover`)
* [](:func:`~shiny.ui.tooltip`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import gear_fill

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.popover(
        ui.input_action_button("btn", "A button", class_="mt-3"),
        "A popover with more context and information than should be used in a tooltip.",
        "You can even have multiple DOM elements in a popover!",
        id="btn_popover",
    ),
    ui.hr(),
    ui.card(
        ui.card_header(
            "Plot title (Click the gear to change variables)",
            ui.popover(
                ui.span(
                    gear_fill,
                    style="position:absolute; top: 5px; right: 7px;",
                ),
                "Put dropdowns here to alter your plot!",
                ui.input_selectize("x", "X", ["x1", "x2", "x3"]),
                ui.input_selectize("y", "Y", ["y1", "y2", "y3"]),
                placement="right",
                id="card_popover",
            ),
        ),
        ui.output_text_verbatim("plot_txt", placeholder=True),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def plot_txt():
        return f"<Making plot using x: {input.x()} and y: {input.y()}>"


app = App(app_ui, server=server)


## file: icons.py
from shiny import ui

# https://icons.getbootstrap.com/icons/gear-fill/
gear_fill = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16"><path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/></svg>'
)


```

================
File: ui.Progress.qmd
================
# ui.Progress { #shiny.ui.Progress }

```python
ui.Progress(self, min=0, max=1, session=None)
```

Initialize a progress bar.

`Progress` creates a computation manager that can be used with `with` to
run a block of code. Shiny will display a progress bar while the code runs, which
you can update by calling the `set()` and `message()` methods of the computation
manager at strategic points in the code block.

## Parameters {.doc-section .doc-section-parameters}

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   The value that represents the starting point of the progress bar. Must be less than ``max``.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   The value that represents the end of the progress bar. Must be greater than ``min``.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) instance that the progress bar should appear in. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio

from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_action_button("button", "Compute"),
    ui.output_text("compute"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    @reactive.event(input.button)
    async def compute():
        with ui.Progress(min=1, max=15) as p:
            p.set(message="Calculation in progress", detail="This may take a while...")

            for i in range(1, 15):
                p.set(i, message="Computing")
                await asyncio.sleep(0.1)
                # Normally use time.sleep() instead, but it doesn't yet work in Pyodide.
                # https://github.com/pyodide/pyodide/issues/2354

        return "Done computing!"


app = App(app_ui, server)


```

## Methods

| Name | Description |
| --- | --- |
| [close](#shiny.ui.Progress.close) | Close the progress bar. You can also use the Progress object as a context manager, which will cause the progress bar to close on exit. |
| [inc](#shiny.ui.Progress.inc) | Increment the progress bar. |
| [set](#shiny.ui.Progress.set) | Opens and updates the progress panel. |

### close { #shiny.ui.Progress.close }

```python
ui.Progress.close()
```

Close the progress bar. You can also use the Progress object as a context
manager, which will cause the progress bar to close on exit.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The object instance

#### Note {.doc-section .doc-section-note}

Removes the progress panel. Future calls to set and close will be ignored.

### inc { #shiny.ui.Progress.inc }

```python
ui.Progress.inc(amount=0.1, message=None, detail=None)
```

Increment the progress bar.

Like ``set``, this updates the progress panel. The difference is that ``inc``
increases the progress bar by amount, instead of setting it to a specific value.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The object instance

<code>[**amount**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0.1]{.parameter-default}</code>

:   The amount to increment in progress.

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The message to be displayed to the user or ``None`` to hide the current message (if any).

<code>[**detail**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The detail message to be displayed to the user or ``None`` to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.

### set { #shiny.ui.Progress.set }

```python
ui.Progress.set(value=None, message=None, detail=None)
```

Opens and updates the progress panel.

When called the first time, the progress panel is displayed.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The object instance

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value at which to set the progress bar, relative to ``min`` and ``max``. ``None`` hides the progress bar, if it is currently visible.

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The message to be displayed to the user or ``None`` to hide the current message (if any).

<code>[**detail**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The detail message to be displayed to the user or ``None`` to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.

================
File: ui.remove_accordion_panel.qmd
================
# ui.remove_accordion_panel { #shiny.ui.remove_accordion_panel }

```python
ui.remove_accordion_panel(id, target, session=None)
```

Remove an [](:func:`~shiny.ui.accordion_panel`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that matches an existing [](:func:`~shiny.ui.accordion`)'s `id`.

<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [list](`list`)\[[str](`str`)\]]{.parameter-annotation}</code>

:   The `value` of an existing panel to remove.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.accordion_panel`)
* [](:func:`~shiny.ui.update_accordion`)
* [](:func:`~shiny.ui.insert_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random

from shiny import App, Inputs, Outputs, Session, reactive, ui


def make_panel(letter: str) -> ui.AccordionPanel:
    return ui.accordion_panel(
        f"Section {letter}", f"Some narrative for section {letter}"
    )


items = [make_panel(letter) for letter in "ABCDE"]

choices = ["A", "B", "C", "D", "E"]
random.shuffle(choices)

app_ui = ui.page_fluid(
    ui.input_action_button(
        "remove_panel",
        f"Remove Section {choices[-1]}",
        class_="mt-3 mb-3",
    ),
    " (Sections randomly picked at server start)",
    ui.accordion(*items, id="acc", multiple=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    # Copy the list for user
    user_choices = [choice for choice in choices]

    @reactive.effect
    @reactive.event(input.remove_panel)
    def _():
        if len(user_choices) == 0:
            ui.notification_show("No more panels to remove!")
            return

        # Remove panel
        ui.remove_accordion_panel("acc", f"Section {user_choices.pop()}")

        label = "No more panels to remove!"
        if len(user_choices) > 0:
            label = f"Remove Section {user_choices[-1]}"
        ui.update_action_button("remove_panel", label=label)


app = App(app_ui, server)


```

================
File: ui.remove_ui.qmd
================
# ui.remove_ui { #shiny.ui.remove_ui }

```python
ui.remove_ui(selector, multiple=False, immediate=False, session=None)
```

Remove UI objects.

## Parameters {.doc-section .doc-section-parameters}

<code>[**selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that is accepted by jQuery's selector (i.e. the string ``x`` to be placed in a ``$(x)`` jQuery call), which determines the element(s) to remove. If you want to remove a Shiny input or output, note that many of these are wrapped in ``<div>``s, so you may need to use a somewhat complex selector — see the Examples below. (Alternatively, you could also wrap the inputs/outputs that you want to be able to remove easily in a ``<div>`` with an id.)

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   In case your selector matches more than one element, ``multiple`` determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).

<code>[**immediate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session._session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.insert_ui`)
* [](:class:`~shiny.render.ui`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("rmv", "Remove UI"),
    ui.input_text("txt", "Click button above to remove me"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.rmv)
    def _():
        ui.remove_ui(selector="div:has(> #txt)")


app = App(app_ui, server)


```

================
File: ui.row.qmd
================
# ui.row { #shiny.ui.row }

```python
ui.row(*args, **kwargs)
```

Responsive row-column based layout

Layout UI components using Bootstrap&#x27;s grid layout system. Use ``row()`` to group
elements that should appear on the same line (if the browser has adequate width) and
[](:func:`~shiny.ui.column`) to define how much horizontal space within a 12-unit wide
grid each on of these elements should occupy. See the [layout
guide](https://shiny.posit.co/articles/layout-guide.html) for more context and
examples.
(The article is about Shiny for R, but the general principles are the same.)

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Any number of child elements.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to place on the row tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.column`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.row(
        ui.column(4, ui.input_slider("n", "N", min=0, max=100, value=20)),
        ui.column(8, ui.output_plot("plot")),
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)


```

================
File: ui.showcase_bottom.qmd
================
# ui.showcase_bottom { #shiny.ui.showcase_bottom }

```python
ui.showcase_bottom(
    width='100%',
    width_full_screen=None,
    height='auto',
    height_full_screen='2fr',
    max_height='100px',
    max_height_full_screen=None,
)
```

Showcase bottom

A [](:func:`~shiny.ui.showcase_bottom`) is a `ShowcaseLayout` with
the following default properties:

* `width` is `"100%"`
* `width_full_screen` is `None`
* `height` is `"auto"`
* `height_full_screen` is `"2fr"`
* `max_height` is `"100px"`
* `max_height_full_screen` is `None`

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.showcase_left_center`)
* [](:func:`~shiny.ui.showcase_top_right`)
* [](:func:`~shiny.ui.value_box`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import arrow_up, piggy_bank

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.layout_column_wrap(
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="bg-gradient-orange-cyan",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="text-green",
            showcase_layout="top right",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="purple",
            showcase_layout="bottom",
            full_screen=True,
        ),
    )
)


app = App(app_ui, server=None)


## file: icons.py
from shiny import ui

piggy_bank = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-piggy-bank " style="fill:currentColor;height:100%;" aria-hidden="true" role="img" ><path d="M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z"></path>\n<path fill-rule="evenodd" d="M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z"></path></svg>'
)
arrow_up = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-arrow-up " style="height:1em;width:1em;fill:currentColor;" aria-hidden="true" role="img" ><path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"></path></svg>'
)


```

================
File: ui.showcase_left_center.qmd
================
# ui.showcase_left_center { #shiny.ui.showcase_left_center }

```python
ui.showcase_left_center(
    width='30%',
    width_full_screen='1fr',
    max_height='100px',
    max_height_full_screen='67%',
)
```

Showcase left center

A [](:func:`~shiny.ui.showcase_left_center`) is a `ShowcaseLayout` with
the following default properties:

* `width` is `"30%"`
* `width_full_screen` is `"1fr"`
* `max_height` is `"100px"`
* `max_height_full_screen` is `"67%"`

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.showcase_top_right`)
* [](:func:`~shiny.ui.showcase_bottom`)
* [](:func:`~shiny.ui.value_box`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import arrow_up, piggy_bank

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.layout_column_wrap(
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="bg-gradient-orange-cyan",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="text-green",
            showcase_layout="top right",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="purple",
            showcase_layout="bottom",
            full_screen=True,
        ),
    )
)


app = App(app_ui, server=None)


## file: icons.py
from shiny import ui

piggy_bank = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-piggy-bank " style="fill:currentColor;height:100%;" aria-hidden="true" role="img" ><path d="M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z"></path>\n<path fill-rule="evenodd" d="M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z"></path></svg>'
)
arrow_up = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-arrow-up " style="height:1em;width:1em;fill:currentColor;" aria-hidden="true" role="img" ><path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"></path></svg>'
)


```

================
File: ui.showcase_top_right.qmd
================
# ui.showcase_top_right { #shiny.ui.showcase_top_right }

```python
ui.showcase_top_right(
    width='40%',
    width_full_screen='1fr',
    max_height='75px',
    max_height_full_screen='67%',
)
```

Showcase top right

A [](:func:`~shiny.ui.showcase_top_right`) is a `ShowcaseLayout` with
the following default properties:

* `width` is `"40%"`
* `width_full_screen` is `"1fr"`
* `max_height` is `"75px"`
* `max_height_full_screen` is `"67%"`

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.showcase_left_center`)
* [](:func:`~shiny.ui.showcase_bottom`)
* [](:func:`~shiny.ui.value_box`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import arrow_up, piggy_bank

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.layout_column_wrap(
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="bg-gradient-orange-cyan",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="text-green",
            showcase_layout="top right",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            ui.h1(ui.HTML("$1 <i>Billion</i> Dollars")),
            ui.span(arrow_up, " 30% VS PREVIOUS 30 DAYS"),
            showcase=piggy_bank,
            theme="purple",
            showcase_layout="bottom",
            full_screen=True,
        ),
    )
)


app = App(app_ui, server=None)


## file: icons.py
from shiny import ui

piggy_bank = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-piggy-bank " style="fill:currentColor;height:100%;" aria-hidden="true" role="img" ><path d="M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z"></path>\n<path fill-rule="evenodd" d="M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z"></path></svg>'
)
arrow_up = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-arrow-up " style="height:1em;width:1em;fill:currentColor;" aria-hidden="true" role="img" ><path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"></path></svg>'
)


```

================
File: ui.sidebar.qmd
================
# ui.sidebar { #shiny.ui.sidebar }

```python
ui.sidebar(
    *args,
    position='left',
    open=None,
    width=250,
    id=None,
    title=None,
    bg=None,
    fg=None,
    class_=None,
    max_height_mobile=None,
    gap=None,
    padding=None,
    **kwargs,
)
```

Sidebar element

Create a collapsing sidebar layout by providing a `sidebar()` object to the
`sidebar=` argument of:

* [](:func:`~shiny.ui.layout_sidebar`)
  * Creates a sidebar layout component which can be dropped inside any Shiny UI page method (e.g. [](:func:`~shiny.ui.page_fillable`)) or [](:func:`~shiny.ui.card`) context.
* [](:func:`~shiny.ui.navset_bar`), [](:func:`~shiny.ui.navset_card_tab`), and [](:func:`~shiny.ui.navset_card_pill`)
  * Creates a multi page/tab UI with a singular `sidebar()` (which is
    shown on every page/tab).

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents of the sidebar. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [250]{.parameter-default}</code>

:   A valid CSS unit used for the width of the sidebar.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['left', 'right'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'left\']{.parameter-default}</code>

:   Where the sidebar should appear relative to the main content, one of `"left"` or `"right"`.

<code>[**open**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SidebarOpenSpec](`shiny.ui._sidebar.SidebarOpenSpec`) \| [SidebarOpenValue](`shiny.ui._sidebar.SidebarOpenValue`) \| [Literal](`typing.Literal`)\['desktop'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial state of the sidebar. If a string, the possible values are:  * `"open"`: the sidebar starts open * `"closed"`: the sidebar starts closed * `"always"`: the sidebar is always open and cannot be closed  Alternatively, you can provide a dictionary with keys `"desktop"` and `"mobile"` to set different initial states for desktop and mobile. For example, when `{"desktop": "open", "mobile": "closed"}` the sidebar is initialized in the open state on desktop screens or in the closed state on mobile screens.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string. Required if wanting to reactively read (or update) the `collapsible` state in a Shiny app.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character title to be used as the sidebar title, which will be wrapped in a `<div>` element with class `sidebar-title`. You can also provide a custom [](:class:`~htmltools.Tag`) for the title element, in which case you'll likely want to give this element `class = "sidebar-title"`.

<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A background or foreground color.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   CSS classes for the sidebar container element, in addition to the fixed `.sidebar` class.

<code>[**max_height_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit (passed through [](:func:`~shiny.ui.css.as_css_unit`)) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements provided to `*args`.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. `padding` may be one to four values.  * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while   the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left   and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left   respectively.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Named attributes are supplied to the sidebar content container.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Sidebar](`shiny.ui._sidebar.Sidebar`)]{.parameter-annotation}</code>

:   A [](:class:`~shiny.ui.Sidebar`) object.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.layout_sidebar`)
* [](:func:`~shiny.ui.navset_bar`)
* [](:func:`~shiny.ui.navset_card_tab`)
* [](:func:`~shiny.ui.navset_card_pill`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.card(
        ui.layout_sidebar(
            ui.sidebar("Left sidebar content", id="sidebar_left"),
            ui.output_text_verbatim("state_left"),
        )
    ),
    ui.card(
        ui.layout_sidebar(
            ui.sidebar("Right sidebar content", id="sidebar_right", position="right"),
            ui.output_text_verbatim("state_right"),
        ),
    ),
    ui.card(
        ui.layout_sidebar(
            ui.sidebar("Closed sidebar content", id="sidebar_closed", open="closed"),
            ui.output_text_verbatim("state_closed"),
        )
    ),
    ui.card(
        ui.layout_sidebar(
            ui.sidebar("Always sidebar content", id="sidebar_always", open="always"),
            ui.output_text_verbatim("state_always"),
        )
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def state_left():
        return f"input.sidebar_left(): {input.sidebar_left()}"

    @render.text
    def state_right():
        return f"input.sidebar_right(): {input.sidebar_right()}"

    @render.text
    def state_closed():
        return f"input.sidebar_closed(): {input.sidebar_closed()}"

    @render.text
    def state_always():
        return f"input.sidebar_always(): {input.sidebar_always()}"


app = App(app_ui, server)


```

================
File: ui.TagList.qmd
================
# ui.TagList { #shiny.ui.TagList }

```python
ui.TagList(self, *args)
```

Create an HTML tag list (i.e., a fragment of HTML)

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools._core.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   The tag children to add to the list.

## Examples {.doc-section .doc-section-examples}

```python
>>> from htmltools import TagList, div
>>> TagList("hello", div(id="foo", class_="bar"))
hello
<div id="foo" class="bar"></div>
```

## Methods

| Name | Description |
| --- | --- |
| [append](#shiny.ui.TagList.append) | Append tag children to the end of the list. |
| [extend](#shiny.ui.TagList.extend) | Extend the children by appending an iterable of children. |
| [get_dependencies](#shiny.ui.TagList.get_dependencies) | Get any dependencies needed to render the HTML. |
| [get_html_string](#shiny.ui.TagList.get_html_string) | Return the HTML string for this tag list. |
| [insert](#shiny.ui.TagList.insert) | Insert tag children before a given index. |
| [render](#shiny.ui.TagList.render) | Get string representation as well as its HTML dependencies. |
| [save_html](#shiny.ui.TagList.save_html) | Save to a HTML file. |
| [show](#shiny.ui.TagList.show) | Preview as a complete HTML document. |
| [tagify](#shiny.ui.TagList.tagify) | Convert any tagifiable children to Tag/TagList objects. |

### append { #shiny.ui.TagList.append }

```python
ui.TagList.append(item, *args)
```

Append tag children to the end of the list.

### extend { #shiny.ui.TagList.extend }

```python
ui.TagList.extend(other)
```

Extend the children by appending an iterable of children.

### get_dependencies { #shiny.ui.TagList.get_dependencies }

```python
ui.TagList.get_dependencies(dedup=True)
```

Get any dependencies needed to render the HTML.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**dedup**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to deduplicate the dependencies.

### get_html_string { #shiny.ui.TagList.get_html_string }

```python
ui.TagList.get_html_string(
    indent=0,
    eol='\n',
    *,
    add_ws=True,
    _escape_strings=True,
)
```

Return the HTML string for this tag list.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**indent**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Number of spaces to indent each line of the HTML.

<code>[**eol**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\n\']{.parameter-default}</code>

:   End-of-line character(s).

<code>[**add_ws**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to add whitespace between the opening tag and the first child. If either this is True, or the child's add_ws attribute is True, then whitespace will be added; if they are both False, then no whitespace will be added.

### insert { #shiny.ui.TagList.insert }

```python
ui.TagList.insert(i, item)
```

Insert tag children before a given index.

### render { #shiny.ui.TagList.render }

```python
ui.TagList.render()
```

Get string representation as well as its HTML dependencies.

### save_html { #shiny.ui.TagList.save_html }

```python
ui.TagList.save_html(file, *, libdir='lib', include_version=True)
```

Save to a HTML file.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**file**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The file to save to.

<code>[**libdir**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'lib\']{.parameter-default}</code>

:   The directory to save the dependencies to.

<code>[**include_version**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to include the version number in the dependency folder name.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The path to the generated HTML file.

### show { #shiny.ui.TagList.show }

```python
ui.TagList.show(renderer='auto')
```

Preview as a complete HTML document.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**renderer**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'ipython', 'browser'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The renderer to use.

### tagify { #shiny.ui.TagList.tagify }

```python
ui.TagList.tagify()
```

Convert any tagifiable children to Tag/TagList objects.

================
File: ui.tags.qmd
================
# ui.tags { #shiny.ui.tags }

`ui.tags`

Functions for creating HTML tags.

================
File: ui.Theme.qmd
================
# ui.Theme { #shiny.ui.Theme }

```python
ui.Theme(self, preset=None, name=None, include_paths=None)
```

Create a custom Shiny theme.

The `Theme` class allows you to create a custom Shiny theme by providing custom Sass
code. The theme can be based on one of the available presets, such as `"shiny"` or
`"bootstrap"`, or a Bootswatch theme. Use the `.add_*()` methods can be chained
together to add custom Sass functions, defaults, mixins, and rules.

Pass the `Theme` object directly to the `theme` argument of any Shiny page function,
such as [](:func:`~shiny.ui.page_sidebar`) or [](:func:`~shiny.ui.page_navbar`). In Shiny
Express apps, use the `theme` argument of [](:func:`~shiny.express.ui.page_opts`) to set
the app theme.

**Note: Compiling custom themes requires the
[libsass](https://pypi.org/project/libsass/) package**, which is not installed by
default with Shiny. Use `pip install libsass` or `pip install "shiny[theme]"` to
install it.

Customized themes are compiled to CSS when the theme is used. The `Theme` class
caches the compiled CSS so that it&#x27;s only compiled for the first user to load your
app, but you can speed up app loading (and avoid the runtime `libsass` dependency)
by pre-compiling the theme CSS and saving it to a file. To do this, use the
`.to_css()` method to render the theme to a single minified CSS string.

```{.python filename="my_theme.py"}
from pathlib import Path

from shiny import ui

my_theme = (
    ui.Theme("shiny")
    .add_defaults(
        my_purple="#aa00aa",
    )
    .add_mixins(
        headings_color="$my-purple",
    )
)

with open(Path(__file__).parent / "my_theme.css", "w") as f:
    f.write(my_theme.to_css())
```

Run this script with `python my_theme.py` to generate the CSS file. Once saved to a
file, the CSS can be used in any Shiny app by passing the file path to the `theme`
argument instead of the `Theme` object.

```{.python filename="app.py"}
from pathlib import Path

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.h2("Hello, themed Shiny!"),
    # App content here
    title="My App",
    theme=Path(__file__).parent / "my_theme.css",
)

def server(input):
    pass

app = App(app_ui, server)
```

## Parameters {.doc-section .doc-section-parameters}

<code>[**preset**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The name of the preset to use as a base. `"shiny"` is the default theme for Shiny apps and `"bootstrap"` uses standard Bootstrap 5 styling. Bootswatch theme presets are also available. Use `Theme.available_presets()` to see the full list.

<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A custom name for the theme. If not provided, the preset name will be used.

<code>[**include_paths**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`) \| [list](`list`)\[[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Additional paths to include when looking for Sass files used in `@import` statements in the theme. This can be a single path as a string or [](:class:`pathlib.Path`), or a list of paths. The paths should point to directories containing additional Sass files that the theme depends on.

## Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[ValueError](`ValueError`)]{.parameter-annotation}</code>

:   If the `preset` is not a valid theme preset.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import filler_text, my_theme

from shiny import App, render, ui

app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_numeric("n", "N", min=0, max=100, value=20),
        ui.input_slider("m", "M", min=0, max=100, value=50),
        ui.input_selectize("letter", "Letter", choices=["A", "B", "C"]),
        title="Parameters",
    ),
    ui.h2("Output"),
    ui.output_text_verbatim("txt"),
    ui.markdown(filler_text),
    title="Theme Example",
    theme=my_theme,
)


def server(input, output, session):
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"


app = App(app_ui, server)


## file: shared.py
from pathlib import Path

from shiny import ui

my_theme = (
    ui.Theme("shiny", include_paths=Path(__file__).parent)
    .add_defaults(
        bslib_dashboard_design=True,
    )
    .add_mixins(
        headings_color="$success",
        bar_color="$purple",
        select_color_text="$orange",
    )
    .add_rules(
        """
        em { color: $warning; }
        .sidebar-title { color: $danger; }
        """
    )
    .add_rules('@import "css/rules.scss";')
)


if False:
    # To avoid runtime Sass compilation, save your theme CSS to a file
    # and then use that CSS file in the `theme` argument.
    css_dir = Path(__file__).parent / "css"
    css_dir.mkdir(exist_ok=True)
    with open(css_dir / "shiny-theme-demo.css", "w") as f:
        f.write(my_theme.to_css())

filler_text = """
**AI-generated filler text.** In the world of exotic fruits, the durian stands out with its spiky exterior and strong odor. Despite its divisive smell, many people are drawn to its rich, creamy texture and unique flavor profile. This tropical fruit is often referred to as the "king of fruits" in various Southeast Asian countries.

Durians are known for their large size and thorn-covered husk, _which requires careful handling_. The flesh inside can vary in color from pale yellow to deep orange, with a custard-like consistency that melts in your mouth. Some describe its taste as a mix of sweet, savory, and creamy, while others find it overpowering and pungent.
"""


## file: css/shiny-theme-demo.css
@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Source+Code+Pro:ital,wght@0,400;0,600;1,400;1,600&display=swap");:root{}/*!
   * Bootstrap  v5.3.1 (https://getbootstrap.com/)
   * Copyright 2011-2023 The Bootstrap Authors
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   */:root{--bs-font-monospace: "Source Code Pro", SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;--bs-body-font-family: "Open Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;--bs-body-font-size:1rem;--bs-body-font-weight: 400;--bs-body-line-height: 1.5;--bs-body-color: #1D1F21;--bs-body-bg: #fff;--bs-emphasis-color: #000;--bs-emphasis-color-rgb: 0,0,0;--bs-secondary-color: rgba(29,31,33,0.75);--bs-secondary-bg: #e9ecef;--bs-tertiary-bg: #f8f8f8;--bs-heading-color: #00891a;--bs-link-color-rgb: 0,123,194;--bs-link-hover-color-rgb: 0,98,155;--bs-border-width: 1px;--bs-border-color: #dee2e6;--bs-border-color-translucent: rgba(40,70,94,0.1);--bs-border-radius: 3px}*,*::before,*::after{box-sizing:border-box}@media (prefers-reduced-motion: no-preference){:root{scroll-behavior:smooth}}body{margin:0;font-family:var(--bs-body-font-family);font-size:var(--bs-body-font-size);font-weight:var(--bs-body-font-weight);line-height:var(--bs-body-line-height);color:var(--bs-body-color);text-align:var(--bs-body-text-align);background-color:var(--bs-body-bg);-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}h2,.h2,h1,.h1{margin-top:0;margin-bottom:.5rem;font-weight:400;line-height:1.2;color:var(--bs-heading-color)}h1,.h1{font-size:calc(1.335rem + 1.02vw)}@media (min-width: 1200px){h1,.h1{font-size:2.1rem}}h2,.h2{font-size:calc(1.325rem + .9vw)}@media (min-width: 1200px){h2,.h2{font-size:2rem}}p{margin-top:0;margin-bottom:1rem}strong{font-weight:bolder}a{color:rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1));text-decoration:underline;-webkit-text-decoration:underline;-moz-text-decoration:underline;-ms-text-decoration:underline;-o-text-decoration:underline}a:hover{--bs-link-color-rgb: var(--bs-link-hover-color-rgb)}a:not([href]):not([class]),a:not([href]):not([class]):hover{color:inherit;text-decoration:none}pre{font-family:var(--bs-font-monospace);font-size:1em}pre{display:block;margin-top:0;margin-bottom:1rem;overflow:auto;font-size:.875em;color:RGB(var(--bs-emphasis-color-rgb, 0, 0, 0));background-color:RGBA(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.04);padding:.5rem;border:1px solid var(--bs-border-color, #dee2e6);border-radius:3px}img,svg{vertical-align:middle}label{display:inline-block}button{border-radius:0}button:focus:not(:focus-visible){outline:0}input,button{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button{text-transform:none}[role="button"]{cursor:pointer}button,[type="button"]{-webkit-appearance:button}button:not(:disabled),[type="button"]:not(:disabled){cursor:pointer}::-moz-focus-inner{padding:0;border-style:none}::-webkit-datetime-edit-fields-wrapper,::-webkit-datetime-edit-text,::-webkit-datetime-edit-minute,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding:0}::-webkit-inner-spin-button{height:auto}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-color-swatch-wrapper{padding:0}::file-selector-button{font:inherit;-webkit-appearance:button}.container-fluid{--bs-gutter-x: 1.5rem;width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-right:auto;margin-left:auto}:root{}.shiny-input-container .control-label{margin-bottom:.5rem}.form-control{display:block;width:100%;padding:.375rem .75rem;font-size:.9375rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);appearance:none;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;-o-appearance:none;background-color:var(--bs-body-bg);background-clip:padding-box;border:var(--bs-border-width) solid #8D959E;border-radius:var(--bs-border-radius);transition:border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.form-control{transition:none}}.form-control:focus{color:var(--bs-body-color);background-color:var(--bs-body-bg);border-color:#80bde1;outline:0;box-shadow:0 0 0 .25rem rgba(0,123,194,0.25)}.form-control::-webkit-date-and-time-value{min-width:85px;height:1.5em;margin:0}.form-control::-webkit-datetime-edit{display:block;padding:0}.form-control::placeholder{color:var(--bs-secondary-color);opacity:1}.form-control:disabled{background-color:var(--bs-secondary-bg);opacity:1}.form-control::file-selector-button{padding:.375rem .75rem;margin:-.375rem -.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;transition:color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.form-control::file-selector-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::file-selector-button{background-color:var(--bs-secondary-bg)}.navbar{--bs-navbar-padding-x: .66rem;--bs-navbar-padding-y: .5rem;--bs-navbar-brand-padding-y: .3125rem;--bs-navbar-brand-margin-end: 1rem;--bs-navbar-brand-font-size: 1.25rem;--bs-navbar-brand-color: rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-hover-color: rgba(var(--bs-emphasis-color-rgb), 1);position:relative;display:flex;display:-webkit-flex;flex-wrap:wrap;-webkit-flex-wrap:wrap;align-items:center;-webkit-align-items:center;justify-content:space-between;-webkit-justify-content:space-between;padding:var(--bs-navbar-padding-y) var(--bs-navbar-padding-x)}.navbar>.container-fluid{display:flex;display:-webkit-flex;flex-wrap:inherit;-webkit-flex-wrap:inherit;align-items:center;-webkit-align-items:center;justify-content:space-between;-webkit-justify-content:space-between}.navbar-brand{padding-top:var(--bs-navbar-brand-padding-y);padding-bottom:var(--bs-navbar-brand-padding-y);margin-right:var(--bs-navbar-brand-margin-end);font-size:var(--bs-navbar-brand-font-size);color:var(--bs-navbar-brand-color);text-decoration:none;-webkit-text-decoration:none;-moz-text-decoration:none;-ms-text-decoration:none;-o-text-decoration:none;white-space:nowrap}.navbar-brand:hover,.navbar-brand:focus{color:var(--bs-navbar-brand-hover-color)}@keyframes progress-bar-stripes{0%{background-position-x:1rem}}@keyframes spinner-border{to{transform:rotate(360deg) /* rtl:ignore */}}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1;transform:none}}@keyframes placeholder-glow{50%{opacity:.2}}@keyframes placeholder-wave{100%{mask-position:-200% 0%;-webkit-mask-position:-200% 0%}}:root{--bslib-spacer: 1.5rem;--bslib-mb-spacer: var(--bslib-spacer, 1rem)}.bslib-mb-spacing{margin-bottom:var(--bslib-mb-spacer)}.bslib-gap-spacing{gap:var(--bslib-mb-spacer)}.bslib-gap-spacing>.bslib-mb-spacing,.bslib-gap-spacing>.form-group,.bslib-gap-spacing>p,.bslib-gap-spacing>pre{margin-bottom:0}.html-fill-container>.html-fill-item.bslib-mb-spacing{margin-bottom:0}:root{}:root{--bslib-dashboard-main-bg: rgb(247, 247, 247);--bs-card-border-color: var(--bslib-dashboard-border-color-translucent, var(--bs-border-color-translucent));--bslib-sidebar-bg: var(--bs-body-bg);--bslib-sidebar-fg: var(--bs-color)}.main:has(.tab-content>.bslib-page-dashboard.active){background-color:var(--bslib-dashboard-main-bg);--_main-bg: var(--bslib-dashboard-main-bg)}.bslib-page-sidebar{--bslib-page-sidebar-title-bg: var(--bs-body-bg);--bslib-page-sidebar-title-color: var(--bs-body-color)}.bslib-page-sidebar .bslib-page-title{border-color:var(--bs-border-color-translucent)}@keyframes bslib-full-screen-overlay-enter{0%{opacity:0}100%{opacity:1}}.bslib-page-fill{width:100%;height:100%;margin:0;padding:var(--bslib-spacer, 1rem);gap:var(--bslib-spacer, 1rem)}@media (max-width: 575.98px){.bslib-flow-mobile>.html-fill-item{flex:0 0 auto}.bslib-flow-mobile.bslib-page-sidebar>.html-fill-item{flex:1 1 auto}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout>.main>.html-fill-item{flex:0 0 auto}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout:not(.sidebar-right)>.main{padding-left:var(--_padding-icon);padding-top:var(--_padding)}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout:not(.sidebar-right)>.collapse-toggle{left:calc(var(--_icon-size) / 2)}}.navbar+.container-fluid:has(>.tab-content>.tab-pane.active.html-fill-container){padding-left:0;padding-right:0}.navbar+div>.bslib-sidebar-layout{border-top:var(--bslib-sidebar-border)}:root{--bslib-page-sidebar-title-bg: #202020;--bslib-page-sidebar-title-color: #fff}.bslib-page-sidebar>.navbar{--bs-navbar-brand-color: var(--bslib-page-sidebar-title-color);border-bottom:var(--bs-border-width) solid var(--bs-border-color-translucent);background-color:var(--bslib-page-sidebar-title-bg);color:var(--bslib-page-sidebar-title-color)}.bslib-page-sidebar .bslib-page-title{margin-bottom:0;line-height:var(--bs-body-line-height)}.bslib-sidebar-layout{--_transition-duration: 0;--_transition-easing-x: var(--bslib-sidebar-transition-easing-x, cubic-bezier(0.8, 0.78, 0.22, 1.07));--_border: var(--bslib-sidebar-border, var(--bs-card-border-width, var(--bs-border-width)) solid var(--bs-card-border-color, var(--bs-border-color-translucent)));--_border-radius: var(--bslib-sidebar-border-radius, var(--bs-border-radius));--_vert-border: var(--bslib-sidebar-vert-border, var(--_border));--_sidebar-width: var(--bslib-sidebar-width, 250px);--_sidebar-bg: var(--bslib-sidebar-bg, rgba(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.05));--_sidebar-fg: var(--bslib-sidebar-fg, var(--bs-emphasis-color, black));--_main-fg: var(--bslib-sidebar-main-fg, var(--bs-card-color, var(--bs-body-color)));--_main-bg: var(--bslib-sidebar-main-bg, transparent);--_toggle-bg: var(--bslib-sidebar-toggle-bg, rgba(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.1));--_padding: var(--bslib-sidebar-padding, var(--bslib-spacer, 1.5rem));--_icon-size: var(--bslib-sidebar-icon-size, 1rem);--_icon-button-size: var(--bslib-sidebar-icon-button-size, calc(var(--_icon-size, 1rem) * 2));--_padding-icon: calc(var(--_icon-button-size, 2rem) * 1.5);--_toggle-border-radius: var(--bslib-collapse-toggle-border-radius, var(--bs-border-radius, 3px));--_toggle-transform: var(--bslib-collapse-toggle-transform, 0deg);--_toggle-transition-easing: var(--bslib-sidebar-toggle-transition-easing, cubic-bezier(1, 0, 0, 1));--_mobile-max-height: var(--bslib-sidebar-mobile-max-height, var(--bslib-sidebar-max-height-mobile));--_sidebar-mobile-opacity: var(--bslib-sidebar-mobile-opacity);--_sidebar-mobile-max-width: var(--bslib-sidebar-mobile-max-width);--_sidebar-mobile-box-shadow: var(--bslib-sidebar-mobile-box-shadow);--_column-main: minmax(0, 1fr);--_toggle-collective-height: calc(calc(var(--_icon-button-size) + 0.5em) * var(--_js-toggle-count-max-side, 1));display:grid !important;grid-template-columns:Min(calc(100% - var(--_padding-icon)), var(--_sidebar-width)) var(--_column-main);position:relative;transition:grid-template-columns ease-in-out var(--_transition-duration);border:var(--_border);border-radius:var(--_border-radius)}@media (prefers-reduced-motion: reduce){.bslib-sidebar-layout{transition:none}}.bslib-sidebar-layout,.html-fill-container>.bslib-sidebar-layout.html-fill-item{min-height:var(--_toggle-collective-height)}.bslib-sidebar-layout[data-bslib-sidebar-border="false"]{border:none}.bslib-sidebar-layout[data-bslib-sidebar-border-radius="false"]{border-radius:initial}.bslib-sidebar-layout>.main,.bslib-sidebar-layout>.sidebar{grid-row:1 / 2;border-radius:inherit;overflow:auto}.bslib-sidebar-layout>.main{grid-column:2 / 3;border-top-left-radius:0;border-bottom-left-radius:0;padding:var(--_padding);transition:padding var(--_transition-easing-x) var(--_transition-duration);color:var(--_main-fg);background-color:var(--_main-bg)}.bslib-sidebar-layout>.sidebar{grid-column:1 / 2;width:100%;border-right:var(--_vert-border);border-top-right-radius:0;border-bottom-right-radius:0;color:var(--_sidebar-fg);background-color:var(--_sidebar-bg);backdrop-filter:blur(5px)}.bslib-sidebar-layout>.sidebar>.sidebar-content{display:flex;flex-direction:column;gap:var(--bslib-spacer, 1rem);padding:var(--_padding);padding-top:var(--_padding-icon)}.bslib-sidebar-layout>.sidebar>.sidebar-content>:last-child:not(.sidebar-title){margin-bottom:0}.bslib-sidebar-layout>.sidebar .shiny-input-container{width:100%}.bslib-sidebar-layout>.collapse-toggle{grid-row:1 / 2;grid-column:1 / 2;z-index:1000;display:inline-flex;align-items:center;position:absolute;right:calc(var(--_icon-size));top:calc(var(--_icon-size, 1rem) / 2);border:none;border-radius:var(--_toggle-border-radius);height:var(--_icon-button-size, 2rem);width:var(--_icon-button-size, 2rem);display:flex;align-items:center;justify-content:center;padding:0;color:var(--_sidebar-fg);background-color:unset;transition:color var(--_transition-easing-x) var(--_transition-duration),top var(--_transition-easing-x) var(--_transition-duration),right var(--_transition-easing-x) var(--_transition-duration),left var(--_transition-easing-x) var(--_transition-duration)}.bslib-sidebar-layout>.collapse-toggle:hover{background-color:var(--_toggle-bg)}.bslib-sidebar-layout>.collapse-toggle>.collapse-icon{opacity:0.8;width:var(--_icon-size);height:var(--_icon-size);transform:rotateY(var(--_toggle-transform));transition:transform var(--_toggle-transition-easing) var(--_transition-duration)}.bslib-sidebar-layout>.collapse-toggle:hover>.collapse-icon{opacity:1}.bslib-sidebar-layout .sidebar-title{font-size:1.25rem;line-height:1.25;margin-top:0;margin-bottom:1rem;padding-bottom:1rem;border-bottom:var(--_border)}.bslib-sidebar-layout{}@media (max-width: 575.98px){.bslib-sidebar-layout{}}@media (min-width: 576px){.bslib-sidebar-layout[data-collapsible-desktop="false"]{--_padding-icon: var(--_padding)}.bslib-sidebar-layout[data-collapsible-desktop="false"]>.collapse-toggle{display:none}}@media (max-width: 575.98px){.bslib-sidebar-layout>.sidebar{border:none}.bslib-sidebar-layout>.main{grid-column:1 / 3}.bslib-sidebar-layout[data-collapsible-mobile="true"]{grid-template-columns:100% 0}.bslib-sidebar-layout[data-collapsible-mobile="true"]:not(.sidebar-collapsed)>.sidebar{z-index:1045}.bslib-sidebar-layout[data-collapsible-mobile="true"]:not(.sidebar-collapsed)>.collapse-toggle{z-index:1045}.bslib-sidebar-layout[data-collapsible-mobile="true"]:not(.sidebar-right)>.collapse-toggle{left:var(--_icon-size);right:unset}.bslib-sidebar-layout[data-collapsible-mobile="true"]>.sidebar{opacity:var(--_sidebar-mobile-opacity, 1);max-width:var(--_sidebar-mobile-max-width, 100%);box-shadow:var(--_sidebar-mobile-box-shadow);margin:0}.bslib-sidebar-layout[data-collapsible-mobile="true"]:not(.sidebar-right)>.sidebar{margin-right:auto}.bslib-sidebar-layout[data-collapsible-mobile="true"]>.main{padding-top:var(--_toggle-collective-height);padding-left:var(--_padding);padding-right:var(--_padding)}}@media (max-width: 575.98px){.bslib-sidebar-layout[data-collapsible-mobile="false"]{display:block !important;--_padding-icon: var(--_padding);--_vert-border: var(--_border)}.bslib-sidebar-layout[data-collapsible-mobile="false"]>.sidebar{max-height:var(--_mobile-max-height);overflow-y:auto;border-top:var(--_vert-border)}.bslib-sidebar-layout[data-collapsible-mobile="false"]>.collapse-toggle{display:none}}@media screen and (min-width: 575.98px){}pre.shiny-text-output:empty::before{content:" "}pre.shiny-text-output.noplaceholder:empty{margin:0;padding:0;border-width:0;height:0}pre.shiny-text-output{word-wrap:normal;border-radius:3px}@keyframes fadeIn{to{opacity:0.1}}.shiny-input-container:not(.shiny-input-container-inline){width:300px;max-width:100%}@use "sass:math";@keyframes lds-dual-ring{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.datepicker{border-radius:3px;direction:ltr}em{color:#f9b928}.sidebar-title{color:#c10000}strong{color:#c10000}


## file: css/rules.scss
strong {
  color: $danger;
}


```

## Methods

| Name | Description |
| --- | --- |
| [add_defaults](#shiny.ui.Theme.add_defaults) | Add custom default values to the theme. |
| [add_functions](#shiny.ui.Theme.add_functions) | Add custom Sass functions to the theme. |
| [add_mixins](#shiny.ui.Theme.add_mixins) | Add custom Sass mixins to the theme. |
| [add_rules](#shiny.ui.Theme.add_rules) | Add custom Sass rules to the theme. |
| [available_presets](#shiny.ui.Theme.available_presets) | Get a list of available theme presets. |
| [from_brand](#shiny.ui.Theme.from_brand) | Create a custom Shiny theme from a `_brand.yml` |
| [to_css](#shiny.ui.Theme.to_css) | Compile the theme to CSS and return the result as a string. |
| [to_sass](#shiny.ui.Theme.to_sass) | Returns the custom theme as a single Sass string. |

### add_defaults { #shiny.ui.Theme.add_defaults }

```python
ui.Theme.add_defaults(*args, **kwargs)
```

Add custom default values to the theme.

Sass code added via this method will be placed **before** the default values of
the theme preset, allowing you to override or extend the default values.

#### Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Sass code, as a single or multiple strings, containing default value declarations to add.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`) \| [bool](`bool`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Keyword arguments containing default value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_defaults(primary_color="#ff0000")` is equivalent to `.add_defaults("$primary-color: #ff0000 !default;")`.

### add_functions { #shiny.ui.Theme.add_functions }

```python
ui.Theme.add_functions(*args)
```

Add custom Sass functions to the theme.

Sass code added via this method will be placed **after** the function
declarations from the theme preset, allowing you to override or extend the
default functions.

#### Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   The Sass functions to add as a single or multiple strings.

### add_mixins { #shiny.ui.Theme.add_mixins }

```python
ui.Theme.add_mixins(*args, **kwargs)
```

Add custom Sass mixins to the theme.

Sass code added via this method will be placed **after** the mixin declarations
from the theme preset, allowing you to override or extend the default mixins.

#### Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Sass code, as a single or multiple strings, containing mixins to add.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`) \| [bool](`bool`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Keyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_mixins(primary_color="#ff0000")` is equivalent to `.add_mixins("$primary-color: #ff0000;")`.

### add_rules { #shiny.ui.Theme.add_rules }

```python
ui.Theme.add_rules(*args, **kwargs)
```

Add custom Sass rules to the theme.

Sass code added via this method will be placed **after** the rule declarations
from the theme preset, allowing you to override or extend the default rules.

#### Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Sass code, as a single or multiple strings, containing rules to add.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`) \| [bool](`bool`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Keyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_rules(primary_color="#ff0000")` is equivalent to `.add_rules("$primary-color: #ff0000;")`.

### available_presets { #shiny.ui.Theme.available_presets }

```python
ui.Theme.available_presets()
```

Get a list of available theme presets.

### from_brand { #shiny.ui.Theme.from_brand }

```python
ui.Theme.from_brand(brand)
```

Create a custom Shiny theme from a `_brand.yml`

Creates a custom Shiny theme for your brand using
[brand.yml](https://posit-dev.github.io/brand-yml), a single YAML file that
describes the brand&#x27;s color and typography. Learn more about writing a
`_brand.yml` file for your brand at the
[brand.yml homepage](https://posit-dev.github.io/brand-yml).

As a simple example, suppose your brand guidelines include a color palette with
custom orange and black colors. The orange is used as the primary accent color
and the black for all text. For typography, the brand also uses
[Roboto](https://fonts.google.com/specimen/Roboto?query=roboto) and
[Roboto Mono](https://fonts.google.com/specimen/Roboto+Mono?query=roboto) from
Google Fonts for text and monospace-styled text, respectively. Here&#x27;s a
`_brand.yml` file for this brand:

```{.yaml filename="_brand.yml"}
meta:
  name: brand.yml Example

color:
  palette:
    orange: "#F96302"
    black: "#000000"
  foreground: black
  primary: orange

typography:
  fonts:
    - family: Roboto
      source: google
    - family: Roboto Mono
      source: google
  base: Roboto
  monospace: Roboto Mono
```

You can store the `_brand.yml` file next to your Shiny `app.py` or, for larger
projects, in a parent folder. To use a theme generated from the `_brand.yml`
file, call [](:meth:`~shiny.ui.Theme.from_brand`) on `__file__` and pass the result
to the `theme` argument of [](:func:`~shiny.express.ui.page_opts`) (Shiny Express)
or the `theme` argument of `shiny.ui.page_*` functions, like
[](:func:`~shiny.ui.page_sidebar`).

```{.python filename="app.py"}
from shiny.express import input, render, ui

ui.page_opts(theme=ui.Theme.from_brand(__file__))

ui.input_slider("n", "N", 0, 100, 20)


@render.code
def txt():
    return f"n*2 is {input.n() * 2}"
```

#### Parameters {.doc-section .doc-section-parameters}

<code>[**brand**]{.parameter-name} [:]{.parameter-annotation-sep} ['str \| pathlib.Path \| Brand']{.parameter-annotation}</code>

:   A [](:class:`brand_yml.Brand`) instance, or a path to help locate `_brand.yml`. For a path, you can pass `__file__` or a directory containing the `_brand.yml` or a path directly to the `_brand.yml` file.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A [](:class:`shiny.ui.Theme`) instance with a custom Shiny theme created from the brand guidelines (see [](:class:`brand_yml.Brand`)).

### to_css { #shiny.ui.Theme.to_css }

```python
ui.Theme.to_css(compile_args=None)
```

Compile the theme to CSS and return the result as a string.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**compile_args**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SassCompileArgs](`shiny.ui._theme.SassCompileArgs`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A dictionary of keyword arguments to pass to [`sass.compile()`](https://sass.github.io/libsass-python/sass.html#sass.compile).

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The compiled CSS for the theme. The value is cached such that previously compiled themes are returned immediately. Adding additional custom Sass code or changing the preset will invalidate the cache.

### to_sass { #shiny.ui.Theme.to_sass }

```python
ui.Theme.to_sass()
```

Returns the custom theme as a single Sass string.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The custom theme as a single Sass string.

================
File: ui.tooltip.qmd
================
# ui.tooltip { #shiny.ui.tooltip }

```python
ui.tooltip(trigger, *args, id=None, placement='auto', options=None, **kwargs)
```

Add a tooltip to a UI element.

Display additional information when focusing (or hovering over) a UI element.

## Parameters {.doc-section .doc-section-parameters}

<code>[**trigger**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A UI element (i.e., [](:class:`~htmltools.Tag`)) to serve as the tooltips trigger. It's good practice for this element to be a keyboard-focusable and interactive element (e.g., [](:func:`~shiny.ui.input_action_button`), [](:func:`~shiny.ui.input_action_link`), etc.) so that the tooltip is accessible to keyboard and assistive technology users.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to the tooltip's body. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string. Required to reactively respond to the visibility of the tooltip (via the `input[id]` value) and/or update the visibility/contents of the tooltip.

<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'top', 'right', 'bottom', 'left'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The placement of the tooltip relative to its trigger.

<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[dict](`dict`)\[[str](`str`), [object](`object`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A list of additional [Bootstrap options](https://getbootstrap.com/docs/5.3/components/tooltips/#options).

## Details {.doc-section .doc-section-details}


If `trigger` yields multiple HTML elements (e.g., a [](:class:`~htmltools.TagList`) or
complex [`shinywidgets`](https://github.com/posit-dev/py-shinywidgets) object), the
last HTML element is used as the trigger. If the `trigger` should contain all of
those elements, wrap the object in a [](:func:`~shiny.ui.tags.div`) or
[](:func:`~shiny.ui.tags.span`).

## Accessibility of Tooltip Triggers {.doc-section .doc-section-accessibility-of-tooltip-triggers}


Because the user needs to interact with the `trigger` element to see the `tooltip`,
it's best practice to use an element that is typically accessible via keyboard
interactions, like a button or a link.

If you use a non-interactive element, like a `<span>` or text, `tooltip()` will
automatically add the `tabindex="0"` attribute to the trigger element to make sure
that users can reach the element with the keyboard. This means that in most cases
you can use any element you want as the trigger.

One place where it's important to consider the accessibility of the trigger is when
using an icon without any accompanying text. In these cases, many icon elements are
created with the assumption that the icon is decorative, which will make it
inaccessible to users of assistive technologies.

When using an icon as the primary trigger, ensure that the icon does not have
`aria-hidden="true"` or `role="presentation"` attributes. Icon packages typically
provide a way to specify a title for the icon, as well as a way to specify that the
icon is not decorative. The title should be a short description of the purpose of
the trigger, rather than a description of the icon itself.

For example:

```python
icon_title = "About tooltips"
def bs_info_icon(title: str):
    # Enhanced from https://rstudio.github.io/bsicons/ via `bsicons::bs_icon("info-circle", title = icon_title)`
    return ui.HTML(f'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-info-circle " style="height:1em;width:1em;fill:currentColor;" aria-hidden="true" role="img" ><title>{title}</title><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"></path><path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path></svg>')

ui.tooltip(
    bs_info_icon(icon_title),
    "Text shown in the tooltip."
)
```

```python
icon_title = "About tooltips"
def fa_info_circle(title: str):
    # Enhanced from https://rstudio.github.io/fontawesome/ via `fontawesome::fa("info-circle", a11y = "sem", title = icon_title)`
    return ui.HTML(f'<svg aria-hidden="true" role="img" viewBox="0 0 512 512" style="height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;"><title>{title}</title><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"/></svg>')
ui.tooltip(
    fa_info_circle(icon_title),
    "Text shown in the tooltip."
)
```

## See Also {.doc-section .doc-section-see-also}


* [Bootstrap tooltips documentation](https://getbootstrap.com/docs/5.3/components/tooltips/)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import question_circle_fill

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.tooltip(
        ui.input_action_button("btn", "A button", class_="mt-3"),
        "A message",
        id="btn_tooltip",
    ),
    ui.hr(),
    ui.card(
        ui.card_header(
            ui.tooltip(
                ui.span("Card title ", question_circle_fill),
                "Additional info",
                placement="right",
                id="card_tooltip",
            ),
        ),
        "Card body content...",
    ),
)


app = App(app_ui, server=None)


## file: icons.py
from shiny import ui

# https://icons.getbootstrap.com/icons/question-circle-fill/
question_circle_fill = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle-fill mb-1" viewBox="0 0 16 16"><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z"/></svg>'
)


```

================
File: ui.update_accordion_panel.qmd
================
# ui.update_accordion_panel { #shiny.ui.update_accordion_panel }

```python
ui.update_accordion_panel(
    id,
    target,
    *body,
    title=MISSING,
    value=MISSING,
    icon=MISSING,
    show=None,
    session=None,
)
```

Dynamically update accordion panel contents.

Dynamically (i.e., programmatically) update/modify [](:func:`~shiny.ui.accordion`) panels in a Shiny app.
These functions require an `id` to be provided to the [](:func:`~shiny.ui.accordion`) and must also be
called within an active Shiny session.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that matches an existing [](:func:`~shiny.ui.accordion`)'s `id`.

<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The `value` of an existing panel to update.

<code>[***body**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   If provided, the new body contents of the panel.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   If not missing, the new title of the panel.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   If not missing, the new value of the panel.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   If not missing, the new icon of the panel.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.accordion_panel`)
* [](:func:`~shiny.ui.update_accordion`)
* [](:func:`~shiny.ui.insert_accordion_panel`)
* [](:func:`~shiny.ui.remove_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui


def make_panel(letter: str) -> ui.AccordionPanel:
    return ui.accordion_panel(
        f"Section {letter}",
        f"Some narrative for section {letter}",
        value=f"sec_{letter}",
    )


items = [make_panel(letter) for letter in "ABCDE"]

app_ui = ui.page_fluid(
    ui.input_switch("update_panel", "Update (and open) Sections"),
    ui.accordion(*items, id="acc", multiple=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.update_panel)
    def _():
        txt = " (updated)" if input.update_panel() else ""
        show = bool(input.update_panel() % 2 == 1)
        for letter in "ABCDE":
            ui.update_accordion_panel(
                "acc",
                f"sec_{letter}",
                f"Some{txt} narrative for section {letter}",
                title=f"Section {letter}{txt}",
                # Open Accordion Panel to see updated contents
                show=show,
            )
        next_show_txt = "close" if show else "open"

        ui.update_switch("update_panel", label=f"Update (and {next_show_txt}) Sections")


app = App(app_ui, server)


```

================
File: ui.update_accordion.qmd
================
# ui.update_accordion { #shiny.ui.update_accordion }

```python
ui.update_accordion(id, *, show, session=None)
```

Dynamically set accordions&#x27; states.

Dynamically (i.e., programmatically) update/modify [](:func:`~shiny.ui.accordion`)s in a Shiny app.
These functions require an `id` to be provided to the [](:func:`~shiny.ui.accordion`) and must also be
called within an active Shiny session.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that matches an existing [](:func:`~shiny.ui.accordion`)'s `id`.

<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [str](`str`) \| [list](`list`)\[[str](`str`)\]]{.parameter-annotation}</code>

:   Either a string or list of strings (used to identify particular [](:func:`~shiny.ui.accordion_panel`)(s) by their `value`) or a `bool` to set the state of all panels.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.accordion_panel`)
* [](:func:`~shiny.ui.insert_accordion_panel`)
* [](:func:`~shiny.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

items = [
    ui.accordion_panel(f"Section {letter}", f"Some narrative for section {letter}")
    for letter in "ABCDE"
]

app_ui = ui.page_fluid(
    ui.input_action_button("set_acc", "Only open sections A,C,E", class_="mt-3 mb-3"),
    # Provide an id to create a shiny input binding
    ui.accordion(*items, id="acc", open=["Section B", "Section D"], multiple=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.set_acc)
    def _():
        ui.update_accordion("acc", show=["Section A", "Section C", "Section E"])


app = App(app_ui, server)


```

================
File: ui.update_action_button.qmd
================
# ui.update_action_button { #shiny.ui.update_action_button }

```python
ui.update_action_button(
    id,
    *,
    label=None,
    icon=None,
    disabled=None,
    session=None,
)
```

Change the label and/or icon of an action button on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**disabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If `True`, disable the button making it unclickable; if `False`, the button will become enabled and clickable.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.input_action_button`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, req, ui

app_ui = ui.page_fluid(
    ui.input_action_button("update", "Update other buttons and link"),
    ui.br(),
    ui.input_action_button("goButton", "Go"),
    ui.br(),
    ui.input_action_button("goButton2", "Go 2", icon="🤩"),
    ui.br(),
    ui.input_action_button("goButton3", "Go 3"),
    ui.br(),
    ui.input_action_link("goLink", "Go Link"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        req(input.update())
        # Updates goButton's label and icon
        ui.update_action_button("goButton", label="New label", icon="📅")
        # Leaves goButton2's label unchanged and removes its icon
        ui.update_action_button("goButton2", icon=[])
        # Leaves goButton3's icon, if it exists, unchanged and changes its label
        ui.update_action_button("goButton3", label="New label 3")
        # Updates goLink's label and icon
        ui.update_action_link("goLink", label="New link label", icon="🔗")


app = App(app_ui, server)


```

================
File: ui.update_action_link.qmd
================
# ui.update_action_link { #shiny.ui.update_action_link }

```python
ui.update_action_link(id, *, label=None, icon=None, session=None)
```

Change the label and/or icon of an action link on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.input_action_link`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, req, ui

app_ui = ui.page_fluid(
    ui.input_action_button("update", "Update other buttons and link"),
    ui.br(),
    ui.input_action_button("goButton", "Go"),
    ui.br(),
    ui.input_action_button("goButton2", "Go 2", icon="🤩"),
    ui.br(),
    ui.input_action_button("goButton3", "Go 3"),
    ui.br(),
    ui.input_action_link("goLink", "Go Link"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        req(input.update())
        # Updates goButton's label and icon
        ui.update_action_button("goButton", label="New label", icon="📅")
        # Leaves goButton2's label unchanged and removes its icon
        ui.update_action_button("goButton2", icon=[])
        # Leaves goButton3's icon, if it exists, unchanged and changes its label
        ui.update_action_button("goButton3", label="New label 3")
        # Updates goLink's label and icon
        ui.update_action_link("goLink", label="New link label", icon="🔗")


app = App(app_ui, server)


```

================
File: ui.update_checkbox_group.qmd
================
# ui.update_checkbox_group { #shiny.ui.update_checkbox_group }

```python
ui.update_checkbox_group(
    id,
    *,
    label=None,
    choices=None,
    selected=None,
    inline=False,
    session=None,
)
```

Change the value of a checkbox group input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ChoicesArg](`shiny.ui._input_check_radio.ChoicesArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\] \| [tuple](`tuple`)\[[str](`str`), ...\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the result is displayed inline

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_checkbox_group`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.tags.p("The first checkbox group controls the second"),
    ui.input_checkbox_group(
        "inCheckboxGroup", "Input checkbox", ["Item A", "Item B", "Item C"]
    ),
    ui.input_checkbox_group(
        "inCheckboxGroup2", "Input checkbox 2", ["Item A", "Item B", "Item C"]
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        x = input.inCheckboxGroup()

        # Can also set the label and select items
        ui.update_checkbox_group(
            "inCheckboxGroup2",
            label="Checkboxgroup label " + str(len(x)),
            choices=x,
            selected=x,
        )


app = App(app_ui, server)


```

================
File: ui.update_checkbox.qmd
================
# ui.update_checkbox { #shiny.ui.update_checkbox }

```python
ui.update_checkbox(id, *, label=None, value=None, session=None)
```

Change the value of a checkbox input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_checkbox`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_slider("controller", "Controller", min=0, max=1, value=0, step=1),
    ui.input_checkbox("inCheckbox", "Input checkbox"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        # True if controller is odd, False if even.
        x_even = input.controller() % 2 == 1
        ui.update_checkbox("inCheckbox", value=x_even)


app = App(app_ui, server)


```

================
File: ui.update_dark_mode.qmd
================
# ui.update_dark_mode { #shiny.ui.update_dark_mode }

```python
ui.update_dark_mode(mode, *, session=None)
```

================
File: ui.update_date_range.qmd
================
# ui.update_date_range { #shiny.ui.update_date_range }

```python
ui.update_date_range(
    id,
    *,
    label=None,
    start=None,
    end=None,
    min=None,
    max=None,
    session=None,
)
```

Change the start and end values of a date range input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**start**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial start date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**end**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial end date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_date_range`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import date, timedelta

from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "Day of month", min=1, max=30, value=10),
    ui.input_date_range("inDateRange", "Input date"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        d = date(2013, 4, input.n())
        ui.update_date_range(
            "inDateRange",
            label="Date range label " + str(input.n()),
            start=d - timedelta(days=1),
            end=d + timedelta(days=1),
            min=d - timedelta(days=5),
            max=d + timedelta(days=5),
        )


app = App(app_ui, server)


```

================
File: ui.update_date.qmd
================
# ui.update_date { #shiny.ui.update_date }

```python
ui.update_date(id, *, label=None, value=None, min=None, max=None, session=None)
```

Change the value of a date input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The starting date. Either a `date()` object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_date`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import date, timedelta

from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "Day of month", min=1, max=30, value=10),
    ui.input_date("inDate", "Input date"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        d = date(2013, 4, input.n())
        ui.update_date(
            "inDate",
            label="Date label " + str(input.n()),
            value=d,
            min=d - timedelta(days=3),
            max=d + timedelta(days=3),
        )


app = App(app_ui, server)


```

================
File: ui.update_navs.qmd
================
# ui.update_navs { #shiny.ui.update_navs }

```python
ui.update_navs(id, selected=None, session=None)
```

Change the value of a navs container on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.navset_tab`)
* [](:func:`~shiny.ui.navset_pill`)
* [](:func:`~shiny.ui.page_navbar`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_sidebar(
    ui.sidebar(ui.input_slider("controller", "Controller", min=1, max=3, value=1)),
    ui.navset_card_tab(
        ui.nav_panel("Panel 1", "Panel 1 content", value="panel1"),
        ui.nav_panel("Panel 2", "Panel 2 content", value="panel2"),
        ui.nav_panel("Panel 3", "Panel 3 content", value="panel3"),
        id="inTabset",
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        ui.update_navs("inTabset", selected="panel" + str(input.controller()))


app = App(app_ui, server)


```

================
File: ui.update_numeric.qmd
================
# ui.update_numeric { #shiny.ui.update_numeric }

```python
ui.update_numeric(
    id,
    *,
    label=None,
    value=None,
    min=None,
    max=None,
    step=None,
    session=None,
)
```

Change the value of a number input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Interval to use when stepping between min and max.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) object passed to the server function of a [](:class:`~shiny.App`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_numeric`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_slider("controller", "Controller", min=0, max=20, value=10),
    ui.input_numeric("inNumber", "Input number", 0),
    ui.input_numeric("inNumber2", "Input number 2", 0),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        x = input.controller()
        ui.update_numeric("inNumber", value=x)
        ui.update_numeric(
            "inNumber2",
            label="Number label " + str(x),
            value=x,
            min=x - 10,
            max=x + 10,
            step=5,
        )


app = App(app_ui, server)


```

================
File: ui.update_popover.qmd
================
# ui.update_popover { #shiny.ui.update_popover }

```python
ui.update_popover(id, *args, title=None, show=None, session=None)
```

Update the contents or title of a popover.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The id of the popover DOM element to update.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   The new contents of the popover.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The new title of the popover.

<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Opens (`True`) or closes (`False`) the popover.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.popover`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("btn_show", "Show popover", class_="mt-3 me-3"),
    ui.input_action_button("btn_close", "Close popover", class_="mt-3 me-3"),
    ui.br(),
    ui.br(),
    ui.popover(
        ui.input_action_button("btn_w_popover", "A button w/ a popover", class_="mt-3"),
        "A message",
        id="popover_id",
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.btn_show)
    def _():
        ui.update_popover("popover_id", show=True)

    @reactive.effect
    @reactive.event(input.btn_close)
    def _():
        ui.update_popover("popover_id", show=False)

    @reactive.effect
    @reactive.event(input.btn_w_popover)
    def _():
        ui.notification_show("Button clicked!", duration=3, type="message")


app = App(app_ui, server=server)


```

================
File: ui.update_radio_buttons.qmd
================
# ui.update_radio_buttons { #shiny.ui.update_radio_buttons }

```python
ui.update_radio_buttons(
    id,
    *,
    label=None,
    choices=None,
    selected=None,
    inline=False,
    session=None,
)
```

Change the value of a radio input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ChoicesArg](`shiny.ui._input_check_radio.ChoicesArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True```, the result is displayed inline

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_radio_buttons`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.tags.p("The first radio button group controls the second"),
    ui.input_radio_buttons(
        "inRadioButtons", "Input radio buttons", ["Item A", "Item B", "Item C"]
    ),
    ui.input_radio_buttons(
        "inRadioButtons2", "Input radio buttons 2", ["Item A", "Item B", "Item C"]
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        x = input.inRadioButtons()

        # Can also set the label and select items
        ui.update_radio_buttons(
            "inRadioButtons2",
            label="Radio buttons label " + x,
            choices=[x],
            selected=x,
        )


app = App(app_ui, server)


```

================
File: ui.update_select.qmd
================
# ui.update_select { #shiny.ui.update_select }

```python
ui.update_select(id, *, label=None, choices=None, selected=None, session=None)
```

Change the value of a select input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SelectChoicesArg](`shiny.ui._input_select.SelectChoicesArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_select`)
* [](:func:`~shiny.ui.update_selectize`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.tags.p("The checkbox group controls the select input"),
    ui.input_checkbox_group(
        "inCheckboxGroup", "Input checkbox", ["Item A", "Item B", "Item C"]
    ),
    ui.input_select("inSelect", "Select input", ["Item A", "Item B", "Item C"]),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        x = input.inCheckboxGroup()

        # Can use [] to remove all choices
        if x is None:
            x = []
        elif isinstance(x, str):
            x = [x]

        ui.update_select(
            "inSelect",
            label="Select input label " + str(len(x)),
            choices=x,
            selected=x[len(x) - 1] if len(x) > 0 else None,
        )


app = App(app_ui, server)


```

================
File: ui.update_selectize.qmd
================
# ui.update_selectize { #shiny.ui.update_selectize }

```python
ui.update_selectize(
    id,
    *,
    label=None,
    choices=None,
    selected=None,
    options=None,
    server=False,
    session=None,
)
```

Change the value of a selectize.js powered input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SelectChoicesArg](`shiny.ui._input_select.SelectChoicesArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[dict](`dict`)\[[str](`str`), [str](`str`) \| [float](`float`) \| [JSEval](`shiny.ui._utils.JSEval`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Options to send to update, see `input_selectize` for details.

<code>[**server**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to store choices on the server side, and load the select options dynamically on searching, instead of writing all choices into the page at once (i.e., only use the client-side version of selectize.js)

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_selectize`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_selectize("x", "Server side selectize", choices=[], multiple=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    def _():
        ui.update_selectize(
            "x",
            choices=[f"Foo {i}" for i in range(10000)],
            selected=["Foo 0", "Foo 1"],
            server=True,
        )


app = App(app_ui, server, debug=True)


```

================
File: ui.update_sidebar.qmd
================
# ui.update_sidebar { #shiny.ui.update_sidebar }

```python
ui.update_sidebar(id, *, show=None, session=None)
```

Update a sidebar&#x27;s visibility.

Set a [](:func:`~shiny.ui.sidebar`) state during an active Shiny user session.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The `id` of the [](:func:`~shiny.ui.sidebar`) to toggle.

<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The desired visible state of the sidebar, where `True` opens the sidebar and `False` closes the sidebar (if not already in that state).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.sidebar`)
* [](:func:`~shiny.ui.layout_sidebar`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_sidebar(
    ui.sidebar("Sidebar content", id="sidebar"),
    ui.input_action_button("open_sidebar", label="Open sidebar", class_="me-3"),
    ui.input_action_button("close_sidebar", label="Close sidebar", class_="me-3"),
    ui.br(),
    ui.br(),
    ui.output_text_verbatim("state"),
    fillable=False,
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.open_sidebar)
    def _():
        ui.update_sidebar("sidebar", show=True)

    @reactive.effect
    @reactive.event(input.close_sidebar)
    def _():
        ui.update_sidebar("sidebar", show=False)

    @render.text
    def state():
        return f"input.sidebar(): {input.sidebar()}"


app = App(app_ui, server=server)


```

================
File: ui.update_slider.qmd
================
# ui.update_slider { #shiny.ui.update_slider }

```python
ui.update_slider(
    id,
    *,
    label=None,
    value=None,
    min=None,
    max=None,
    step=None,
    time_format=None,
    timezone=None,
    session=None,
)
```

Change the value of a slider input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`) \| [tuple](`tuple`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`), [SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderStepArg](`shiny.ui._input_slider.SliderStepArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Specifies the interval between each selectable value on the slider. Either ``None`` (the default), which uses a heuristic to determine the step size or a single number. If the values are dates, step is in days; if the values are date-times, step is in seconds.

<code>[**time_format**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Only used if the slider values are [](:class:`~datetime.date`) or [](:class:`~datetime.datetime`) objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is "%F" (like "2015-07-01"), and for Datetimes, the default is "%F %T" (like "2015-07-01 15:32:10").

<code>[**timezone**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Only used if the values are [](:class:`~datetime.datetime`) objects. A string specifying the time zone offset for the displayed times, in the format "+HHMM" or "-HHMM". If ``None`` (the default), times will be displayed in the browser's time zone. The value "+0000" will result in UTC time.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_slider`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, reactive, ui

app_ui = ui.page_fixed(
    ui.input_slider(
        "receiver", "Receiver:", min=0, max=100, value=50, step=1, width="100%"
    ),
    ui.p(
        "Change the min and max values below to see the receiver slider above update."
    ),
    ui.layout_column_wrap(
        ui.input_slider("min", "Min:", min=0, max=50, value=0, step=1),
        ui.input_slider("max", "Max:", min=50, max=100, value=100, step=1),
        width=1 / 2,
    ),
)


def server(input, output, session):
    @reactive.effect
    def _():
        # You can update the value, min, max, and step.
        ui.update_slider(
            "receiver",
            value=max(min(input.receiver(), input.max()), input.min()),
            min=input.min(),
            max=input.max(),
        )


app = App(app_ui, server)


```

================
File: ui.update_switch.qmd
================
# ui.update_switch { #shiny.ui.update_switch }

```python
ui.update_switch(id, *, label=None, value=None, session=None)
```

Change the value of a switch input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_switch`)

================
File: ui.update_task_button.qmd
================
# ui.update_task_button { #shiny.ui.update_task_button }

```python
ui.update_task_button(id, *, state=None, session=None)
```

Change the state of a task button on the client.

When a task button is clicked, it automatically changes to the &quot;busy&quot; state. This
function can be used to change the state back to &quot;ready&quot; when the task is complete.

You can also use this function to change the state to &quot;busy&quot; manually, which will
prevent the button from automatically resetting to &quot;ready&quot; after a click.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**state**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The new state of the button. One of "ready", "busy", or a custom state name added via [](:func:`~shiny.ui.input_task_button`).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

================
File: ui.update_text_area.qmd
================
# ui.update_text_area { #shiny.ui.update_text_area }

```python
ui.update_text_area(
    id,
    *,
    label=None,
    value=None,
    placeholder=None,
    session=None,
)
```

Change the value of a text input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A hint as to what can be entered into the control.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.layout_column_wrap(
        ui.input_radio_buttons(
            "pet_type", "Pet type", ["Dog", "Cat", "Bird"], inline=True
        ),
        ui.input_radio_buttons("pet_sex", "Pet sex", ["Male", "Female"], inline=True),
        ui.input_text("name", "Pet name", "Charlie"),
        ui.input_text("royal_name", "Royal Name", "King Charlie"),
        width=1 / 2,
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.pet_type)
    def _():
        # Update the label of the pet name input
        ui.update_text("name", label=f"{input.pet_type()}'s name")

    @reactive.effect
    def _():
        # Update the value of the royal name input
        royal_noun = "King" if input.pet_sex() == "Male" else "Queen"
        ui.update_text("royal_name", value=f"{royal_noun} {input.name()}")


app = App(app_ui, server)


```

================
File: ui.update_text.qmd
================
# ui.update_text { #shiny.ui.update_text }

```python
ui.update_text(id, *, label=None, value=None, placeholder=None, session=None)
```

Change the value of a text input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A hint as to what can be entered into the control.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.layout_column_wrap(
        ui.input_radio_buttons(
            "pet_type", "Pet type", ["Dog", "Cat", "Bird"], inline=True
        ),
        ui.input_radio_buttons("pet_sex", "Pet sex", ["Male", "Female"], inline=True),
        ui.input_text("name", "Pet name", "Charlie"),
        ui.input_text("royal_name", "Royal Name", "King Charlie"),
        width=1 / 2,
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.pet_type)
    def _():
        # Update the label of the pet name input
        ui.update_text("name", label=f"{input.pet_type()}'s name")

    @reactive.effect
    def _():
        # Update the value of the royal name input
        royal_noun = "King" if input.pet_sex() == "Male" else "Queen"
        ui.update_text("royal_name", value=f"{royal_noun} {input.name()}")


app = App(app_ui, server)


```

================
File: ui.update_tooltip.qmd
================
# ui.update_tooltip { #shiny.ui.update_tooltip }

```python
ui.update_tooltip(id, *args, show=None, session=None)
```

Update tooltip contents.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A character string that matches an existing tooltip id.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to the tooltip's body.

<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Opens (`True`) or closes (`False`) the tooltip.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_action_button("btn_show", "Show tooltip", class_="mt-3 me-3"),
    ui.input_action_button("btn_close", "Close tooltip", class_="mt-3 me-3"),
    ui.input_action_button(
        "btn_update", "Update tooltip phrase (and show tooltip)", class_="mt-3 me-3"
    ),
    ui.tooltip(
        ui.input_action_button(
            "btn_w_tooltip", "A button w/ a tooltip", class_="btn-primary mt-5"
        ),
        "A message",
        id="tooltip_id",
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.effect
    @reactive.event(input.btn_show)
    def _():
        ui.update_tooltip("tooltip_id", show=True)

    @reactive.effect
    @reactive.event(input.btn_close)
    def _():
        ui.update_tooltip("tooltip_id", show=False)

    @reactive.effect
    @reactive.event(input.btn_update)
    def _():
        content = (
            "A " + " ".join(["NEW" for _ in range(input.btn_update())]) + " message"
        )

        ui.update_tooltip("tooltip_id", content, show=True)

    @reactive.effect
    @reactive.event(input.btn_w_tooltip)
    def _():
        ui.notification_show("Button clicked!", duration=3, type="message")


app = App(app_ui, server=server)


```

================
File: ui.value_box_theme.qmd
================
# ui.value_box_theme { #shiny.ui.value_box_theme }

```python
ui.value_box_theme(name=None, *, fg=None, bg=None)
```

Value box theme

A theme for a [](:func:`~shiny.ui.value_box`). Themes provide a convenient way to use
your app&#x27;s Bootstrap theme colors as the foreground or background colors of the
value box. For more control, you can create your own theme with
[](:func:`~shiny.ui.value_box_theme`) where you can pass foreground and background
value.

See
[rstudio/bslib#themes](https://rstudio.github.io/bslib/reference/value_box.html#themes)
for more examples.

## Parameters {.doc-section .doc-section-parameters}

<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The name of the theme, e.g. `"primary"`, `"danger"`, `"purple"`.  `name` can also be a Bootstrap-supported color: `"blue"`, `"purple"`, `"pink"`, `"red"`, `"orange"`, `"yellow"`, `"green"`, `"teal"`, and `"cyan"`. These colors can be used with `bg-NAME`, `text-NAME`, and `bg-gradient-NAME1-NAME2`. If a `name` does not start with `text-` or `bg-`, it will be auto-prefixed with `bg-`.

<code>[**fg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The background and foreground colors for the theme.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[ValueBoxTheme](`shiny.ui._valuebox.ValueBoxTheme`)]{.parameter-annotation}</code>

:   A `ValueBoxTheme`

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.value_box`)

================
File: ui.value_box.qmd
================
# ui.value_box { #shiny.ui.value_box }

```python
ui.value_box(
    title,
    value,
    *args,
    showcase=None,
    showcase_layout='left center',
    full_screen=False,
    theme=None,
    height=None,
    max_height=None,
    min_height=None,
    fill=True,
    class_=None,
    id=None,
    **kwargs,
)
```

Value box

An opinionated ([](:func:`~shiny.ui.card`)-powered) box, designed for
displaying a `value` and `title`. Optionally, a `showcase` can provide context
for what the `value` represents (for example, it could hold an icon, or even a
[](:func:`~shiny.ui.output_plot`)).

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A string, number, or [](:class:`~htmltools.Tag`) child to display as the title or value of the value box. The `title` appears above the `value`.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Unnamed arguments may be any [](:class:`~htmltools.Tag`) children to display below `value`. Named arguments are passed to [](:func:`~shiny.ui.card`) as element attributes.

<code>[**showcase**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~htmltools.Tag`) child to showcase (e.g., an icon, a [](:func:`~shiny.ui.output_plot`), etc).

<code>[**showcase_layout**]{.parameter-name} [:]{.parameter-annotation-sep} [[SHOWCASE_LAYOUTS_STR](`shiny.ui._valuebox.SHOWCASE_LAYOUTS_STR`) \| [ShowcaseLayout](`shiny.ui._valuebox.ShowcaseLayout`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'left center\']{.parameter-default}</code>

:   One of `"left center"` (default), `"top right"` or `"bottom"`. Alternatively, you can customize the showcase layout options with the [](:func:`~shiny.ui.showcase_left_center`), [](:func:`~shiny.ui.showcase_top_right`), or [](:func:`~shiny.ui.showcase_bottom`) functions. Use the options functions when you want to control the height or width of the showcase area.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [ValueBoxTheme](`shiny.ui._valuebox.ValueBoxTheme`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The name of a theme (e.g. `"primary"`, `"danger"`, `"purple"`, `"bg-green"`, `"text-red"`) for the value box, or a theme constructed with [](:func:`~shiny.ui.value_box_theme`).  The theme names provide a convenient way to use your app's Bootstrap theme colors as the foreground or background colors of the value box. For more control, you can create your own theme with [](:func:`~shiny.ui.value_box_theme`) where you can pass foreground and background colors directly.  Bootstrap supported color themes: `"blue"`, `"purple"`, `"pink"`, `"red"`, `"orange"`, `"yellow"`, `"green"`, `"teal"`, and `"cyan"`. These colors can be used with `bg-NAME`, `text-NAME`, and `bg-gradient-NAME1-NAME2` to change the background, foreground, or use a background gradient respectively.  If a `theme` string does not start with `text-` or `bg-`, it will be auto prefixed with `bg-`.

<code>[**full_screen**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit (e.g., `height="200px"`). Doesn't apply when a value box is made `full_screen`.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to allow the value box to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Utility classes for customizing the appearance of the summary card. Use `bg-*` and `text-*` classes (e.g, `"bg-danger"` and `"text-light"`) to customize the background/foreground colors.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Provide a unique identifier for the :func:`~shiny.ui.value_box()` to report its state to Shiny. For example, using `id="my_value_box"`, you can observe the value box's full screen state with `input.my_value_box()["full_screen"]`.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to pass to [](:func:`~shiny.ui.card`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A [](:func:`~shiny.ui.card`)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.value_box_theme`)
* [](:func:`~shiny.ui.showcase_bottom`)
* [](:func:`~shiny.ui.showcase_left_center`)
* [](:func:`~shiny.ui.showcase_top_right`)
* [](:func:`~shiny.ui.card`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import piggy_bank

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.layout_column_wrap(
        ui.value_box(
            "KPI Title",
            "$1 Billion Dollars",
            "Up 30% VS PREVIOUS 30 DAYS",
            showcase=piggy_bank,
            theme="bg-gradient-orange-red",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            "$1 Billion Dollars",
            "Up 30% VS PREVIOUS 30 DAYS",
            showcase=piggy_bank,
            theme="text-green",
            showcase_layout="top right",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            "$1 Billion Dollars",
            "Up 30% VS PREVIOUS 30 DAYS",
            showcase=piggy_bank,
            theme="purple",
            showcase_layout="bottom",
            full_screen=True,
        ),
    )
)


app = App(app_ui, server=None)


## file: icons.py
from shiny import ui

piggy_bank = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-piggy-bank " style="fill:currentColor;height:100%;" aria-hidden="true" role="img" ><path d="M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z"></path>\n<path fill-rule="evenodd" d="M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z"></path></svg>'
)


```

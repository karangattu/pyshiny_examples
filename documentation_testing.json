{
    "_sidebar.yml": {
        "attributes": {},
        "methods": {}
    },
    "index": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controller.Accordion": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [accordion_panel](#shiny.playwright.controller.Accordion.accordion_panel) | Returns the accordion panel ([](:class:`~shiny.playwright.controls.AccordionPanel`)) with the specified data value. |\n| [expect_class](#shiny.playwright.controller.Accordion.expect_class) | Expects the accordion to have the specified class. |\n| [expect_height](#shiny.playwright.controller.Accordion.expect_height) | Expects the accordion to have the specified height. |\n| [expect_multiple](#shiny.playwright.controller.Accordion.expect_multiple) | Expects the accordion to be multiple or not. |\n| [expect_panels](#shiny.playwright.controller.Accordion.expect_panels) | Expects the accordion to have the specified panels. |\n| [expect_width](#shiny.playwright.controller.Accordion.expect_width) | Expects the accordion to have the specified width. |\n| [set](#shiny.playwright.controller.Accordion.set) | Sets the state of the accordion panel. |",
            "accordion_panel": {
                "header": "accordion_panel { #shiny.playwright.controller.Accordion.accordion_panel }",
                "content": "```python\nplaywright.controller.Accordion.accordion_panel(data_value)\n```\n\nReturns the accordion panel ([](:class:`~shiny.playwright.controls.AccordionPanel`))\nwith the specified data value."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                           | Description                                                                                          | Default    |\n|---------|------------------------------------------------|------------------------------------------------------------------------------------------------------|------------|\n| open    | [str](`str`) \\| [list](`list`)\\[[str](`str`)\\] | The open accordion panel(s).                                                                         | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)   | The maximum time to wait for the accordion panel to be visible and interactable. Defaults to `None`. | `None`     |"
            },
            "expect_class": {
                "header": "expect_class { #shiny.playwright.controller.Accordion.expect_class }",
                "content": "```python\nplaywright.controller.Accordion.expect_class(class_name, *, timeout=None)\n```\n\nExpects the accordion to have the specified class."
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controller.Accordion.expect_height }",
                "content": "```python\nplaywright.controller.Accordion.expect_height(value, *, timeout=None)\n```\n\nExpects the accordion to have the specified height."
            },
            "expect_multiple": {
                "header": "expect_multiple { #shiny.playwright.controller.Accordion.expect_multiple }",
                "content": "```python\nplaywright.controller.Accordion.expect_multiple(value, *, timeout=None)\n```\n\nExpects the accordion to be multiple or not."
            },
            "expect_panels": {
                "header": "expect_panels { #shiny.playwright.controller.Accordion.expect_panels }",
                "content": "```python\nplaywright.controller.Accordion.expect_panels(value, *, timeout=None)\n```\n\nExpects the accordion to have the specified panels."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.Accordion.expect_width }",
                "content": "```python\nplaywright.controller.Accordion.expect_width(value, *, timeout=None)\n```\n\nExpects the accordion to have the specified width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.Accordion.set }",
                "content": "```python\nplaywright.controller.Accordion.set(open, *, timeout=None)\n```\n\nSets the state of the accordion panel."
            }
        },
        "preamble": "# playwright.controller.Accordion { #shiny.playwright.controller.Accordion }\n\n```python\nplaywright.controller.Accordion(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.accordion`)."
    },
    "playwright.controller.AccordionPanel": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_body](#shiny.playwright.controller.AccordionPanel.expect_body) | Expects the accordion panel body to have the specified text. |\n| [expect_icon](#shiny.playwright.controller.AccordionPanel.expect_icon) | Expects the accordion panel icon to exist or not. |\n| [expect_label](#shiny.playwright.controller.AccordionPanel.expect_label) | Expects the accordion panel label to have the specified text. |\n| [expect_open](#shiny.playwright.controller.AccordionPanel.expect_open) | Expects the accordion panel to be open or closed. |\n| [expect_width](#shiny.playwright.controller.AccordionPanel.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |\n| [set](#shiny.playwright.controller.AccordionPanel.set) | Sets the state of the control to open or closed. |",
            "expect_body": {
                "header": "expect_body { #shiny.playwright.controller.AccordionPanel.expect_body }",
                "content": "```python\nplaywright.controller.AccordionPanel.expect_body(value, *, timeout=None)\n```\n\nExpects the accordion panel body to have the specified text."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                                  | Default    |\n|---------|----------------------------------------------|----------------------------------------------------------------------------------------------|------------|\n| open    | [bool](`bool`)                               | `True` to open the accordion panel, False to close it.                                       | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the control to be visible and interactable. Defaults to `None`. | `None`     |"
            },
            "expect_icon": {
                "header": "expect_icon { #shiny.playwright.controller.AccordionPanel.expect_icon }",
                "content": "```python\nplaywright.controller.AccordionPanel.expect_icon(exists, *, timeout=None)\n```\n\nExpects the accordion panel icon to exist or not."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.AccordionPanel.expect_label }",
                "content": "```python\nplaywright.controller.AccordionPanel.expect_label(value, *, timeout=None)\n```\n\nExpects the accordion panel label to have the specified text."
            },
            "expect_open": {
                "header": "expect_open { #shiny.playwright.controller.AccordionPanel.expect_open }",
                "content": "```python\nplaywright.controller.AccordionPanel.expect_open(value, *, timeout=None)\n```\n\nExpects the accordion panel to be open or closed."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.AccordionPanel.expect_width }",
                "content": "```python\nplaywright.controller.AccordionPanel.expect_width(value, *, timeout=None)\n```\n\nExpect the `width` attribute of a DOM element to have a specific value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.AccordionPanel.set }",
                "content": "```python\nplaywright.controller.AccordionPanel.set(open, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.AccordionPanel { #shiny.playwright.controller.AccordionPanel }\n\n```python\nplaywright.controller.AccordionPanel(self, page, id, data_value)\n```\n\nController for [](:func:`shiny.express.ui.accordion_panel`)."
    },
    "playwright.controller.Card": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_body](#shiny.playwright.controller.Card.expect_body) | Expect the card body element to have the specified text. |\n| [expect_footer](#shiny.playwright.controller.Card.expect_footer) | Expects the card footer to have a specific text. |\n| [expect_full_screen](#shiny.playwright.controller.Card.expect_full_screen) | Verifies if the full screen mode is currently open. |\n| [expect_full_screen_available](#shiny.playwright.controller.Card.expect_full_screen_available) | Expects whether full screen mode is available for the element. |\n| [expect_header](#shiny.playwright.controller.Card.expect_header) | Expects the card header to have a specific text. |\n| [expect_height](#shiny.playwright.controller.Card.expect_height) | Expects the card to have a specific height. |\n| [expect_max_height](#shiny.playwright.controller.Card.expect_max_height) | Expects the card to have a specific maximum height. |\n| [expect_min_height](#shiny.playwright.controller.Card.expect_min_height) | Expects the card to have a specific minimum height. |\n| [expect_width](#shiny.playwright.controller.Card.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |\n| [set_full_screen](#shiny.playwright.controller.Card.set_full_screen) | Sets the element to full screen mode or exits full screen mode. |",
            "expect_body": {
                "header": "expect_body { #shiny.playwright.controller.Card.expect_body }",
                "content": "```python\nplaywright.controller.Card.expect_body(value, *, timeout=None)\n```\n\nExpect the card body element to have the specified text."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                       | Default    |\n|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|\n| open    | [bool](`bool`)                               | `True` to open the element in full screen mode, `False` to exit full screen mode. | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the operation to complete. Defaults to `None`.       | `None`     |"
            },
            "expect_footer": {
                "header": "expect_footer { #shiny.playwright.controller.Card.expect_footer }",
                "content": "```python\nplaywright.controller.Card.expect_footer(value, *, timeout=None)\n```\n\nExpects the card footer to have a specific text."
            },
            "expect_full_screen": {
                "header": "expect_full_screen { #shiny.playwright.controller.Card.expect_full_screen }",
                "content": "```python\nplaywright.controller.Card.expect_full_screen(value, *, timeout=None)\n```\n\nVerifies if the full screen mode is currently open."
            },
            "expect_full_screen_available": {
                "header": "expect_full_screen_available { #shiny.playwright.controller.Card.expect_full_screen_available }",
                "content": "```python\nplaywright.controller.Card.expect_full_screen_available(value, *, timeout=None)\n```\n\nExpects whether full screen mode is available for the element."
            },
            "expect_header": {
                "header": "expect_header { #shiny.playwright.controller.Card.expect_header }",
                "content": "```python\nplaywright.controller.Card.expect_header(value, *, timeout=None)\n```\n\nExpects the card header to have a specific text."
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controller.Card.expect_height }",
                "content": "```python\nplaywright.controller.Card.expect_height(value, *, timeout=None)\n```\n\nExpects the card to have a specific height."
            },
            "expect_max_height": {
                "header": "expect_max_height { #shiny.playwright.controller.Card.expect_max_height }",
                "content": "```python\nplaywright.controller.Card.expect_max_height(value, *, timeout=None)\n```\n\nExpects the card to have a specific maximum height."
            },
            "expect_min_height": {
                "header": "expect_min_height { #shiny.playwright.controller.Card.expect_min_height }",
                "content": "```python\nplaywright.controller.Card.expect_min_height(value, *, timeout=None)\n```\n\nExpects the card to have a specific minimum height."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.Card.expect_width }",
                "content": "```python\nplaywright.controller.Card.expect_width(value, *, timeout=None)\n```\n\nExpect the `width` attribute of a DOM element to have a specific value."
            },
            "set_full_screen": {
                "header": "set_full_screen { #shiny.playwright.controller.Card.set_full_screen }",
                "content": "```python\nplaywright.controller.Card.set_full_screen(open, *, timeout=None)\n```\n\nSets the element to full screen mode or exits full screen mode."
            }
        },
        "preamble": "# playwright.controller.Card { #shiny.playwright.controller.Card }\n\n```python\nplaywright.controller.Card(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.card`)."
    },
    "playwright.controller.Chat": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_latest_message](#shiny.playwright.controller.Chat.expect_latest_message) | Expects the last message in the chat. |\n| [expect_messages](#shiny.playwright.controller.Chat.expect_messages) | Expects the chat messages. |\n| [expect_user_input](#shiny.playwright.controller.Chat.expect_user_input) | Expects the user message in the chat. |\n| [send_user_input](#shiny.playwright.controller.Chat.send_user_input) | Sends the user message in the chat. |\n| [set_user_input](#shiny.playwright.controller.Chat.set_user_input) | Sets the user message in the chat. |",
            "expect_latest_message": {
                "header": "expect_latest_message { #shiny.playwright.controller.Chat.expect_latest_message }",
                "content": "```python\nplaywright.controller.Chat.expect_latest_message(value, *, timeout=None)\n```\n\nExpects the last message in the chat."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                                     | Default    |\n|---------|----------------------------------------------|-------------------------------------------------------------------------------------------------|------------|\n| value   | [str](`str`)                                 | The message to send.                                                                            | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the chat input to be visible and interactable. Defaults to `None`. | `None`     |"
            },
            "expect_messages": {
                "header": "expect_messages { #shiny.playwright.controller.Chat.expect_messages }",
                "content": "```python\nplaywright.controller.Chat.expect_messages(value, *, timeout=None)\n```\n\nExpects the chat messages."
            },
            "expect_user_input": {
                "header": "expect_user_input { #shiny.playwright.controller.Chat.expect_user_input }",
                "content": "```python\nplaywright.controller.Chat.expect_user_input(value, *, timeout=None)\n```\n\nExpects the user message in the chat."
            },
            "send_user_input": {
                "header": "send_user_input { #shiny.playwright.controller.Chat.send_user_input }",
                "content": "```python\nplaywright.controller.Chat.send_user_input(method='enter', timeout=None)\n```\n\nSends the user message in the chat."
            },
            "set_user_input": {
                "header": "set_user_input { #shiny.playwright.controller.Chat.set_user_input }",
                "content": "```python\nplaywright.controller.Chat.set_user_input(value, *, timeout=None)\n```\n\nSets the user message in the chat."
            }
        },
        "preamble": "# playwright.controller.Chat { #shiny.playwright.controller.Chat }\n\n```python\nplaywright.controller.Chat(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.chat`)."
    },
    "playwright.controller.DownloadButton": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controller.DownloadButton.click) | Clicks the input action. |\n| [expect_label](#shiny.playwright.controller.DownloadButton.expect_label) | Expect the label of the input button to have a specific value. |\n| [expect_width](#shiny.playwright.controller.DownloadButton.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |",
            "click": {
                "header": "click { #shiny.playwright.controller.DownloadButton.click }",
                "content": "```python\nplaywright.controller.DownloadButton.click(timeout=None, **kwargs)\n```\n\nClicks the input action."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                             | Description                                                                       | Default    |\n|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|\n| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `width` attribute.                                      | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |"
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.DownloadButton.expect_label }",
                "content": "```python\nplaywright.controller.DownloadButton.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input button to have a specific value.\n\nNote: This must include the icon if it is present!"
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.DownloadButton.expect_width }",
                "content": "```python\nplaywright.controller.DownloadButton.expect_width(value, *, timeout=None)\n```\n\nExpect the `width` attribute of a DOM element to have a specific value."
            }
        },
        "preamble": "# playwright.controller.DownloadButton { #shiny.playwright.controller.DownloadButton }\n\n```python\nplaywright.controller.DownloadButton(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.download_button`)"
    },
    "playwright.controller.DownloadLink": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controller.DownloadLink.click) | Clicks the input action. |\n| [expect_label](#shiny.playwright.controller.DownloadLink.expect_label) | Expect the label of the input button to have a specific value. |",
            "click": {
                "header": "click { #shiny.playwright.controller.DownloadLink.click }",
                "content": "```python\nplaywright.controller.DownloadLink.click(timeout=None, **kwargs)\n```\n\nClicks the input action."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                                   | Description                                                                       | Default    |\n|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|\n| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |"
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.DownloadLink.expect_label }",
                "content": "```python\nplaywright.controller.DownloadLink.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input button to have a specific value.\n\nNote: This must include the icon if it is present!"
            }
        },
        "preamble": "# playwright.controller.DownloadLink { #shiny.playwright.controller.DownloadLink }\n\n```python\nplaywright.controller.DownloadLink(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.download_link`)."
    },
    "playwright.controller.InputActionLink": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controller.InputActionLink.click) | Clicks the input action. |\n| [expect_label](#shiny.playwright.controller.InputActionLink.expect_label) | Expect the label of the input button to have a specific value. |",
            "click": {
                "header": "click { #shiny.playwright.controller.InputActionLink.click }",
                "content": "```python\nplaywright.controller.InputActionLink.click(timeout=None, **kwargs)\n```\n\nClicks the input action."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                                   | Description                                                                       | Default    |\n|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|\n| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |"
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputActionLink.expect_label }",
                "content": "```python\nplaywright.controller.InputActionLink.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input button to have a specific value.\n\nNote: This must include the icon if it is present!"
            }
        },
        "preamble": "# playwright.controller.InputActionLink { #shiny.playwright.controller.InputActionLink }\n\n```python\nplaywright.controller.InputActionLink(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_action_link`)."
    },
    "playwright.controller.InputCheckbox": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_checked](#shiny.playwright.controller.InputCheckbox.expect_checked) | Expect the input checkbox to be checked. |\n| [expect_label](#shiny.playwright.controller.InputCheckbox.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_width](#shiny.playwright.controller.InputCheckbox.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputCheckbox.set) | Sets the input checkbox. |",
            "expect_checked": {
                "header": "expect_checked { #shiny.playwright.controller.InputCheckbox.expect_checked }",
                "content": "```python\nplaywright.controller.InputCheckbox.expect_checked(value, *, timeout=None)\n```\n\nExpect the input checkbox to be checked."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                    | Default    |\n|---------|----------------------------------------------|--------------------------------------------------------------------------------|------------|\n| value   | [bool](`bool`)                               | The value of the input checkbox.                                               | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input checkbox to be set. Defaults to `None`. | `None`     |"
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputCheckbox.expect_label }",
                "content": "```python\nplaywright.controller.InputCheckbox.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputCheckbox.expect_width }",
                "content": "```python\nplaywright.controller.InputCheckbox.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputCheckbox.set }",
                "content": "```python\nplaywright.controller.InputCheckbox.set(value, *, timeout=None, **kwargs)\n```\n\nSets the input checkbox."
            }
        },
        "preamble": "# playwright.controller.InputCheckbox { #shiny.playwright.controller.InputCheckbox }\n\n```python\nplaywright.controller.InputCheckbox(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_checkbox`)."
    },
    "playwright.controller.InputCheckboxGroup": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_choice_labels](#shiny.playwright.controller.InputCheckboxGroup.expect_choice_labels) | Expect the labels of the choices. |\n| [expect_choices](#shiny.playwright.controller.InputCheckboxGroup.expect_choices) | Expect the checkbox choices. |\n| [expect_inline](#shiny.playwright.controller.InputCheckboxGroup.expect_inline) | Expect the input to be inline. |\n| [expect_label](#shiny.playwright.controller.InputCheckboxGroup.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_selected](#shiny.playwright.controller.InputCheckboxGroup.expect_selected) | Expect the selected checkboxes. |\n| [expect_width](#shiny.playwright.controller.InputCheckboxGroup.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputCheckboxGroup.set) | Set the selected checkboxes. |",
            "expect_choice_labels": {
                "header": "expect_choice_labels { #shiny.playwright.controller.InputCheckboxGroup.expect_choice_labels }",
                "content": "```python\nplaywright.controller.InputCheckboxGroup.expect_choice_labels(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpect the labels of the choices."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name     | Type                                                     | Description                                     | Default    |\n|----------|----------------------------------------------------------|-------------------------------------------------|------------|\n| selected | [ListOrTuple](`shiny.types.ListOrTuple`)\\[[str](`str`)\\] | The values of the selected checkboxes.          | _required_ |\n| timeout  | [Timeout](`shiny.playwright._types.Timeout`)             | The timeout for the action. Defaults to `None`. | `None`     |"
            },
            "expect_choices": {
                "header": "expect_choices { #shiny.playwright.controller.InputCheckboxGroup.expect_choices }",
                "content": "```python\nplaywright.controller.InputCheckboxGroup.expect_choices(value, *, timeout=None)\n```\n\nExpect the checkbox choices."
            },
            "expect_inline": {
                "header": "expect_inline { #shiny.playwright.controller.InputCheckboxGroup.expect_inline }",
                "content": "```python\nplaywright.controller.InputCheckboxGroup.expect_inline(value, *, timeout=None)\n```\n\nExpect the input to be inline."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputCheckboxGroup.expect_label }",
                "content": "```python\nplaywright.controller.InputCheckboxGroup.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_selected": {
                "header": "expect_selected { #shiny.playwright.controller.InputCheckboxGroup.expect_selected }",
                "content": "```python\nplaywright.controller.InputCheckboxGroup.expect_selected(value, *, timeout=None)\n```\n\nExpect the selected checkboxes."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputCheckboxGroup.expect_width }",
                "content": "```python\nplaywright.controller.InputCheckboxGroup.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputCheckboxGroup.set }",
                "content": "```python\nplaywright.controller.InputCheckboxGroup.set(\n    selected,\n    *,\n    timeout=None,\n    **kwargs,\n)\n```\n\nSet the selected checkboxes."
            }
        },
        "preamble": "# playwright.controller.InputCheckboxGroup { #shiny.playwright.controller.InputCheckboxGroup }\n\n```python\nplaywright.controller.InputCheckboxGroup(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_checkbox_group`)."
    },
    "playwright.controller.InputDarkMode": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controller.InputDarkMode.click) | Clicks the input dark mode. |\n| [expect_attribute](#shiny.playwright.controller.InputDarkMode.expect_attribute) | Expect the attribute named `attribute` of the input dark mode to have a specific value. |\n| [expect_mode](#shiny.playwright.controller.InputDarkMode.expect_mode) | Expect the `mode` attribute of the input dark mode to have a specific value. |\n| [expect_page_mode](#shiny.playwright.controller.InputDarkMode.expect_page_mode) | Expect the page to have a specific dark mode value. |",
            "click": {
                "header": "click { #shiny.playwright.controller.InputDarkMode.click }",
                "content": "```python\nplaywright.controller.InputDarkMode.click(timeout=None)\n```\n\nClicks the input dark mode."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                       | Default    |\n|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|\n| value   | [str](`str`)                                 | The expected value of the page's dark mode.                                       | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |"
            },
            "expect_attribute": {
                "header": "expect_attribute { #shiny.playwright.controller.InputDarkMode.expect_attribute }",
                "content": "```python\nplaywright.controller.InputDarkMode.expect_attribute(value, *, timeout=None)\n```\n\nExpect the attribute named `attribute` of the input dark mode to have a specific value."
            },
            "expect_mode": {
                "header": "expect_mode { #shiny.playwright.controller.InputDarkMode.expect_mode }",
                "content": "```python\nplaywright.controller.InputDarkMode.expect_mode(value, *, timeout=None)\n```\n\nExpect the `mode` attribute of the input dark mode to have a specific value."
            },
            "expect_page_mode": {
                "header": "expect_page_mode { #shiny.playwright.controller.InputDarkMode.expect_page_mode }",
                "content": "```python\nplaywright.controller.InputDarkMode.expect_page_mode(value, *, timeout=None)\n```\n\nExpect the page to have a specific dark mode value."
            }
        },
        "preamble": "# playwright.controller.InputDarkMode { #shiny.playwright.controller.InputDarkMode }\n\n```python\nplaywright.controller.InputDarkMode(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_dark_mode`)."
    },
    "playwright.controller.InputDate": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_autoclose](#shiny.playwright.controller.InputDate.expect_autoclose) | Asserts that the input element has the expected `data-date-autoclose` attribute value. |\n| [expect_datesdisabled](#shiny.playwright.controller.InputDate.expect_datesdisabled) | Asserts that the input element has the expected `data-date-dates-disabled` attribute value. |\n| [expect_daysofweekdisabled](#shiny.playwright.controller.InputDate.expect_daysofweekdisabled) | Asserts that the input element has the expected `data-date-days-of-week-disabled` attribute value. |\n| [expect_format](#shiny.playwright.controller.InputDate.expect_format) | Asserts that the input element has the expected `data-date-format` attribute value. |\n| [expect_label](#shiny.playwright.controller.InputDate.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_language](#shiny.playwright.controller.InputDate.expect_language) | Asserts that the input element has the expected `data-date-language` attribute value. |\n| [expect_max_date](#shiny.playwright.controller.InputDate.expect_max_date) | Asserts that the input element has the expected `data-max-date` attribute value. |\n| [expect_min_date](#shiny.playwright.controller.InputDate.expect_min_date) | Asserts that the input element has the expected `data-min-date` attribute value. |\n| [expect_startview](#shiny.playwright.controller.InputDate.expect_startview) | Asserts that the input element has the expected `data-date-start-view` attribute value. |\n| [expect_value](#shiny.playwright.controller.InputDate.expect_value) | Asserts that the input element has the expected value. |\n| [expect_weekstart](#shiny.playwright.controller.InputDate.expect_weekstart) | Asserts that the input element has the expected `data-date-week-start` attribute value. |\n| [expect_width](#shiny.playwright.controller.InputDate.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputDate.set) | Sets the text value |",
            "expect_autoclose": {
                "header": "expect_autoclose { #shiny.playwright.controller.InputDate.expect_autoclose }",
                "content": "```python\nplaywright.controller.InputDate.expect_autoclose(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-date-autoclose` attribute value."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                          | Default    |\n|---------|----------------------------------------------|----------------------------------------------------------------------|------------|\n| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |"
            },
            "expect_datesdisabled": {
                "header": "expect_datesdisabled { #shiny.playwright.controller.InputDate.expect_datesdisabled }",
                "content": "```python\nplaywright.controller.InputDate.expect_datesdisabled(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-date-dates-disabled` attribute value."
            },
            "expect_daysofweekdisabled": {
                "header": "expect_daysofweekdisabled { #shiny.playwright.controller.InputDate.expect_daysofweekdisabled }",
                "content": "```python\nplaywright.controller.InputDate.expect_daysofweekdisabled(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nAsserts that the input element has the expected `data-date-days-of-week-disabled` attribute value."
            },
            "expect_format": {
                "header": "expect_format { #shiny.playwright.controller.InputDate.expect_format }",
                "content": "```python\nplaywright.controller.InputDate.expect_format(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-date-format` attribute value."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputDate.expect_label }",
                "content": "```python\nplaywright.controller.InputDate.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_language": {
                "header": "expect_language { #shiny.playwright.controller.InputDate.expect_language }",
                "content": "```python\nplaywright.controller.InputDate.expect_language(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-date-language` attribute value."
            },
            "expect_max_date": {
                "header": "expect_max_date { #shiny.playwright.controller.InputDate.expect_max_date }",
                "content": "```python\nplaywright.controller.InputDate.expect_max_date(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-max-date` attribute value."
            },
            "expect_min_date": {
                "header": "expect_min_date { #shiny.playwright.controller.InputDate.expect_min_date }",
                "content": "```python\nplaywright.controller.InputDate.expect_min_date(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-min-date` attribute value."
            },
            "expect_startview": {
                "header": "expect_startview { #shiny.playwright.controller.InputDate.expect_startview }",
                "content": "```python\nplaywright.controller.InputDate.expect_startview(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-date-start-view` attribute value."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.InputDate.expect_value }",
                "content": "```python\nplaywright.controller.InputDate.expect_value(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected value."
            },
            "expect_weekstart": {
                "header": "expect_weekstart { #shiny.playwright.controller.InputDate.expect_weekstart }",
                "content": "```python\nplaywright.controller.InputDate.expect_weekstart(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-date-week-start` attribute value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputDate.expect_width }",
                "content": "```python\nplaywright.controller.InputDate.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputDate.set }",
                "content": "```python\nplaywright.controller.InputDate.set(value, *, timeout=None)\n```\n\nSets the text value"
            }
        },
        "preamble": "# playwright.controller.InputDate { #shiny.playwright.controller.InputDate }\n\n```python\nplaywright.controller.InputDate(self, page, id)\n```"
    },
    "playwright.controller.InputDateRange": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_autoclose](#shiny.playwright.controller.InputDateRange.expect_autoclose) | Asserts that the input element has the expected autoclose value. |\n| [expect_format](#shiny.playwright.controller.InputDateRange.expect_format) | Asserts that the input element has the expected format. |\n| [expect_label](#shiny.playwright.controller.InputDateRange.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_language](#shiny.playwright.controller.InputDateRange.expect_language) | Asserts that the input element has the expected language. |\n| [expect_max_date](#shiny.playwright.controller.InputDateRange.expect_max_date) | Asserts that the input element has the expected maximum date. |\n| [expect_min_date](#shiny.playwright.controller.InputDateRange.expect_min_date) | Asserts that the input element has the expected minimum date. |\n| [expect_separator](#shiny.playwright.controller.InputDateRange.expect_separator) | Asserts that the input element has the expected separator. |\n| [expect_startview](#shiny.playwright.controller.InputDateRange.expect_startview) | Asserts that the input element has the expected start view. |\n| [expect_value](#shiny.playwright.controller.InputDateRange.expect_value) | Asserts that the input element has the expected value. |\n| [expect_weekstart](#shiny.playwright.controller.InputDateRange.expect_weekstart) | Asserts that the input element has the expected week start. |\n| [expect_width](#shiny.playwright.controller.InputDateRange.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputDateRange.set) | Sets the value of the input element. |",
            "expect_autoclose": {
                "header": "expect_autoclose { #shiny.playwright.controller.InputDateRange.expect_autoclose }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_autoclose(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected autoclose value."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                                                                     | Description                                                                                   | Default    |\n|---------|------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|------------|\n| value   | [typing](`typing`).[Tuple](`typing.Tuple`)\\[[str](`str`) \\| None, [str](`str`) \\| None\\] | The value to set. The first element is the start date and the second element is the end date. | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                             | The maximum time to wait for the value to be set. Defaults to `None`.                         | `None`     |"
            },
            "expect_format": {
                "header": "expect_format { #shiny.playwright.controller.InputDateRange.expect_format }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_format(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected format."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputDateRange.expect_label }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_language": {
                "header": "expect_language { #shiny.playwright.controller.InputDateRange.expect_language }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_language(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected language."
            },
            "expect_max_date": {
                "header": "expect_max_date { #shiny.playwright.controller.InputDateRange.expect_max_date }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_max_date(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected maximum date."
            },
            "expect_min_date": {
                "header": "expect_min_date { #shiny.playwright.controller.InputDateRange.expect_min_date }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_min_date(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected minimum date."
            },
            "expect_separator": {
                "header": "expect_separator { #shiny.playwright.controller.InputDateRange.expect_separator }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_separator(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected separator."
            },
            "expect_startview": {
                "header": "expect_startview { #shiny.playwright.controller.InputDateRange.expect_startview }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_startview(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected start view."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.InputDateRange.expect_value }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_value(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected value."
            },
            "expect_weekstart": {
                "header": "expect_weekstart { #shiny.playwright.controller.InputDateRange.expect_weekstart }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_weekstart(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected week start."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputDateRange.expect_width }",
                "content": "```python\nplaywright.controller.InputDateRange.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputDateRange.set }",
                "content": "```python\nplaywright.controller.InputDateRange.set(value, *, timeout=None)\n```\n\nSets the value of the input element."
            }
        },
        "preamble": "# playwright.controller.InputDateRange { #shiny.playwright.controller.InputDateRange }\n\n```python\nplaywright.controller.InputDateRange(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_date_range`)."
    },
    "playwright.controller.InputFile": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_accept](#shiny.playwright.controller.InputFile.expect_accept) | Expect the `accept` attribute to have a specific value. |\n| [expect_button_label](#shiny.playwright.controller.InputFile.expect_button_label) | Expect the button label to have a specific value. |\n| [expect_capture](#shiny.playwright.controller.InputFile.expect_capture) | Expect the `capture` attribute to have a specific value. |\n| [expect_complete](#shiny.playwright.controller.InputFile.expect_complete) | Expect the file upload to be complete. |\n| [expect_label](#shiny.playwright.controller.InputFile.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_multiple](#shiny.playwright.controller.InputFile.expect_multiple) | Expect the `multiple` attribute to have a specific value. |\n| [expect_width](#shiny.playwright.controller.InputFile.expect_width) | Expect the width of the input file to have a specific value. |\n| [set](#shiny.playwright.controller.InputFile.set) | Set the file upload. |",
            "expect_accept": {
                "header": "expect_accept { #shiny.playwright.controller.InputFile.expect_accept }",
                "content": "```python\nplaywright.controller.InputFile.expect_accept(value, *, timeout=None)\n```\n\nExpect the `accept` attribute to have a specific value."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name                    | Type                                                                                                                                                                                                                                                                   | Description                                                                           | Default     |\n|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|-------------|\n| file_path               | [str](`str`) \\| [pathlib](`pathlib`).[Path](`pathlib.Path`) \\| [FilePayload](`playwright.sync_api.FilePayload`) \\| [list](`list`)\\[[str](`str`) \\| [pathlib](`pathlib`).[Path](`pathlib.Path`)\\] \\| [list](`list`)\\[[FilePayload](`playwright.sync_api.FilePayload`)\\] | The path to the file to upload.                                                       | _required_  |\n| timeout                 | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                                                                                                                           | The timeout for the action. Defaults to `None`.                                       | `None`      |\n| expect_complete_timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                                                                                                                           | The timeout for the expectation that the upload is complete. Defaults to `30 * 1000`. | `30 * 1000` |"
            },
            "expect_button_label": {
                "header": "expect_button_label { #shiny.playwright.controller.InputFile.expect_button_label }",
                "content": "```python\nplaywright.controller.InputFile.expect_button_label(value, *, timeout=None)\n```\n\nExpect the button label to have a specific value."
            },
            "expect_capture": {
                "header": "expect_capture { #shiny.playwright.controller.InputFile.expect_capture }",
                "content": "```python\nplaywright.controller.InputFile.expect_capture(value, *, timeout=None)\n```\n\nExpect the `capture` attribute to have a specific value."
            },
            "expect_complete": {
                "header": "expect_complete { #shiny.playwright.controller.InputFile.expect_complete }",
                "content": "```python\nplaywright.controller.InputFile.expect_complete(timeout=None)\n```\n\nExpect the file upload to be complete."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputFile.expect_label }",
                "content": "```python\nplaywright.controller.InputFile.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_multiple": {
                "header": "expect_multiple { #shiny.playwright.controller.InputFile.expect_multiple }",
                "content": "```python\nplaywright.controller.InputFile.expect_multiple(value, *, timeout=None)\n```\n\nExpect the `multiple` attribute to have a specific value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputFile.expect_width }",
                "content": "```python\nplaywright.controller.InputFile.expect_width(value, *, timeout=None)\n```\n\nExpect the width of the input file to have a specific value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputFile.set }",
                "content": "```python\nplaywright.controller.InputFile.set(\n    file_path,\n    *,\n    timeout=None,\n    expect_complete_timeout=30 * 1000,\n)\n```\n\nSet the file upload."
            }
        },
        "preamble": "# playwright.controller.InputFile { #shiny.playwright.controller.InputFile }\n\n```python\nplaywright.controller.InputFile(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_file`)."
    },
    "playwright.controller.InputNumeric": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_label](#shiny.playwright.controller.InputNumeric.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_max](#shiny.playwright.controller.InputNumeric.expect_max) | Expect the maximum numeric value to be a specific value. |\n| [expect_min](#shiny.playwright.controller.InputNumeric.expect_min) | Expect the minimum numeric value to be a specific value. |\n| [expect_step](#shiny.playwright.controller.InputNumeric.expect_step) | Expect step value when incrementing/decrementing the numeric input. |\n| [expect_value](#shiny.playwright.controller.InputNumeric.expect_value) | Expect the value of the text input to have a specific value. |\n| [expect_width](#shiny.playwright.controller.InputNumeric.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputNumeric.set) | Sets the text value |",
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputNumeric.expect_label }",
                "content": "```python\nplaywright.controller.InputNumeric.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                          | Default    |\n|---------|----------------------------------------------|----------------------------------------------------------------------|------------|\n| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |"
            },
            "expect_max": {
                "header": "expect_max { #shiny.playwright.controller.InputNumeric.expect_max }",
                "content": "```python\nplaywright.controller.InputNumeric.expect_max(value, *, timeout=None)\n```\n\nExpect the maximum numeric value to be a specific value."
            },
            "expect_min": {
                "header": "expect_min { #shiny.playwright.controller.InputNumeric.expect_min }",
                "content": "```python\nplaywright.controller.InputNumeric.expect_min(value, *, timeout=None)\n```\n\nExpect the minimum numeric value to be a specific value."
            },
            "expect_step": {
                "header": "expect_step { #shiny.playwright.controller.InputNumeric.expect_step }",
                "content": "```python\nplaywright.controller.InputNumeric.expect_step(value, *, timeout=None)\n```\n\nExpect step value when incrementing/decrementing the numeric input."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.InputNumeric.expect_value }",
                "content": "```python\nplaywright.controller.InputNumeric.expect_value(value, *, timeout=None)\n```\n\nExpect the value of the text input to have a specific value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputNumeric.expect_width }",
                "content": "```python\nplaywright.controller.InputNumeric.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputNumeric.set }",
                "content": "```python\nplaywright.controller.InputNumeric.set(value, *, timeout=None)\n```\n\nSets the text value"
            }
        },
        "preamble": "# playwright.controller.InputNumeric { #shiny.playwright.controller.InputNumeric }\n\n```python\nplaywright.controller.InputNumeric(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_numeric`)."
    },
    "playwright.controller.InputPassword": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_label](#shiny.playwright.controller.InputPassword.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_placeholder](#shiny.playwright.controller.InputPassword.expect_placeholder) | Expect the `placeholder` attribute of the input to have a specific value. |\n| [expect_value](#shiny.playwright.controller.InputPassword.expect_value) | Expect the value of the text input to have a specific value. |\n| [expect_width](#shiny.playwright.controller.InputPassword.expect_width) | Expect the `width` attribute of the input password to have a specific value. |\n| [set](#shiny.playwright.controller.InputPassword.set) | Sets the text value |",
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputPassword.expect_label }",
                "content": "```python\nplaywright.controller.InputPassword.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                          | Default    |\n|---------|----------------------------------------------|----------------------------------------------------------------------|------------|\n| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |"
            },
            "expect_placeholder": {
                "header": "expect_placeholder { #shiny.playwright.controller.InputPassword.expect_placeholder }",
                "content": "```python\nplaywright.controller.InputPassword.expect_placeholder(value, *, timeout=None)\n```\n\nExpect the `placeholder` attribute of the input to have a specific value."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.InputPassword.expect_value }",
                "content": "```python\nplaywright.controller.InputPassword.expect_value(value, *, timeout=None)\n```\n\nExpect the value of the text input to have a specific value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputPassword.expect_width }",
                "content": "```python\nplaywright.controller.InputPassword.expect_width(value, *, timeout=None)\n```\n\nExpect the `width` attribute of the input password to have a specific value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputPassword.set }",
                "content": "```python\nplaywright.controller.InputPassword.set(value, *, timeout=None)\n```\n\nSets the text value"
            }
        },
        "preamble": "# playwright.controller.InputPassword { #shiny.playwright.controller.InputPassword }\n\n```python\nplaywright.controller.InputPassword(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_password`)."
    },
    "playwright.controller.InputRadioButtons": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_choice_labels](#shiny.playwright.controller.InputRadioButtons.expect_choice_labels) | Expect the labels of the choices. |\n| [expect_choices](#shiny.playwright.controller.InputRadioButtons.expect_choices) | Expect the radio button choices. |\n| [expect_inline](#shiny.playwright.controller.InputRadioButtons.expect_inline) | Expect the input to be inline. |\n| [expect_label](#shiny.playwright.controller.InputRadioButtons.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_selected](#shiny.playwright.controller.InputRadioButtons.expect_selected) | Expect the selected radio button. |\n| [expect_width](#shiny.playwright.controller.InputRadioButtons.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputRadioButtons.set) | Set the selected radio button. |",
            "expect_choice_labels": {
                "header": "expect_choice_labels { #shiny.playwright.controller.InputRadioButtons.expect_choice_labels }",
                "content": "```python\nplaywright.controller.InputRadioButtons.expect_choice_labels(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpect the labels of the choices."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name     | Type                                         | Description                                     | Default    |\n|----------|----------------------------------------------|-------------------------------------------------|------------|\n| selected | [str](`str`)                                 | The value of the selected radio button.         | _required_ |\n| timeout  | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the action. Defaults to `None`. | `None`     |"
            },
            "expect_choices": {
                "header": "expect_choices { #shiny.playwright.controller.InputRadioButtons.expect_choices }",
                "content": "```python\nplaywright.controller.InputRadioButtons.expect_choices(value, *, timeout=None)\n```\n\nExpect the radio button choices."
            },
            "expect_inline": {
                "header": "expect_inline { #shiny.playwright.controller.InputRadioButtons.expect_inline }",
                "content": "```python\nplaywright.controller.InputRadioButtons.expect_inline(value, *, timeout=None)\n```\n\nExpect the input to be inline."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputRadioButtons.expect_label }",
                "content": "```python\nplaywright.controller.InputRadioButtons.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_selected": {
                "header": "expect_selected { #shiny.playwright.controller.InputRadioButtons.expect_selected }",
                "content": "```python\nplaywright.controller.InputRadioButtons.expect_selected(value, *, timeout=None)\n```\n\nExpect the selected radio button."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputRadioButtons.expect_width }",
                "content": "```python\nplaywright.controller.InputRadioButtons.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputRadioButtons.set }",
                "content": "```python\nplaywright.controller.InputRadioButtons.set(selected, *, timeout=None, **kwargs)\n```\n\nSet the selected radio button."
            }
        },
        "preamble": "# playwright.controller.InputRadioButtons { #shiny.playwright.controller.InputRadioButtons }\n\n```python\nplaywright.controller.InputRadioButtons(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_radio_buttons`)."
    },
    "playwright.controller.InputSelect": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_choice_groups](#shiny.playwright.controller.InputSelect.expect_choice_groups) | Expect the choice groups of the input select to be an exact match. |\n| [expect_choice_labels](#shiny.playwright.controller.InputSelect.expect_choice_labels) | Expect the choice labels of the input select to be an exact match. |\n| [expect_choices](#shiny.playwright.controller.InputSelect.expect_choices) | Expect the available options of the input select to be an exact match. |\n| [expect_label](#shiny.playwright.controller.InputSelect.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_multiple](#shiny.playwright.controller.InputSelect.expect_multiple) | Expect the input selectize to allow multiple selections. |\n| [expect_selected](#shiny.playwright.controller.InputSelect.expect_selected) | Expect the selected option(s) of the input select to be an exact match. |\n| [expect_size](#shiny.playwright.controller.InputSelect.expect_size) | Expect the size attribute of the input select to have a specific value. |\n| [expect_width](#shiny.playwright.controller.InputSelect.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputSelect.set) | Sets the selected option(s) of the input select. |",
            "expect_choice_groups": {
                "header": "expect_choice_groups { #shiny.playwright.controller.InputSelect.expect_choice_groups }",
                "content": "```python\nplaywright.controller.InputSelect.expect_choice_groups(\n    choice_groups,\n    *,\n    timeout=None,\n)\n```\n\nExpect the choice groups of the input select to be an exact match."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name     | Type                                                                     | Description                                                               | Default    |\n|----------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|\n| selected | [str](`str`) \\| [ListOrTuple](`shiny.types.ListOrTuple`)\\[[str](`str`)\\] | The value(s) of the selected option(s).                                   | _required_ |\n| timeout  | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the selection to be set. Defaults to `None`. | `None`     |"
            },
            "expect_choice_labels": {
                "header": "expect_choice_labels { #shiny.playwright.controller.InputSelect.expect_choice_labels }",
                "content": "```python\nplaywright.controller.InputSelect.expect_choice_labels(value, *, timeout=None)\n```\n\nExpect the choice labels of the input select to be an exact match."
            },
            "expect_choices": {
                "header": "expect_choices { #shiny.playwright.controller.InputSelect.expect_choices }",
                "content": "```python\nplaywright.controller.InputSelect.expect_choices(choices, *, timeout=None)\n```\n\nExpect the available options of the input select to be an exact match."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputSelect.expect_label }",
                "content": "```python\nplaywright.controller.InputSelect.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_multiple": {
                "header": "expect_multiple { #shiny.playwright.controller.InputSelect.expect_multiple }",
                "content": "```python\nplaywright.controller.InputSelect.expect_multiple(value, *, timeout=None)\n```\n\nExpect the input selectize to allow multiple selections."
            },
            "expect_selected": {
                "header": "expect_selected { #shiny.playwright.controller.InputSelect.expect_selected }",
                "content": "```python\nplaywright.controller.InputSelect.expect_selected(value, *, timeout=None)\n```\n\nExpect the selected option(s) of the input select to be an exact match."
            },
            "expect_size": {
                "header": "expect_size { #shiny.playwright.controller.InputSelect.expect_size }",
                "content": "```python\nplaywright.controller.InputSelect.expect_size(value, *, timeout=None)\n```\n\nExpect the size attribute of the input select to have a specific value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputSelect.expect_width }",
                "content": "```python\nplaywright.controller.InputSelect.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputSelect.set }",
                "content": "```python\nplaywright.controller.InputSelect.set(selected, *, timeout=None)\n```\n\nSets the selected option(s) of the input select."
            }
        },
        "preamble": "# playwright.controller.InputSelect { #shiny.playwright.controller.InputSelect }\n\n```python\nplaywright.controller.InputSelect(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_select`).\n\nIf you have defined your app&#x27;s select input (`ui.input_select()`) with `selectize=TRUE`, use `InputSelectize` to test your app&#x27;s UI."
    },
    "playwright.controller.InputSelectize": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_choice_groups](#shiny.playwright.controller.InputSelectize.expect_choice_groups) | Expect the choice groups of the input select to be an exact match. |\n| [expect_choice_labels](#shiny.playwright.controller.InputSelectize.expect_choice_labels) | Expect the choice labels of the input selectize to be an exact match. |\n| [expect_choices](#shiny.playwright.controller.InputSelectize.expect_choices) | Expect the available options of the input selectize to be an exact match. |\n| [expect_label](#shiny.playwright.controller.InputSelectize.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_multiple](#shiny.playwright.controller.InputSelectize.expect_multiple) | Expect the input selectize to allow multiple selections. |\n| [expect_selected](#shiny.playwright.controller.InputSelectize.expect_selected) | Expect the selected option(s) of the input select to be an exact match. |\n| [expect_width](#shiny.playwright.controller.InputSelectize.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputSelectize.set) | Sets the selected option(s) of the input selectize. |",
            "expect_choice_groups": {
                "header": "expect_choice_groups { #shiny.playwright.controller.InputSelectize.expect_choice_groups }",
                "content": "```python\nplaywright.controller.InputSelectize.expect_choice_groups(\n    choice_groups,\n    *,\n    timeout=None,\n)\n```\n\nExpect the choice groups of the input select to be an exact match."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name     | Type                                           | Description                                                               | Default    |\n|----------|------------------------------------------------|---------------------------------------------------------------------------|------------|\n| selected | [str](`str`) \\| [list](`list`)\\[[str](`str`)\\] | The value(s) of the selected option(s).                                   | _required_ |\n| timeout  | [Timeout](`shiny.playwright._types.Timeout`)   | The maximum time to wait for the selection to be set. Defaults to `None`. | `None`     |"
            },
            "expect_choice_labels": {
                "header": "expect_choice_labels { #shiny.playwright.controller.InputSelectize.expect_choice_labels }",
                "content": "```python\nplaywright.controller.InputSelectize.expect_choice_labels(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpect the choice labels of the input selectize to be an exact match."
            },
            "expect_choices": {
                "header": "expect_choices { #shiny.playwright.controller.InputSelectize.expect_choices }",
                "content": "```python\nplaywright.controller.InputSelectize.expect_choices(choices, *, timeout=None)\n```\n\nExpect the available options of the input selectize to be an exact match."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputSelectize.expect_label }",
                "content": "```python\nplaywright.controller.InputSelectize.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_multiple": {
                "header": "expect_multiple { #shiny.playwright.controller.InputSelectize.expect_multiple }",
                "content": "```python\nplaywright.controller.InputSelectize.expect_multiple(value, *, timeout=None)\n```\n\nExpect the input selectize to allow multiple selections."
            },
            "expect_selected": {
                "header": "expect_selected { #shiny.playwright.controller.InputSelectize.expect_selected }",
                "content": "```python\nplaywright.controller.InputSelectize.expect_selected(value, *, timeout=None)\n```\n\nExpect the selected option(s) of the input select to be an exact match."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputSelectize.expect_width }",
                "content": "```python\nplaywright.controller.InputSelectize.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputSelectize.set }",
                "content": "```python\nplaywright.controller.InputSelectize.set(selected, *, timeout=None)\n```\n\nSets the selected option(s) of the input selectize."
            }
        },
        "preamble": "# playwright.controller.InputSelectize { #shiny.playwright.controller.InputSelectize }\n\n```python\nplaywright.controller.InputSelectize(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_selectize`)."
    },
    "playwright.controller.InputSlider": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click_pause](#shiny.playwright.controller.InputSlider.click_pause) | Click the pause button. |\n| [click_play](#shiny.playwright.controller.InputSlider.click_play) | Click the play button. |\n| [expect_animate](#shiny.playwright.controller.InputSlider.expect_animate) | Expect the animate button to exist. |\n| [expect_drag_range](#shiny.playwright.controller.InputSlider.expect_drag_range) | Asserts that the input element has the expected `data-drag-range` attribute value. |\n| [expect_label](#shiny.playwright.controller.InputSlider.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_max](#shiny.playwright.controller.InputSlider.expect_max) | Expect the input element to have the expected `max` attribute value. |\n| [expect_min](#shiny.playwright.controller.InputSlider.expect_min) | Expect the input element to have the expected `min` attribute value. |\n| [expect_post](#shiny.playwright.controller.InputSlider.expect_post) | Expect the input element to have the expected `data-post` attribute value. |\n| [expect_pre](#shiny.playwright.controller.InputSlider.expect_pre) | Expect the input element to have the expected `data-pre` attribute value. |\n| [expect_sep](#shiny.playwright.controller.InputSlider.expect_sep) | Expect the input element to have the expected `data-sep` attribute value. |\n| [expect_step](#shiny.playwright.controller.InputSlider.expect_step) | Expect the input element to have the expected `step` attribute value. |\n| [expect_tick_labels](#shiny.playwright.controller.InputSlider.expect_tick_labels) | Expect the tick labels of the input slider. |\n| [expect_ticks](#shiny.playwright.controller.InputSlider.expect_ticks) | Expect the input element to have the expected `data-ticks` attribute value. |\n| [expect_time_format](#shiny.playwright.controller.InputSlider.expect_time_format) | Asserts that the input element has the expected `data-time-format` attribute value. |\n| [expect_timezone](#shiny.playwright.controller.InputSlider.expect_timezone) | Asserts that the input element has the expected `data-timezone` attribute value. |\n| [expect_value](#shiny.playwright.controller.InputSlider.expect_value) | Asserts that the input element has the expected value. |\n| [expect_width](#shiny.playwright.controller.InputSlider.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputSlider.set) | Set the value of the slider. |",
            "click_pause": {
                "header": "click_pause { #shiny.playwright.controller.InputSlider.click_pause }",
                "content": "```python\nplaywright.controller.InputSlider.click_pause(timeout=None)\n```\n\nClick the pause button."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name           | Type                                         | Description                                                                              | Default    |\n|----------------|----------------------------------------------|------------------------------------------------------------------------------------------|------------|\n| value          | [str](`str`)                                 | The value to set the slider to.                                                          | _required_ |\n| max_err_values | [int](`int`)                                 | The maximum number of error values to display if the value is not found. Defaults to 15. | `15`       |\n| timeout        | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the value to appear. Defaults to `None`.                    | `None`     |"
            },
            "click_play": {
                "header": "click_play { #shiny.playwright.controller.InputSlider.click_play }",
                "content": "```python\nplaywright.controller.InputSlider.click_play(timeout=None)\n```\n\nClick the play button."
            },
            "expect_animate": {
                "header": "expect_animate { #shiny.playwright.controller.InputSlider.expect_animate }",
                "content": "```python\nplaywright.controller.InputSlider.expect_animate(exists, *, timeout=None)\n```\n\nExpect the animate button to exist."
            },
            "expect_drag_range": {
                "header": "expect_drag_range { #shiny.playwright.controller.InputSlider.expect_drag_range }",
                "content": "```python\nplaywright.controller.InputSlider.expect_drag_range(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-drag-range` attribute value."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputSlider.expect_label }",
                "content": "```python\nplaywright.controller.InputSlider.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_max": {
                "header": "expect_max { #shiny.playwright.controller.InputSlider.expect_max }",
                "content": "```python\nplaywright.controller.InputSlider.expect_max(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `max` attribute value."
            },
            "expect_min": {
                "header": "expect_min { #shiny.playwright.controller.InputSlider.expect_min }",
                "content": "```python\nplaywright.controller.InputSlider.expect_min(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `min` attribute value."
            },
            "expect_post": {
                "header": "expect_post { #shiny.playwright.controller.InputSlider.expect_post }",
                "content": "```python\nplaywright.controller.InputSlider.expect_post(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `data-post` attribute value."
            },
            "expect_pre": {
                "header": "expect_pre { #shiny.playwright.controller.InputSlider.expect_pre }",
                "content": "```python\nplaywright.controller.InputSlider.expect_pre(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `data-pre` attribute value."
            },
            "expect_sep": {
                "header": "expect_sep { #shiny.playwright.controller.InputSlider.expect_sep }",
                "content": "```python\nplaywright.controller.InputSlider.expect_sep(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `data-sep` attribute value."
            },
            "expect_step": {
                "header": "expect_step { #shiny.playwright.controller.InputSlider.expect_step }",
                "content": "```python\nplaywright.controller.InputSlider.expect_step(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `step` attribute value."
            },
            "expect_tick_labels": {
                "header": "expect_tick_labels { #shiny.playwright.controller.InputSlider.expect_tick_labels }",
                "content": "```python\nplaywright.controller.InputSlider.expect_tick_labels(value, *, timeout=None)\n```\n\nExpect the tick labels of the input slider."
            },
            "expect_ticks": {
                "header": "expect_ticks { #shiny.playwright.controller.InputSlider.expect_ticks }",
                "content": "```python\nplaywright.controller.InputSlider.expect_ticks(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `data-ticks` attribute value."
            },
            "expect_time_format": {
                "header": "expect_time_format { #shiny.playwright.controller.InputSlider.expect_time_format }",
                "content": "```python\nplaywright.controller.InputSlider.expect_time_format(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-time-format` attribute value."
            },
            "expect_timezone": {
                "header": "expect_timezone { #shiny.playwright.controller.InputSlider.expect_timezone }",
                "content": "```python\nplaywright.controller.InputSlider.expect_timezone(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-timezone` attribute value."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.InputSlider.expect_value }",
                "content": "```python\nplaywright.controller.InputSlider.expect_value(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputSlider.expect_width }",
                "content": "```python\nplaywright.controller.InputSlider.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputSlider.set }",
                "content": "```python\nplaywright.controller.InputSlider.set(value, *, max_err_values=15, timeout=None)\n```\n\nSet the value of the slider."
            }
        },
        "preamble": "# playwright.controller.InputSlider { #shiny.playwright.controller.InputSlider }\n\n```python\nplaywright.controller.InputSlider(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_slider`)."
    },
    "playwright.controller.InputSliderRange": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click_pause](#shiny.playwright.controller.InputSliderRange.click_pause) | Click the pause button. |\n| [click_play](#shiny.playwright.controller.InputSliderRange.click_play) | Click the play button. |\n| [expect_animate](#shiny.playwright.controller.InputSliderRange.expect_animate) | Expect the animate button to exist. |\n| [expect_drag_range](#shiny.playwright.controller.InputSliderRange.expect_drag_range) | Asserts that the input element has the expected `data-drag-range` attribute value. |\n| [expect_label](#shiny.playwright.controller.InputSliderRange.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_max](#shiny.playwright.controller.InputSliderRange.expect_max) | Expect the input element to have the expected `max` attribute value. |\n| [expect_min](#shiny.playwright.controller.InputSliderRange.expect_min) | Expect the input element to have the expected `min` attribute value. |\n| [expect_post](#shiny.playwright.controller.InputSliderRange.expect_post) | Expect the input element to have the expected `data-post` attribute value. |\n| [expect_pre](#shiny.playwright.controller.InputSliderRange.expect_pre) | Expect the input element to have the expected `data-pre` attribute value. |\n| [expect_sep](#shiny.playwright.controller.InputSliderRange.expect_sep) | Expect the input element to have the expected `data-sep` attribute value. |\n| [expect_step](#shiny.playwright.controller.InputSliderRange.expect_step) | Expect the input element to have the expected `step` attribute value. |\n| [expect_tick_labels](#shiny.playwright.controller.InputSliderRange.expect_tick_labels) | Expect the tick labels of the input slider. |\n| [expect_ticks](#shiny.playwright.controller.InputSliderRange.expect_ticks) | Expect the input element to have the expected `data-ticks` attribute value. |\n| [expect_time_format](#shiny.playwright.controller.InputSliderRange.expect_time_format) | Asserts that the input element has the expected `data-time-format` attribute value. |\n| [expect_timezone](#shiny.playwright.controller.InputSliderRange.expect_timezone) | Asserts that the input element has the expected `data-timezone` attribute value. |\n| [expect_value](#shiny.playwright.controller.InputSliderRange.expect_value) | Asserts that the input element has the expected value. |\n| [expect_width](#shiny.playwright.controller.InputSliderRange.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputSliderRange.set) | Set the value of the slider. |",
            "click_pause": {
                "header": "click_pause { #shiny.playwright.controller.InputSliderRange.click_pause }",
                "content": "```python\nplaywright.controller.InputSliderRange.click_pause(timeout=None)\n```\n\nClick the pause button."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name           | Type                                                                                                                                                                                                                                                                                         | Description                                                                              | Default    |\n|----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|------------|\n| value          | [typing](`typing`).[Tuple](`typing.Tuple`)\\[[str](`str`), [str](`str`)\\] \\| [typing](`typing`).[Tuple](`typing.Tuple`)\\[[str](`str`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\\] \\| [typing](`typing`).[Tuple](`typing.Tuple`)\\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [str](`str`)\\] | The value to set the slider to.                                                          | _required_ |\n| max_err_values | [int](`int`)                                                                                                                                                                                                                                                                                 | The maximum number of error values to display if the value is not found. Defaults to 15. | `15`       |\n| timeout        | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                                                                                                                                                 | The maximum time to wait for the value to appear. Defaults to `None`.                    | `None`     |"
            },
            "click_play": {
                "header": "click_play { #shiny.playwright.controller.InputSliderRange.click_play }",
                "content": "```python\nplaywright.controller.InputSliderRange.click_play(timeout=None)\n```\n\nClick the play button."
            },
            "expect_animate": {
                "header": "expect_animate { #shiny.playwright.controller.InputSliderRange.expect_animate }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_animate(exists, *, timeout=None)\n```\n\nExpect the animate button to exist."
            },
            "expect_drag_range": {
                "header": "expect_drag_range { #shiny.playwright.controller.InputSliderRange.expect_drag_range }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_drag_range(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-drag-range` attribute value."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputSliderRange.expect_label }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_max": {
                "header": "expect_max { #shiny.playwright.controller.InputSliderRange.expect_max }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_max(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `max` attribute value."
            },
            "expect_min": {
                "header": "expect_min { #shiny.playwright.controller.InputSliderRange.expect_min }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_min(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `min` attribute value."
            },
            "expect_post": {
                "header": "expect_post { #shiny.playwright.controller.InputSliderRange.expect_post }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_post(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `data-post` attribute value."
            },
            "expect_pre": {
                "header": "expect_pre { #shiny.playwright.controller.InputSliderRange.expect_pre }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_pre(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `data-pre` attribute value."
            },
            "expect_sep": {
                "header": "expect_sep { #shiny.playwright.controller.InputSliderRange.expect_sep }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_sep(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `data-sep` attribute value."
            },
            "expect_step": {
                "header": "expect_step { #shiny.playwright.controller.InputSliderRange.expect_step }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_step(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `step` attribute value."
            },
            "expect_tick_labels": {
                "header": "expect_tick_labels { #shiny.playwright.controller.InputSliderRange.expect_tick_labels }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_tick_labels(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpect the tick labels of the input slider."
            },
            "expect_ticks": {
                "header": "expect_ticks { #shiny.playwright.controller.InputSliderRange.expect_ticks }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_ticks(value, *, timeout=None)\n```\n\nExpect the input element to have the expected `data-ticks` attribute value."
            },
            "expect_time_format": {
                "header": "expect_time_format { #shiny.playwright.controller.InputSliderRange.expect_time_format }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_time_format(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nAsserts that the input element has the expected `data-time-format` attribute value."
            },
            "expect_timezone": {
                "header": "expect_timezone { #shiny.playwright.controller.InputSliderRange.expect_timezone }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_timezone(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected `data-timezone` attribute value."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.InputSliderRange.expect_value }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_value(value, *, timeout=None)\n```\n\nAsserts that the input element has the expected value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputSliderRange.expect_width }",
                "content": "```python\nplaywright.controller.InputSliderRange.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputSliderRange.set }",
                "content": "```python\nplaywright.controller.InputSliderRange.set(\n    value,\n    *,\n    max_err_values=15,\n    timeout=None,\n)\n```\n\nSet the value of the slider."
            }
        },
        "preamble": "# playwright.controller.InputSliderRange { #shiny.playwright.controller.InputSliderRange }\n\n```python\nplaywright.controller.InputSliderRange(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_slider`) with a slider range."
    },
    "playwright.controller.InputSwitch": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_checked](#shiny.playwright.controller.InputSwitch.expect_checked) | Expect the input checkbox to be checked. |\n| [expect_label](#shiny.playwright.controller.InputSwitch.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_width](#shiny.playwright.controller.InputSwitch.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputSwitch.set) | Sets the input checkbox. |",
            "expect_checked": {
                "header": "expect_checked { #shiny.playwright.controller.InputSwitch.expect_checked }",
                "content": "```python\nplaywright.controller.InputSwitch.expect_checked(value, *, timeout=None)\n```\n\nExpect the input checkbox to be checked."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                    | Default    |\n|---------|----------------------------------------------|--------------------------------------------------------------------------------|------------|\n| value   | [bool](`bool`)                               | The value of the input checkbox.                                               | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input checkbox to be set. Defaults to `None`. | `None`     |"
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputSwitch.expect_label }",
                "content": "```python\nplaywright.controller.InputSwitch.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputSwitch.expect_width }",
                "content": "```python\nplaywright.controller.InputSwitch.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputSwitch.set }",
                "content": "```python\nplaywright.controller.InputSwitch.set(value, *, timeout=None, **kwargs)\n```\n\nSets the input checkbox."
            }
        },
        "preamble": "# playwright.controller.InputSwitch { #shiny.playwright.controller.InputSwitch }\n\n```python\nplaywright.controller.InputSwitch(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_switch`)."
    },
    "playwright.controller.InputTaskButton": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controller.InputTaskButton.click) | Clicks the input action. |\n| [expect_auto_reset](#shiny.playwright.controller.InputTaskButton.expect_auto_reset) | Expect the `auto-reset` attribute of the input task button to have a specific value. |\n| [expect_label](#shiny.playwright.controller.InputTaskButton.expect_label) | Expect the label of the input task button to have a specific value. |\n| [expect_label_busy](#shiny.playwright.controller.InputTaskButton.expect_label_busy) | Expect the label of a busy input task button to have a specific value. |\n| [expect_label_ready](#shiny.playwright.controller.InputTaskButton.expect_label_ready) | Expect the label of a ready input task button to have a specific value. |\n| [expect_label_state](#shiny.playwright.controller.InputTaskButton.expect_label_state) | Expect the label of the input task button to have a specific value in a specific state. |\n| [expect_state](#shiny.playwright.controller.InputTaskButton.expect_state) | Expect the state of the input task button to have a specific value. |\n| [expect_width](#shiny.playwright.controller.InputTaskButton.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |",
            "click": {
                "header": "click { #shiny.playwright.controller.InputTaskButton.click }",
                "content": "```python\nplaywright.controller.InputTaskButton.click(timeout=None, **kwargs)\n```\n\nClicks the input action."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                             | Description                                                                       | Default    |\n|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|\n| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `width` attribute.                                      | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |"
            },
            "expect_auto_reset": {
                "header": "expect_auto_reset { #shiny.playwright.controller.InputTaskButton.expect_auto_reset }",
                "content": "```python\nplaywright.controller.InputTaskButton.expect_auto_reset(value, timeout=None)\n```\n\nExpect the `auto-reset` attribute of the input task button to have a specific value."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputTaskButton.expect_label }",
                "content": "```python\nplaywright.controller.InputTaskButton.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input task button to have a specific value."
            },
            "expect_label_busy": {
                "header": "expect_label_busy { #shiny.playwright.controller.InputTaskButton.expect_label_busy }",
                "content": "```python\nplaywright.controller.InputTaskButton.expect_label_busy(value, *, timeout=None)\n```\n\nExpect the label of a busy input task button to have a specific value."
            },
            "expect_label_ready": {
                "header": "expect_label_ready { #shiny.playwright.controller.InputTaskButton.expect_label_ready }",
                "content": "```python\nplaywright.controller.InputTaskButton.expect_label_ready(value, *, timeout=None)\n```\n\nExpect the label of a ready input task button to have a specific value."
            },
            "expect_label_state": {
                "header": "expect_label_state { #shiny.playwright.controller.InputTaskButton.expect_label_state }",
                "content": "```python\nplaywright.controller.InputTaskButton.expect_label_state(\n    state,\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpect the label of the input task button to have a specific value in a specific state."
            },
            "expect_state": {
                "header": "expect_state { #shiny.playwright.controller.InputTaskButton.expect_state }",
                "content": "```python\nplaywright.controller.InputTaskButton.expect_state(value, *, timeout=None)\n```\n\nExpect the state of the input task button to have a specific value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputTaskButton.expect_width }",
                "content": "```python\nplaywright.controller.InputTaskButton.expect_width(value, *, timeout=None)\n```\n\nExpect the `width` attribute of a DOM element to have a specific value."
            }
        },
        "preamble": "# playwright.controller.InputTaskButton { #shiny.playwright.controller.InputTaskButton }\n\n```python\nplaywright.controller.InputTaskButton(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_task_button`)."
    },
    "playwright.controller.InputText": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_autocomplete](#shiny.playwright.controller.InputText.expect_autocomplete) | Expect the `autocomplete` attribute of the input to have a specific value. |\n| [expect_label](#shiny.playwright.controller.InputText.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_placeholder](#shiny.playwright.controller.InputText.expect_placeholder) | Expect the `placeholder` attribute of the input to have a specific value. |\n| [expect_spellcheck](#shiny.playwright.controller.InputText.expect_spellcheck) | Expect the `spellcheck` attribute of the input to have a specific value. |\n| [expect_value](#shiny.playwright.controller.InputText.expect_value) | Expect the value of the text input to have a specific value. |\n| [expect_width](#shiny.playwright.controller.InputText.expect_width) | Expect the input element to have a specific width. |\n| [set](#shiny.playwright.controller.InputText.set) | Sets the text value |",
            "expect_autocomplete": {
                "header": "expect_autocomplete { #shiny.playwright.controller.InputText.expect_autocomplete }",
                "content": "```python\nplaywright.controller.InputText.expect_autocomplete(value, *, timeout=None)\n```\n\nExpect the `autocomplete` attribute of the input to have a specific value."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                          | Default    |\n|---------|----------------------------------------------|----------------------------------------------------------------------|------------|\n| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |"
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputText.expect_label }",
                "content": "```python\nplaywright.controller.InputText.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_placeholder": {
                "header": "expect_placeholder { #shiny.playwright.controller.InputText.expect_placeholder }",
                "content": "```python\nplaywright.controller.InputText.expect_placeholder(value, *, timeout=None)\n```\n\nExpect the `placeholder` attribute of the input to have a specific value."
            },
            "expect_spellcheck": {
                "header": "expect_spellcheck { #shiny.playwright.controller.InputText.expect_spellcheck }",
                "content": "```python\nplaywright.controller.InputText.expect_spellcheck(value, *, timeout=None)\n```\n\nExpect the `spellcheck` attribute of the input to have a specific value."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.InputText.expect_value }",
                "content": "```python\nplaywright.controller.InputText.expect_value(value, *, timeout=None)\n```\n\nExpect the value of the text input to have a specific value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputText.expect_width }",
                "content": "```python\nplaywright.controller.InputText.expect_width(value, *, timeout=None)\n```\n\nExpect the input element to have a specific width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputText.set }",
                "content": "```python\nplaywright.controller.InputText.set(value, *, timeout=None)\n```\n\nSets the text value"
            }
        },
        "preamble": "# playwright.controller.InputText { #shiny.playwright.controller.InputText }\n\n```python\nplaywright.controller.InputText(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_text`)."
    },
    "playwright.controller.InputTextArea": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_autocomplete](#shiny.playwright.controller.InputTextArea.expect_autocomplete) | Expect the `autocomplete` attribute of the input to have a specific value. |\n| [expect_autoresize](#shiny.playwright.controller.InputTextArea.expect_autoresize) | Expect the `autoresize` attribute of the input text area to have a specific value. |\n| [expect_cols](#shiny.playwright.controller.InputTextArea.expect_cols) | Expect the `cols` attribute of the input text area to have a specific value. |\n| [expect_height](#shiny.playwright.controller.InputTextArea.expect_height) | Expect the `height` attribute of the input text area to have a specific value. |\n| [expect_label](#shiny.playwright.controller.InputTextArea.expect_label) | Expect the label of the input to have a specific text. |\n| [expect_placeholder](#shiny.playwright.controller.InputTextArea.expect_placeholder) | Expect the `placeholder` attribute of the input to have a specific value. |\n| [expect_resize](#shiny.playwright.controller.InputTextArea.expect_resize) | Expect the `resize` attribute of the input text area to have a specific value. |\n| [expect_rows](#shiny.playwright.controller.InputTextArea.expect_rows) | Expect the `rows` attribute of the input text area to have a specific value. |\n| [expect_spellcheck](#shiny.playwright.controller.InputTextArea.expect_spellcheck) | Expect the `spellcheck` attribute of the input to have a specific value. |\n| [expect_value](#shiny.playwright.controller.InputTextArea.expect_value) | Expect the value of the text input to have a specific value. |\n| [expect_width](#shiny.playwright.controller.InputTextArea.expect_width) | Expect the `width` attribute of the input text area to have a specific value. |\n| [set](#shiny.playwright.controller.InputTextArea.set) | Sets the text value |",
            "expect_autocomplete": {
                "header": "expect_autocomplete { #shiny.playwright.controller.InputTextArea.expect_autocomplete }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_autocomplete(value, *, timeout=None)\n```\n\nExpect the `autocomplete` attribute of the input to have a specific value."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                          | Default    |\n|---------|----------------------------------------------|----------------------------------------------------------------------|------------|\n| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |"
            },
            "expect_autoresize": {
                "header": "expect_autoresize { #shiny.playwright.controller.InputTextArea.expect_autoresize }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_autoresize(value, *, timeout=None)\n```\n\nExpect the `autoresize` attribute of the input text area to have a specific value."
            },
            "expect_cols": {
                "header": "expect_cols { #shiny.playwright.controller.InputTextArea.expect_cols }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_cols(value, *, timeout=None)\n```\n\nExpect the `cols` attribute of the input text area to have a specific value."
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controller.InputTextArea.expect_height }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_height(value, *, timeout=None)\n```\n\nExpect the `height` attribute of the input text area to have a specific value."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controller.InputTextArea.expect_label }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_label(value, *, timeout=None)\n```\n\nExpect the label of the input to have a specific text."
            },
            "expect_placeholder": {
                "header": "expect_placeholder { #shiny.playwright.controller.InputTextArea.expect_placeholder }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_placeholder(value, *, timeout=None)\n```\n\nExpect the `placeholder` attribute of the input to have a specific value."
            },
            "expect_resize": {
                "header": "expect_resize { #shiny.playwright.controller.InputTextArea.expect_resize }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_resize(value, *, timeout=None)\n```\n\nExpect the `resize` attribute of the input text area to have a specific value."
            },
            "expect_rows": {
                "header": "expect_rows { #shiny.playwright.controller.InputTextArea.expect_rows }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_rows(value, *, timeout=None)\n```\n\nExpect the `rows` attribute of the input text area to have a specific value."
            },
            "expect_spellcheck": {
                "header": "expect_spellcheck { #shiny.playwright.controller.InputTextArea.expect_spellcheck }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_spellcheck(value, *, timeout=None)\n```\n\nExpect the `spellcheck` attribute of the input to have a specific value."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.InputTextArea.expect_value }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_value(value, *, timeout=None)\n```\n\nExpect the value of the text input to have a specific value."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.InputTextArea.expect_width }",
                "content": "```python\nplaywright.controller.InputTextArea.expect_width(value, *, timeout=None)\n```\n\nExpect the `width` attribute of the input text area to have a specific value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.InputTextArea.set }",
                "content": "```python\nplaywright.controller.InputTextArea.set(value, *, timeout=None)\n```\n\nSets the text value"
            }
        },
        "preamble": "# playwright.controller.InputTextArea { #shiny.playwright.controller.InputTextArea }\n\n```python\nplaywright.controller.InputTextArea(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.input_text_area`)."
    },
    "playwright.controller.NavItem": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controller.NavItem.click) | Clicks the nav item. |\n| [expect_active](#shiny.playwright.controller.NavItem.expect_active) | Expects the nav item to be active or inactive. |",
            "click": {
                "header": "click { #shiny.playwright.controller.NavItem.click }",
                "content": "`playwright.controller.NavItem.click(timeout=None)`\n\nClicks the nav item.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the nav item to be visible and interactable. Defaults to `None`."
            },
            "expect_active": {
                "header": "expect_active { #shiny.playwright.controller.NavItem.expect_active }",
                "content": "`playwright.controller.NavItem.expect_active(value, *, timeout=None)`\n\nExpects the nav item to be active or inactive.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">active</span></code>\n\n:   `True` if the nav item is expected to be active, False otherwise.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controller.NavItem { #shiny.playwright.controller.NavItem }\n\n`playwright.controller.NavItem(self, page, id, data_value)`\n\nController for [](:func:`shiny.express.ui.nav_item`)."
    },
    "playwright.controller.NavPanel": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controller.NavPanel.click) | Clicks the nav panel. |\n| [expect_active](#shiny.playwright.controller.NavPanel.expect_active) | Expects the nav panel to be active or inactive. |",
            "click": {
                "header": "click { #shiny.playwright.controller.NavPanel.click }",
                "content": "```python\nplaywright.controller.NavPanel.click(timeout=None)\n```\n\nClicks the nav panel."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                               | Default    |\n|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|\n| value   | [bool](`bool`)                               | `True` if the nav panel is expected to be active, False otherwise.        | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |"
            },
            "expect_active": {
                "header": "expect_active { #shiny.playwright.controller.NavPanel.expect_active }",
                "content": "```python\nplaywright.controller.NavPanel.expect_active(value, *, timeout=None)\n```\n\nExpects the nav panel to be active or inactive."
            }
        },
        "preamble": "# playwright.controller.NavPanel { #shiny.playwright.controller.NavPanel }\n\n```python\nplaywright.controller.NavPanel(self, page, id, panel_value)\n```\n\nController for [](:func:`shiny.express.ui.nav_panel`)."
    },
    "playwright.controller.NavsetBar": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_bg](#shiny.playwright.controller.NavsetBar.expect_bg) | Expects the navset bar to have the specified background color. |\n| [expect_fluid](#shiny.playwright.controller.NavsetBar.expect_fluid) | Expects the navset bar to have a fluid or fixed layout. |\n| [expect_gap](#shiny.playwright.controller.NavsetBar.expect_gap) | Expects the navset bar to have the specified gap. |\n| [expect_inverse](#shiny.playwright.controller.NavsetBar.expect_inverse) | Expects the navset bar to be light text color if inverse is True |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetBar.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetBar.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_position](#shiny.playwright.controller.NavsetBar.expect_position) | Expects the navset bar to have the specified position. |\n| [expect_sidebar](#shiny.playwright.controller.NavsetBar.expect_sidebar) | Assert whether or not the sidebar exists within the navset. |\n| [expect_title](#shiny.playwright.controller.NavsetBar.expect_title) | Expects the navset title to have the specified text. |\n| [expect_value](#shiny.playwright.controller.NavsetBar.expect_value) | Expects the control to have the specified value. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetBar.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetBar.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetBar.set) | Sets the state of the control to open or closed. |",
            "expect_bg": {
                "header": "expect_bg { #shiny.playwright.controller.NavsetBar.expect_bg }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_bg(bg, *, timeout=None)\n```\n\nExpects the navset bar to have the specified background color."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_fluid": {
                "header": "expect_fluid { #shiny.playwright.controller.NavsetBar.expect_fluid }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_fluid(value, *, timeout=None)\n```\n\nExpects the navset bar to have a fluid or fixed layout."
            },
            "expect_gap": {
                "header": "expect_gap { #shiny.playwright.controller.NavsetBar.expect_gap }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_gap(gap, *, timeout=None)\n```\n\nExpects the navset bar to have the specified gap."
            },
            "expect_inverse": {
                "header": "expect_inverse { #shiny.playwright.controller.NavsetBar.expect_inverse }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_inverse(value, *, timeout=None)\n```\n\nExpects the navset bar to be light text color if inverse is True"
            },
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetBar.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_nav_titles(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav titles."
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetBar.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_nav_values(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_position": {
                "header": "expect_position { #shiny.playwright.controller.NavsetBar.expect_position }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_position(\n    position='static-top',\n    *,\n    timeout=None,\n)\n```\n\nExpects the navset bar to have the specified position."
            },
            "expect_sidebar": {
                "header": "expect_sidebar { #shiny.playwright.controller.NavsetBar.expect_sidebar }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_sidebar(exists, *, timeout=None)\n```\n\nAssert whether or not the sidebar exists within the navset."
            },
            "expect_title": {
                "header": "expect_title { #shiny.playwright.controller.NavsetBar.expect_title }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_title(value, *, timeout=None)\n```\n\nExpects the navset title to have the specified text."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetBar.expect_value }",
                "content": "```python\nplaywright.controller.NavsetBar.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetBar.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetBar.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetBar.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetBar.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetBar.set }",
                "content": "```python\nplaywright.controller.NavsetBar.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetBar { #shiny.playwright.controller.NavsetBar }\n\n```python\nplaywright.controller.NavsetBar(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_bar`)."
    },
    "playwright.controller.NavsetCardPill": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetCardPill.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetCardPill.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_placement](#shiny.playwright.controller.NavsetCardPill.expect_placement) | Expects the navset to have the specified placement. |\n| [expect_sidebar](#shiny.playwright.controller.NavsetCardPill.expect_sidebar) | Assert whether or not the sidebar exists within the navset. |\n| [expect_title](#shiny.playwright.controller.NavsetCardPill.expect_title) | Expects the navset title to have the specified text. |\n| [expect_value](#shiny.playwright.controller.NavsetCardPill.expect_value) | Expects the control to have the specified value. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetCardPill.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetCardPill.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetCardPill.set) | Sets the state of the control to open or closed. |",
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetCardPill.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetCardPill.expect_nav_titles(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav titles."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetCardPill.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetCardPill.expect_nav_values(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_placement": {
                "header": "expect_placement { #shiny.playwright.controller.NavsetCardPill.expect_placement }",
                "content": "```python\nplaywright.controller.NavsetCardPill.expect_placement(\n    location='above',\n    *,\n    timeout=None,\n)\n```\n\nExpects the navset to have the specified placement."
            },
            "expect_sidebar": {
                "header": "expect_sidebar { #shiny.playwright.controller.NavsetCardPill.expect_sidebar }",
                "content": "```python\nplaywright.controller.NavsetCardPill.expect_sidebar(exists, *, timeout=None)\n```\n\nAssert whether or not the sidebar exists within the navset."
            },
            "expect_title": {
                "header": "expect_title { #shiny.playwright.controller.NavsetCardPill.expect_title }",
                "content": "```python\nplaywright.controller.NavsetCardPill.expect_title(value, *, timeout=None)\n```\n\nExpects the navset title to have the specified text."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetCardPill.expect_value }",
                "content": "```python\nplaywright.controller.NavsetCardPill.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetCardPill.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetCardPill.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetCardPill.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetCardPill.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetCardPill.set }",
                "content": "```python\nplaywright.controller.NavsetCardPill.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetCardPill { #shiny.playwright.controller.NavsetCardPill }\n\n```python\nplaywright.controller.NavsetCardPill(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_card_pill`)."
    },
    "playwright.controller.NavsetCardTab": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetCardTab.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetCardTab.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_sidebar](#shiny.playwright.controller.NavsetCardTab.expect_sidebar) | Assert whether or not the sidebar exists within the navset. |\n| [expect_title](#shiny.playwright.controller.NavsetCardTab.expect_title) | Expects the navset title to have the specified text. |\n| [expect_value](#shiny.playwright.controller.NavsetCardTab.expect_value) | Expects the control to have the specified value. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetCardTab.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetCardTab.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetCardTab.set) | Sets the state of the control to open or closed. |",
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetCardTab.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetCardTab.expect_nav_titles(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav titles."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetCardTab.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetCardTab.expect_nav_values(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_sidebar": {
                "header": "expect_sidebar { #shiny.playwright.controller.NavsetCardTab.expect_sidebar }",
                "content": "```python\nplaywright.controller.NavsetCardTab.expect_sidebar(exists, *, timeout=None)\n```\n\nAssert whether or not the sidebar exists within the navset."
            },
            "expect_title": {
                "header": "expect_title { #shiny.playwright.controller.NavsetCardTab.expect_title }",
                "content": "```python\nplaywright.controller.NavsetCardTab.expect_title(value, *, timeout=None)\n```\n\nExpects the navset title to have the specified text."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetCardTab.expect_value }",
                "content": "```python\nplaywright.controller.NavsetCardTab.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetCardTab.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetCardTab.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetCardTab.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetCardTab.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetCardTab.set }",
                "content": "```python\nplaywright.controller.NavsetCardTab.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetCardTab { #shiny.playwright.controller.NavsetCardTab }\n\n```python\nplaywright.controller.NavsetCardTab(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_card_tab`)."
    },
    "playwright.controller.NavsetCardUnderline": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetCardUnderline.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetCardUnderline.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_placement](#shiny.playwright.controller.NavsetCardUnderline.expect_placement) | Expects the navset to have the specified placement. |\n| [expect_sidebar](#shiny.playwright.controller.NavsetCardUnderline.expect_sidebar) | Assert whether or not the sidebar exists within the navset. |\n| [expect_title](#shiny.playwright.controller.NavsetCardUnderline.expect_title) | Expects the navset title to have the specified text. |\n| [expect_value](#shiny.playwright.controller.NavsetCardUnderline.expect_value) | Expects the control to have the specified value. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetCardUnderline.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetCardUnderline.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetCardUnderline.set) | Sets the state of the control to open or closed. |",
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetCardUnderline.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.expect_nav_titles(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpects the control to have the specified nav titles."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetCardUnderline.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.expect_nav_values(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_placement": {
                "header": "expect_placement { #shiny.playwright.controller.NavsetCardUnderline.expect_placement }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.expect_placement(\n    location='above',\n    *,\n    timeout=None,\n)\n```\n\nExpects the navset to have the specified placement."
            },
            "expect_sidebar": {
                "header": "expect_sidebar { #shiny.playwright.controller.NavsetCardUnderline.expect_sidebar }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.expect_sidebar(\n    exists,\n    *,\n    timeout=None,\n)\n```\n\nAssert whether or not the sidebar exists within the navset."
            },
            "expect_title": {
                "header": "expect_title { #shiny.playwright.controller.NavsetCardUnderline.expect_title }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.expect_title(value, *, timeout=None)\n```\n\nExpects the navset title to have the specified text."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetCardUnderline.expect_value }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetCardUnderline.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetCardUnderline.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetCardUnderline.set }",
                "content": "```python\nplaywright.controller.NavsetCardUnderline.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetCardUnderline { #shiny.playwright.controller.NavsetCardUnderline }\n\n```python\nplaywright.controller.NavsetCardUnderline(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_card_underline`)."
    },
    "playwright.controller.NavsetHidden": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetHidden.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetHidden.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_value](#shiny.playwright.controller.NavsetHidden.expect_value) | Expects the control to have the specified value. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetHidden.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetHidden.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetHidden.set) | Sets the state of the control to open or closed. |",
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetHidden.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetHidden.expect_nav_titles(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav titles."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetHidden.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetHidden.expect_nav_values(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetHidden.expect_value }",
                "content": "```python\nplaywright.controller.NavsetHidden.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetHidden.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetHidden.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetHidden.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetHidden.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetHidden.set }",
                "content": "```python\nplaywright.controller.NavsetHidden.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetHidden { #shiny.playwright.controller.NavsetHidden }\n\n```python\nplaywright.controller.NavsetHidden(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_hidden`)."
    },
    "playwright.controller.NavsetPill": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetPill.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetPill.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_value](#shiny.playwright.controller.NavsetPill.expect_value) | Expects the control to have the specified value. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetPill.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetPill.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetPill.set) | Sets the state of the control to open or closed. |",
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetPill.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetPill.expect_nav_titles(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav titles."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetPill.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetPill.expect_nav_values(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetPill.expect_value }",
                "content": "```python\nplaywright.controller.NavsetPill.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetPill.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetPill.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetPill.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetPill.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetPill.set }",
                "content": "```python\nplaywright.controller.NavsetPill.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetPill { #shiny.playwright.controller.NavsetPill }\n\n```python\nplaywright.controller.NavsetPill(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_pill`)."
    },
    "playwright.controller.NavsetPillList": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetPillList.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetPillList.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_value](#shiny.playwright.controller.NavsetPillList.expect_value) | Expects the control to have the specified value. |\n| [expect_well](#shiny.playwright.controller.NavsetPillList.expect_well) | Expects the navset pill list to have a well. |\n| [expect_widths](#shiny.playwright.controller.NavsetPillList.expect_widths) | Expects the navset pill list to have the specified widths. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetPillList.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetPillList.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetPillList.set) | Sets the state of the control to open or closed. |",
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetPillList.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetPillList.expect_nav_titles(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav titles."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetPillList.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetPillList.expect_nav_values(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetPillList.expect_value }",
                "content": "```python\nplaywright.controller.NavsetPillList.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "expect_well": {
                "header": "expect_well { #shiny.playwright.controller.NavsetPillList.expect_well }",
                "content": "```python\nplaywright.controller.NavsetPillList.expect_well(value, *, timeout=None)\n```\n\nExpects the navset pill list to have a well."
            },
            "expect_widths": {
                "header": "expect_widths { #shiny.playwright.controller.NavsetPillList.expect_widths }",
                "content": "```python\nplaywright.controller.NavsetPillList.expect_widths(value, *, timeout=None)\n```\n\nExpects the navset pill list to have the specified widths."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetPillList.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetPillList.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetPillList.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetPillList.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetPillList.set }",
                "content": "```python\nplaywright.controller.NavsetPillList.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetPillList { #shiny.playwright.controller.NavsetPillList }\n\n```python\nplaywright.controller.NavsetPillList(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_pill_list`)."
    },
    "playwright.controller.NavsetTab": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetTab.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetTab.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_value](#shiny.playwright.controller.NavsetTab.expect_value) | Expects the control to have the specified value. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetTab.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetTab.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetTab.set) | Sets the state of the control to open or closed. |",
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetTab.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetTab.expect_nav_titles(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav titles."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetTab.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetTab.expect_nav_values(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetTab.expect_value }",
                "content": "```python\nplaywright.controller.NavsetTab.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetTab.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetTab.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetTab.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetTab.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetTab.set }",
                "content": "```python\nplaywright.controller.NavsetTab.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetTab { #shiny.playwright.controller.NavsetTab }\n\n```python\nplaywright.controller.NavsetTab(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_tab`)."
    },
    "playwright.controller.NavsetUnderline": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_nav_titles](#shiny.playwright.controller.NavsetUnderline.expect_nav_titles) | Expects the control to have the specified nav titles. |\n| [expect_nav_values](#shiny.playwright.controller.NavsetUnderline.expect_nav_values) | Expects the control to have the specified nav values. |\n| [expect_value](#shiny.playwright.controller.NavsetUnderline.expect_value) | Expects the control to have the specified value. |\n| [get_loc_active_content](#shiny.playwright.controller.NavsetUnderline.get_loc_active_content) | Returns the locator for the active content. |\n| [nav_panel](#shiny.playwright.controller.NavsetUnderline.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |\n| [set](#shiny.playwright.controller.NavsetUnderline.set) | Sets the state of the control to open or closed. |",
            "expect_nav_titles": {
                "header": "expect_nav_titles { #shiny.playwright.controller.NavsetUnderline.expect_nav_titles }",
                "content": "```python\nplaywright.controller.NavsetUnderline.expect_nav_titles(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav titles."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name   | Type         | Description            | Default    |\n|--------|--------------|------------------------|------------|\n| value  | [str](`str`) | The selected nav item. | _required_ |"
            },
            "expect_nav_values": {
                "header": "expect_nav_values { #shiny.playwright.controller.NavsetUnderline.expect_nav_values }",
                "content": "```python\nplaywright.controller.NavsetUnderline.expect_nav_values(value, *, timeout=None)\n```\n\nExpects the control to have the specified nav values."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.NavsetUnderline.expect_value }",
                "content": "```python\nplaywright.controller.NavsetUnderline.expect_value(value, *, timeout=None)\n```\n\nExpects the control to have the specified value."
            },
            "get_loc_active_content": {
                "header": "get_loc_active_content { #shiny.playwright.controller.NavsetUnderline.get_loc_active_content }",
                "content": "```python\nplaywright.controller.NavsetUnderline.get_loc_active_content(timeout=None)\n```\n\nReturns the locator for the active content."
            },
            "nav_panel": {
                "header": "nav_panel { #shiny.playwright.controller.NavsetUnderline.nav_panel }",
                "content": "```python\nplaywright.controller.NavsetUnderline.nav_panel(value)\n```\n\nReturns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))\nwith the specified value."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.NavsetUnderline.set }",
                "content": "```python\nplaywright.controller.NavsetUnderline.set(value, *, timeout=None)\n```\n\nSets the state of the control to open or closed."
            }
        },
        "preamble": "# playwright.controller.NavsetUnderline { #shiny.playwright.controller.NavsetUnderline }\n\n```python\nplaywright.controller.NavsetUnderline(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.navset_underline`)."
    },
    "playwright.controller.OutputCode": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_has_placeholder](#shiny.playwright.controller.OutputCode.expect_has_placeholder) | Asserts that the code output has the expected placeholder. |\n| [expect_value](#shiny.playwright.controller.OutputCode.expect_value) | Asserts that the output has the expected value. |",
            "expect_has_placeholder": {
                "header": "expect_has_placeholder { #shiny.playwright.controller.OutputCode.expect_has_placeholder }",
                "content": "```python\nplaywright.controller.OutputCode.expect_has_placeholder(\n    value=False,\n    *,\n    timeout=None,\n)\n```\n\nAsserts that the code output has the expected placeholder."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                                   | Description                                                           | Default    |\n|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|\n| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                   | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |"
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.OutputCode.expect_value }",
                "content": "```python\nplaywright.controller.OutputCode.expect_value(value, *, timeout=None)\n```\n\nAsserts that the output has the expected value."
            }
        },
        "preamble": "# playwright.controller.OutputCode { #shiny.playwright.controller.OutputCode }\n\n```python\nplaywright.controller.OutputCode(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.output_code`)."
    },
    "playwright.controller.OutputDataFrame": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [cell_locator](#shiny.playwright.controller.OutputDataFrame.cell_locator) | Returns the locator for a specific cell in the data frame. |\n| [expect_cell](#shiny.playwright.controller.OutputDataFrame.expect_cell) | Expects the cell in the data frame to have the specified text. |\n| [expect_cell_class](#shiny.playwright.controller.OutputDataFrame.expect_cell_class) | Expects the class of the cell |\n| [expect_cell_title](#shiny.playwright.controller.OutputDataFrame.expect_cell_title) | Expects the validation message of the cell in the data frame, which will be in the `title` attribute of the element. |\n| [expect_class_state](#shiny.playwright.controller.OutputDataFrame.expect_class_state) | Expects the state of the class in the data frame. |\n| [expect_column_labels](#shiny.playwright.controller.OutputDataFrame.expect_column_labels) | Expects the column labels in the data frame. |\n| [expect_ncol](#shiny.playwright.controller.OutputDataFrame.expect_ncol) | Expects the number of columns in the data frame. |\n| [expect_nrow](#shiny.playwright.controller.OutputDataFrame.expect_nrow) | Expects the number of rows in the data frame. |\n| [expect_selected_num_rows](#shiny.playwright.controller.OutputDataFrame.expect_selected_num_rows) | Expects the number of selected rows in the data frame. |\n| [expect_selected_rows](#shiny.playwright.controller.OutputDataFrame.expect_selected_rows) | Expects the specified rows to be selected. |\n| [select_rows](#shiny.playwright.controller.OutputDataFrame.select_rows) | Selects the rows in the data frame. |\n| [set_cell](#shiny.playwright.controller.OutputDataFrame.set_cell) | Saves the value of the cell in the data frame. |\n| [set_filter](#shiny.playwright.controller.OutputDataFrame.set_filter) | Set or reset filters for columns in a table or grid component. This method allows setting string filters, numeric range filters, or clearing all filters. |\n| [set_sort](#shiny.playwright.controller.OutputDataFrame.set_sort) | Set or modify the sorting of columns in a table or grid component. This method allows setting single or multiple column sorts, or resetting the sort order. |",
            "cell_locator": {
                "header": "cell_locator { #shiny.playwright.controller.OutputDataFrame.cell_locator }",
                "content": "```python\nplaywright.controller.OutputDataFrame.cell_locator(row, col)\n```\n\nReturns the locator for a specific cell in the data frame."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                                                                                                                                                 | Description| Default    |\n|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| sort    | [int](`int`) \\| [ColumnSort](`shiny.express.render._data_frame.ColumnSort`) \\| [list](`list`)\\[[int](`int`) \\| [ColumnSort](`shiny.express.render._data_frame.ColumnSort`)\\] \\| None | The sorting configuration to apply. Can be one of the following:     * `int`: Index of the column to sort by (ascending order by default).     * `ColumnSort`: A dictionary specifying a single column sort with 'col' and 'desc' keys.     * `list[int \\| ColumnSort]`: A list of ints or dictionaries for multi-column sorting.     * `None`: No sorting applied (not implemented in the current code).  If a `desc` values is provided within your `ColumnSort` shaped dictionary, then the direction will be set to that value. If no `desc` value is provided, the column will be sorted in the default sorting order. | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                         | The maximum time to wait for the action to complete. Defaults to `None`| `None`     |"
            },
            "expect_cell": {
                "header": "expect_cell { #shiny.playwright.controller.OutputDataFrame.expect_cell }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_cell(\n    value,\n    *,\n    row,\n    col,\n    timeout=None,\n)\n```\n\nExpects the cell in the data frame to have the specified text."
            },
            "expect_cell_class": {
                "header": "expect_cell_class { #shiny.playwright.controller.OutputDataFrame.expect_cell_class }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_cell_class(\n    value,\n    *,\n    row,\n    col,\n    timeout=None,\n)\n```\n\nExpects the class of the cell"
            },
            "expect_cell_title": {
                "header": "expect_cell_title { #shiny.playwright.controller.OutputDataFrame.expect_cell_title }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_cell_title(\n    value,\n    *,\n    row,\n    col,\n    timeout=None,\n)\n```\n\nExpects the validation message of the cell in the data frame, which will be in\nthe `title` attribute of the element."
            },
            "expect_class_state": {
                "header": "expect_class_state { #shiny.playwright.controller.OutputDataFrame.expect_class_state }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_class_state(\n    value,\n    *,\n    row,\n    col,\n    timeout=None,\n)\n```\n\nExpects the state of the class in the data frame."
            },
            "expect_column_labels": {
                "header": "expect_column_labels { #shiny.playwright.controller.OutputDataFrame.expect_column_labels }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_column_labels(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpects the column labels in the data frame."
            },
            "expect_ncol": {
                "header": "expect_ncol { #shiny.playwright.controller.OutputDataFrame.expect_ncol }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_ncol(value, *, timeout=None)\n```\n\nExpects the number of columns in the data frame."
            },
            "expect_nrow": {
                "header": "expect_nrow { #shiny.playwright.controller.OutputDataFrame.expect_nrow }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_nrow(value, *, timeout=None)\n```\n\nExpects the number of rows in the data frame."
            },
            "expect_selected_num_rows": {
                "header": "expect_selected_num_rows { #shiny.playwright.controller.OutputDataFrame.expect_selected_num_rows }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_selected_num_rows(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpects the number of selected rows in the data frame."
            },
            "expect_selected_rows": {
                "header": "expect_selected_rows { #shiny.playwright.controller.OutputDataFrame.expect_selected_rows }",
                "content": "```python\nplaywright.controller.OutputDataFrame.expect_selected_rows(\n    rows,\n    *,\n    timeout=None,\n)\n```\n\nExpects the specified rows to be selected."
            },
            "select_rows": {
                "header": "select_rows { #shiny.playwright.controller.OutputDataFrame.select_rows }",
                "content": "```python\nplaywright.controller.OutputDataFrame.select_rows(value, *, timeout=None)\n```\n\nSelects the rows in the data frame."
            },
            "set_cell": {
                "header": "set_cell { #shiny.playwright.controller.OutputDataFrame.set_cell }",
                "content": "```python\nplaywright.controller.OutputDataFrame.set_cell(\n    text,\n    *,\n    row,\n    col,\n    finish_key=None,\n    timeout=None,\n)\n```\n\nSaves the value of the cell in the data frame."
            },
            "set_filter": {
                "header": "set_filter { #shiny.playwright.controller.OutputDataFrame.set_filter }",
                "content": "```python\nplaywright.controller.OutputDataFrame.set_filter(filter, *, timeout=None)\n```\n\nSet or reset filters for columns in a table or grid component.\nThis method allows setting string filters, numeric range filters, or clearing all filters."
            },
            "set_sort": {
                "header": "set_sort { #shiny.playwright.controller.OutputDataFrame.set_sort }",
                "content": "```python\nplaywright.controller.OutputDataFrame.set_sort(sort, *, timeout=None)\n```\n\nSet or modify the sorting of columns in a table or grid component.\nThis method allows setting single or multiple column sorts, or resetting the sort order."
            }
        },
        "preamble": "# playwright.controller.OutputDataFrame { #shiny.playwright.controller.OutputDataFrame }\n\n```python\nplaywright.controller.OutputDataFrame(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.output_data_frame`)."
    },
    "playwright.controller.OutputImage": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_container_tag](#shiny.playwright.controller.OutputImage.expect_container_tag) | Asserts that the output has the expected container tag. |\n| [expect_height](#shiny.playwright.controller.OutputImage.expect_height) | Asserts that the image has the expected height. |\n| [expect_img_alt](#shiny.playwright.controller.OutputImage.expect_img_alt) | Asserts that the image has the expected alt text. |\n| [expect_img_height](#shiny.playwright.controller.OutputImage.expect_img_height) | Asserts that the image has the expected height. |\n| [expect_img_src](#shiny.playwright.controller.OutputImage.expect_img_src) | Asserts that the image has the expected src. |\n| [expect_img_width](#shiny.playwright.controller.OutputImage.expect_img_width) | Asserts that the image has the expected width. |\n| [expect_inline](#shiny.playwright.controller.OutputImage.expect_inline) | Asserts that the output is inline. |\n| [expect_width](#shiny.playwright.controller.OutputImage.expect_width) | Asserts that the image has the expected width. |",
            "expect_container_tag": {
                "header": "expect_container_tag { #shiny.playwright.controller.OutputImage.expect_container_tag }",
                "content": "```python\nplaywright.controller.OutputImage.expect_container_tag(value, *, timeout=None)\n```\n\nAsserts that the output has the expected container tag."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                               | Description                                                           | Default    |\n|---------|----------------------------------------------------|-----------------------------------------------------------------------|------------|\n| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected width.                                                   | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the width to appear. Defaults to `None`. | `None`     |"
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controller.OutputImage.expect_height }",
                "content": "```python\nplaywright.controller.OutputImage.expect_height(value, *, timeout=None)\n```\n\nAsserts that the image has the expected height."
            },
            "expect_img_alt": {
                "header": "expect_img_alt { #shiny.playwright.controller.OutputImage.expect_img_alt }",
                "content": "```python\nplaywright.controller.OutputImage.expect_img_alt(value, *, timeout=None)\n```\n\nAsserts that the image has the expected alt text."
            },
            "expect_img_height": {
                "header": "expect_img_height { #shiny.playwright.controller.OutputImage.expect_img_height }",
                "content": "```python\nplaywright.controller.OutputImage.expect_img_height(value, *, timeout=None)\n```\n\nAsserts that the image has the expected height."
            },
            "expect_img_src": {
                "header": "expect_img_src { #shiny.playwright.controller.OutputImage.expect_img_src }",
                "content": "```python\nplaywright.controller.OutputImage.expect_img_src(value, *, timeout=None)\n```\n\nAsserts that the image has the expected src."
            },
            "expect_img_width": {
                "header": "expect_img_width { #shiny.playwright.controller.OutputImage.expect_img_width }",
                "content": "```python\nplaywright.controller.OutputImage.expect_img_width(value, *, timeout=None)\n```\n\nAsserts that the image has the expected width."
            },
            "expect_inline": {
                "header": "expect_inline { #shiny.playwright.controller.OutputImage.expect_inline }",
                "content": "```python\nplaywright.controller.OutputImage.expect_inline(value=False, *, timeout=None)\n```\n\nAsserts that the output is inline."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.OutputImage.expect_width }",
                "content": "```python\nplaywright.controller.OutputImage.expect_width(value, *, timeout=None)\n```\n\nAsserts that the image has the expected width."
            }
        },
        "preamble": "# playwright.controller.OutputImage { #shiny.playwright.controller.OutputImage }\n\n```python\nplaywright.controller.OutputImage(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.output_image`)."
    },
    "playwright.controller.OutputPlot": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_container_tag](#shiny.playwright.controller.OutputPlot.expect_container_tag) | Asserts that the output has the expected container tag. |\n| [expect_height](#shiny.playwright.controller.OutputPlot.expect_height) | Asserts that the image has the expected height. |\n| [expect_img_alt](#shiny.playwright.controller.OutputPlot.expect_img_alt) | Asserts that the image has the expected alt text. |\n| [expect_img_height](#shiny.playwright.controller.OutputPlot.expect_img_height) | Asserts that the image has the expected height. |\n| [expect_img_src](#shiny.playwright.controller.OutputPlot.expect_img_src) | Asserts that the image has the expected src. |\n| [expect_img_width](#shiny.playwright.controller.OutputPlot.expect_img_width) | Asserts that the image has the expected width. |\n| [expect_inline](#shiny.playwright.controller.OutputPlot.expect_inline) | Asserts that the output is inline. |\n| [expect_width](#shiny.playwright.controller.OutputPlot.expect_width) | Asserts that the image has the expected width. |",
            "expect_container_tag": {
                "header": "expect_container_tag { #shiny.playwright.controller.OutputPlot.expect_container_tag }",
                "content": "```python\nplaywright.controller.OutputPlot.expect_container_tag(value, *, timeout=None)\n```\n\nAsserts that the output has the expected container tag."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                               | Description                                                           | Default    |\n|---------|----------------------------------------------------|-----------------------------------------------------------------------|------------|\n| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected width.                                                   | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the width to appear. Defaults to `None`. | `None`     |"
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controller.OutputPlot.expect_height }",
                "content": "```python\nplaywright.controller.OutputPlot.expect_height(value, *, timeout=None)\n```\n\nAsserts that the image has the expected height."
            },
            "expect_img_alt": {
                "header": "expect_img_alt { #shiny.playwright.controller.OutputPlot.expect_img_alt }",
                "content": "```python\nplaywright.controller.OutputPlot.expect_img_alt(value, *, timeout=None)\n```\n\nAsserts that the image has the expected alt text."
            },
            "expect_img_height": {
                "header": "expect_img_height { #shiny.playwright.controller.OutputPlot.expect_img_height }",
                "content": "```python\nplaywright.controller.OutputPlot.expect_img_height(value, *, timeout=None)\n```\n\nAsserts that the image has the expected height."
            },
            "expect_img_src": {
                "header": "expect_img_src { #shiny.playwright.controller.OutputPlot.expect_img_src }",
                "content": "```python\nplaywright.controller.OutputPlot.expect_img_src(value, *, timeout=None)\n```\n\nAsserts that the image has the expected src."
            },
            "expect_img_width": {
                "header": "expect_img_width { #shiny.playwright.controller.OutputPlot.expect_img_width }",
                "content": "```python\nplaywright.controller.OutputPlot.expect_img_width(value, *, timeout=None)\n```\n\nAsserts that the image has the expected width."
            },
            "expect_inline": {
                "header": "expect_inline { #shiny.playwright.controller.OutputPlot.expect_inline }",
                "content": "```python\nplaywright.controller.OutputPlot.expect_inline(value=False, *, timeout=None)\n```\n\nAsserts that the output is inline."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.OutputPlot.expect_width }",
                "content": "```python\nplaywright.controller.OutputPlot.expect_width(value, *, timeout=None)\n```\n\nAsserts that the image has the expected width."
            }
        },
        "preamble": "# playwright.controller.OutputPlot { #shiny.playwright.controller.OutputPlot }\n\n```python\nplaywright.controller.OutputPlot(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.output_plot`)."
    },
    "playwright.controller.OutputTable": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_cell](#shiny.playwright.controller.OutputTable.expect_cell) | Asserts that the table cell has the expected text. |\n| [expect_column_labels](#shiny.playwright.controller.OutputTable.expect_column_labels) | Asserts that the table has the expected column labels. |\n| [expect_column_text](#shiny.playwright.controller.OutputTable.expect_column_text) | Asserts that the column has the expected text. |\n| [expect_ncol](#shiny.playwright.controller.OutputTable.expect_ncol) | Asserts that the table has the expected number of columns. |\n| [expect_nrow](#shiny.playwright.controller.OutputTable.expect_nrow) | Asserts that the table has the expected number of rows. |",
            "expect_cell": {
                "header": "expect_cell { #shiny.playwright.controller.OutputTable.expect_cell }",
                "content": "```python\nplaywright.controller.OutputTable.expect_cell(value, row, col, *, timeout=None)\n```\n\nAsserts that the table cell has the expected text."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                                     | Default    |\n|---------|----------------------------------------------|-------------------------------------------------------------------------------------------------|------------|\n| value   | [int](`int`)                                 | The expected number of rows in the table.                                                       | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the table to have the expected number of rows. Defaults to `None`. | `None`     |"
            },
            "expect_column_labels": {
                "header": "expect_column_labels { #shiny.playwright.controller.OutputTable.expect_column_labels }",
                "content": "```python\nplaywright.controller.OutputTable.expect_column_labels(value, *, timeout=None)\n```\n\nAsserts that the table has the expected column labels."
            },
            "expect_column_text": {
                "header": "expect_column_text { #shiny.playwright.controller.OutputTable.expect_column_text }",
                "content": "```python\nplaywright.controller.OutputTable.expect_column_text(\n    col,\n    value,\n    *,\n    timeout=None,\n)\n```\n\nAsserts that the column has the expected text."
            },
            "expect_ncol": {
                "header": "expect_ncol { #shiny.playwright.controller.OutputTable.expect_ncol }",
                "content": "```python\nplaywright.controller.OutputTable.expect_ncol(value, *, timeout=None)\n```\n\nAsserts that the table has the expected number of columns."
            },
            "expect_nrow": {
                "header": "expect_nrow { #shiny.playwright.controller.OutputTable.expect_nrow }",
                "content": "```python\nplaywright.controller.OutputTable.expect_nrow(value, *, timeout=None)\n```\n\nAsserts that the table has the expected number of rows."
            }
        },
        "preamble": "# playwright.controller.OutputTable { #shiny.playwright.controller.OutputTable }\n\n```python\nplaywright.controller.OutputTable(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.output_table`)."
    },
    "playwright.controller.OutputText": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_container_tag](#shiny.playwright.controller.OutputText.expect_container_tag) | Asserts that the output has the expected container tag. |\n| [expect_inline](#shiny.playwright.controller.OutputText.expect_inline) | Asserts that the output is inline. |\n| [expect_value](#shiny.playwright.controller.OutputText.expect_value) | Asserts that the output has the expected value. |\n| [get_value](#shiny.playwright.controller.OutputText.get_value) | Gets the text value of the output. |",
            "expect_container_tag": {
                "header": "expect_container_tag { #shiny.playwright.controller.OutputText.expect_container_tag }",
                "content": "```python\nplaywright.controller.OutputText.expect_container_tag(value, *, timeout=None)\n```\n\nAsserts that the output has the expected container tag."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                           | Default   |\n|---------|----------------------------------------------|-----------------------------------------------------------------------|-----------|\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the value to appear. Defaults to `None`. | `None`    |"
            },
            "expect_inline": {
                "header": "expect_inline { #shiny.playwright.controller.OutputText.expect_inline }",
                "content": "```python\nplaywright.controller.OutputText.expect_inline(value=False, *, timeout=None)\n```\n\nAsserts that the output is inline."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.OutputText.expect_value }",
                "content": "```python\nplaywright.controller.OutputText.expect_value(value, *, timeout=None)\n```\n\nAsserts that the output has the expected value."
            },
            "get_value": {
                "header": "get_value { #shiny.playwright.controller.OutputText.get_value }",
                "content": "```python\nplaywright.controller.OutputText.get_value(timeout=None)\n```\n\nGets the text value of the output."
            }
        },
        "preamble": "# playwright.controller.OutputText { #shiny.playwright.controller.OutputText }\n\n```python\nplaywright.controller.OutputText(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.output_text`)."
    },
    "playwright.controller.OutputTextVerbatim": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_has_placeholder](#shiny.playwright.controller.OutputTextVerbatim.expect_has_placeholder) | Asserts that the verbatim text output has the expected placeholder. |\n| [expect_value](#shiny.playwright.controller.OutputTextVerbatim.expect_value) | Asserts that the output has the expected value. |",
            "expect_has_placeholder": {
                "header": "expect_has_placeholder { #shiny.playwright.controller.OutputTextVerbatim.expect_has_placeholder }",
                "content": "```python\nplaywright.controller.OutputTextVerbatim.expect_has_placeholder(\n    value=False,\n    *,\n    timeout=None,\n)\n```\n\nAsserts that the verbatim text output has the expected placeholder."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                                   | Description                                                           | Default    |\n|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|\n| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                   | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |"
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.OutputTextVerbatim.expect_value }",
                "content": "```python\nplaywright.controller.OutputTextVerbatim.expect_value(value, *, timeout=None)\n```\n\nAsserts that the output has the expected value."
            }
        },
        "preamble": "# playwright.controller.OutputTextVerbatim { #shiny.playwright.controller.OutputTextVerbatim }\n\n```python\nplaywright.controller.OutputTextVerbatim(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.output_text_verbatim`)."
    },
    "playwright.controller.OutputUi": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_container_tag](#shiny.playwright.controller.OutputUi.expect_container_tag) | Asserts that the output has the expected container tag. |\n| [expect_empty](#shiny.playwright.controller.OutputUi.expect_empty) | Asserts that the output is empty. |\n| [expect_inline](#shiny.playwright.controller.OutputUi.expect_inline) | Asserts that the output is inline. |",
            "expect_container_tag": {
                "header": "expect_container_tag { #shiny.playwright.controller.OutputUi.expect_container_tag }",
                "content": "```python\nplaywright.controller.OutputUi.expect_container_tag(value, *, timeout=None)\n```\n\nAsserts that the output has the expected container tag."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                            | Default   |\n|---------|----------------------------------------------|------------------------------------------------------------------------|-----------|\n| value   | [bool](`bool`)                               | Whether the output is inline.                                          | `False`   |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the output to appear. Defaults to `None`. | `None`    |"
            },
            "expect_empty": {
                "header": "expect_empty { #shiny.playwright.controller.OutputUi.expect_empty }",
                "content": "```python\nplaywright.controller.OutputUi.expect_empty(value, *, timeout=None)\n```\n\nAsserts that the output is empty."
            },
            "expect_inline": {
                "header": "expect_inline { #shiny.playwright.controller.OutputUi.expect_inline }",
                "content": "```python\nplaywright.controller.OutputUi.expect_inline(value=False, *, timeout=None)\n```\n\nAsserts that the output is inline."
            }
        },
        "preamble": "# playwright.controller.OutputUi { #shiny.playwright.controller.OutputUi }\n\n```python\nplaywright.controller.OutputUi(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.output_ui`)."
    },
    "playwright.controller.Popover": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_active](#shiny.playwright.controller.Popover.expect_active) | Expects the overlay to be active or inactive. |\n| [expect_body](#shiny.playwright.controller.Popover.expect_body) | Expects the overlay body to have the specified text. |\n| [expect_placement](#shiny.playwright.controller.Popover.expect_placement) | Expects the overlay to have the specified placement. |\n| [expect_title](#shiny.playwright.controller.Popover.expect_title) | Expects the popover title to have the specified text. |\n| [get_loc_overlay_container](#shiny.playwright.controller.Popover.get_loc_overlay_container) | Returns the locator for the overlay container. |\n| [set](#shiny.playwright.controller.Popover.set) | Sets the state of the popover. |",
            "expect_active": {
                "header": "expect_active { #shiny.playwright.controller.Popover.expect_active }",
                "content": "```python\nplaywright.controller.Popover.expect_active(value, *, timeout=None)\n```\n\nExpects the overlay to be active or inactive."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                                  | Default    |\n|---------|----------------------------------------------|----------------------------------------------------------------------------------------------|------------|\n| open    | [bool](`bool`)                               | `True` to open the popover and `False` to close it.                                          | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the popover to be visible and interactable. Defaults to `None`. | `None`     |"
            },
            "expect_body": {
                "header": "expect_body { #shiny.playwright.controller.Popover.expect_body }",
                "content": "```python\nplaywright.controller.Popover.expect_body(value, *, timeout=None)\n```\n\nExpects the overlay body to have the specified text."
            },
            "expect_placement": {
                "header": "expect_placement { #shiny.playwright.controller.Popover.expect_placement }",
                "content": "```python\nplaywright.controller.Popover.expect_placement(value, *, timeout=None)\n```\n\nExpects the overlay to have the specified placement."
            },
            "expect_title": {
                "header": "expect_title { #shiny.playwright.controller.Popover.expect_title }",
                "content": "```python\nplaywright.controller.Popover.expect_title(value, *, timeout=None)\n```\n\nExpects the popover title to have the specified text."
            },
            "get_loc_overlay_container": {
                "header": "get_loc_overlay_container { #shiny.playwright.controller.Popover.get_loc_overlay_container }",
                "content": "```python\nplaywright.controller.Popover.get_loc_overlay_container(timeout=None)\n```\n\nReturns the locator for the overlay container."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.Popover.set }",
                "content": "```python\nplaywright.controller.Popover.set(open, timeout=None)\n```\n\nSets the state of the popover."
            }
        },
        "preamble": "# playwright.controller.Popover { #shiny.playwright.controller.Popover }\n\n```python\nplaywright.controller.Popover(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.popover`)."
    },
    "playwright.controller.Sidebar": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_bg_color](#shiny.playwright.controller.Sidebar.expect_bg_color) | Asserts that the sidebar has the expected background color. |\n| [expect_class](#shiny.playwright.controller.Sidebar.expect_class) | Asserts that the sidebar has or does not have a CSS class. |\n| [expect_desktop_state](#shiny.playwright.controller.Sidebar.expect_desktop_state) | Asserts that the sidebar has the expected state on desktop. |\n| [expect_gap](#shiny.playwright.controller.Sidebar.expect_gap) | Asserts that the sidebar has the expected gap. |\n| [expect_handle](#shiny.playwright.controller.Sidebar.expect_handle) | Asserts that the sidebar handle exists or does not exist. |\n| [expect_mobile_max_height](#shiny.playwright.controller.Sidebar.expect_mobile_max_height) | Asserts that the sidebar has the expected maximum height on mobile. |\n| [expect_mobile_state](#shiny.playwright.controller.Sidebar.expect_mobile_state) | Asserts that the sidebar has the expected state on mobile. |\n| [expect_open](#shiny.playwright.controller.Sidebar.expect_open) | Expect the sidebar to be open or closed. |\n| [expect_padding](#shiny.playwright.controller.Sidebar.expect_padding) | Asserts that the sidebar has the expected padding. |\n| [expect_position](#shiny.playwright.controller.Sidebar.expect_position) | Asserts that the sidebar is in the expected position. |\n| [expect_text](#shiny.playwright.controller.Sidebar.expect_text) | Asserts that the sidebar has the expected text. |\n| [expect_title](#shiny.playwright.controller.Sidebar.expect_title) | Asserts that the sidebar has the expected title. |\n| [expect_width](#shiny.playwright.controller.Sidebar.expect_width) | Asserts that the sidebar has the expected width. |\n| [set](#shiny.playwright.controller.Sidebar.set) | Sets the sidebar to be open or closed. |",
            "expect_bg_color": {
                "header": "expect_bg_color { #shiny.playwright.controller.Sidebar.expect_bg_color }",
                "content": "```python\nplaywright.controller.Sidebar.expect_bg_color(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected background color."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                    | Default    |\n|---------|----------------------------------------------|--------------------------------------------------------------------------------|------------|\n| open    | [bool](`bool`)                               | `True` to open the sidebar and `False` to close it.                            | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the sidebar to open or close. Defaults to `None`. | `None`     |"
            },
            "expect_class": {
                "header": "expect_class { #shiny.playwright.controller.Sidebar.expect_class }",
                "content": "```python\nplaywright.controller.Sidebar.expect_class(\n    class_name,\n    *,\n    has_class=True,\n    timeout=None,\n)\n```\n\nAsserts that the sidebar has or does not have a CSS class."
            },
            "expect_desktop_state": {
                "header": "expect_desktop_state { #shiny.playwright.controller.Sidebar.expect_desktop_state }",
                "content": "```python\nplaywright.controller.Sidebar.expect_desktop_state(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected state on desktop."
            },
            "expect_gap": {
                "header": "expect_gap { #shiny.playwright.controller.Sidebar.expect_gap }",
                "content": "```python\nplaywright.controller.Sidebar.expect_gap(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected gap."
            },
            "expect_handle": {
                "header": "expect_handle { #shiny.playwright.controller.Sidebar.expect_handle }",
                "content": "```python\nplaywright.controller.Sidebar.expect_handle(exists, *, timeout=None)\n```\n\nAsserts that the sidebar handle exists or does not exist."
            },
            "expect_mobile_max_height": {
                "header": "expect_mobile_max_height { #shiny.playwright.controller.Sidebar.expect_mobile_max_height }",
                "content": "```python\nplaywright.controller.Sidebar.expect_mobile_max_height(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected maximum height on mobile."
            },
            "expect_mobile_state": {
                "header": "expect_mobile_state { #shiny.playwright.controller.Sidebar.expect_mobile_state }",
                "content": "```python\nplaywright.controller.Sidebar.expect_mobile_state(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected state on mobile."
            },
            "expect_open": {
                "header": "expect_open { #shiny.playwright.controller.Sidebar.expect_open }",
                "content": "```python\nplaywright.controller.Sidebar.expect_open(value, *, timeout=None)\n```\n\nExpect the sidebar to be open or closed."
            },
            "expect_padding": {
                "header": "expect_padding { #shiny.playwright.controller.Sidebar.expect_padding }",
                "content": "```python\nplaywright.controller.Sidebar.expect_padding(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected padding."
            },
            "expect_position": {
                "header": "expect_position { #shiny.playwright.controller.Sidebar.expect_position }",
                "content": "```python\nplaywright.controller.Sidebar.expect_position(value, *, timeout=None)\n```\n\nAsserts that the sidebar is in the expected position."
            },
            "expect_text": {
                "header": "expect_text { #shiny.playwright.controller.Sidebar.expect_text }",
                "content": "```python\nplaywright.controller.Sidebar.expect_text(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected text."
            },
            "expect_title": {
                "header": "expect_title { #shiny.playwright.controller.Sidebar.expect_title }",
                "content": "```python\nplaywright.controller.Sidebar.expect_title(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected title."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.Sidebar.expect_width }",
                "content": "```python\nplaywright.controller.Sidebar.expect_width(value, *, timeout=None)\n```\n\nAsserts that the sidebar has the expected width."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.Sidebar.set }",
                "content": "```python\nplaywright.controller.Sidebar.set(open, *, timeout=None)\n```\n\nSets the sidebar to be open or closed."
            }
        },
        "preamble": "# playwright.controller.Sidebar { #shiny.playwright.controller.Sidebar }\n\n```python\nplaywright.controller.Sidebar(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.sidebar`)."
    },
    "playwright.controller.Tooltip": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_active](#shiny.playwright.controller.Tooltip.expect_active) | Expects the overlay to be active or inactive. |\n| [expect_body](#shiny.playwright.controller.Tooltip.expect_body) | Expects the overlay body to have the specified text. |\n| [expect_placement](#shiny.playwright.controller.Tooltip.expect_placement) | Expects the overlay to have the specified placement. |\n| [get_loc_overlay_container](#shiny.playwright.controller.Tooltip.get_loc_overlay_container) | Returns the locator for the overlay container. |\n| [set](#shiny.playwright.controller.Tooltip.set) | Sets the state of the tooltip. |",
            "expect_active": {
                "header": "expect_active { #shiny.playwright.controller.Tooltip.expect_active }",
                "content": "```python\nplaywright.controller.Tooltip.expect_active(value, *, timeout=None)\n```\n\nExpects the overlay to be active or inactive."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                                  | Default    |\n|---------|----------------------------------------------|----------------------------------------------------------------------------------------------|------------|\n| open    | [bool](`bool`)                               | `True` to open the tooltip and `False` to close it.                                          | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the tooltip to be visible and interactable. Defaults to `None`. | `None`     |"
            },
            "expect_body": {
                "header": "expect_body { #shiny.playwright.controller.Tooltip.expect_body }",
                "content": "```python\nplaywright.controller.Tooltip.expect_body(value, *, timeout=None)\n```\n\nExpects the overlay body to have the specified text."
            },
            "expect_placement": {
                "header": "expect_placement { #shiny.playwright.controller.Tooltip.expect_placement }",
                "content": "```python\nplaywright.controller.Tooltip.expect_placement(value, *, timeout=None)\n```\n\nExpects the overlay to have the specified placement."
            },
            "get_loc_overlay_container": {
                "header": "get_loc_overlay_container { #shiny.playwright.controller.Tooltip.get_loc_overlay_container }",
                "content": "```python\nplaywright.controller.Tooltip.get_loc_overlay_container(timeout=None)\n```\n\nReturns the locator for the overlay container."
            },
            "set": {
                "header": "set { #shiny.playwright.controller.Tooltip.set }",
                "content": "```python\nplaywright.controller.Tooltip.set(open, timeout=None)\n```\n\nSets the state of the tooltip."
            }
        },
        "preamble": "# playwright.controller.Tooltip { #shiny.playwright.controller.Tooltip }\n\n```python\nplaywright.controller.Tooltip(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.tooltip`)."
    },
    "playwright.controller.ValueBox": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_body](#shiny.playwright.controller.ValueBox.expect_body) | Expects the value box body to have specific text. |\n| [expect_full_screen](#shiny.playwright.controller.ValueBox.expect_full_screen) | Verifies if the full screen mode is currently open. |\n| [expect_full_screen_available](#shiny.playwright.controller.ValueBox.expect_full_screen_available) | Expects whether full screen mode is available for the element. |\n| [expect_height](#shiny.playwright.controller.ValueBox.expect_height) | Expects the value box to have a specific height. |\n| [expect_title](#shiny.playwright.controller.ValueBox.expect_title) | Expects the value box title to have a specific text. |\n| [expect_value](#shiny.playwright.controller.ValueBox.expect_value) | Expects the value box value to have a specific text. |\n| [expect_width](#shiny.playwright.controller.ValueBox.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |\n| [set_full_screen](#shiny.playwright.controller.ValueBox.set_full_screen) | Sets the element to full screen mode or exits full screen mode. |",
            "expect_body": {
                "header": "expect_body { #shiny.playwright.controller.ValueBox.expect_body }",
                "content": "```python\nplaywright.controller.ValueBox.expect_body(value, *, timeout=None)\n```\n\nExpects the value box body to have specific text."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name    | Type                                         | Description                                                                       | Default    |\n|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|\n| open    | [bool](`bool`)                               | `True` to open the element in full screen mode, `False` to exit full screen mode. | _required_ |\n| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the operation to complete. Defaults to `None`.       | `None`     |"
            },
            "expect_full_screen": {
                "header": "expect_full_screen { #shiny.playwright.controller.ValueBox.expect_full_screen }",
                "content": "```python\nplaywright.controller.ValueBox.expect_full_screen(value, *, timeout=None)\n```\n\nVerifies if the full screen mode is currently open."
            },
            "expect_full_screen_available": {
                "header": "expect_full_screen_available { #shiny.playwright.controller.ValueBox.expect_full_screen_available }",
                "content": "```python\nplaywright.controller.ValueBox.expect_full_screen_available(\n    value,\n    *,\n    timeout=None,\n)\n```\n\nExpects whether full screen mode is available for the element."
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controller.ValueBox.expect_height }",
                "content": "```python\nplaywright.controller.ValueBox.expect_height(value, *, timeout=None)\n```\n\nExpects the value box to have a specific height."
            },
            "expect_title": {
                "header": "expect_title { #shiny.playwright.controller.ValueBox.expect_title }",
                "content": "```python\nplaywright.controller.ValueBox.expect_title(value, *, timeout=None)\n```\n\nExpects the value box title to have a specific text."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controller.ValueBox.expect_value }",
                "content": "```python\nplaywright.controller.ValueBox.expect_value(value, *, timeout=None)\n```\n\nExpects the value box value to have a specific text."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controller.ValueBox.expect_width }",
                "content": "```python\nplaywright.controller.ValueBox.expect_width(value, *, timeout=None)\n```\n\nExpect the `width` attribute of a DOM element to have a specific value."
            },
            "set_full_screen": {
                "header": "set_full_screen { #shiny.playwright.controller.ValueBox.set_full_screen }",
                "content": "```python\nplaywright.controller.ValueBox.set_full_screen(open, *, timeout=None)\n```\n\nSets the element to full screen mode or exits full screen mode."
            }
        },
        "preamble": "# playwright.controller.ValueBox { #shiny.playwright.controller.ValueBox }\n\n```python\nplaywright.controller.ValueBox(self, page, id)\n```\n\nController for [](:func:`shiny.express.ui.value_box`)."
    },
    "playwright.controls.Accordion": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [accordion_panel](#shiny.playwright.controls.Accordion.accordion_panel) | Returns the accordion panel ([](:class:`~shiny.playwright.controls.AccordionPanel`)) with the specified data value. |\n| [expect_height](#shiny.playwright.controls.Accordion.expect_height) | Expects the accordion to have the specified height. |\n| [expect_panels](#shiny.playwright.controls.Accordion.expect_panels) | Expects the accordion to have the specified panels. |\n| [expect_width](#shiny.playwright.controls.Accordion.expect_width) | Expects the accordion to have the specified width. |\n| [set](#shiny.playwright.controls.Accordion.set) | Sets the state of the accordion panel. |",
            "accordion_panel": {
                "header": "accordion_panel { #shiny.playwright.controls.Accordion.accordion_panel }",
                "content": "`playwright.controls.Accordion.accordion_panel(data_value)`\n\nReturns the accordion panel ([](:class:`~shiny.playwright.controls.AccordionPanel`))\nwith the specified data value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">data_value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The data value of the accordion panel."
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controls.Accordion.expect_height }",
                "content": "`playwright.controls.Accordion.expect_height(value, *, timeout=None)`\n\nExpects the accordion to have the specified height.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected height.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the height to be visible and interactable. Defaults to `None`."
            },
            "expect_panels": {
                "header": "expect_panels { #shiny.playwright.controls.Accordion.expect_panels }",
                "content": "`playwright.controls.Accordion.expect_panels(value, *, timeout=None)`\n\nExpects the accordion to have the specified panels.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[list](`list`)\\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\\]</span></code>\n\n:   The expected panels.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the panels to be visible and interactable. Defaults to `None`."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controls.Accordion.expect_width }",
                "content": "`playwright.controls.Accordion.expect_width(value, *, timeout=None)`\n\nExpects the accordion to have the specified width.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected width.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the width to be visible and interactable. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.Accordion.set }",
                "content": "`playwright.controls.Accordion.set(selected, *, timeout=None)`\n\nSets the state of the accordion panel.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">selected</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`) \\| [list](`list`)\\[[str](`str`)\\]</span></code>\n\n:   The selected accordion panel(s).\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the accordion panel to be visible and interactable. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.Accordion { #shiny.playwright.controls.Accordion }\n\n`playwright.controls.Accordion(self, page, id)`\n\nController for [](:func:`shiny.express.ui.accordion`)."
    },
    "playwright.controls.AccordionPanel": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_body](#shiny.playwright.controls.AccordionPanel.expect_body) | Expects the accordion panel body to have the specified text. |\n| [expect_icon](#shiny.playwright.controls.AccordionPanel.expect_icon) | Expects the accordion panel icon to have the specified text. |\n| [expect_label](#shiny.playwright.controls.AccordionPanel.expect_label) | Expects the accordion panel label to have the specified text. |\n| [expect_open](#shiny.playwright.controls.AccordionPanel.expect_open) | Expects the accordion panel to be open or closed. |\n| [set](#shiny.playwright.controls.AccordionPanel.set) | Sets the state of the control to open or closed. |\n| [toggle](#shiny.playwright.controls.AccordionPanel.toggle) | Toggles the state of the control. |",
            "expect_body": {
                "header": "expect_body { #shiny.playwright.controls.AccordionPanel.expect_body }",
                "content": "`playwright.controls.AccordionPanel.expect_body(value, *, timeout=None)`\n\nExpects the accordion panel body to have the specified text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text pattern or string.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the body to appear. Defaults to `None`."
            },
            "expect_icon": {
                "header": "expect_icon { #shiny.playwright.controls.AccordionPanel.expect_icon }",
                "content": "`playwright.controls.AccordionPanel.expect_icon(value, *, timeout=None)`\n\nExpects the accordion panel icon to have the specified text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text pattern or string.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the icon to appear. Defaults to `None`."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controls.AccordionPanel.expect_label }",
                "content": "`playwright.controls.AccordionPanel.expect_label(value, *, timeout=None)`\n\nExpects the accordion panel label to have the specified text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text pattern or string.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the label to appear. Defaults to `None`."
            },
            "expect_open": {
                "header": "expect_open { #shiny.playwright.controls.AccordionPanel.expect_open }",
                "content": "`playwright.controls.AccordionPanel.expect_open(value, *, timeout=None)`\n\nExpects the accordion panel to be open or closed.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   `True` if the accordion panel is expected to be open, `False` otherwise.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.AccordionPanel.set }",
                "content": "`playwright.controls.AccordionPanel.set(open, *, timeout=None)`\n\nSets the state of the control to open or closed.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">open</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   `True` to open the accordion panel, False to close it.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the control to be visible and interactable. Defaults to `None`."
            },
            "toggle": {
                "header": "toggle { #shiny.playwright.controls.AccordionPanel.toggle }",
                "content": "`playwright.controls.AccordionPanel.toggle(timeout=None)`\n\nToggles the state of the control.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the control to be visible and interactable. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.AccordionPanel { #shiny.playwright.controls.AccordionPanel }\n\n`playwright.controls.AccordionPanel(self, page, id, data_value)`\n\nController for [](:func:`shiny.express.ui.accordion_panel`)."
    },
    "playwright.controls.Card": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_footer](#shiny.playwright.controls.Card.expect_footer) | Expects the card footer to have a specific text. |\n| [expect_header](#shiny.playwright.controls.Card.expect_header) | Expects the card header to have a specific text. |\n| [expect_height](#shiny.playwright.controls.Card.expect_height) | Expects the card to have a specific height. |\n| [expect_max_height](#shiny.playwright.controls.Card.expect_max_height) | Expects the card to have a specific maximum height. |\n| [expect_min_height](#shiny.playwright.controls.Card.expect_min_height) | Expects the card to have a specific minimum height. |",
            "expect_footer": {
                "header": "expect_footer { #shiny.playwright.controls.Card.expect_footer }",
                "content": "`playwright.controls.Card.expect_footer(value, *, timeout=None)`\n\nExpects the card footer to have a specific text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \\| None</span></code>\n\n:   The expected text pattern or string\n    Note: None if the footer is expected to not exist.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_header": {
                "header": "expect_header { #shiny.playwright.controls.Card.expect_header }",
                "content": "`playwright.controls.Card.expect_header(value, *, timeout=None)`\n\nExpects the card header to have a specific text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \\| None</span></code>\n\n:   The expected text pattern or string.\n\n    Note: `None` if the header is expected to not exist.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controls.Card.expect_height }",
                "content": "`playwright.controls.Card.expect_height(value, *, timeout=None)`\n\nExpects the card to have a specific height.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected height value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_max_height": {
                "header": "expect_max_height { #shiny.playwright.controls.Card.expect_max_height }",
                "content": "`playwright.controls.Card.expect_max_height(value, *, timeout=None)`\n\nExpects the card to have a specific maximum height.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected maximum height value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_min_height": {
                "header": "expect_min_height { #shiny.playwright.controls.Card.expect_min_height }",
                "content": "`playwright.controls.Card.expect_min_height(value, *, timeout=None)`\n\nExpects the card to have a specific minimum height.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected minimum height value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.Card { #shiny.playwright.controls.Card }\n\n`playwright.controls.Card(self, page, id)`\n\nController for [](:func:`shiny.express.ui.card`)."
    },
    "playwright.controls.DownloadButton": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.DownloadLink": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.InputActionLink": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.InputCheckbox": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.InputCheckboxGroup": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_choices](#shiny.playwright.controls.InputCheckboxGroup.expect_choices) | Expect the checkbox choices. |\n| [expect_selected](#shiny.playwright.controls.InputCheckboxGroup.expect_selected) | Expect the selected checkboxes. |\n| [set](#shiny.playwright.controls.InputCheckboxGroup.set) | Set the selected checkboxes. |",
            "expect_choices": {
                "header": "expect_choices { #shiny.playwright.controls.InputCheckboxGroup.expect_choices }",
                "content": "`playwright.controls.InputCheckboxGroup.expect_choices(value, *, timeout=None)`\n\nExpect the checkbox choices.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>\n\n:   The expected choices.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "expect_selected": {
                "header": "expect_selected { #shiny.playwright.controls.InputCheckboxGroup.expect_selected }",
                "content": "`playwright.controls.InputCheckboxGroup.expect_selected(value, *, timeout=None)`\n\nExpect the selected checkboxes.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>\n\n:   The expected values of the selected checkboxes.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.InputCheckboxGroup.set }",
                "content": "`playwright.controls.InputCheckboxGroup.set(selected, *, timeout=None, **kwargs)`\n\nSet the selected checkboxes.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">selected</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[list](`list`)\\[[str](`str`)\\]</span></code>\n\n:   The values of the selected checkboxes.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the action. Defaults to `None`."
            }
        }
    },
    "playwright.controls.InputDarkMode": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controls.InputDarkMode.click) | Clicks the input dark mode. |\n| [expect_mode](#shiny.playwright.controls.InputDarkMode.expect_mode) | Expect the `mode` attribute of the input dark mode to have a specific value. |\n| [expect_page_mode](#shiny.playwright.controls.InputDarkMode.expect_page_mode) | Expect the page to have a specific dark mode value. |\n| [expect_wc_attribute](#shiny.playwright.controls.InputDarkMode.expect_wc_attribute) | Expect the `wc` attribute of the input dark mode to have a specific value. |",
            "click": {
                "header": "click { #shiny.playwright.controls.InputDarkMode.click }",
                "content": "`playwright.controls.InputDarkMode.click(timeout=None)`\n\nClicks the input dark mode.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the input dark mode to be clicked. Defaults to `None`."
            },
            "expect_mode": {
                "header": "expect_mode { #shiny.playwright.controls.InputDarkMode.expect_mode }",
                "content": "`playwright.controls.InputDarkMode.expect_mode(value, *, timeout=None)`\n\nExpect the `mode` attribute of the input dark mode to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The expected value of the `mode` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_page_mode": {
                "header": "expect_page_mode { #shiny.playwright.controls.InputDarkMode.expect_page_mode }",
                "content": "`playwright.controls.InputDarkMode.expect_page_mode(value, *, timeout=None)`\n\nExpect the page to have a specific dark mode value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The expected value of the page's dark mode.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_wc_attribute": {
                "header": "expect_wc_attribute { #shiny.playwright.controls.InputDarkMode.expect_wc_attribute }",
                "content": "`playwright.controls.InputDarkMode.expect_wc_attribute(value, *, timeout=None)`\n\nExpect the `wc` attribute of the input dark mode to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The expected value of the `wc` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            }
        }
    },
    "playwright.controls.InputDate": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.InputDateRange": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_autoclose](#shiny.playwright.controls.InputDateRange.expect_autoclose) | Asserts that the input element has the expected autoclose value. |\n| [expect_format](#shiny.playwright.controls.InputDateRange.expect_format) | Asserts that the input element has the expected format. |\n| [expect_language](#shiny.playwright.controls.InputDateRange.expect_language) | Asserts that the input element has the expected language. |\n| [expect_max_date](#shiny.playwright.controls.InputDateRange.expect_max_date) | Asserts that the input element has the expected maximum date. |\n| [expect_min_date](#shiny.playwright.controls.InputDateRange.expect_min_date) | Asserts that the input element has the expected minimum date. |\n| [expect_separator](#shiny.playwright.controls.InputDateRange.expect_separator) | Asserts that the input element has the expected separator. |\n| [expect_startview](#shiny.playwright.controls.InputDateRange.expect_startview) | Asserts that the input element has the expected start view. |\n| [expect_value](#shiny.playwright.controls.InputDateRange.expect_value) | Asserts that the input element has the expected value. |\n| [expect_weekstart](#shiny.playwright.controls.InputDateRange.expect_weekstart) | Asserts that the input element has the expected week start. |\n| [set](#shiny.playwright.controls.InputDateRange.set) | Sets the value of the input element. |",
            "expect_autoclose": {
                "header": "expect_autoclose { #shiny.playwright.controls.InputDateRange.expect_autoclose }",
                "content": "`playwright.controls.InputDateRange.expect_autoclose(value, *, timeout=None)`\n\nAsserts that the input element has the expected autoclose value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Literal](`typing.Literal`)\\['true', 'false'\\]</span></code>\n\n:   The expected autoclose value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the value to appear. Defaults to `None`."
            },
            "expect_format": {
                "header": "expect_format { #shiny.playwright.controls.InputDateRange.expect_format }",
                "content": "`playwright.controls.InputDateRange.expect_format(value, *, timeout=None)`\n\nAsserts that the input element has the expected format.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected format.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the format to appear. Defaults to `None`."
            },
            "expect_language": {
                "header": "expect_language { #shiny.playwright.controls.InputDateRange.expect_language }",
                "content": "`playwright.controls.InputDateRange.expect_language(value, *, timeout=None)`\n\nAsserts that the input element has the expected language.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected language.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the language to appear. Defaults to `None`."
            },
            "expect_max_date": {
                "header": "expect_max_date { #shiny.playwright.controls.InputDateRange.expect_max_date }",
                "content": "`playwright.controls.InputDateRange.expect_max_date(value, *, timeout=None)`\n\nAsserts that the input element has the expected maximum date.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected maximum date.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the maximum date to appear. Defaults to `None`."
            },
            "expect_min_date": {
                "header": "expect_min_date { #shiny.playwright.controls.InputDateRange.expect_min_date }",
                "content": "`playwright.controls.InputDateRange.expect_min_date(value, *, timeout=None)`\n\nAsserts that the input element has the expected minimum date.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected minimum date.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the minimum date to appear. Defaults to `None`."
            },
            "expect_separator": {
                "header": "expect_separator { #shiny.playwright.controls.InputDateRange.expect_separator }",
                "content": "`playwright.controls.InputDateRange.expect_separator(value, *, timeout=None)`\n\nAsserts that the input element has the expected separator.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected separator.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the separator to appear. Defaults to `None`."
            },
            "expect_startview": {
                "header": "expect_startview { #shiny.playwright.controls.InputDateRange.expect_startview }",
                "content": "`playwright.controls.InputDateRange.expect_startview(value, *, timeout=None)`\n\nAsserts that the input element has the expected start view.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected start view.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the start view to appear. Defaults to `None`."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controls.InputDateRange.expect_value }",
                "content": "`playwright.controls.InputDateRange.expect_value(value, *, timeout=None)`\n\nAsserts that the input element has the expected value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[typing](`typing`).[Tuple](`typing.Tuple`)\\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\\] \\| [typing](`typing`).[Tuple](`typing.Tuple`)\\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\\] \\| [typing](`typing`).[Tuple](`typing.Tuple`)\\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\\]</span></code>\n\n:   The expected value. The first element is the start date and the second element is the end date.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the value to appear. Defaults to `None`."
            },
            "expect_weekstart": {
                "header": "expect_weekstart { #shiny.playwright.controls.InputDateRange.expect_weekstart }",
                "content": "`playwright.controls.InputDateRange.expect_weekstart(value, *, timeout=None)`\n\nAsserts that the input element has the expected week start.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`) \\| [AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected week start.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the week start to appear. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.InputDateRange.set }",
                "content": "`playwright.controls.InputDateRange.set(value, *, timeout=None)`\n\nSets the value of the input element.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[typing](`typing`).[Tuple](`typing.Tuple`)\\[[str](`str`) \\| None, [str](`str`) \\| None\\]</span></code>\n\n:   The value to set. The first element is the start date and the second element is the end date.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the value to be set. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.InputDateRange { #shiny.playwright.controls.InputDateRange }\n\n`playwright.controls.InputDateRange(self, page, id)`\n\nController for [](:func:`shiny.express.ui.input_date_range`)."
    },
    "playwright.controls.InputFile": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_accept](#shiny.playwright.controls.InputFile.expect_accept) | Expect the `accept` attribute to have a specific value. |\n| [expect_button_label](#shiny.playwright.controls.InputFile.expect_button_label) | Expect the button label to have a specific value. |\n| [expect_capture](#shiny.playwright.controls.InputFile.expect_capture) | Expect the `capture` attribute to have a specific value. |\n| [expect_complete](#shiny.playwright.controls.InputFile.expect_complete) | Expect the file upload to be complete. |\n| [expect_multiple](#shiny.playwright.controls.InputFile.expect_multiple) | Expect the `multiple` attribute to have a specific value. |\n| [expect_width](#shiny.playwright.controls.InputFile.expect_width) | Expect the width of the input file to have a specific value. |\n| [set](#shiny.playwright.controls.InputFile.set) | Set the file upload. |",
            "expect_accept": {
                "header": "expect_accept { #shiny.playwright.controls.InputFile.expect_accept }",
                "content": "`playwright.controls.InputFile.expect_accept(value, *, timeout=None)`\n\nExpect the `accept` attribute to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[list](`list`)\\[[str](`str`)\\] \\| [AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected value of the `accept` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "expect_button_label": {
                "header": "expect_button_label { #shiny.playwright.controls.InputFile.expect_button_label }",
                "content": "`playwright.controls.InputFile.expect_button_label(value, *, timeout=None)`\n\nExpect the button label to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected value of the button label.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "expect_capture": {
                "header": "expect_capture { #shiny.playwright.controls.InputFile.expect_capture }",
                "content": "`playwright.controls.InputFile.expect_capture(value, *, timeout=None)`\n\nExpect the `capture` attribute to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Literal](`typing.Literal`)\\['environment', 'user'\\] \\| None</span></code>\n\n:   The expected value of the `capture` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "expect_complete": {
                "header": "expect_complete { #shiny.playwright.controls.InputFile.expect_complete }",
                "content": "`playwright.controls.InputFile.expect_complete(timeout=None)`\n\nExpect the file upload to be complete.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "expect_multiple": {
                "header": "expect_multiple { #shiny.playwright.controls.InputFile.expect_multiple }",
                "content": "`playwright.controls.InputFile.expect_multiple(value, *, timeout=None)`\n\nExpect the `multiple` attribute to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   The expected value of the `multiple` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controls.InputFile.expect_width }",
                "content": "`playwright.controls.InputFile.expect_width(value, *, timeout=None)`\n\nExpect the width of the input file to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected value of the width.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.InputFile.set }",
                "content": "`playwright.controls.InputFile.set(file_path, *, timeout=None, expect_complete_timeout=30 * 1000)`\n\nSet the file upload.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">file_path</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`) \\| [pathlib](`pathlib`).[Path](`pathlib.Path`) \\| [FilePayload](`playwright.sync_api.FilePayload`) \\| [list](`list`)\\[[str](`str`) \\| [pathlib](`pathlib`).[Path](`pathlib.Path`)\\] \\| [list](`list`)\\[[FilePayload](`playwright.sync_api.FilePayload`)\\]</span></code>\n\n:   The path to the file to upload.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the action. Defaults to `None`.\n\n<code><span class=\"parameter-name\">expect_complete_timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">30 * 1000</span></code>\n\n:   The timeout for the expectation that the upload is complete. Defaults to `30 * 1000`."
            }
        },
        "preamble": "# playwright.controls.InputFile { #shiny.playwright.controls.InputFile }\n\n`playwright.controls.InputFile(self, page, id)`\n\nController for [](:func:`shiny.express.ui.input_file`)."
    },
    "playwright.controls.InputNumeric": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_max](#shiny.playwright.controls.InputNumeric.expect_max) | Expect the maximum numeric value to be a specific value. |\n| [expect_min](#shiny.playwright.controls.InputNumeric.expect_min) | Expect the minimum numeric value to be a specific value. |\n| [expect_step](#shiny.playwright.controls.InputNumeric.expect_step) | Expect step value when incrementing/decrementing the numeric input. |",
            "expect_max": {
                "header": "expect_max { #shiny.playwright.controls.InputNumeric.expect_max }",
                "content": "`playwright.controls.InputNumeric.expect_max(value, *, timeout=None)`\n\nExpect the maximum numeric value to be a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected maximum numeric value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_min": {
                "header": "expect_min { #shiny.playwright.controls.InputNumeric.expect_min }",
                "content": "`playwright.controls.InputNumeric.expect_min(value, *, timeout=None)`\n\nExpect the minimum numeric value to be a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected minimum numeric value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_step": {
                "header": "expect_step { #shiny.playwright.controls.InputNumeric.expect_step }",
                "content": "`playwright.controls.InputNumeric.expect_step(value, *, timeout=None)`\n\nExpect step value when incrementing/decrementing the numeric input.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected step value for the numeric input.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            }
        }
    },
    "playwright.controls.InputPassword": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_width](#shiny.playwright.controls.InputPassword.expect_width) | Expect the `width` attribute of the input password to have a specific value. |",
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controls.InputPassword.expect_width }",
                "content": "`playwright.controls.InputPassword.expect_width(value, *, timeout=None)`\n\nExpect the `width` attribute of the input password to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected value of the `width` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            }
        }
    },
    "playwright.controls.InputRadioButtons": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_choices](#shiny.playwright.controls.InputRadioButtons.expect_choices) | Expect the radio button choices. |\n| [expect_selected](#shiny.playwright.controls.InputRadioButtons.expect_selected) | Expect the selected radio button. |\n| [set](#shiny.playwright.controls.InputRadioButtons.set) | Set the selected radio button. |",
            "expect_choices": {
                "header": "expect_choices { #shiny.playwright.controls.InputRadioButtons.expect_choices }",
                "content": "`playwright.controls.InputRadioButtons.expect_choices(value, *, timeout=None)`\n\nExpect the radio button choices.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>\n\n:   The expected choices.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "expect_selected": {
                "header": "expect_selected { #shiny.playwright.controls.InputRadioButtons.expect_selected }",
                "content": "`playwright.controls.InputRadioButtons.expect_selected(value, *, timeout=None)`\n\nExpect the selected radio button.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \\| None</span></code>\n\n:   The expected value of the selected radio button.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the expectation. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.InputRadioButtons.set }",
                "content": "`playwright.controls.InputRadioButtons.set(selected, *, timeout=None, **kwargs)`\n\nSet the selected radio button.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">selected</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The value of the selected radio button.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The timeout for the action. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.InputRadioButtons { #shiny.playwright.controls.InputRadioButtons }\n\n`playwright.controls.InputRadioButtons(self, page, id)`\n\nController for [](:func:`shiny.express.ui.input_radio_buttons`)."
    },
    "playwright.controls.InputSelect": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_selectize](#shiny.playwright.controls.InputSelect.expect_selectize) | Expect the input select to be selectize. |",
            "expect_selectize": {
                "header": "expect_selectize { #shiny.playwright.controls.InputSelect.expect_selectize }",
                "content": "`playwright.controls.InputSelect.expect_selectize(value, *, timeout=None)`\n\nExpect the input select to be selectize.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   Whether the input select is selectize.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            }
        }
    },
    "playwright.controls.InputSelectize": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.InputSlider": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_value](#shiny.playwright.controls.InputSlider.expect_value) | Asserts that the input element has the expected value. |\n| [set](#shiny.playwright.controls.InputSlider.set) | Set the value of the slider. |",
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controls.InputSlider.expect_value }",
                "content": "`playwright.controls.InputSlider.expect_value(value, *, timeout=None)`\n\nAsserts that the input element has the expected value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the value to appear. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.InputSlider.set }",
                "content": "`playwright.controls.InputSlider.set(value, *, max_err_values=15, timeout=None)`\n\nSet the value of the slider.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The value to set the slider to.\n\n<code><span class=\"parameter-name\">max_err_values</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">15</span></code>\n\n:   The maximum number of error values to display if the value is not found. Defaults to 15.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the value to appear. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.InputSlider { #shiny.playwright.controls.InputSlider }\n\n`playwright.controls.InputSlider(self, page, id)`\n\nController for [](:func:`shiny.express.ui.input_slider`)."
    },
    "playwright.controls.InputSliderRange": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_value](#shiny.playwright.controls.InputSliderRange.expect_value) | Asserts that the input element has the expected value. |\n| [set](#shiny.playwright.controls.InputSliderRange.set) | Set the value of the slider. |",
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controls.InputSliderRange.expect_value }",
                "content": "`playwright.controls.InputSliderRange.expect_value(value, *, timeout=None)`\n\nAsserts that the input element has the expected value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[typing](`typing`).[Tuple](`typing.Tuple`)\\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\\] \\| [typing](`typing`).[Tuple](`typing.Tuple`)\\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\\] \\| [typing](`typing`).[Tuple](`typing.Tuple`)\\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\\]</span></code>\n\n:   The expected value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the value to appear. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.InputSliderRange.set }",
                "content": "`playwright.controls.InputSliderRange.set(value, *, max_err_values=15, timeout=None)`\n\nSet the value of the slider.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[typing](`typing`).[Tuple](`typing.Tuple`)\\[[str](`str`), [str](`str`)\\] \\| [typing](`typing`).[Tuple](`typing.Tuple`)\\[[str](`str`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\\] \\| [typing](`typing`).[Tuple](`typing.Tuple`)\\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [str](`str`)\\]</span></code>\n\n:   The value to set the slider to.\n\n<code><span class=\"parameter-name\">max_err_values</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">15</span></code>\n\n:   The maximum number of error values to display if the value is not found. Defaults to 15.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the value to appear. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.InputSliderRange { #shiny.playwright.controls.InputSliderRange }\n\n`playwright.controls.InputSliderRange(self, page, id)`\n\nController for [](:func:`shiny.express.ui.input_slider_range`)."
    },
    "playwright.controls.InputSwitch": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.InputTaskButton": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_auto_reset](#shiny.playwright.controls.InputTaskButton.expect_auto_reset) | Expect the `auto-reset` attribute of the input task button to have a specific value. |\n| [expect_label](#shiny.playwright.controls.InputTaskButton.expect_label) | Expect the label of the input task button to have a specific value. |\n| [expect_label_busy](#shiny.playwright.controls.InputTaskButton.expect_label_busy) | Expect the label of a busy input task button to have a specific value. |\n| [expect_label_ready](#shiny.playwright.controls.InputTaskButton.expect_label_ready) | Expect the label of a ready input task button to have a specific value. |\n| [expect_label_state](#shiny.playwright.controls.InputTaskButton.expect_label_state) | Expect the label of the input task button to have a specific value in a specific state. |\n| [expect_state](#shiny.playwright.controls.InputTaskButton.expect_state) | Expect the state of the input task button to have a specific value. |",
            "expect_auto_reset": {
                "header": "expect_auto_reset { #shiny.playwright.controls.InputTaskButton.expect_auto_reset }",
                "content": "`playwright.controls.InputTaskButton.expect_auto_reset(value, timeout=None)`\n\nExpect the `auto-reset` attribute of the input task button to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   The expected value of the `auto-reset` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_label": {
                "header": "expect_label { #shiny.playwright.controls.InputTaskButton.expect_label }",
                "content": "`playwright.controls.InputTaskButton.expect_label(value, *, timeout=None)`\n\nExpect the label of the input task button to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected value of the label.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_label_busy": {
                "header": "expect_label_busy { #shiny.playwright.controls.InputTaskButton.expect_label_busy }",
                "content": "`playwright.controls.InputTaskButton.expect_label_busy(value, *, timeout=None)`\n\nExpect the label of a busy input task button to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected value of the label.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_label_ready": {
                "header": "expect_label_ready { #shiny.playwright.controls.InputTaskButton.expect_label_ready }",
                "content": "`playwright.controls.InputTaskButton.expect_label_ready(value, *, timeout=None)`\n\nExpect the label of a ready input task button to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected value of the label.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_label_state": {
                "header": "expect_label_state { #shiny.playwright.controls.InputTaskButton.expect_label_state }",
                "content": "`playwright.controls.InputTaskButton.expect_label_state(state, value, *, timeout=None)`\n\nExpect the label of the input task button to have a specific value in a specific state.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">state</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The state of the input task button.\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected value of the label.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_state": {
                "header": "expect_state { #shiny.playwright.controls.InputTaskButton.expect_state }",
                "content": "`playwright.controls.InputTaskButton.expect_state(value, *, timeout=None)`\n\nExpect the state of the input task button to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Literal](`typing.Literal`)\\['ready', 'busy'\\] \\| [str](`str`)</span></code>\n\n:   The expected value of the state of the input task button.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            }
        }
    },
    "playwright.controls.InputText": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.InputTextArea": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_autoresize](#shiny.playwright.controls.InputTextArea.expect_autoresize) | Expect the `autoresize` attribute of the input text area to have a specific value. |\n| [expect_cols](#shiny.playwright.controls.InputTextArea.expect_cols) | Expect the `cols` attribute of the input text area to have a specific value. |\n| [expect_height](#shiny.playwright.controls.InputTextArea.expect_height) | Expect the `height` attribute of the input text area to have a specific value. |\n| [expect_resize](#shiny.playwright.controls.InputTextArea.expect_resize) | Expect the `resize` attribute of the input text area to have a specific value. |\n| [expect_rows](#shiny.playwright.controls.InputTextArea.expect_rows) | Expect the `rows` attribute of the input text area to have a specific value. |\n| [expect_width](#shiny.playwright.controls.InputTextArea.expect_width) | Expect the `width` attribute of the input text area to have a specific value. |",
            "expect_autoresize": {
                "header": "expect_autoresize { #shiny.playwright.controls.InputTextArea.expect_autoresize }",
                "content": "`playwright.controls.InputTextArea.expect_autoresize(value, *, timeout=None)`\n\nExpect the `autoresize` attribute of the input text area to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   The expected value of the `autoresize` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_cols": {
                "header": "expect_cols { #shiny.playwright.controls.InputTextArea.expect_cols }",
                "content": "`playwright.controls.InputTextArea.expect_cols(value, *, timeout=None)`\n\nExpect the `cols` attribute of the input text area to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected value of the `cols` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controls.InputTextArea.expect_height }",
                "content": "`playwright.controls.InputTextArea.expect_height(value, *, timeout=None)`\n\nExpect the `height` attribute of the input text area to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected value of the `height` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_resize": {
                "header": "expect_resize { #shiny.playwright.controls.InputTextArea.expect_resize }",
                "content": "`playwright.controls.InputTextArea.expect_resize(value, *, timeout=None)`\n\nExpect the `resize` attribute of the input text area to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Resize](`shiny.playwright.controls._controls.Resize`) \\| None</span></code>\n\n:   The expected value of the `resize` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_rows": {
                "header": "expect_rows { #shiny.playwright.controls.InputTextArea.expect_rows }",
                "content": "`playwright.controls.InputTextArea.expect_rows(value, *, timeout=None)`\n\nExpect the `rows` attribute of the input text area to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>\n\n:   The expected value of the `rows` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            },
            "expect_width": {
                "header": "expect_width { #shiny.playwright.controls.InputTextArea.expect_width }",
                "content": "`playwright.controls.InputTextArea.expect_width(value, *, timeout=None)`\n\nExpect the `width` attribute of the input text area to have a specific value.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected value of the `width` attribute.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`."
            }
        }
    },
    "playwright.controls.NavItem": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [click](#shiny.playwright.controls.NavItem.click) | Clicks the nav item. |\n| [expect_active](#shiny.playwright.controls.NavItem.expect_active) | Expects the nav item to be active or inactive. |\n| [expect_content](#shiny.playwright.controls.NavItem.expect_content) | Expects the nav item content to have the specified text. |",
            "click": {
                "header": "click { #shiny.playwright.controls.NavItem.click }",
                "content": "`playwright.controls.NavItem.click(timeout=None)`\n\nClicks the nav item.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the nav item to be visible and interactable. Defaults to `None`."
            },
            "expect_active": {
                "header": "expect_active { #shiny.playwright.controls.NavItem.expect_active }",
                "content": "`playwright.controls.NavItem.expect_active(value, *, timeout=None)`\n\nExpects the nav item to be active or inactive.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">active</span></code>\n\n:   `True` if the nav item is expected to be active, False otherwise.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_content": {
                "header": "expect_content { #shiny.playwright.controls.NavItem.expect_content }",
                "content": "`playwright.controls.NavItem.expect_content(value, *, timeout=None)`\n\nExpects the nav item content to have the specified text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text pattern or string.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.NavItem { #shiny.playwright.controls.NavItem }\n\n`playwright.controls.NavItem(self, page, id, data_value)`\n\nController for [](:func:`shiny.express.ui.nav_item`)."
    },
    "playwright.controls.NavsetBar": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.NavsetCardPill": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.NavsetCardTab": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.NavsetCardUnderline": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.NavsetHidden": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.NavsetPill": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.NavsetPillList": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.NavsetTab": {
        "attributes": {},
        "methods": {},
        "preamble": "# playwright.controls.NavsetTab { #shiny.playwright.controls.NavsetTab }\n\n`playwright.controls.NavsetTab(self, page, id)`\n\nController for [](:func:`shiny.express.ui.navset_tab`)."
    },
    "playwright.controls.NavsetUnderline": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.OutputCode": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_has_placeholder](#shiny.playwright.controls.OutputCode.expect_has_placeholder) | Asserts that the code output has the expected placeholder. |",
            "expect_has_placeholder": {
                "header": "expect_has_placeholder { #shiny.playwright.controls.OutputCode.expect_has_placeholder }",
                "content": "`playwright.controls.OutputCode.expect_has_placeholder(value=False, *, timeout=None)`\n\nAsserts that the code output has the expected placeholder.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">False</span></code>\n\n:   Whether the code output has a placeholder.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the placeholder to appear. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.OutputCode { #shiny.playwright.controls.OutputCode }\n\n`playwright.controls.OutputCode(self, page, id)`\n\nController for [](:func:`shiny.express.ui.code_output`)."
    },
    "playwright.controls.OutputDataFrame": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [cell_locator](#shiny.playwright.controls.OutputDataFrame.cell_locator) | Returns the locator for a specific cell in the data frame. |\n| [edit_cell](#shiny.playwright.controls.OutputDataFrame.edit_cell) | Edits the cell in the data frame. |\n| [expect_cell](#shiny.playwright.controls.OutputDataFrame.expect_cell) | Expects the cell in the data frame to have the specified text. |\n| [expect_cell_class](#shiny.playwright.controls.OutputDataFrame.expect_cell_class) | Expects the class of the cell |\n| [expect_cell_title](#shiny.playwright.controls.OutputDataFrame.expect_cell_title) | Expects the validation message of the cell in the data frame. |\n| [expect_class_state](#shiny.playwright.controls.OutputDataFrame.expect_class_state) | Expects the state of the class in the data frame. |\n| [expect_column_label](#shiny.playwright.controls.OutputDataFrame.expect_column_label) | Expects the text in the specified column of the data frame. |\n| [expect_column_labels](#shiny.playwright.controls.OutputDataFrame.expect_column_labels) | Expects the column labels in the data frame. |\n| [expect_n_col](#shiny.playwright.controls.OutputDataFrame.expect_n_col) | Expects the number of columns in the data frame. |\n| [expect_n_row](#shiny.playwright.controls.OutputDataFrame.expect_n_row) | Expects the number of rows in the data frame. |\n| [save_cell](#shiny.playwright.controls.OutputDataFrame.save_cell) | Saves the value of the cell in the data frame. |\n| [select_rows](#shiny.playwright.controls.OutputDataFrame.select_rows) | Selects the rows in the data frame. |\n| [set_column_filter](#shiny.playwright.controls.OutputDataFrame.set_column_filter) | Filters the column in the data frame. |\n| [set_column_sort](#shiny.playwright.controls.OutputDataFrame.set_column_sort) | Sorts the column in the data frame. |",
            "cell_locator": {
                "header": "cell_locator { #shiny.playwright.controls.OutputDataFrame.cell_locator }",
                "content": "`playwright.controls.OutputDataFrame.cell_locator(row, col)`\n\nReturns the locator for a specific cell in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">row</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The row number of the cell.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number of the cell."
            },
            "edit_cell": {
                "header": "edit_cell { #shiny.playwright.controls.OutputDataFrame.edit_cell }",
                "content": "`playwright.controls.OutputDataFrame.edit_cell(text, *, row, col, timeout=None)`\n\nEdits the cell in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span></code>\n\n:   The value to edit in the cell.\n\n<code><span class=\"parameter-name\">row</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The row number of the cell.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number of the cell.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the action to complete. Defaults to `None`."
            },
            "expect_cell": {
                "header": "expect_cell { #shiny.playwright.controls.OutputDataFrame.expect_cell }",
                "content": "`playwright.controls.OutputDataFrame.expect_cell(value, *, row, col, timeout=None)`\n\nExpects the cell in the data frame to have the specified text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text in the cell.\n\n<code><span class=\"parameter-name\">row</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The row number of the cell.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number of the cell.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_cell_class": {
                "header": "expect_cell_class { #shiny.playwright.controls.OutputDataFrame.expect_cell_class }",
                "content": "`playwright.controls.OutputDataFrame.expect_cell_class(value, *, row, col, timeout=None)`\n\nExpects the class of the cell\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The expected class of the cell.\n\n<code><span class=\"parameter-name\">row</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The row number of the cell.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number of the cell.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_cell_title": {
                "header": "expect_cell_title { #shiny.playwright.controls.OutputDataFrame.expect_cell_title }",
                "content": "`playwright.controls.OutputDataFrame.expect_cell_title(value, *, row, col, timeout=None)`\n\nExpects the validation message of the cell in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The expected validation message of the cell.\n\n<code><span class=\"parameter-name\">row</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The row number of the cell.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number of the cell.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_class_state": {
                "header": "expect_class_state { #shiny.playwright.controls.OutputDataFrame.expect_class_state }",
                "content": "`playwright.controls.OutputDataFrame.expect_class_state(value, *, row, col, timeout=None)`\n\nExpects the state of the class in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The expected state of the class.\n\n<code><span class=\"parameter-name\">row</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The row number of the cell.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number of the cell.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_column_label": {
                "header": "expect_column_label { #shiny.playwright.controls.OutputDataFrame.expect_column_label }",
                "content": "`playwright.controls.OutputDataFrame.expect_column_label(value, *, col, timeout=None)`\n\nExpects the text in the specified column of the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>\n\n:   The expected text in the column.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_column_labels": {
                "header": "expect_column_labels { #shiny.playwright.controls.OutputDataFrame.expect_column_labels }",
                "content": "`playwright.controls.OutputDataFrame.expect_column_labels(value, *, timeout=None)`\n\nExpects the column labels in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \\| None</span></code>\n\n:   The expected column labels.\n\n    Note: None if the column labels are expected to not exist.\n\n<code><span class=\"parameter-name\">edit</span></code>\n\n:   `True` if the data frame is to be in edit mode, `False` otherwise.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_n_col": {
                "header": "expect_n_col { #shiny.playwright.controls.OutputDataFrame.expect_n_col }",
                "content": "`playwright.controls.OutputDataFrame.expect_n_col(value, *, timeout=None)`\n\nExpects the number of columns in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The expected number of columns.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_n_row": {
                "header": "expect_n_row { #shiny.playwright.controls.OutputDataFrame.expect_n_row }",
                "content": "`playwright.controls.OutputDataFrame.expect_n_row(value, *, timeout=None)`\n\nExpects the number of rows in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The expected number of rows.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "save_cell": {
                "header": "save_cell { #shiny.playwright.controls.OutputDataFrame.save_cell }",
                "content": "`playwright.controls.OutputDataFrame.save_cell(text, *, row, col, save_key, timeout=None)`\n\nSaves the value of the cell in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">text</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The key to save the value of the cell.\n\n<code><span class=\"parameter-name\">row</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The row number of the cell.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number of the cell.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the action to complete. Defaults to `None`."
            },
            "select_rows": {
                "header": "select_rows { #shiny.playwright.controls.OutputDataFrame.select_rows }",
                "content": "`playwright.controls.OutputDataFrame.select_rows(value, *, timeout=None)`\n\nSelects the rows in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[list](`list`)\\[[int](`int`)\\]</span></code>\n\n:   The list of row numbers to select.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the action to complete. Defaults to `None`."
            },
            "set_column_filter": {
                "header": "set_column_filter { #shiny.playwright.controls.OutputDataFrame.set_column_filter }",
                "content": "`playwright.controls.OutputDataFrame.set_column_filter(col, *, text, timeout=None)`\n\nFilters the column in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number to filter.\n\n<code><span class=\"parameter-name\">text</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`) \\| [list](`list`)\\[[str](`str`)\\] \\| [tuple](`tuple`)\\[[str](`str`), [str](`str`)\\]</span></code>\n\n:   The text to filter the column.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the action to complete. Defaults to `None`."
            },
            "set_column_sort": {
                "header": "set_column_sort { #shiny.playwright.controls.OutputDataFrame.set_column_sort }",
                "content": "`playwright.controls.OutputDataFrame.set_column_sort(col, *, timeout=None)`\n\nSorts the column in the data frame.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number to sort.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the action to complete. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.OutputDataFrame { #shiny.playwright.controls.OutputDataFrame }\n\n`playwright.controls.OutputDataFrame(self, page, id)`\n\nController for [](:func:`shiny.express.ui.output_data_frame`)."
    },
    "playwright.controls.OutputImage": {
        "attributes": {},
        "methods": {}
    },
    "playwright.controls.OutputPlot": {
        "attributes": {},
        "methods": {},
        "preamble": "# playwright.controls.OutputPlot { #shiny.playwright.controls.OutputPlot }\n\n`playwright.controls.OutputPlot(self, page, id)`\n\nController for [](:func:`shiny.express.ui.plot_output`)."
    },
    "playwright.controls.OutputTable": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_cell](#shiny.playwright.controls.OutputTable.expect_cell) | Asserts that the table cell has the expected text. |\n| [expect_column_labels](#shiny.playwright.controls.OutputTable.expect_column_labels) | Asserts that the table has the expected column labels. |\n| [expect_column_text](#shiny.playwright.controls.OutputTable.expect_column_text) | Asserts that the column has the expected text. |\n| [expect_n_col](#shiny.playwright.controls.OutputTable.expect_n_col) | Asserts that the table has the expected number of columns. |\n| [expect_n_row](#shiny.playwright.controls.OutputTable.expect_n_row) | Asserts that the table has the expected number of rows. |",
            "expect_cell": {
                "header": "expect_cell { #shiny.playwright.controls.OutputTable.expect_cell }",
                "content": "`playwright.controls.OutputTable.expect_cell(value, row, col, *, timeout=None)`\n\nAsserts that the table cell has the expected text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text in the cell.\n\n<code><span class=\"parameter-name\">row</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The row number.\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the text to appear. Defaults to `None`."
            },
            "expect_column_labels": {
                "header": "expect_column_labels { #shiny.playwright.controls.OutputTable.expect_column_labels }",
                "content": "`playwright.controls.OutputTable.expect_column_labels(value, *, timeout=None)`\n\nAsserts that the table has the expected column labels.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \\| None</span></code>\n\n:   The expected column labels. If None, it asserts that the table has no column labels.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the column labels to appear. Defaults to `None`."
            },
            "expect_column_text": {
                "header": "expect_column_text { #shiny.playwright.controls.OutputTable.expect_column_text }",
                "content": "`playwright.controls.OutputTable.expect_column_text(col, value, *, timeout=None)`\n\nAsserts that the column has the expected text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">col</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The column number.\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>\n\n:   The expected text in the column.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the text to appear. Defaults to `None`."
            },
            "expect_n_col": {
                "header": "expect_n_col { #shiny.playwright.controls.OutputTable.expect_n_col }",
                "content": "`playwright.controls.OutputTable.expect_n_col(value, *, timeout=None)`\n\nAsserts that the table has the expected number of columns.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The expected number of columns in the table.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the table to have the expected number of columns. Defaults to `None`."
            },
            "expect_n_row": {
                "header": "expect_n_row { #shiny.playwright.controls.OutputTable.expect_n_row }",
                "content": "`playwright.controls.OutputTable.expect_n_row(value, *, timeout=None)`\n\nAsserts that the table has the expected number of rows.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[int](`int`)</span></code>\n\n:   The expected number of rows in the table.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the table to have the expected number of rows. Defaults to `None`."
            }
        }
    },
    "playwright.controls.OutputText": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [get_value](#shiny.playwright.controls.OutputText.get_value) | Gets the text value of the output. |",
            "get_value": {
                "header": "get_value { #shiny.playwright.controls.OutputText.get_value }",
                "content": "`playwright.controls.OutputText.get_value(timeout=None)`\n\nGets the text value of the output.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the value to appear. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.OutputText { #shiny.playwright.controls.OutputText }\n\n`playwright.controls.OutputText(self, page, id)`\n\nController for [](:func:`shiny.express.ui.text_output`)."
    },
    "playwright.controls.OutputTextVerbatim": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_has_placeholder](#shiny.playwright.controls.OutputTextVerbatim.expect_has_placeholder) | Asserts that the verbatim text output has the expected placeholder. |",
            "expect_has_placeholder": {
                "header": "expect_has_placeholder { #shiny.playwright.controls.OutputTextVerbatim.expect_has_placeholder }",
                "content": "`playwright.controls.OutputTextVerbatim.expect_has_placeholder(value=False, *, timeout=None)`\n\nAsserts that the verbatim text output has the expected placeholder.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">False</span></code>\n\n:   Whether the verbatim text output has a placeholder.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the placeholder to appear. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.OutputTextVerbatim { #shiny.playwright.controls.OutputTextVerbatim }\n\n`playwright.controls.OutputTextVerbatim(self, page, id)`\n\nController for [](:func:`shiny.express.ui.text_output_verbatim`)."
    },
    "playwright.controls.OutputUi": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_empty](#shiny.playwright.controls.OutputUi.expect_empty) | Asserts that the output is empty. |\n| [expect_text](#shiny.playwright.controls.OutputUi.expect_text) | Asserts that the output has the expected text. |",
            "expect_empty": {
                "header": "expect_empty { #shiny.playwright.controls.OutputUi.expect_empty }",
                "content": "`playwright.controls.OutputUi.expect_empty(value, *, timeout=None)`\n\nAsserts that the output is empty.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   Whether the output is empty.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the output to be empty. Defaults to `None`."
            },
            "expect_text": {
                "header": "expect_text { #shiny.playwright.controls.OutputUi.expect_text }",
                "content": "`playwright.controls.OutputUi.expect_text(value, *, timeout=None)`\n\nAsserts that the output has the expected text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[str](`str`)</span></code>\n\n:   The expected text.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the text to appear. Defaults to `None`."
            }
        }
    },
    "playwright.controls.Popover": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [set](#shiny.playwright.controls.Popover.set) | Sets the state of the popover. |\n| [toggle](#shiny.playwright.controls.Popover.toggle) | Toggles the state of the popover. |",
            "set": {
                "header": "set { #shiny.playwright.controls.Popover.set }",
                "content": "`playwright.controls.Popover.set(open, timeout=None)`\n\nSets the state of the popover.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">open</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   `True` to open the popover and `False` to close it.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the popover to be visible and interactable. Defaults to `None`."
            },
            "toggle": {
                "header": "toggle { #shiny.playwright.controls.Popover.toggle }",
                "content": "`playwright.controls.Popover.toggle(timeout=None)`\n\nToggles the state of the popover.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the popover to be visible and interactable. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.Popover { #shiny.playwright.controls.Popover }\n\n`playwright.controls.Popover(self, page, id)`\n\nController for [](:func:`shiny.express.ui.popover`)."
    },
    "playwright.controls.Sidebar": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_handle](#shiny.playwright.controls.Sidebar.expect_handle) | Asserts that the sidebar handle exists or does not exist. |\n| [expect_open](#shiny.playwright.controls.Sidebar.expect_open) | Expect the sidebar to be open or closed. |\n| [expect_position](#shiny.playwright.controls.Sidebar.expect_position) | Asserts that the sidebar is in the expected position. |\n| [expect_text](#shiny.playwright.controls.Sidebar.expect_text) | Asserts that the sidebar has the expected text. |\n| [set](#shiny.playwright.controls.Sidebar.set) | Sets the sidebar to be open or closed. |\n| [toggle](#shiny.playwright.controls.Sidebar.toggle) | Toggles the sidebar open or closed. |",
            "expect_handle": {
                "header": "expect_handle { #shiny.playwright.controls.Sidebar.expect_handle }",
                "content": "`playwright.controls.Sidebar.expect_handle(exists, *, timeout=None)`\n\nAsserts that the sidebar handle exists or does not exist.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">exists</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   `True` if the sidebar open/close handle should exist, `False` otherwise.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the sidebar handle to appear. Defaults to `None`."
            },
            "expect_open": {
                "header": "expect_open { #shiny.playwright.controls.Sidebar.expect_open }",
                "content": "`playwright.controls.Sidebar.expect_open(value, *, timeout=None)`\n\nExpect the sidebar to be open or closed.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   `True` if the sidebar should be open, `False` to be closed.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the sidebar to open or close. Defaults to `None`."
            },
            "expect_position": {
                "header": "expect_position { #shiny.playwright.controls.Sidebar.expect_position }",
                "content": "`playwright.controls.Sidebar.expect_position(value, *, timeout=None)`\n\nAsserts that the sidebar is in the expected position.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Literal](`typing.Literal`)\\['left', 'right'\\]</span></code>\n\n:   The expected position of the sidebar.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the sidebar to appear. Defaults to `None`."
            },
            "expect_text": {
                "header": "expect_text { #shiny.playwright.controls.Sidebar.expect_text }",
                "content": "`playwright.controls.Sidebar.expect_text(value, *, timeout=None)`\n\nAsserts that the sidebar has the expected text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text in the sidebar.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the text to appear. Defaults to `None`."
            },
            "set": {
                "header": "set { #shiny.playwright.controls.Sidebar.set }",
                "content": "`playwright.controls.Sidebar.set(open, *, timeout=None)`\n\nSets the sidebar to be open or closed.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">open</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   `True` to open the sidebar and `False` to close it.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the sidebar to open or close. Defaults to `None`."
            },
            "toggle": {
                "header": "toggle { #shiny.playwright.controls.Sidebar.toggle }",
                "content": "`playwright.controls.Sidebar.toggle(timeout=None)`\n\nToggles the sidebar open or closed.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the sidebar to toggle. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.Sidebar { #shiny.playwright.controls.Sidebar }\n\n`playwright.controls.Sidebar(self, page, id)`\n\nController for func: `shiny.express.ui.sidebar`."
    },
    "playwright.controls.Tooltip": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [set](#shiny.playwright.controls.Tooltip.set) | Sets the state of the tooltip. |\n| [toggle](#shiny.playwright.controls.Tooltip.toggle) | Toggles the state of the tooltip. |",
            "set": {
                "header": "set { #shiny.playwright.controls.Tooltip.set }",
                "content": "`playwright.controls.Tooltip.set(open, timeout=None)`\n\nSets the state of the tooltip.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">open</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[bool](`bool`)</span></code>\n\n:   `True` to open the tooltip and `False` to close it.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the tooltip to be visible and interactable. Defaults to `None`."
            },
            "toggle": {
                "header": "toggle { #shiny.playwright.controls.Tooltip.toggle }",
                "content": "`playwright.controls.Tooltip.toggle(timeout=None)`\n\nToggles the state of the tooltip.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the tooltip to be visible and interactable. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.Tooltip { #shiny.playwright.controls.Tooltip }\n\n`playwright.controls.Tooltip(self, page, id)`\n\nController for [](:func:`shiny.express.ui.tooltip`)."
    },
    "playwright.controls.ValueBox": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [expect_body](#shiny.playwright.controls.ValueBox.expect_body) | Expects the value box body to have specific text. |\n| [expect_height](#shiny.playwright.controls.ValueBox.expect_height) | Expects the value box to have a specific height. |\n| [expect_title](#shiny.playwright.controls.ValueBox.expect_title) | Expects the value box title to have a specific text. |\n| [expect_value](#shiny.playwright.controls.ValueBox.expect_value) | Expects the value box value to have a specific text. |",
            "expect_body": {
                "header": "expect_body { #shiny.playwright.controls.ValueBox.expect_body }",
                "content": "`playwright.controls.ValueBox.expect_body(value, *, timeout=None)`\n\nExpects the value box body to have specific text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \\| [list](`list`)\\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\\]</span></code>\n\n:   The expected text pattern or list of patterns/strings.\n\n    Note: If testing against multiple elements, text should be an array.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_height": {
                "header": "expect_height { #shiny.playwright.controls.ValueBox.expect_height }",
                "content": "`playwright.controls.ValueBox.expect_height(value, *, timeout=None)`\n\nExpects the value box to have a specific height.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>\n\n:   The expected height value.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_title": {
                "header": "expect_title { #shiny.playwright.controls.ValueBox.expect_title }",
                "content": "`playwright.controls.ValueBox.expect_title(value, *, timeout=None)`\n\nExpects the value box title to have a specific text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text pattern or string.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            },
            "expect_value": {
                "header": "expect_value { #shiny.playwright.controls.ValueBox.expect_value }",
                "content": "`playwright.controls.ValueBox.expect_value(value, *, timeout=None)`\n\nExpects the value box value to have a specific text.\n\n#### Parameters\n\n<code><span class=\"parameter-name\">value</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>\n\n:   The expected text pattern or string.\n\n<code><span class=\"parameter-name\">timeout</span><span class=\"parameter-annotation-sep\">:</span> <span class=\"parameter-annotation\">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class=\"parameter-default-sep\">=</span> <span class=\"parameter-default\">None</span></code>\n\n:   The maximum time to wait for the expectation to pass. Defaults to `None`."
            }
        },
        "preamble": "# playwright.controls.ValueBox { #shiny.playwright.controls.ValueBox }\n\n`playwright.controls.ValueBox(self, page, id)`\n\nController for [](:func:`shiny.express.ui.value_box`)."
    },
    "playwright.expect.expect_attribute_to_have_value": {
        "attributes": {},
        "methods": {}
    },
    "playwright.expect.expect_not_to_have_attribute": {
        "attributes": {},
        "methods": {}
    },
    "playwright.expect.expect_not_to_have_class": {
        "attributes": {},
        "methods": {}
    },
    "playwright.expect.expect_not_to_have_style": {
        "attributes": {},
        "methods": {}
    },
    "playwright.expect.expect_to_change": {
        "attributes": {},
        "methods": {}
    },
    "playwright.expect.expect_to_have_class": {
        "attributes": {},
        "methods": {}
    },
    "playwright.expect.expect_to_have_style": {
        "attributes": {},
        "methods": {}
    },
    "pytest.create_app_fixture": {
        "attributes": {},
        "methods": {}
    },
    "pytest.ScopeName": {
        "attributes": {},
        "methods": {}
    },
    "run.run_shiny_app": {
        "attributes": {},
        "methods": {}
    },
    "run.ShinyAppProc": {
        "attributes": {},
        "methods": {
            "": {
                "content": "Methods"
            },
            "preamble": "| Name | Description |\n| --- | --- |\n| [close](#shiny.run.ShinyAppProc.close) | Closes the connection and terminates the process. |\n| [wait_until_ready](#shiny.run.ShinyAppProc.wait_until_ready) | Waits until the shiny app is ready to serve requests. |",
            "close": {
                "header": "close { #shiny.run.ShinyAppProc.close }",
                "content": "```python\nrun.ShinyAppProc.close()\n```\n\nCloses the connection and terminates the process.\n\nThis method is responsible for closing the connection and terminating the process associated with it."
            },
            "wait_until_ready": {
                "header": "wait_until_ready { #shiny.run.ShinyAppProc.wait_until_ready }",
                "content": "```python\nrun.ShinyAppProc.wait_until_ready(timeout_secs)\n```\n\nWaits until the shiny app is ready to serve requests."
            },
            "Parameters": {
                "header": "Parameters {.doc-section .doc-section-parameters}",
                "content": "| Name         | Type             | Description                                                        | Default    |\n|--------------|------------------|--------------------------------------------------------------------|------------|\n| timeout_secs | [float](`float`) | The maximum number of seconds to wait for the app to become ready. | _required_ |"
            },
            "Raises": {
                "header": "Raises {.doc-section .doc-section-raises}",
                "content": "| Name   | Type                                 | Description                                                          |\n|--------|--------------------------------------|----------------------------------------------------------------------|\n|        | [ConnectionError](`ConnectionError`) | If there is an error while starting the shiny app.                   |\n|        | [TimeoutError](`TimeoutError`)       | If the shiny app does not become ready within the specified timeout. |"
            }
        },
        "preamble": "# run.ShinyAppProc { #shiny.run.ShinyAppProc }\n\n```python\nrun.ShinyAppProc(self, proc, port, *, app_file)\n```\n\nClass that represents a running Shiny app process.\n\nThis class is a context manager that can be used to run a Shiny app in a subprocess. It provides a way to interact\nwith the app and terminate it when it is no longer needed."
    }
}
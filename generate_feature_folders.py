import os

import ollama

shiny_app_features = [
    "Create a simple Shiny app with a title and text output",
    "Add a slider input to control a numeric value",
    "Display the slider's value in a text output",
    "Use a text input to get user-entered text",
    "Show the entered text in a formatted output",
    "Create a select input with multiple choices",
    "Display the selected choice from the dropdown",
    "Add a checkbox to toggle a feature on or off",
    "Show a message based on the checkbox status",
    "Use radio buttons for mutually exclusive selections",
    "Display the selected radio button's value",
    "Organize inputs and outputs in a sidebar layout",
    "Use a fluid page layout for flexible content arrangement",
    "Set a title for the app's browser tab",
    "Add a header to the app's UI",
    "Include a paragraph of text in the UI",
    "Display a table of data",
    "Render a plot in the app",
    "Use HTML tags to customize the UI",
    "Apply basic CSS styling to UI elements",
    "Update an output based on a reactive input change",
    "Filter a dataset based on user input",
    "Display summary statistics of a dataset",
    "Create a reactive dataframe based on user selections",
    "Load data from a CSV file",
    "Display a subset of a dataframe based on filters",
    "Use `reactive.Calc` to perform complex calculations",
    "Use `reactive.Effect` to trigger side effects",
    "Update a plot based on user-selected data",
    "Dynamically update input choices based on another input",
    "Use `req()` to ensure input values are valid before proceeding",
    "Display a message if required inputs are missing",
    "Cache calculations to improve performance",
    "Use `reactive.isolate` to prevent unwanted updates",
    "Create a download button to download data",
    "Upload a file to the app and process it",
    "Create a scatter plot using `matplotlib`",
    "Create a bar chart using `matplotlib`",
    "Create a line plot using `matplotlib`",
    "Customize plot colors and labels",
    "Add a title and axis labels to a plot",
    "Create a histogram using `matplotlib`",
    "Use `seaborn` to create a more visually appealing plot",
    "Display a boxplot to visualize data distribution",
    "Create a heatmap to show correlations in data",
    "Use interactive plots with `plotly`",
    "Add hover tooltips to plots",
    "Create a plot with multiple subplots",
    "Change plot colors based on user input",
    "Add a legend to the plot",
    "Zoom and pan on an interactive plot",
    "Save a plot as an image file",
    "Display multiple plots in a tabbed layout",
    "Create a scatter plot with different point colors based on a variable",
    "Use `plotnine` for data visualization",
    "Create a tabbed interface for multiple panels",
    "Use a navigation bar to switch between pages",
    "Create a collapsible section to hide/show content",
    "Add a progress bar to indicate loading status",
    "Use alerts to display messages to the user",
    "Style the app with a custom CSS file",
    "Embed an image in the UI",
    "Create a hyperlink to an external website",
    "Use `shiny.ui.card` to group related content",
    "Organize elements in a grid layout",
    "Add spacing between UI elements",
    "Use `shiny.ui.row` and `shiny.ui.column` for flexible layouts",
    "Create a multi-page app using routing (if using a framework like `shiny.router`)",
    "Display tables with pagination and sorting",
    "Create a searchable table with filtering options",
    "Add row selection to a table",
    "Highlight rows based on user interaction",
    "Create a table with collapsible rows",
    "Stock market dashboard app",
    "Financial portfolio analysis app",
    "Sales forecasting app",
    "Customer segmentation app",
    "Market basket analysis app",
    "Supply chain optimization app",
    "Employee performance evaluation app",
    "Budgeting and expense tracking app",
    "ROI calculator app",
    "Break-even analysis app",
    "Patient outcome prediction app",
    "Disease diagnosis app",
    "Treatment efficacy analysis app",
    "Medical image analysis app",
    "Clinical trial management app",
    "Patient engagement and education app",
    "Telemedicine platform app",
    "Medical research data visualization app",
    "Public health surveillance app",
    "Health risk assessment app",
    "Sports analytics dashboard app",
    "Fitness tracking and goal setting app",
    "Workout routine generator app",
    "Nutrition planning and tracking app",
    "Injury risk assessment app",
    "Team performance analysis app",
    "Player development tracking app",
    "Fantasy sports league management app",
    "Event management and scheduling app",
    "Fan engagement and loyalty app",
    "Trip planning and itinerary app",
    "Route optimization app",
    "Traffic congestion analysis app",
    "Public transportation scheduling app",
    "Ride-sharing and carpooling app",
    "Travel recommendation and review app",
    "Flight and hotel booking app",
    "Travel expense tracking app",
    "Road trip planning and navigation app",
    "Bike and pedestrian route planning app",
    "Recipe recommendation and meal planning app",
    "Nutrition analysis and labeling app",
    "Food safety and inspection app",
    "Restaurant and menu management app",
    "Food delivery and ordering app",
    "Brewery and winery management app",
    "Coffee shop and cafe management app",
    "Food truck and cart management app",
    "Catering and event planning app",
    "Food waste reduction and recovery app",
    "Data filtering and sorting app",
    "Data aggregation and grouping app",
    "Data visualization dashboard app",
    "Interactive calculator app",
    "Quiz app with dynamic questions",
    "Survey app with real-time results",
    "Virtual scavenger hunt app",
    "Interactive tutorial app",
]

# iterate through shiny_app_features and create a folder for each item with a markdown file called "prompt.md"
for feature in shiny_app_features:
    response = ollama.chat(
        model="gemma2:9b",
        messages=[
            {
                "role": "user",
                "content": f'Given this response: "{feature}". Suggest an appropriate directory name to sum up this feature. Make it unique and Keep the naming professional and answer with just the name. Also, dont add any whitespaces or random symbols in the directory name and use _ instead',
            },
        ],
    )
    folder_name = response["message"]["content"]
    folder_name = (
        folder_name.strip()
        .replace(" ", "_")
        .replace("?", "")
        .replace("/", "")
        .replace("\n", "")
    )
    try:
        os.makedirs(folder_name, exist_ok=False)
    except FileExistsError:
        print(f"Folder {folder_name} already exists")
        os.makedirs(f"{folder_name}_1", exist_ok=False)
    with open(f"{folder_name}/PROMPT.md", "w") as f:
        f.write(f"{feature}")

[
    {
        "File Name": "express.module",
        "Usage": "express.module(fn)",
        "Description": "Create a Shiny module using Shiny Express syntax\n\nThis function is used to create a Shiny module, where the code inside the function\nuses Shiny Express syntax. This is in contrast to the pair of functions\n:func:`~shiny.module.ui()` and :func:`~shiny.module.server()`, which are used to\ncreate Shiny modules with Core syntax.",
        "Parameters": "\n<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\\[[Concatenate](`shiny._typing_extensions.Concatenate`)\\[[Inputs](`shiny.session._session.Inputs`), [Outputs](`shiny.session._session.Outputs`), [Session](`shiny.session._session.Session`), [P](`shiny.express._module.P`)\\], [R](`shiny.express._module.R`)\\]]{.parameter-annotation}</code>\n\n:   The function that defines the module. The first three parameters of this function must be `input`, `output`, and `session`. Any additional parameters can used to pass information to the module.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import module, render, ui\n\n\n@module\ndef counter(input, output, session, starting_value: int = 0):\n    count = reactive.value(starting_value)\n\n    ui.input_action_button(\"btn\", \"Increment\")\n\n    with ui.div():\n\n        @render.express\n        def current_count():\n            count()\n\n    @reactive.effect\n    @reactive.event(input.btn)\n    def increment():\n        count.set(count() + 1)\n\n\ncounter(\"one\")\nui.hr()\ncounter(\"two\")\n\n\n\n================"
    },
    {
        "File Name": "express.render.DataGrid",
        "Usage": "express.render.DataGrid(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height=None,\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
        "Description": "Holds the data and options for a [](:class:`~shiny.express.render.data_frame`) output, for a\nspreadsheet-like view.\n\nThis class is used to wrap the returned data frame from a `@render.data_frame`\nrender function. It allows you to specify options for the data grid, such as the\nwidth and height of the grid, whether to show a summary message, whether to show\nfilter inputs, whether the cells are editable, and how the cells are selected.\n\nWhile there are currently no execution or parameter differences between `DataGrid`\nand `DataTable` other than CSS styling in the browser, the two classes are kept\nseparate to allow for future extensibility.",
        "Parameters": "\n<code>[**data**]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>\n\n:   A [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [float](`float`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'fit-content\\']{.parameter-default}</code>\n\n:   A _maximum_ amount of horizontal space for the data grid to occupy, in CSS units (e.g. `\"400px\"`) or as a number, which will be interpreted as pixels. The default is `fit-content`, which sets the grid's width according to its contents. Set this to `100%` to use the maximum available horizontal space.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [float](`float`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A _maximum_ amount of vertical space for the data grid to occupy, in CSS units (e.g. `\"400px\"`) or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the grid will scroll. Set the height to `\"auto\"` to allow the grid to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).\n\n<code>[**summary**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \\| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   If `True` (the default), shows a message like \"Viewing rows 1 through 10 of 20\" below the grid when not all of the rows are being shown. If `False`, the message is not displayed. You can also specify a string template to customize the message, containing `{start}`, `{end}`, and `{total}` tokens. For example: `\"Viendo filas {start} a {end} de {total}\"`.\n\n<code>[**filters**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If `True`, shows a row of filter inputs below the headers, one for each column.\n\n<code>[**editable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If `True`, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.\n\n<code>[**selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectionModeInput](`shiny.express.render._data_frame_utils._selection.SelectionModeInput`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'none\\']{.parameter-default}</code>\n\n:   Single string or a `set`/`list`/`tuple` of string values to define possible ways to select data within the data frame.  Supported values: * Use `\"none\"` to disable any cell selections or editing. * Use `\"row\"` to allow a single row to be selected at a time. * Use `\"rows\"` to allow multiple rows to be selected by clicking on them individually.  Resolution rules: * If `\"none\"` is supplied, all other values will be ignored. * If both `\"row\"` and `\"rows\"` are supplied, `\"row\"` will be dropped (supporting `\"rows\"`).\n\n<code>[**styles**]{.parameter-name} [:]{.parameter-annotation-sep} [[StyleInfo](`shiny.express.render._data_frame_utils._styles.StyleInfo`) \\| [list](`list`)\\[[StyleInfo](`shiny.express.render._data_frame_utils._styles.StyleInfo`)\\] \\| [StyleFn](`shiny.express.render._data_frame_utils._styles.StyleFn`)\\[[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)\\] \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If `styles=None`, no styling will be applied.  Style info object key/value description: * `location`: This value `\"body\"` and is not required. * `rows`: The row numbers to which the style should be applied. If `None`, the     style will be applied to all rows. * `cols`: The column numbers to which the style should be applied. If `None`,     the style will be applied to all columns. * `style`: A dictionary of CSS properties and values to apply to the selected     rows and columns. Traditional _kebab-cased_ CSS property names (e.g.     `background-color`) will work in addition to _camelCased_ CSS property names     (e.g. `backgroundColor`). * `class`: A string of CSS class names to apply to the selected rows and columns.  If both `style` and `class` are missing or `None`, nothing will be applied. If both `rows` and `cols` are missing or `None`, the style will be applied to the complete data frame.\n\n<code>[**row_selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[RowSelectionModeDeprecated](`shiny.express.render._data_frame_utils._selection.RowSelectionModeDeprecated`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'deprecated\\']{.parameter-default}</code>\n\n:   Deprecated. Please use `selection_mode=` instead.\n",
        "Examples": "import pandas as pd\nimport seaborn as sns\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nheight = 350\nwidth = \"fit-content\"\ndf: reactive.value[pd.DataFrame] = reactive.value(\n    sns.load_dataset(\"anagrams\").iloc[:, 1:]\n)\n\n\ndef update_data_with_patch(patch):\n    df_copy = df().copy()\n    fn = str if patch[\"column_index\"] == 0 else int\n    df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n    df.set(df_copy)\n\n\nui.head_content(\n    ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n)\nui.input_select(\n    \"selection_mode\",\n    \"Selection mode\",\n    {\n        \"none\": \"(None)\",\n        \"row\": \"Single row\",\n        \"rows\": \"Multiple rows\",\n    },\n    selected=\"rows\",\n)\nui.input_switch(\"filters\", \"Filters\", True)\nui.input_switch(\"editable\", \"Editable\", True)\n\nwith ui.layout_column_wrap(width=1 / 2):\n    with ui.card():\n        ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\"))\n\n        @render.data_frame\n        def grid():\n            return render.DataGrid(\n                df(),\n                width=width,\n                height=height,\n                filters=input.filters(),\n                editable=input.editable(),\n                selection_mode=input.selection_mode(),\n            )\n\n        @grid.set_patch_fn\n        def _(*, patch: render.CellPatch):\n            update_data_with_patch(patch)\n            return patch[\"value\"]\n\n    with ui.card():\n        ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\"))\n\n        @render.data_frame\n        def table():\n            return render.DataTable(\n                df(),\n                width=width,\n                height=height,\n                filters=input.filters(),\n                editable=input.editable(),\n                selection_mode=input.selection_mode(),\n            )\n\n        @table.set_patch_fn\n        def _(*, patch: render.CellPatch):\n            update_data_with_patch(patch)\n            return patch[\"value\"]\n\n\n\n\n\n\nimport pandas as pd\n\nfrom shiny.express import render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nui.h2(\"Data Frame with Styles applied to 4 cells\")\n\n\n@render.data_frame\ndef my_df():\n    return render.DataGrid(\n        df,\n        styles=green_styles,\n    )\n\n\nui.hr()\n\nui.h2(\"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\"))\n\nui.tags.style(\n    ui.HTML(\n        \"\"\"\n    .posit-bg {\n        background-color: #242a26 ;\n    }\n    .posit-blue-bg {\n        background-color: #447099 ;\n    }\n    .posit-orange-bg {\n        background-color: #ED642F ;\n    }\n    \"\"\"\n    )\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\n@render.data_frame\ndef hi_df():\n    return render.DataGrid(\n        hi_pd,\n        styles=hi_styles,\n    )\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [to_payload](#shiny.express.render.DataGrid.to_payload) | Converts the `DataGrid` object to a payload dictionary. |\n\n### to_payload { #shiny.express.render.DataGrid.to_payload }\n\nexpress.render.DataGrid.to_payload()\n\nConverts the `DataGrid` object to a payload dictionary.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[FrameJson](`shiny.express.render._data_frame_utils._types.FrameJson`)]{.parameter-annotation}</code>\n\n:   The payload dictionary representing the `DataGrid` object.\n\n================"
    },
    {
        "File Name": "express.render.DataTable",
        "Usage": "express.render.DataTable(\n    self,\n    data,\n    *,\n    width='fit-content',\n    height='500px',\n    summary=True,\n    filters=False,\n    editable=False,\n    selection_mode='none',\n    styles=None,\n    row_selection_mode='deprecated',\n)",
        "Description": "Holds the data and options for a [](:class:`~shiny.express.render.data_frame`) output, for a\nspreadsheet-like view.\n\nThis class is used to wrap the returned data frame from a `@render.data_frame`\nrender function. It allows you to specify options for the data table, such as the\nwidth and height of the table, whether to show a summary message, whether to show\nfilter inputs, whether the cells are editable, and how the cells are selected.\n\nWhile there are currently no execution or parameter differences between `DataGrid`\nand `DataTable` other than CSS styling in the browser, the two classes are kept\nseparate to allow for future extensibility.",
        "Parameters": "\n<code>[**data**]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>\n\n:   A [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [float](`float`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'fit-content\\']{.parameter-default}</code>\n\n:   A _maximum_ amount of vertical space for the data table to occupy, in CSS units (e.g. `\"400px\"`) or as a number, which will be interpreted as pixels. The default is `fit-content`, which sets the table's width according to its contents. Set this to `100%` to use the maximum available horizontal space.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [float](`float`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'500px\\']{.parameter-default}</code>\n\n:   A _maximum_ amount of vertical space for the data table to occupy, in CSS units (e.g. `\"400px\"`) or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the table body will scroll. Set the height to `None` to allow the table to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).\n\n<code>[**summary**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \\| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   If `True` (the default), shows a message like \"Viewing rows 1 through 10 of 20\" below the grid when not all of the rows are being shown. If `False`, the message is not displayed. You can also specify a string template to customize the message, containing `{start}`, `{end}`, and `{total}` tokens. For example: `\"Viendo filas {start} a {end} de {total}\"`.\n\n<code>[**filters**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If `True`, shows a row of filter inputs below the headers, one for each column.\n\n<code>[**editable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If `True`, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.\n\n<code>[**selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectionModeInput](`shiny.express.render._data_frame_utils._selection.SelectionModeInput`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'none\\']{.parameter-default}</code>\n\n:   Single string or a `set`/`list`/`tuple` of string values to define possible ways to select data within the data frame.  Supported values: * Use `\"none\"` to disable any cell selections or editing. * Use `\"row\"` to allow a single row to be selected at a time. * Use `\"rows\"` to allow multiple rows to be selected by clicking on them individually.  Resolution rules: * If `\"none\"` is supplied, all other values will be ignored. * If both `\"row\"` and `\"rows\"` are supplied, `\"row\"` will be dropped (supporting `\"rows\"`).\n\n<code>[**styles**]{.parameter-name} [:]{.parameter-annotation-sep} [[StyleInfo](`shiny.express.render._data_frame_utils._styles.StyleInfo`) \\| [list](`list`)\\[[StyleInfo](`shiny.express.render._data_frame_utils._styles.StyleInfo`)\\] \\| [StyleFn](`shiny.express.render._data_frame_utils._styles.StyleFn`)\\[[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)\\] \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If `styles=None`, no styling will be applied.  Style info object key/value description: * `location`: This value `\"body\"` and is not required. * `rows`: The row numbers to which the style should be applied. If `None`, the     style will be applied to all rows. * `cols`: The column numbers to which the style should be applied. If `None`,     the style will be applied to all columns. * `style`: A dictionary of CSS properties and values to apply to the selected     rows and columns. Traditional _kebab-cased_ CSS property names (e.g.     `background-color`) will work in addition to _camelCased_ CSS property names     (e.g. `backgroundColor`). * `class`: A string of CSS class names to apply to the selected rows and columns.  If both `style` and `class` are missing or `None`, nothing will be applied. If both `rows` and `cols` are missing or `None`, the style will be applied to the complete data frame.\n\n<code>[**row_selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['deprecated'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'deprecated\\']{.parameter-default}</code>\n\n:   Deprecated. Please use `mode={row_selection_mode}_row` instead.\n",
        "Examples": "import pandas as pd\nimport seaborn as sns\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nheight = 350\nwidth = \"fit-content\"\ndf: reactive.value[pd.DataFrame] = reactive.value(\n    sns.load_dataset(\"anagrams\").iloc[:, 1:]\n)\n\n\ndef update_data_with_patch(patch):\n    df_copy = df().copy()\n    fn = str if patch[\"column_index\"] == 0 else int\n    df_copy.iat[patch[\"row_index\"], patch[\"column_index\"]] = fn(patch[\"value\"])\n    df.set(df_copy)\n\n\nui.head_content(\n    ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\")\n)\nui.input_select(\n    \"selection_mode\",\n    \"Selection mode\",\n    {\n        \"none\": \"(None)\",\n        \"row\": \"Single row\",\n        \"rows\": \"Multiple rows\",\n    },\n    selected=\"rows\",\n)\nui.input_switch(\"filters\", \"Filters\", True)\nui.input_switch(\"editable\", \"Editable\", True)\n\nwith ui.layout_column_wrap(width=1 / 2):\n    with ui.card():\n        ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataGrid\"))\n\n        @render.data_frame\n        def grid():\n            return render.DataGrid(\n                df(),\n                width=width,\n                height=height,\n                filters=input.filters(),\n                editable=input.editable(),\n                selection_mode=input.selection_mode(),\n            )\n\n        @grid.set_patch_fn\n        def _(*, patch: render.CellPatch):\n            update_data_with_patch(patch)\n            return patch[\"value\"]\n\n    with ui.card():\n        ui.card_header(\"Data Frame as \", ui.tags.code(\"render.DataTable\"))\n\n        @render.data_frame\n        def table():\n            return render.DataTable(\n                df(),\n                width=width,\n                height=height,\n                filters=input.filters(),\n                editable=input.editable(),\n                selection_mode=input.selection_mode(),\n            )\n\n        @table.set_patch_fn\n        def _(*, patch: render.CellPatch):\n            update_data_with_patch(patch)\n            return patch[\"value\"]\n\n\n\n\n\n\nimport pandas as pd\n\nfrom shiny.express import render, ui\n\ngreen_styles = [\n    {\n        \"rows\": [2, 4],\n        \"cols\": [2, 4],\n        \"style\": {\n            \"background-color\": \"mediumspringgreen\",\n            \"width\": \"300px\",\n            \"height\": \"100px\",\n        },\n    }\n]\n\nn = 6\ndf = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n    }\n)\n\nui.h2(\"Data Frame with Styles applied to 4 cells\")\n\n\n@render.data_frame\ndef my_df():\n    return render.DataGrid(\n        df,\n        styles=green_styles,\n    )\n\n\nui.hr()\n\nui.h2(\"Custom styles applied to all cells within a data frame \", ui.HTML(\"&#128075;\"))\n\nui.tags.style(\n    ui.HTML(\n        \"\"\"\n    .posit-bg {\n        background-color: #242a26 ;\n    }\n    .posit-blue-bg {\n        background-color: #447099 ;\n    }\n    .posit-orange-bg {\n        background-color: #ED642F ;\n    }\n    \"\"\"\n    )\n)\n\nhi_styles = [\n    {\n        # No `rows` or `cols` means apply to all cells\n        \"class\": \"posit-bg\",\n        \"style\": {\n            \"border\": \"transparent\",\n            \"color\": \"transparent\",\n        },\n    },\n    {\n        \"rows\": [3],\n        \"cols\": [2],\n        \"class\": \"posit-blue-bg\",\n        \"style\": {\n            \"width\": \"100px\",\n            \"height\": \"75px\",\n        },\n    },\n    {\n        \"cols\": [1, 3, 5],\n        \"class\": \"posit-blue-bg\",\n    },\n    {\n        \"cols\": [7],\n        \"rows\": [0, 1, 2, 3, 5],\n        \"class\": \"posit-orange-bg\",\n    },\n]\n\nn = 7\nhi_pd = pd.DataFrame(\n    {\n        \"a\": range(n),\n        \"b\": range(n, n * 2),\n        \"c\": range(n * 2, n * 3),\n        \"d\": range(n * 3, n * 4),\n        \"e\": range(n * 4, n * 5),\n        \"f\": range(n * 5, n * 6),\n        \"g\": range(n * 6, n * 7),\n        \"h\": range(n * 7, n * 8),\n        \"i\": range(n * 8, n * 9),\n    }\n)\n\n\n@render.data_frame\ndef hi_df():\n    return render.DataGrid(\n        hi_pd,\n        styles=hi_styles,\n    )\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [to_payload](#shiny.express.render.DataTable.to_payload) | Converts the `DataTable` object to a payload dictionary. |\n\n### to_payload { #shiny.express.render.DataTable.to_payload }\n\nexpress.render.DataTable.to_payload()\n\nConverts the `DataTable` object to a payload dictionary.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[FrameJson](`shiny.express.render._data_frame_utils._types.FrameJson`)]{.parameter-annotation}</code>\n\n:   The payload dictionary representing the `DataTable` object.\n\n================"
    },
    {
        "File Name": "express.render.download",
        "Usage": "express.render.download(\n    self,\n    fn=None,\n    *,\n    filename=None,\n    media_type=None,\n    encoding='utf-8',\n    label='Download',\n)",
        "Description": "Decorator to register a function to handle a download.\n\nThis decorator is used to register a function that will be called when the user\nclicks a download link or button. The decorated function may be sync or async, and\nshould do one of the following:\n\n* Return a string. This will be assumed to be a filename; Shiny will return this\n  file to the browser, and the downloaded file will have the same filename as the\n  original, with an inferred mime type. This is the most convenient IF the file\n  already exists on disk. But if the function must create a temporary file, then\n  this method should not be used, because the temporary file will not be deleted by\n  Shiny. Use the `yield` method instead.\n* `yield` one or more strings or bytestrings (`b\"...\"` or\n  `io.BytesIO().getvalue()`). If strings are yielded, they&#x27;ll be encoded in UTF-8.\n  (This is better for temp files as after you&#x27;re done yielding you can delete the\n  temp file, or use a tempfile.TemporaryFile context manager) With this method, it&#x27;s\n  important that the `@render.download` decorator have a `filename` argument, as the\n  decorated function won&#x27;t help with that.",
        "Parameters": "\n<code>[**filename**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [Callable](`typing.Callable`)\\[\\[\\], [str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The filename of the download.\n\n<code>[**media_type**]{.parameter-name} [:]{.parameter-annotation-sep} [None \\| [str](`str`) \\| [Callable](`typing.Callable`)\\[\\[\\], [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The media type of the download.\n\n<code>[**encoding**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'utf-8\\']{.parameter-default}</code>\n\n:   The encoding of the download.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'Download\\']{.parameter-default}</code>\n\n:   (Express only) A label for the button. Defaults to \"Download\".\n",
        "Examples": "import asyncio\nimport io\nimport os\nfrom datetime import date\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import render, ui\n\nui.page_opts(title=\"Various download examples\")\n\nwith ui.accordion(open=True):\n    with ui.accordion_panel(\"Simple case\"):\n        ui.markdown(\"Downloads a pre-existing file, using its existing name on disk.\")\n\n        @render.download(label=\"Download CSV\")\n        def download1():\n            \"\"\"\n            This is the simplest case. The implementation simply returns the name of a file.\n            Note that the function name (`download1`) determines which download_button()\n            corresponds to this function.\n            \"\"\"\n\n            path = os.path.join(os.path.dirname(__file__), \"mtcars.csv\")\n            return path\n\n    with ui.accordion_panel(\"Dynamic data generation\"):\n        ui.markdown(\"Downloads a PNG that's generated on the fly.\")\n\n        ui.input_text(\"title\", \"Plot title\", \"Random scatter plot\")\n        ui.input_slider(\"num_points\", \"Number of data points\", min=1, max=100, value=50)\n\n        @render.download(label=\"Download plot\", filename=\"image.png\")\n        def download2():\n            \"\"\"\n            Another way to implement a file download is by yielding bytes; either all at\n            once, like in this case, or by yielding multiple times. When using this\n            approach, you should pass a filename argument to @render.download, which\n            determines what the browser will name the downloaded file.\n            \"\"\"\n\n            print(input.num_points())\n            x = np.random.uniform(size=input.num_points())\n            y = np.random.uniform(size=input.num_points())\n            plt.figure()\n            plt.scatter(x, y)\n            plt.title(input.title())\n            with io.BytesIO() as buf:\n                plt.savefig(buf, format=\"png\")\n                yield buf.getvalue()\n\n    with ui.accordion_panel(\"Dynamic filename\"):\n        ui.markdown(\n            \"Demonstrates that filenames can be generated on the fly (and use Unicode characters!).\"\n        )\n\n        @render.download(\n            label=\"Download filename\",\n            filename=lambda: f\"\u65b0\u578b-{date.today().isoformat()}-{np.random.randint(100, 999)}.csv\",\n        )\n        async def download3():\n            await asyncio.sleep(0.25)\n            yield \"one,two,three\\n\"\n            yield \"\u65b0,1,2\\n\"\n            yield \"\u578b,4,5\\n\"\n\n    with ui.accordion_panel(\"Failed downloads\"):\n        ui.markdown(\n            \"Throws an error in the download handler, download should not succeed.\"\n        )\n\n        @render.download(label=\"Download\", filename=\"failuretest.txt\")\n        async def download4():\n            yield \"hello\"\n            raise Exception(\"This error was caused intentionally\")\n\n\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n\n================"
    },
    {
        "File Name": "express.render.image",
        "Usage": "express.render.image(self, _fn=None, *, delete_file=False)",
        "Description": "Reactively render a image file as an HTML image.",
        "Parameters": "\n<code>[**delete_file**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True``, the image file will be deleted after rendering.\n",
        "Examples": "from shiny.express import render\n\n\n@render.image\ndef image():\n    from pathlib import Path\n\n    dir = Path(__file__).resolve().parent\n    img = {\"src\": str(dir / \"posit-logo.png\"), \"width\": \"100px\"}\n    return img\n\n\n## type: binary\\n\n\n================"
    },
    {
        "File Name": "express.render.table",
        "Usage": "express.render.table(\n    self,\n    _fn=None,\n    *,\n    index=False,\n    classes='table shiny-table w-auto',\n    border=0,\n    **kwargs,\n)",
        "Description": "Reactively render a pandas ``DataFrame`` object (or similar) as a basic HTML\ntable.\n\nConsider using [](:class:`~shiny.express.render.data_frame`) instead of this renderer, as\nit provides high performance virtual scrolling, built-in filtering and sorting,\nand a better default appearance. This renderer may still be helpful if you\nuse pandas styling features that are not currently supported by\n[](:class:`~shiny.express.render.data_frame`).",
        "Parameters": "\n<code>[**index**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Whether to print index (row) labels. (Ignored for pandas [](:class:`~pandas.io.formats.style.Styler`) objects; call ``style.hide(axis=\"index\")`` from user code instead.)\n\n<code>[**classes**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'table shiny-table w-auto\\']{.parameter-default}</code>\n\n:   CSS classes (space separated) to apply to the resulting table. By default, we use `table shiny-table w-auto` which is designed to look reasonable with Bootstrap 5. (Ignored for pandas [](:class:`~pandas.io.formats.style.Styler`) objects; call ``style.set_table_attributes('class=\"dataframe table shiny-table w-auto\"')`` from user code instead.)\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional keyword arguments passed to ``pandas.DataFrame.to_html()`` or ``pandas.io.formats.style.Styler.to_html()``.\n",
        "Examples": "import pathlib\n\nimport pandas as pd\n\nfrom shiny.express import input, render, ui\n\ndir = pathlib.Path(__file__).parent\nmtcars = pd.read_csv(dir / \"mtcars.csv\")\n\n\nui.input_checkbox(\"highlight\", \"Highlight min/max values\")\n\n\n@render.table\ndef result():\n    if not input.highlight():\n        # If we're not highlighting values, we can simply\n        # return the pandas data frame as-is; @render.table\n        # will call .to_html() on it.\n        return mtcars\n    else:\n        # We need to use the pandas Styler API. The default\n        # formatting options for Styler are not the same as\n        # DataFrame.to_html(), so we set a few options to\n        # make them match.\n        return (\n            mtcars.style.set_table_attributes(\n                'class=\"dataframe shiny-table table w-auto\"'\n            )\n            .hide(axis=\"index\")\n            .format(\n                {\n                    \"mpg\": \"{0:0.1f}\",\n                    \"disp\": \"{0:0.1f}\",\n                    \"drat\": \"{0:0.2f}\",\n                    \"wt\": \"{0:0.3f}\",\n                    \"qsec\": \"{0:0.2f}\",\n                }\n            )\n            .set_table_styles([dict(selector=\"th\", props=[(\"text-align\", \"right\")])])\n            .highlight_min(color=\"silver\")\n            .highlight_max(color=\"yellow\")\n        )\n\n\n# Legend\nwith ui.panel_conditional(\"input.highlight\"):\n    with ui.panel_absolute(bottom=\"6px\", right=\"6px\", class_=\"p-1 bg-light border\"):\n        \"Yellow is maximum, grey is minimum\"\n\n\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n\n================"
    },
    {
        "File Name": "express.ui.accordion_panel",
        "Usage": "express.ui.accordion_panel(title, *, value=MISSING, icon=None, **kwargs)",
        "Description": "Context manager for single accordion panel.\n\nThis function wraps [](:func:`~shiny.ui.accordion_panel`).",
        "Parameters": "\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   A title to appear in the [](:func:`~shiny.ui.accordion_panel`)'s header.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\] \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   A character string that uniquely identifies this panel. If `MISSING`, the `title` will be used.\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[TagChild](`htmltools.TagChild`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~htmltools.Tag`) which is positioned just before the `title`.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Tag attributes to the `accordion-body` div Tag.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.accordion(id=\"acc\"):\n    for letter in \"ABCDE\":\n        with ui.accordion_panel(f\"Section {letter}\"):\n            f\"Some narrative for section {letter}\"\n\n\n@render.code\ndef acc_val():\n    return \"input.acc(): \" + str(input.acc())\n\n\n\n================"
    },
    {
        "File Name": "express.ui.accordion",
        "Usage": "express.ui.accordion(\n    id=None,\n    open=None,\n    multiple=True,\n    class_=None,\n    width=None,\n    height=None,\n    **kwargs,\n)",
        "Description": "Context manager for a vertically collapsing accordion.\n\nThis function wraps [](:func:`~shiny.ui.accordion`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, you can use `input.id()` in your server logic to determine which of the [](:func:`~shiny.ui.accordion_panel`)s are currently active. The value will correspond to the [](:func:`~shiny.ui.accordion_panel`)'s `value` argument.\n\n<code>[**open**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`) \\| [str](`str`) \\| [list](`list`)\\[[str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A list of [](:func:`~shiny.ui.accordion_panel`) values to open (i.e., show) by default. The default value of `None` will open the first [](:func:`~shiny.ui.accordion_panel`). Use a value of `True` to open all (or `False` to open none) of the items. It's only possible to open more than one panel when `multiple=True`.\n\n<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether multiple [](:func:`~shiny.ui.accordion_panel`) can be open at once.\n\n<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Additional CSS classes to include on the accordion div.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Any valid CSS unit; for example, height=\"100%\".\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Any valid CSS unit; for example, height=\"100%\".\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes to this tag.\n",
        "Examples": "from shiny.express import expressify, input, render, ui\n\n\n@expressify\ndef my_accordion(**kwargs):\n    with ui.accordion(**kwargs):\n        for letter in \"ABCDE\":\n            with ui.accordion_panel(f\"Section {letter}\"):\n                f\"Some narrative for section {letter}\"\n\n\nui.markdown(\"#### Single-select accordion\")\n\nmy_accordion(multiple=False, id=\"acc_single\")\n\n\n@render.code\ndef acc_single_val():\n    return \"input.acc_single(): \" + str(input.acc_single())\n\n\nui.br()\n\nui.markdown(\"#### Multi-select accordion\")\n\nmy_accordion(multiple=True, id=\"acc_multiple\")\n\n\n@render.code\ndef acc_multiple_val():\n    return \"input.acc_multiple(): \" + str(input.acc_multiple())\n\n\n\n================"
    },
    {
        "File Name": "express.ui.busy_indicators.options",
        "Usage": "express.ui.busy_indicators.options(\n    spinner_type=None,\n    spinner_color=None,\n    spinner_size=None,\n    spinner_delay=None,\n    spinner_selector=None,\n    fade_opacity=None,\n    fade_selector=None,\n    pulse_background=None,\n    pulse_height=None,\n    pulse_speed=None,\n)",
        "Description": "Customize spinning busy indicators.\n\nBusy indicators provide a visual cue to users when the server is busy calculating\noutputs or otherwise performing tasks (e.g., producing downloads). This function\nallows you to customize the appearance of those busy indicators. To apply the\ncustomization, include the result of this function inside the app&#x27;s UI.",
        "Parameters": "\n<code>[**spinner_type**]{.parameter-name} [:]{.parameter-annotation-sep} [[BusySpinnerType](`shiny.express.ui._busy_spinner_types.BusySpinnerType`) \\| [Path](`pathlib.Path`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The type of spinner. Pre-bundled types are listed in the `BusySpinnerType` type.  A `Path` to a local SVG file can also be provided. The SVG should adhere to the following rules: * The SVG itself should contain the animation. * It should avoid absolute sizes (the spinner's containing DOM element size is     set in CSS by `spinner_size`, so it should fill that container). * It should avoid setting absolute colors (the spinner's containing DOM     element color is set in CSS by `spinner_color`, so it should inherit that     color).\n\n<code>[**spinner_color**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The color of the spinner. This can be any valid CSS color. Defaults to the app's \"primary\" color (if Bootstrap is on the page).\n\n<code>[**spinner_size**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The size of the spinner. This can be any valid CSS size.\n\n<code>[**spinner_delay**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The amount of time to wait before showing the spinner. This can be any valid CSS time and can useful for not showing the spinner if the computation finishes quickly.\n\n<code>[**spinner_selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A character string containing a CSS selector for scoping the spinner customization. The default (`None`) will apply the spinner customization to the parent element of the spinner.\n\n<code>[**fade_opacity**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The opacity (a number between 0 and 1) for recalculating output. Set to 1 to \"disable\" the fade.\n\n<code>[**fade_selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A string containing a CSS selector for scoping the fade customization. The default (`None`) applies the fade customization to the parent element.\n\n<code>[**pulse_background**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A CCS background definition for the pulse. The default uses a [linear-gradient](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient) of the theme's indigo, purple, and pink colors.\n\n<code>[**pulse_height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The height of the pulsing banner. This can be any valid CSS size.\n\n<code>[**pulse_speed**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The speed of the pulsing banner. This can be any valid CSS time.\n",
        "Examples": "import os\nimport time\n\nimport numpy as np\nimport seaborn as sns\n\nfrom shiny.express import input, render, ui\n\nui.page_opts(title=\"Busy spinner demo\")\n\nwith ui.sidebar():\n    ui.input_selectize(\n        \"indicator_types\",\n        \"Busy indicator types\",\n        [\"spinners\", \"pulse\"],\n        multiple=True,\n        selected=[\"spinners\", \"pulse\"],\n    )\n\n    @render.download\n    def download():\n        time.sleep(3)\n        path = os.path.join(os.path.dirname(__file__), \"app-express.py\")\n        return path\n\n\nwith ui.card():\n    ui.card_header(\n        \"Plot that takes a few seconds to render\",\n        ui.input_task_button(\"simulate\", \"Simulate\"),\n        class_=\"d-flex justify-content-between align-items-center\",\n    )\n\n    @render.plot\n    def plot():\n        input.simulate()\n        time.sleep(3)\n        sns.lineplot(x=np.arange(100), y=np.random.randn(100))\n\n\nui.busy_indicators.options(spinner_type=\"bars3\")\n\n\n@render.ui\ndef indicator_types_ui():\n    return ui.busy_indicators.use(\n        spinners=\"spinners\" in input.indicator_types(),\n        pulse=\"pulse\" in input.indicator_types(),\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.card_footer",
        "Usage": "express.ui.card_footer(*args, **kwargs)",
        "Description": "Context manager for a card footer container\n\nThis function wraps [](:func:`~shiny.ui.card_footer`).\n\n\nA general container for the &quot;footer&quot; of a [](:func:`~shiny.express.ui.card`). This component is designed\nto be provided as a direct child to [](:func:`~shiny.express.ui.card`).\n\nThe footer has a different background color and border than the rest of the card.",
        "Parameters": "\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \\| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   Contents to the footer container. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional HTML attributes for the returned Tag.\n",
        "Examples": "from shiny.express import ui\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"This is the header\")\n    ui.p(\"This is the body.\")\n    ui.p(\"This is still the body.\")\n    ui.card_footer(\"This is the footer\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.card_header",
        "Usage": "express.ui.card_header(*args, container=ui.tags.div, **kwargs)",
        "Description": "Context manager for a card header container\n\nThis function wraps [](:func:`~shiny.ui.card_header`).\n\nA general container for the &quot;header&quot; of a [](:func:`~shiny.express.ui.card`). This component is designed\nto be provided as a direct child to [](:func:`~shiny.express.ui.card`).\n\nThe header has a different background color and border than the rest of the card.",
        "Parameters": "\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \\| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   Contents to the header container. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.\n\n<code>[**container**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagFunction](`htmltools.TagFunction`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [ui.tags.div]{.parameter-default}</code>\n\n:   Method for the returned Tag object. Defaults to [](:func:`~shiny.express.ui.tags.div`).\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional HTML attributes for the returned Tag.\n",
        "Examples": "from shiny.express import ui\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"This is the header\")\n    ui.p(\"This is the body.\")\n    ui.p(\"This is still the body.\")\n    ui.card_footer(\"This is the footer\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.card",
        "Usage": "express.ui.card(\n    full_screen=False,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    **kwargs,\n)",
        "Description": "Context manager for Bootstrap card component\n\nThis function wraps [](:func:`~shiny.ui.card`).\n\nA general purpose container for grouping related UI elements together with a border\nand optional padding. To learn more about `card()`s, see [this\narticle](https://rstudio.github.io/bslib/articles/cards.html).",
        "Parameters": "\n<code>[**full_screen**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If `True`, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Any valid CSS unit (e.g., `height=\"200px\"`). Doesn't apply when a card is made `full_screen` (in this case, consider setting a `height` in [](:func:`~shiny.experimental.ui.card_body`)).\n\n<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not to allow the card to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.express.ui.page_fillable`)).\n\n<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Additional CSS classes for the returned Tag.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   HTML attributes on the returned Tag.\n",
        "Examples": "from shiny.express import ui\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"This is the header\")\n    ui.p(\"This is the body.\")\n    ui.p(\"This is still the body.\")\n    ui.card_footer(\"This is the footer\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.Chat",
        "Usage": "express.ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)",
        "Description": "Create a chat interface.\n\nA UI component for building conversational interfaces. With it, end users can submit\nmessages, which will cause a `.on_user_submit()` callback to run. In that callback,\na response can be generated based on the chat&#x27;s `.messages()`, and appended to the\nchat using `.append_message()` or `.append_message_stream()`.\n\nHere&#x27;s a rough outline for how to implement a `Chat`:\n\n```python\nfrom shiny.express import ui\n\n# Create and display chat instance\nchat = ui.Chat(id=\"my_chat\")\nchat.ui()\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def _():\n    # Get messages currently in the chat\n    messages = chat.messages()\n    # Create a response message stream\n    response = await my_model.generate_response(messages, stream=True)\n    # Append the response into the chat\n    await chat.append_message_stream(response)\n```\n\nIn the outline above, `my_model.generate_response()` is a placeholder for\nthe function that generates a response based on the chat&#x27;s messages. This function\nwill look different depending on the model you&#x27;re using, but it will generally\ninvolve passing the messages to the model and getting a response back. Also, you&#x27;ll\ntypically have a choice to `stream=True` the response generation, and in that case,\nyou&#x27;ll use `.append_message_stream()` instead of `.append_message()` to append the\nresponse to the chat. Streaming is preferrable when available since it allows for\nmore responsive and scalable chat interfaces.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A unique identifier for the chat session. In Shiny Core, make sure this id matches a corresponding [](:func:`~shiny.express.ui.chat_ui`) call in the UI.\n\n<code>[**messages**]{.parameter-name} [:]{.parameter-annotation-sep} [[Sequence](`typing.Sequence`)\\[[Any](`typing.Any`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   A sequence of messages to display in the chat. Each message can be a dictionary with a `content` and `role` key. The `content` key should contain the message text, and the `role` key can be \"assistant\", \"user\", or \"system\". Note that system messages are not actually displayed in the chat, but will still be stored in the chat's `.messages()`.\n\n<code>[**on_error**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['auto', 'actual', 'sanitize', 'unhandled'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'auto\\']{.parameter-default}</code>\n\n:   How to handle errors that occur in response to user input. When `\"unhandled\"`, the app will stop running when an error occurs. Otherwise, a notification is displayed to the user and the app continues to run.  * `\"auto\"`: Sanitize the error message if the app is set to sanitize errors,   otherwise display the actual error message. * `\"actual\"`: Display the actual error message to the user. * `\"sanitize\"`: Sanitize the error message before displaying it to the user. * `\"unhandled\"`: Do not display any error message to the user.\n\n<code>[**tokenizer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TokenEncoding](`shiny.express.ui._chat_tokenizer.TokenEncoding`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The tokenizer to use for calculating token counts, which is required to impose `token_limits` in `.messages()`. If not provided, a default generic tokenizer is attempted to be loaded from the tokenizers library. A specific tokenizer may also be provided by following the `TokenEncoding` (tiktoken or tozenizers) protocol (e.g., `tiktoken.encoding_for_model(\"gpt-4o\")`).\n",
        "Examples": "from shiny.express import ui\n\n# Set some Shiny page options\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a welcome message\nwelcome = ui.markdown(\n    \"\"\"\n    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will\n    simply repeat it back to you. For more examples, see this\n    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/examples/chat).\n    \"\"\"\n)\n\n# Create a chat instance\nchat = ui.Chat(\n    id=\"chat\",\n    messages=[welcome],\n)\n\n# Display it\nchat.ui()\n\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit\nasync def _():\n    # Get the user's input\n    user = chat.user_input()\n    # Append a response to the chat\n    await chat.append_message(f\"You said: {user}\")\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [append_message](#shiny.express.ui.Chat.append_message) | Append a message to the chat. |\n| [append_message_stream](#shiny.express.ui.Chat.append_message_stream) | Append a message as a stream of message chunks. |\n| [clear_messages](#shiny.express.ui.Chat.clear_messages) | Clear all chat messages. |\n| [destroy](#shiny.express.ui.Chat.destroy) | Destroy the chat instance. |\n| [messages](#shiny.express.ui.Chat.messages) | Reactively read chat messages |\n| [on_user_submit](#shiny.express.ui.Chat.on_user_submit) | Define a function to invoke when user input is submitted. |\n| [set_user_message](#shiny.express.ui.Chat.set_user_message) | Deprecated. Use `update_user_input(value=value)` instead. |\n| [transform_assistant_response](#shiny.express.ui.Chat.transform_assistant_response) | Transform assistant responses. |\n| [transform_user_input](#shiny.express.ui.Chat.transform_user_input) | Transform user input. |\n| [ui](#shiny.express.ui.Chat.ui) | Place a chat component in the UI. |\n| [update_user_input](#shiny.express.ui.Chat.update_user_input) | Update the user input. |\n| [user_input](#shiny.express.ui.Chat.user_input) | Reactively read the user's message. |\n\n### append_message { #shiny.express.ui.Chat.append_message }\n\nexpress.ui.Chat.append_message(message)\n\nAppend a message to the chat.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Any](`typing.Any`)]{.parameter-annotation}</code>\n\n:   The message to append. A variety of message formats are supported including a string, a dictionary with `content` and `role` keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others.\n\n#### Note {.doc-section .doc-section-note}\n\nUse `.append_message_stream()` instead of this method when `stream=True` (or\nsimilar) is specified in model's completion method.\n\n### append_message_stream { #shiny.express.ui.Chat.append_message_stream }\n\nexpress.ui.Chat.append_message_stream(message)\n\nAppend a message as a stream of message chunks.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Iterable](`typing.Iterable`)\\[[Any](`typing.Any`)\\] \\| [AsyncIterable](`typing.AsyncIterable`)\\[[Any](`typing.Any`)\\]]{.parameter-annotation}</code>\n\n:   An iterable or async iterable of message chunks to append. A variety of message chunk formats are supported, including a string, a dictionary with `content` and `role` keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others.\n\n#### Note {.doc-section .doc-section-note}\n\nUse this method (over `.append_message()`) when `stream=True` (or similar) is\nspecified in model's completion method.\n\n### clear_messages { #shiny.express.ui.Chat.clear_messages }\n\nexpress.ui.Chat.clear_messages()\n\nClear all chat messages.\n\n### destroy { #shiny.express.ui.Chat.destroy }\n\nexpress.ui.Chat.destroy()\n\nDestroy the chat instance.\n\n### messages { #shiny.express.ui.Chat.messages }\n\nexpress.ui.Chat.messages(\n    format=MISSING,\n    token_limits=None,\n    transform_user='all',\n    transform_assistant=False,\n)\n\nReactively read chat messages\n\nObtain chat messages within a reactive context. The default behavior is\nintended for passing messages along to a model for response generation where\nyou typically want to:\n\n1. Cap the number of tokens sent in a single request (i.e., `token_limits`).\n2. Apply user input transformations (i.e., `transform_user`), if any.\n3. Not apply assistant response transformations (i.e., `transform_assistant`)\n   since these are predominantly for display purposes (i.e., the model shouldn&#x27;t\n   concern itself with how the responses are displayed).\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \\| [ProviderMessageFormat](`shiny.express.ui._chat_provider_types.ProviderMessageFormat`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   The message format to return. The default value of `MISSING` means chat messages are returned as [](:class:`ChatMessage`) objects (a dictionary with `content` and `role` keys). Other supported formats include:  * `\"anthropic\"`: Anthropic message format. * `\"google\"`: Google message (aka content) format. * `\"langchain\"`: LangChain message format. * `\"openai\"`: OpenAI message format. * `\"ollama\"`: Ollama message format.\n\n<code>[**token_limits**]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\\[[int](`int`), [int](`int`)\\] \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Limit the conversation history based on token limits. If specified, only the most recent messages that fit within the token limits are returned. This is useful for avoiding \"exceeded token limit\" errors when sending messages to the relevant model, while still providing the most recent context available. A specified value must be a tuple of two integers. The first integer is the maximum number of tokens that can be sent to the model in a single request. The second integer is the amount of tokens to reserve for the model's response. Note that token counts based on the `tokenizer` provided to the `Chat` constructor.\n\n<code>[**transform_user**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['all', 'last', 'none'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'all\\']{.parameter-default}</code>\n\n:   Whether to return user input messages with transformation applied. This only matters if a `transform_user_input` was provided to the chat constructor. The default value of `\"all\"` means all user input messages are transformed. The value of `\"last\"` means only the last user input message is transformed. The value of `\"none\"` means no user input messages are transformed.\n\n<code>[**transform_assistant**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Whether to return assistant messages with transformation applied. This only matters if an `transform_assistant_response` was provided to the chat constructor.\n\n#### Note {.doc-section .doc-section-note}\n\nMessages are listed in the order they were added. As a result, when this method\nis called in a `.on_user_submit()` callback (as it most often is), the last\nmessage will be the most recent one submitted by the user.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\\[[ChatMessage](`shiny.express.ui._chat_types.ChatMessage`), ...\\]]{.parameter-annotation}</code>\n\n:   A tuple of chat messages.\n\n### on_user_submit { #shiny.express.ui.Chat.on_user_submit }\n\nexpress.ui.Chat.on_user_submit(fn=None)\n\nDefine a function to invoke when user input is submitted.\n\nApply this method as a decorator to a function (`fn`) that should be invoked when the\nuser submits a message. The function should take no arguments.\n\nIn many cases, the implementation of `fn` should do at least the following:\n\n1. Call `.messages()` to obtain the current chat history.\n2. Generate a response based on those messages.\n3. Append the response to the chat history using `.append_message()` (\n   or `.append_message_stream()` if the response is streamed).\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[SubmitFunction](`shiny.express.ui._chat.SubmitFunction`) \\| [SubmitFunctionAsync](`shiny.express.ui._chat.SubmitFunctionAsync`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A function to invoke when user input is submitted.\n\n#### Note {.doc-section .doc-section-note}\n\nThis method creates a reactive effect that only gets invalidated when the user\nsubmits a message. Thus, the function `fn` can read other reactive dependencies,\nbut it will only be re-invoked when the user submits a message.\n\n### set_user_message { #shiny.express.ui.Chat.set_user_message }\n\nexpress.ui.Chat.set_user_message(value)\n\nDeprecated. Use `update_user_input(value=value)` instead.\n\n### transform_assistant_response { #shiny.express.ui.Chat.transform_assistant_response }\n\nexpress.ui.Chat.transform_assistant_response(fn=None)\n\nTransform assistant responses.\n\nUse this method as a decorator on a function (`fn`) that transforms assistant\nresponses before displaying them in the chat. This is useful for post-processing\nmodel responses before displaying them to the user.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[TransformAssistantResponseFunction](`shiny.express.ui._chat.TransformAssistantResponseFunction`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A function that takes a string and returns either a string, [](:class:`shiny.express.ui.HTML`), or `None`. If `fn` returns a string, it gets interpreted and parsed as a markdown on the client (and the resulting HTML is then sanitized). If `fn` returns [](:class:`shiny.express.ui.HTML`), it will be displayed as-is. If `fn` returns `None`, the response is effectively ignored.\n\n#### Note {.doc-section .doc-section-note}\n\nWhen doing an `.append_message_stream()`, `fn` gets called on every chunk of the\nresponse (thus, it should be performant), and can optionally access more\ninformation (i.e., arguments) about the stream. The 1st argument (required)\ncontains the accumulated content, the 2nd argument (optional) contains the\ncurrent chunk, and the 3rd argument (optional) is a boolean indicating whether\nthis chunk is the last one in the stream.\n\n### transform_user_input { #shiny.express.ui.Chat.transform_user_input }\n\nexpress.ui.Chat.transform_user_input(fn=None)\n\nTransform user input.\n\nUse this method as a decorator on a function (`fn`) that transforms user input\nbefore storing it in the chat messages returned by `.messages()`. This is\nuseful for implementing RAG workflows, like taking a URL and scraping it for\ntext before sending it to the model.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[TransformUserInput](`shiny.express.ui._chat.TransformUserInput`) \\| [TransformUserInputAsync](`shiny.express.ui._chat.TransformUserInputAsync`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A function to transform user input before storing it in the chat `.messages()`. If `fn` returns `None`, the user input is effectively ignored, and `.on_user_submit()` callbacks are suspended until more input is submitted. This behavior is often useful to catch and handle errors that occur during transformation. In this case, the transform function should append an error message to the chat (via `.append_message()`) to inform the user of the error.\n\n### ui { #shiny.express.ui.Chat.ui }\n\nexpress.ui.Chat.ui(\n    messages=None,\n    placeholder='Enter a message...',\n    width='min(680px, 100%)',\n    height='auto',\n    fill=True,\n    **kwargs,\n)\n\nPlace a chat component in the UI.\n\nThis method is only relevant fpr Shiny Express. In Shiny Core, use\n[](:func:`~shiny.express.ui.chat_ui`) instead to insert the chat UI.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**messages**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Sequence](`typing.Sequence`)\\[[str](`str`) \\| [ChatMessage](`shiny.express.ui._chat_types.ChatMessage`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A sequence of messages to display in the chat. Each message can be either a string or a dictionary with `content` and `role` keys. The `content` key should contain the message text, and the `role` key can be \"assistant\" or \"user\".\n\n<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'Enter a message...\\']{.parameter-default}</code>\n\n:   Placeholder text for the chat input.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.express.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'min(680px, 100%)\\']{.parameter-default}</code>\n\n:   The width of the chat container.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.express.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'auto\\']{.parameter-default}</code>\n\n:   The height of the chat container.\n\n<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether the chat should vertically take available space inside a fillable container.\n\n<code>[**kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional attributes for the chat container element.\n\n### update_user_input { #shiny.express.ui.Chat.update_user_input }\n\nexpress.ui.Chat.update_user_input(value=None, placeholder=None)\n\nUpdate the user input.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The value to set the user input to.\n\n<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The placeholder text for the user input.\n\n### user_input { #shiny.express.ui.Chat.user_input }\n\nexpress.ui.Chat.user_input(transform=False)\n\nReactively read the user&#x27;s message.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**transform**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Whether to apply the user input transformation function (if one was provided).\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation}</code>\n\n:   The user input message (before any transformation).\n\n#### Note {.doc-section .doc-section-note}\n\nMost users shouldn't need to use this method directly since the last item in\n`.messages()` contains the most recent user input. It can be useful for:\n\n  1. Taking a reactive dependency on the user's input outside of a `.on_user_submit()` callback.\n  2. Maintaining message state separately from `.messages()`.\n\n================"
    },
    {
        "File Name": "express.ui.include_css",
        "Usage": "express.ui.include_css(path, *, method='link')",
        "Description": "Include a CSS file.",
        "Parameters": "\n<code>[**path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`) \\| [str](`str`)]{.parameter-annotation}</code>\n\n:   A path to a CSS file.\n\n<code>[**method**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['link', 'link_files', 'inline'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'link\\']{.parameter-default}</code>\n\n:   One of the following:  * ``\"link\"`` is the link to the CSS file via a [](:func:`~shiny.express.ui.tags.link`) tag. This   method is generally preferable to ``\"inline\"`` since it allows the browser to   cache the file. * ``\"link_files\"`` is the same as ``\"link\"``, but also allow for the CSS file to   request other files within ``path``'s immediate parent directory (e.g.,   ``@import()`` another file). Note that this isn't the default behavior because   you should **be careful not to include files in the same directory as ``path``   that contain sensitive information**. A good general rule of thumb to follow   is to have ``path`` be located in a subdirectory of the app directory. For   example, if the app's source is located at ``/app/app.py``, then ``path``   should be somewhere like ``/app/css/custom.css`` (and all the other relevant   accompanying 'safe' files should be located under ``/app/css/``). * ``\"inline\"`` is the inline the CSS file contents within a   [](:func:`~shiny.express.ui.tags.style`) tag.\n",
        "Examples": "from pathlib import Path\n\nfrom shiny.express import ui\n\ncss_file = Path(__file__).parent / \"css\" / \"styles.css\"\n\n\"Almost before we knew it, we had left the ground!!!\"\n\nui.include_css(css_file)\n\n# Style individual elements with an attribute dictionary.\nui.p(\"Bold text\", {\"style\": \"font-weight: bold\"})\n\n\nbody {\n  font-size: 3rem;\n  background-color: pink\n}\n\n\n\n================"
    },
    {
        "File Name": "express.ui.include_js",
        "Usage": "express.ui.include_js(path, *, method='link', **kwargs)",
        "Description": "Include a JavaScript file.",
        "Parameters": "\n<code>[**path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`) \\| [str](`str`)]{.parameter-annotation}</code>\n\n:   A path to a JS file.\n\n<code>[**method**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['link', 'link_files', 'inline'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'link\\']{.parameter-default}</code>\n\n:   One of the following:  * ``\"link\"`` is the link to the CSS file via a [](:func:`~shiny.express.ui.tags.link`) tag. This   method is generally preferable to ``\"inline\"`` since it allows the browser to   cache the file. * ``\"link_files\"`` is the same as ``\"link\"``, but also allow for the CSS file to   request other files within ``path``'s immediate parent directory (e.g.,   ``@import()`` another file). Note that this isn't the default behavior because   you should **be careful not to include files in the same directory as ``path``   that contain sensitive information**. A good general rule of thumb to follow   is to have ``path`` be located in a subdirectory of the app directory. For   example, if the app's source is located at ``/app/app.py``, then ``path``   should be somewhere like ``/app/css/custom.css`` (and all the other relevant   accompanying 'safe' files should be located under ``/app/css/``). * ``\"inline\"`` is the inline the CSS file contents within a   [](:func:`~shiny.express.ui.tags.style`) tag.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes which are passed on to `~shiny.express.ui.tags.script`.\n",
        "Examples": "from pathlib import Path\n\nfrom shiny.express import ui\n\njs_file = Path(__file__).parent / \"js\" / \"app.js\"\n\n\"If you see this page before 'OK'-ing the alert box, something went wrong\"\n\nui.include_js(js_file)\n\n\nalert(\"If you're seeing this, the javascript file was included successfully.\");\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_action_button",
        "Usage": "express.ui.input_action_button(\n    id,\n    label,\n    *,\n    icon=None,\n    width=None,\n    disabled=False,\n    **kwargs,\n)",
        "Description": "Creates an action button whose value is initially zero, and increments by one each\ntime it is pressed.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n\n<code>[**disabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If `True`, the button will not be clickable. Use [](:func:`~shiny.express.ui.update_action_button`) to dynamically enable/disable the button.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes to be applied to the button.\n",
        "Examples": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500)\nui.input_action_button(\"go\", \"Go!\", class_=\"btn-success\")\n\n\n@render.plot(alt=\"A histogram\")\n# Use reactive.event() to invalidate the plot only when the button is pressed\n# (not when the slider is changed)\n@reactive.event(input.go, ignore_none=False)\ndef plot():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(input.n())\n    fig, ax = plt.subplots()\n    ax.hist(x, bins=30, density=True)\n    return fig\n\n\n\n\n\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_text(\"name\", \"Your Name\")\nui.input_action_button(\"greet\", \"Say Hello\", disabled=True)\n\n\n@reactive.effect\n@reactive.event(input.name)\ndef set_button_state():\n    if input.name():\n        ui.update_action_button(\"greet\", disabled=False)\n    else:\n        ui.update_action_button(\"greet\", disabled=True)\n\n\n@render.ui\n@reactive.event(input.greet)\ndef hello():\n    return ui.p(f\"Hello, {input.name()}!\", class_=\"fs-1 text-primary mt-3\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_action_link",
        "Usage": "express.ui.input_action_link(id, label, *, icon=None, **kwargs)",
        "Description": "Creates a link whose value is initially zero, and increments by one each time it is\npressed.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes to be applied to the link.\n",
        "Examples": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"n\", \"Number of observations\", min=0, max=1000, value=500)\nui.input_action_link(\"go\", \"Go!\")\n\n\n@render.plot(alt=\"A histogram\")\n# reactive.event() to invalidate the plot when the button is pressed but not when\n# the slider is changed\n@reactive.event(input.go, ignore_none=False)\ndef plot():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(input.n())\n    fig, ax = plt.subplots()\n    ax.hist(x, bins=30, density=True)\n    return fig\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_checkbox_group",
        "Usage": "express.ui.input_checkbox_group(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
        "Description": "Create a group of checkboxes that can be used to toggle multiple choices\nindependently.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[ChoicesArg](`shiny.express.ui._input_check_radio.ChoicesArg`)]{.parameter-annotation}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [list](`list`)\\[[str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If `True`, the result is displayed inline.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'.\n",
        "Examples": "from shiny import req\nfrom shiny.express import input, render, ui\n\nui.input_checkbox_group(\n    \"colors\",\n    \"Choose color(s):\",\n    {\n        \"red\": ui.span(\"Red\", style=\"color: #FF0000;\"),\n        \"green\": ui.span(\"Green\", style=\"color: #00AA00;\"),\n        \"blue\": ui.span(\"Blue\", style=\"color: #0000AA;\"),\n    },\n)\n\n\n@render.ui\ndef val():\n    req(input.colors())\n    return \"You chose \" + \", \".join(input.colors())\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_checkbox",
        "Usage": "express.ui.input_checkbox(id, label, value=False, *, width=None)",
        "Description": "Create a checkbox that can be used to specify logical values.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Initial value.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n",
        "Examples": "from shiny.express import input, render, ui\n\nui.input_checkbox(\"somevalue\", \"Some value\", False)\n\n\n@render.ui\ndef value():\n    return input.somevalue()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_dark_mode",
        "Usage": "express.ui.input_dark_mode(id=None, mode=None, **kwargs)",
        "Description": "Creates a dark mode switch input that toggles the app between dark and light modes.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An optional ID for the dark mode switch. When included, the current color mode is reported in the value of the input with this ID.\n\n<code>[**mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[BootstrapColorMode](`shiny.express.ui._input_dark_mode.BootstrapColorMode`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The initial mode of the dark mode switch. By default or when set to `None`, the user's system settings for the preferred color scheme will be used. Otherwise, set to `\"light\"` or `\"dark\"` to force the initial mode.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional attributes to be added to the dark mode switch, such as `class_` or `style`.\n",
        "Examples": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.page_opts(title=\"Shiny Dark Mode\", fillable=\"One\")\n\nwith ui.nav_panel(\"One\"):\n    with ui.layout_sidebar():\n        with ui.sidebar():\n            ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)\n\n        @render.plot(alt=\"A histogram\")\n        def plot() -> object:\n            np.random.seed(19680801)\n            x = 100 + 15 * np.random.randn(437)\n\n            fig, ax = plt.subplots()\n            ax.hist(x, input.n(), density=True)\n\n            # Theme the plot to match light/dark mode\n            fig.patch.set_facecolor(\"none\")\n            ax.set_facecolor(\"none\")\n\n            color_fg = \"black\" if input.mode() == \"light\" else \"silver\"\n            ax.tick_params(axis=\"both\", colors=color_fg)\n            ax.spines[\"bottom\"].set_color(color_fg)\n            ax.spines[\"top\"].set_color(color_fg)\n            ax.spines[\"left\"].set_color(color_fg)\n            ax.spines[\"right\"].set_color(color_fg)\n\n            return fig\n\n\nwith ui.nav_panel(\"Two\"):\n    with ui.layout_column_wrap():\n        with ui.card():\n            \"Second page content.\"\n\n        with ui.card():\n            ui.card_header(\"More content on the second page.\")\n            ui.input_action_button(\"make_light\", \"Switch to light mode\")\n            ui.input_action_button(\"make_dark\", \"Switch to dark mode\")\n\nui.nav_spacer()\nwith ui.nav_control():\n    ui.input_dark_mode(id=\"mode\")\n\n\n@reactive.effect\n@reactive.event(input.make_light)\ndef _():\n    ui.update_dark_mode(\"light\")\n\n\n@reactive.effect\n@reactive.event(input.make_dark)\ndef _():\n    ui.update_dark_mode(\"dark\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_date_range",
        "Usage": "express.ui.input_date_range(\n    id,\n    label,\n    *,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    separator=' to ',\n    width=None,\n    autoclose=True,\n)",
        "Description": "Creates a pair of text inputs which, when clicked on, bring up calendars that the\nuser can click on to select dates.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**start**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The initial start date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.\n\n<code>[**end**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The initial end date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.\n\n<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'yyyy-mm-dd\\']{.parameter-default}</code>\n\n:   The format of the date to display in the browser.\n\n<code>[**startview**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'month\\']{.parameter-default}</code>\n\n:   The date range shown when the input object is first clicked. Can be \"month\" (the default), \"year\", or \"decade\".\n\n<code>[**weekstart**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>\n\n:   Which day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n\n<code>[**language**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'en\\']{.parameter-default}</code>\n\n:   The language used for month and day names. Default is \"en\". Other valid values include \"ar\", \"az\", \"bg\", \"bs\", \"ca\", \"cs\", \"cy\", \"da\", \"de\", \"el\", \"en-AU\", \"en-GB\", \"eo\", \"es\", \"et\", \"eu\", \"fa\", \"fi\", \"fo\", \"fr-CH\", \"fr\", \"gl\", \"he\", \"hr\", \"hu\", \"hy\", \"id\", \"is\", \"it-CH\", \"it\", \"ja\", \"ka\", \"kh\", \"kk\", \"ko\", \"kr\", \"lt\", \"lv\", \"me\", \"mk\", \"mn\", \"ms\", \"nb\", \"nl-BE\", \"nl\", \"no\", \"pl\", \"pt-BR\", \"pt\", \"ro\", \"rs-latin\", \"rs\", \"ru\", \"sk\", \"sl\", \"sq\", \"sr-latin\", \"sr\", \"sv\", \"sw\", \"th\", \"tr\", \"uk\", \"vi\", \"zh-CN\", and \"zh-TW\".\n\n<code>[**separator**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\' to \\']{.parameter-default}</code>\n\n:   String to display between the start and end input boxes.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n\n<code>[**autoclose**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not to close the datepicker immediately when a date is selected.\n",
        "Examples": "from datetime import date\n\nfrom shiny.express import ui\n\n# Default start and end is the current date in the client's time zone\nui.input_date_range(\"daterange1\", \"Date range:\")\n# Set start and end dates\nui.input_date_range(\n    \"daterange2\", \"Set start and end date:\", start=\"2001-01-01\", end=\"2010-12-31\"\n)\n# Start and end are always specified in yyyy-mm-dd, even if the display\n# format is different\nui.input_date_range(\n    \"daterange3\",\n    \"Min, max, start, and end dates are set with custom format and separator:\",\n    start=\"2001-01-01\",\n    end=\"2010-12-31\",\n    min=\"2001-01-01\",\n    max=\"2012-12-21\",\n    format=\"mm/dd/yy\",\n    separator=\" - \",\n)\n# Pass in Date objects\nui.input_date_range(\n    \"daterange4\",\n    \"Default start and end use date objects:\",\n    start=date(2001, 1, 1),\n    end=date(2010, 12, 31),\n)\n# Use different language and different first day of week\nui.input_date_range(\n    \"daterange5\",\n    \"Language is German and we starts on Monday:\",\n    language=\"de\",\n    weekstart=1,\n)\n# Start with decade view instead of default month view\nui.input_date_range(\n    \"daterange6\", \"Start Date picker in Decade view:\", startview=\"decade\"\n)\n# Set width of the daterange field\nui.input_date_range(\"daterange7\", \"Set width of text input:\", width=\"600px\")\n# Set autoclose to false\nui.input_date_range(\"daterange8\", \"Auto close is disabled:\", autoclose=False)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_date",
        "Usage": "express.ui.input_date(\n    id,\n    label,\n    *,\n    value=None,\n    min=None,\n    max=None,\n    format='yyyy-mm-dd',\n    startview='month',\n    weekstart=0,\n    language='en',\n    width=None,\n    autoclose=True,\n    datesdisabled=None,\n    daysofweekdisabled=None,\n)",
        "Description": "Creates a text input which, when clicked on, brings up a calendar that the user can\nclick on to select dates.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The starting date. Either a [](:class:`~datetime.date`) object, or a string in `yyyy-mm-dd` format. If None (the default), will use the current date in the client's time zone.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.\n\n<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'yyyy-mm-dd\\']{.parameter-default}</code>\n\n:   The format of the date to display in the browser. Defaults to `\"yyyy-mm-dd\"`.\n\n<code>[**startview**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'month\\']{.parameter-default}</code>\n\n:   The date range shown when the input object is first clicked. Can be \"month\" (the default), \"year\", or \"decade\".\n\n<code>[**weekstart**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>\n\n:   Which day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).\n\n<code>[**language**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'en\\']{.parameter-default}</code>\n\n:   The language used for month and day names. Default is \"en\". Other valid values include \"ar\", \"az\", \"bg\", \"bs\", \"ca\", \"cs\", \"cy\", \"da\", \"de\", \"el\", \"en-AU\", \"en-GB\", \"eo\", \"es\", \"et\", \"eu\", \"fa\", \"fi\", \"fo\", \"fr-CH\", \"fr\", \"gl\", \"he\", \"hr\", \"hu\", \"hy\", \"id\", \"is\", \"it-CH\", \"it\", \"ja\", \"ka\", \"kh\", \"kk\", \"ko\", \"kr\", \"lt\", \"lv\", \"me\", \"mk\", \"mn\", \"ms\", \"nb\", \"nl-BE\", \"nl\", \"no\", \"pl\", \"pt-BR\", \"pt\", \"ro\", \"rs-latin\", \"rs\", \"ru\", \"sk\", \"sl\", \"sq\", \"sr-latin\", \"sr\", \"sv\", \"sw\", \"th\", \"tr\", \"uk\", \"vi\", \"zh-CN\", and \"zh-TW\".\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n\n<code>[**autoclose**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not to close the datepicker immediately when a date is selected.\n\n<code>[**datesdisabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[list](`list`)\\[[str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Which dates should be disabled (in `yyyy-mm-dd` format).\n\n<code>[**daysofweekdisabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[list](`list`)\\[[int](`int`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Days of the week that should be disabled. Should be a integer vector with values from 0 (Sunday) to 6 (Saturday).\n",
        "Examples": "from datetime import date\n\nfrom shiny.express import ui\n\nui.input_date(\"date1\", \"Has default date:\", value=\"2016-02-29\")\n# Default value is the date in client's time zone\nui.input_date(\"date2\", \"Client's current date:\")\n# value is always yyyy-mm-dd, even if the display format is different\nui.input_date(\"date3\", \"Format mm/dd/yy:\", value=\"2016-02-29\", format=\"mm/dd/yy\")\n# Pass in a Date object\nui.input_date(\"date4\", \"Default uses date object:\", value=date(2016, 2, 29))\n# Use different language and different first day of week\nui.input_date(\n    \"date5\",\n    \"Language is German and the week starts on Monday:\",\n    language=\"ru\",\n    weekstart=1,\n)\n# Start with decade view instead of default month view\nui.input_date(\"date6\", \"Start Date picker in Decade view:\", startview=\"decade\")\n# Disable Mondays and Tuesdays.\nui.input_date(\"date7\", \"Disable Monday and Tuesday:\", daysofweekdisabled=[1, 2])\n# Disable specific dates.\nui.input_date(\n    \"date8\",\n    \"Disable specific dates:\",\n    value=\"2016-02-29\",\n    datesdisabled=[\"2016-03-01\", \"2016-03-02\"],\n)\n# Set min and max dates.\nui.input_date(\n    \"date9\",\n    \"Set min and max dates:\",\n    value=\"2016-02-03\",\n    min=\"2016-02-01\",\n    max=\"2016-02-29\",\n)\n# Set width of the date field\nui.input_date(\"date10\", \"Set width of text input:\", width=\"600px\")\n# Set autoclose to false\nui.input_date(\"date11\", \"Auto close is disabled:\", autoclose=False)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_file",
        "Usage": "express.ui.input_file(\n    id,\n    label,\n    *,\n    multiple=False,\n    accept=None,\n    width=None,\n    button_label='Browse...',\n    placeholder='No file selected',\n    capture=None,\n)",
        "Description": "Create a file upload control that can be used to upload one or more files.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Whether the user should be allowed to select and upload multiple files at once.\n\n<code>[**accept**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [list](`list`)\\[[str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Unique file type specifier(s) which give the browser a hint as to the type of file the server expects. Many browsers use this to prevent the user from selecting an invalid file. Examples of valid values include a case insensitive extension (e.g. ``.csv`` or ``.rds``), a valid MIME type (e.g. ``text/plain`` or ``application/pdf``) or one of ``audio/*``, ``video/*``, or ``image/*`` meaning any audio, video, or image type, respectively.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n\n<code>[**button_label**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'Browse...\\']{.parameter-default}</code>\n\n:   The label used on the button.\n\n<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'No file selected\\']{.parameter-default}</code>\n\n:   The text to show on the input before a file has been uploaded.\n\n<code>[**capture**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Literal](`typing.Literal`)\\['environment', 'user'\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   On mobile devices, this can be used to open the device's camera for input. If \"environment\", it will open the rear-facing camera. If \"user\", it will open the front-facing camera. By default, it will accept either still photos or video. To accept only still photos, use ``accept=\"image/*\"``; to accept only video, use ``accept=\"video/*\"``.\n",
        "Examples": "import pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.types import FileInfo\n\nui.input_file(\"file1\", \"Choose CSV File\", accept=[\".csv\"], multiple=False)\nui.input_checkbox_group(\n    \"stats\",\n    \"Summary Stats\",\n    choices=[\"Row Count\", \"Column Count\", \"Column Names\"],\n    selected=[\"Row Count\", \"Column Count\", \"Column Names\"],\n)\n\n\n@reactive.calc\ndef parsed_file():\n    file: list[FileInfo] | None = input.file1()\n    if file is None:\n        return pd.DataFrame()\n    return pd.read_csv(file[0][\"datapath\"])  # pyright: ignore[reportUnknownMemberType]\n\n\n@render.table\ndef summary():\n    df = parsed_file()\n\n    if df.empty:\n        return pd.DataFrame()\n\n    # Get the row count, column count, and column names of the DataFrame\n    row_count = df.shape[0]\n    column_count = df.shape[1]\n    names = df.columns.tolist()\n    column_names = \", \".join(str(name) for name in names)\n\n    # Create a new DataFrame to display the information\n    info_df = pd.DataFrame(\n        {\n            \"Row Count\": [row_count],\n            \"Column Count\": [column_count],\n            \"Column Names\": [column_names],\n        }\n    )\n\n    # input.stats() is a list of strings; subset the columns based on the selected\n    # checkboxes\n    return info_df.loc[:, input.stats()]\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_numeric",
        "Usage": "express.ui.input_numeric(\n    id,\n    label,\n    value,\n    *,\n    min=None,\n    max=None,\n    step=None,\n    width=None,\n)",
        "Description": "Create an input control for entry of numeric values.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation}</code>\n\n:   Initial value.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed value.\n\n<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Interval to use when stepping between min and max.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n",
        "Examples": "from shiny.express import input, render, ui\n\nui.input_numeric(\"obs\", \"Observations:\", 10, min=1, max=100)\n\n\n@render.code\ndef value():\n    return input.obs()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_password",
        "Usage": "express.ui.input_password(id, label, value='', *, width=None, placeholder=None)",
        "Description": "Create an password control for entry of passwords.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'\\']{.parameter-default}</code>\n\n:   Initial value.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g., '400px', or '100%'.\n\n<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The placeholder of the input.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_password(\"password\", \"Password:\")\nui.input_action_button(\"go\", \"Go\")\n\n\n@render.code\n@reactive.event(input.go)\ndef value():\n    return input.password()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_radio_buttons",
        "Usage": "express.ui.input_radio_buttons(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    inline=False,\n    width=None,\n)",
        "Description": "Create a set of radio buttons used to select an item from a list.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[ChoicesArg](`shiny.express.ui._input_check_radio.ChoicesArg`)]{.parameter-annotation}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True``, the result is displayed inline.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'.\n",
        "Examples": "from shiny.express import input, render, ui\n\nui.input_radio_buttons(\n    \"rb\",\n    \"Choose one:\",\n    {\n        \"html\": ui.HTML(\"<span style='color:red;'>Red Text</span>\"),\n        \"text\": \"Normal text\",\n    },\n)\n\n\n@render.express\ndef val():\n    \"You chose \" + input.rb()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_select",
        "Usage": "express.ui.input_select(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    selectize=False,\n    width=None,\n    size=None,\n    remove_button=None,\n    options=None,\n)",
        "Description": "Create a select list that can be used to choose a single or multiple items from a\nlist of values.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectChoicesArg](`shiny.express.ui._input_select.SelectChoicesArg`)]{.parameter-annotation}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [list](`list`)\\[[str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Is selection of multiple items allowed?\n\n<code>[**selectize**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Whether to use selectize.js or not.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n\n<code>[**size**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Number of items to show in the selection box; a larger number will result in a taller box. Normally, when ``multiple=False``, a select input will be a drop-down list, but when size is set, it will be a box instead.\n",
        "Examples": "from shiny.express import input, render, ui\n\nui.input_select(\n    \"state\",\n    \"Choose a state:\",\n    {\n        \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n        \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n        \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n    },\n)\n\n\n@render.text\ndef value():\n    return \"You choose: \" + str(input.state())\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_selectize",
        "Usage": "express.ui.input_selectize(\n    id,\n    label,\n    choices,\n    *,\n    selected=None,\n    multiple=False,\n    width=None,\n    remove_button=None,\n    options=None,\n)",
        "Description": "Create a select list that can be used to choose a single or multiple items from a\nlist of values.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectChoicesArg](`shiny.express.ui._input_select.SelectChoicesArg`)]{.parameter-annotation}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [list](`list`)\\[[str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Is selection of multiple items allowed?\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n\n<code>[**remove_button**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Whether to add a remove button. This uses the `clear_button` and `remove_button` selectize plugins which can also be supplied as options. By default it will apply a remove button to multiple selections, but not single selections.\n\n<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[dict](`dict`)\\[[str](`str`), [Jsonifiable](`shiny.types.Jsonifiable`) \\| [JSEval](`shiny.express.ui._utils.JSEval`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A dictionary of options. See the documentation of selectize.js for possible options. If you want to pass a JavaScript function, wrap the string in `ui.JS`.\n",
        "Examples": "from html import escape  # noqa: F401\n\nfrom shiny.express import input, render, ui\n\nstates = {\n    \"East Coast\": {\"NY\": \"New York\", \"NJ\": \"New Jersey\", \"CT\": \"Connecticut\"},\n    \"West Coast\": {\"WA\": \"Washington\", \"OR\": \"Oregon\", \"CA\": \"California\"},\n    \"Midwest\": {\"MN\": \"Minnesota\", \"WI\": \"Wisconsin\", \"IA\": \"Iowa\"},\n}\n\nui.input_selectize(\n    \"state\",\n    \"Choose a state:\",\n    states,\n    multiple=True,\n)\n\n\n@render.text\ndef value():\n    return \"You choose: \" + str(input.state())\n\n\nui.input_selectize(\n    \"state2\",\n    \"Selectize Options\",\n    states,\n    multiple=True,\n    options=(\n        {\n            \"placeholder\": \"Enter text\",\n            \"render\": ui.js_eval(\n                '{option: function(item, escape) {return \"<div><strong>Select \" + escape(item.label) + \"</strong></div>\";}}'\n            ),\n            \"create\": True,\n        }\n    ),\n)\nui.input_selectize(\n    \"state3\",\n    \"Selectize plugins\",\n    states,\n    multiple=True,\n    options={\"plugins\": [\"clear_button\"]},\n)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_slider",
        "Usage": "express.ui.input_slider(\n    id,\n    label,\n    min,\n    max,\n    value,\n    *,\n    step=None,\n    ticks=False,\n    animate=False,\n    width=None,\n    sep=',',\n    pre=None,\n    post=None,\n    time_format=None,\n    timezone=None,\n    drag_range=True,\n)",
        "Description": "Constructs a slider widget to select a number, date, or date-time from a range.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)]{.parameter-annotation}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)]{.parameter-annotation}</code>\n\n:   The maximum allowed value.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`) \\| [Iterable](`typing.Iterable`)\\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)\\]]{.parameter-annotation}</code>\n\n:   Initial value.\n\n<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SliderStepArg](`shiny.express.ui._input_slider.SliderStepArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Interval to use when stepping between min and max.\n\n<code>[**ticks**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   ``False`` to hide tick marks, ``True`` to show them according to some simple heuristics.\n\n<code>[**animate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \\| [AnimationOptions](`shiny.express.ui._input_slider.AnimationOptions`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   ``True`` to show simple animation controls with default settings; ``False`` not to; or a custom settings list, such as those created using [](:class:`~AnimationOptions`).\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n\n<code>[**sep**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\',\\']{.parameter-default}</code>\n\n:   Separator between thousands places in numbers.\n\n<code>[**pre**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A prefix string to put in front of the value.\n\n<code>[**post**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A suffix string to put after the value.\n\n<code>[**time_format**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Only used if the slider values are [](:class:`~datetime.date`) or [](:class:`~datetime.datetime`) objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is \"%F\" (like \"2015-07-01\"), and for Datetimes, the default is \"%F %T\" (like \"2015-07-01 15:32:10\").\n\n<code>[**timezone**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Only used if the values are [](:class:`~datetime.datetime`) objects. A string specifying the time zone offset for the displayed times, in the format \"+HHMM\" or \"-HHMM\". If ``None`` (the default), times will be displayed in the browser's time zone. The value \"+0000\" will result in UTC time.\n\n<code>[**drag_range**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   This option is used only if it is a range slider (with two values). If ``True`` (the default), the range can be dragged. In other words, the min and max can be dragged together. If ``False``, the range cannot be dragged.\n",
        "Examples": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"obs\", \"Number of bins:\", min=10, max=100, value=30)\n\n\n@render.plot\ndef distPlot():\n    np.random.seed(19680801)\n    x = 100 + 15 * np.random.randn(437)\n\n    fig, ax = plt.subplots()\n    ax.hist(x, input.obs(), density=True)\n    return fig\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_switch",
        "Usage": "express.ui.input_switch(id, label, value=False, *, width=None)",
        "Description": "Create a switch that can be used to specify logical values. Similar to\n[](:func:`~shiny.express.ui.input_checkbox`), but implies to the user that the change will take effect\nimmediately.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Initial value.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n",
        "Examples": "from shiny.express import input, render, ui\n\nui.input_switch(\"somevalue\", \"Some value\", False)\n\n\n@render.text\ndef value():\n    return input.somevalue()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_task_button",
        "Usage": "express.ui.input_task_button(\n    id,\n    label,\n    *args,\n    icon=None,\n    label_busy='Processing...',\n    icon_busy=MISSING,\n    width=None,\n    type='primary',\n    auto_reset=True,\n    **kwargs,\n)",
        "Description": "Creates a button for launching longer-running operations.\n\nIts value is initially zero, and increments by one each time it is pressed. It is\nsimilar to [](:func:`~shiny.express.ui.input_action_button`), except it prevents the user from\nclicking when its operation is already in progress.\n\nUpon click, it automatically displays a customizable progress message and disables\nitself; and after the server has dealt with whatever reactivity is triggered from\nthe click, the button automatically resets to its original appearance and re-enables\nitself.\n\nIn some advanced use cases, it may be necessary to keep a task button in its busy\nstate even after the normal reactive processing has completed. Calling\n:func:`~shiny.express.ui.update_task_button(id, state = \"busy\")` from the server will opt\nout of any currently pending reset for a specific task button. After doing so, the\nbutton can be re-enabled by calling ``update_task_button(id, state = &quot;ready&quot;)``\nafter each click&#x27;s work is complete.\n\nYou can also pass an explicit ``auto_reset = FALSE`` to ``input_task_button()``,\nwhich means that button will _never_ be automatically re-enabled and will require\n``update_task_button(id, state = &quot;ready&quot;)`` to be called each time.\n\nNote that, as a general rule, Shiny&#x27;s ``update`` family of functions do not take\neffect at the instant that they are called, but are held until the end of the\ncurrent reactive cycle. So if you have many different reactive calculations and\noutputs, you don&#x27;t have to be too careful about when you call\n``update_task_button(id, state = &quot;ready&quot;)``, as the button on the client will not\nactually re-enable until the same moment that all of the updated outputs\nsimultaneously sent to the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   A button label.\n\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   [Experimental] Can be used to add additional states besides \"ready\" and \"busy\". Pass a [](:func:`~shiny.express.ui.tags.span`) with ``slot=\"state_name\"`` for each new state, and call [](:func:`~shiny.express.ui.update_task_button`) with ``state=\"state_name\"`` to switch the button to that state.\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link.\n\n<code>[**label_busy**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'Processing...\\']{.parameter-default}</code>\n\n:   A label to appear when the button is busy.\n\n<code>[**icon_busy**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link when the button is busy.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g. '400px', or '100%'\n\n<code>[**type**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'primary\\']{.parameter-default}</code>\n\n:   One of the Bootstrap theme colors ('primary', 'default', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'), or None to leave off the Bootstrap-specific button CSS classes. Defaults to 'primary'.\n\n<code>[**auto_reset**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether to automatically reset the button to \"ready\" after the task completes. If False, the button will remain in the \"busy\" state until [](:func:`~shiny.express.ui.update_task_button`) is called with ``state=\"ready\"``. Also note that even if ``auto_reset=True``, calling [](:func:`~shiny.express.ui.update_task_button`) with ``state=\"busy\"`` will prevent the button from automatically resetting.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes to be applied to the button.\n",
        "Examples": "import asyncio\nfrom datetime import datetime\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.h5(\"Current time\")\n\n\n@render.text\ndef current_time():\n    reactive.invalidate_later(1)\n    return datetime.now().strftime(\"%H:%M:%S\")\n\n\nwith ui.p():\n    \"Notice that the time above updates every second, even if you click the button below.\"\n\n\n@ui.bind_task_button(button_id=\"btn\")\n@reactive.extended_task\nasync def slow_compute(a: int, b: int) -> int:\n    await asyncio.sleep(3)\n    return a + b\n\n\nwith ui.layout_sidebar():\n    with ui.sidebar():\n        ui.input_numeric(\"x\", \"x\", 1)\n        ui.input_numeric(\"y\", \"y\", 2)\n        ui.input_task_button(\"btn\", \"Compute, slowly\")\n        ui.input_action_button(\"btn_cancel\", \"Cancel\")\n\n    @reactive.effect\n    @reactive.event(input.btn, ignore_none=False)\n    def handle_click():\n        # slow_compute.cancel()\n        slow_compute(input.x(), input.y())\n\n    @reactive.effect\n    @reactive.event(input.btn_cancel)\n    def handle_cancel():\n        slow_compute.cancel()\n\n    ui.h5(\"Sum of x and y\")\n\n    @render.text\n    def show_result():\n        return str(slow_compute.result())\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_text_area",
        "Usage": "express.ui.input_text_area(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    height=None,\n    cols=None,\n    rows=None,\n    placeholder=None,\n    resize=None,\n    autoresize=False,\n    autocomplete=None,\n    spellcheck=None,\n)",
        "Description": "Create a textarea input control for entry of unstructured text values.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'\\']{.parameter-default}</code>\n\n:   Initial value.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g., '400px', or '100%'.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS height, e.g., '400px', or '100%'.\n\n<code>[**cols**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[int](`int`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Value of the visible character columns of the input, e.g., 80. This argument will only take effect if there is not a CSS width rule defined for this element; such a rule could come from the width argument of this function or from a containing page layout such as [](:func:`~shiny.express.ui.page_fluid`).\n\n<code>[**rows**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[int](`int`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The value of the visible character rows of the input, e.g., 6. If the height argument is specified, height will take precedence in the browser's rendering.\n\n<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A hint as to what can be entered into the control.\n\n<code>[**resize**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Literal](`typing.Literal`)\\['none', 'both', 'horizontal', 'vertical'\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Which directions the textarea box can be resized. Can be one of \"both\", \"none\", \"vertical\", and \"horizontal\". The default, ``None``, will use the client browser's default setting for resizing textareas.\n\n<code>[**autoresize**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If True, then the textarea will automatically resize the height to fit the input text.\n\n<code>[**autocomplete**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Whether to enable browser autocompletion of the text input (default is \"off\"). If `None`, then it will use the browser's default behavior. Other possible values include \"on\", \"name\", \"username\", and \"email\". See [Mozilla's autocomplete documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for more.\n\n<code>[**spellcheck**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Literal](`typing.Literal`)\\['true', 'false'\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Whether to enable browser spell checking of the text input (default is ``None``). If None, then it will use the browser's default behavior.\n",
        "Examples": "from shiny.express import input, render, ui\n\nui.input_text_area(\n    \"caption_regular\",\n    \"Caption:\",\n    \"Data summary\\nwith\\nmultiple\\nlines\",\n)\n\n\n@render.text\ndef value_regular():\n    return input.caption_regular()\n\n\nui.input_text_area(\n    \"caption_autoresize\",\n    ui.markdown(\"Caption (w/ `autoresize=True`):\"),\n    \"Data summary\\nwith\\nmultiple\\nlines\",\n    autoresize=True,\n)\n\n\n@render.text\ndef value_autoresize():\n    return input.caption_autoresize()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.input_text",
        "Usage": "express.ui.input_text(\n    id,\n    label,\n    value='',\n    *,\n    width=None,\n    placeholder=None,\n    autocomplete='off',\n    spellcheck=None,\n)",
        "Description": "Create an input control for entry of text values.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'\\']{.parameter-default}</code>\n\n:   Initial value.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The CSS width, e.g., '400px', or '100%'.\n\n<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A hint as to what can be entered into the control.\n\n<code>[**autocomplete**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'off\\']{.parameter-default}</code>\n\n:   Whether to enable browser autocompletion of the text input. If `None`, then it will use the browser's default behavior. Some values include \"on\", \"off\", \"name\", \"username\", and \"email\". See [https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) to learn more about `autocomplete`'s supported values.\n\n<code>[**spellcheck**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Literal](`typing.Literal`)\\['true', 'false'\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Whether to enable browser spell checking of the text input (default is ``None``). If None, then it will use the browser's default behavior.\n",
        "Examples": "from shiny.express import input, render, ui\n\nui.input_text(\"caption\", \"Caption:\", \"Data summary\")\n\n\n@render.code\ndef value():\n    return input.caption()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.insert_accordion_panel",
        "Usage": "express.ui.insert_accordion_panel(\n    id,\n    panel,\n    target=None,\n    position='after',\n    session=None,\n)",
        "Description": "Insert an [](:func:`~shiny.express.ui.accordion_panel`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A string that matches an existing [](:func:`~shiny.express.ui.accordion`)'s `id`.\n\n<code>[**panel**]{.parameter-name} [:]{.parameter-annotation-sep} [[AccordionPanel](`shiny.express.ui._accordion.AccordionPanel`)]{.parameter-annotation}</code>\n\n:   An [](:func:`~shiny.express.ui.accordion_panel`) object to insert.\n\n<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The `value` of an existing panel to insert next to.\n\n<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['after', 'before'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'after\\']{.parameter-default}</code>\n\n:   Should `panel` be added before or after the target? When `target=None`, `\"after\"` will append after the last panel and `\"before\"` will prepend before the first panel.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A Shiny session object (the default should almost always be used).\n\n## References {.doc-section .doc-section-references}\n\n[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)\n",
        "Examples": "import random\n\nfrom shiny import reactive, ui\nfrom shiny.express import input\n\n\ndef make_panel(letter):\n    return ui.accordion_panel(\n        f\"Section {letter}\", f\"Some narrative for section {letter}\"\n    )\n\n\nui.input_action_button(\"add_panel\", \"Add random panel\", class_=\"mt-3 mb-3\")\nui.accordion(*[make_panel(letter) for letter in \"ABCDE\"], id=\"acc\", multiple=True)\n\n\n@reactive.effect\n@reactive.event(input.add_panel)\ndef _():\n    ui.insert_accordion_panel(\"acc\", make_panel(str(random.randint(0, 10000))))\n\n\n\n================"
    },
    {
        "File Name": "express.ui.insert_ui",
        "Usage": "express.ui.insert_ui(\n    ui,\n    selector,\n    where='beforeEnd',\n    multiple=False,\n    immediate=False,\n    session=None,\n)",
        "Description": "Insert UI objects.",
        "Parameters": "\n<code>[**ui**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   The UI object you want to insert. This can be anything that you usually put inside your app's UI function. If you're inserting multiple elements in one call, make sure to wrap them in either a [](:func:`~htmltools.TagList`) or a [](:func:`~shiny.express.ui.tags.div`) (the latter option has the advantage that you can give it an id to make it easier to reference or remove it later on). If you want to insert raw HTML, use [](:class:`~shiny.express.ui.HTML`).\n\n<code>[**selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A string that is accepted by jQuery's selector (i.e. the string ``s`` to be placed in a ``$(s)`` jQuery call) which determines the element(s) relative to which you want to insert your UI object.\n\n<code>[**where**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'beforeEnd\\']{.parameter-default}</code>\n\n:   Where your UI object should go relative to the selector: \"beforeBegin\": before the selector element itself; \"beforeEnd\": just inside the selector element, after its last child (default); \"afterEnd\": after the selector element itself. Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML.\n\n<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   In case your selector matches more than one element, ``multiple`` determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).\n\n<code>[**immediate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Whether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session._session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\nThis function allows you to dynamically add arbitrary UI into your app, whenever you\nwant, as many times as you want. Unlike [](:class:`~shiny.express.render.ui`), the UI generated\nwith `insert_ui` is persistent: once it's created, it stays there until removed by\n[](:func:`~shiny.express.ui.remove_ui`). Each new call to `insert_ui` creates more UI objects, in addition\nto the ones already there (all independent from one another). To update a part of\nthe UI (ex: an input object), you must use the appropriate render function or a\ncustomized reactive function.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"add\", \"Add UI\")\n\n\n@reactive.effect\n@reactive.event(input.add)\ndef _():\n    ui.insert_ui(\n        ui.input_text(\"txt\" + str(input.add()), \"Enter some text\"),\n        selector=\"#add\",\n        where=\"afterEnd\",\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.layout_column_wrap",
        "Usage": "express.ui.layout_column_wrap(\n    width=MISSING,\n    fixed_width=False,\n    heights_equal='all',\n    fill=True,\n    fillable=True,\n    height=None,\n    min_height=None,\n    max_height=None,\n    height_mobile=None,\n    gap=None,\n    class_=None,\n    **kwargs,\n)",
        "Description": "Context manager for a grid-like, column-first layout\n\nThis function wraps [](:func:`~shiny.ui.layout_column_wrap`).\n\nWraps a 1d sequence of UI elements into a 2d grid. The number of columns (and rows)\nin the grid dependent on the column `width` as well as the size of the display.",
        "Parameters": "\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.express.ui.css.CssUnit`) \\| None \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   The desired width of each card. It can be one of the following:  * A (unit-less) number between 0 and 1, specified as `1/num`, where `num`   represents the number of desired columns. * A CSS length unit representing either the minimum (when `fixed_width=False`)   or fixed width (`fixed_width=True`). * `None`, which allows power users to set the `grid-template-columns` CSS   property manually, either via a `style` attribute or a CSS stylesheet. * If missing, a value of `200px` will be used.\n\n<code>[**fixed_width**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   When `width` is greater than 1 or is a CSS length unit, e.g. `\"200px\"`, `fixed_width` indicates whether that `width` value represents the absolute size of each column (`fixed_width=TRUE`) or the minimum size of a column (`fixed_width=FALSE`).  When `fixed_width=FALSE`, new columns are added to a row when `width` space is available and columns will never exceed the container or viewport size.  When `fixed_width=TRUE`, all columns will be exactly `width` wide, which may result in columns overflowing the parent container.\n\n<code>[**heights_equal**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['all', 'row'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'all\\']{.parameter-default}</code>\n\n:   If `\"all\"` (the default), every card in every row of the grid will have the same height. If `\"row\"`, then every card in _each_ row of the grid will have the same height, but heights may vary between rows.\n\n<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.express.ui.page_fillable`)).\n\n<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not each element is wrapped in a fillable container.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A valid CSS unit (e.g., `height=\"200px\"`). Use `min_height` and `max_height` in a filling layout to ensure that the layout container does not shrink below a `min_height` or grow beyond a `max_height`.\n\n<code>[**height_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Any valid CSS unit to use for the height when on mobile devices (or narrow windows).\n\n<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Any valid CSS unit to use for the gap between columns.\n\n<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A CSS class to apply to the containing element.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional attributes to apply to the containing element.\n",
        "Examples": "from shiny.express import ui\n\nwith ui.hold() as a_card:\n    with ui.card():\n        \"A simple card\"\n\n# Always has 2 columns (on non-mobile)\nwith ui.layout_column_wrap(width=1 / 2):\n    a_card\n    a_card\n    a_card\n\nui.hr()\n\n# Has three columns when viewport is wider than 750px\nwith ui.layout_column_wrap(width=\"250px\"):\n    a_card\n    a_card\n    a_card\n\n\n\n================"
    },
    {
        "File Name": "express.ui.layout_columns",
        "Usage": "express.ui.layout_columns(\n    col_widths=None,\n    row_heights=None,\n    fill=True,\n    fillable=True,\n    gap=None,\n    class_=None,\n    height=None,\n    min_height=None,\n    max_height=None,\n    **kwargs,\n)",
        "Description": "Context manager for responsive, column-based grid layouts, based on a 12-column\ngrid.\n\nThis function wraps [](:func:`~shiny.ui.layout_columns`).",
        "Parameters": "\n<code>[**col_widths**]{.parameter-name} [:]{.parameter-annotation-sep} [[BreakpointsUser](`shiny.express.ui._layout_columns.BreakpointsUser`)\\[[int](`int`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The widths of the columns, possibly at different breakpoints. Can be one of the following:  * `None` (the default): Automatically determines a sensible number of columns   based on the number of children given to the layout. * A list or tuple of integers between 1 and 12, where each element represents   the number of columns for the relevant UI element. Column widths are recycled   to extend the values in `col_widths` to match the actual number of items in   the layout, and children are wrapped onto the next row when a row exceeds 12   column units. For example, `col_widths=(4, 8, 12)` allocates 4 columns to the   first element, 8 columns to the second element, and 12 columns to the third   element (which wraps to the next row). Negative values are also allowed, and   are treated as empty columns. For example, `col_widths=(-2, 8, -2)` would   allocate 8 columns to an element (with 2 empty columns on either side). * A dictionary of column widths at different breakpoints. The keys should be one   of `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"`, or `\"xxl\"`, and the values are   either of the above. For example, `col_widths={\"sm\": (3, 3, 6), \"lg\": (4)}`.\n\n<code>[**row_heights**]{.parameter-name} [:]{.parameter-annotation-sep} [[BreakpointsUser](`shiny.express.ui._layout_columns.BreakpointsUser`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The heights of the rows, possibly at different breakpoints. Can be one of the following:  * A numeric vector, where each value represents the [fractional   unit](https://css-tricks.com/introduction-fr-css-unit/) (`fr`) height of the   relevant row. If there are more rows than values provided, the pattern will be   repeated. For example, `row_heights=(1, 2)` allows even rows to take up twice   as much space as odd rows. * A list of numeric or CSS length units, where each value represents the height   of the relevant row. If more rows are needed than values provided, the pattern   will repeat. For example, `row_heights=[\"auto\", 1]` allows the height of odd   rows to be driven my it's contents and even rows to be   [`1fr`](https://css-tricks.com/introduction-fr-css-unit/). * A single string containing CSS length units. In this case, the value is   supplied directly to `grid-auto-rows`. * A dictionary of row heights at different breakpoints, where each key is a   breakpoint name (one of `\"xs\"`, `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"`, or `\"xxl\"`)   and where the values may be any of the above options.\n\n<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.express.ui.page_fillable`)).\n\n<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not each element is wrapped in a fillable container.\n\n<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Any valid CSS unit to use for the gap between columns.\n\n<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   CSS class(es) to apply to the containing element.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A valid CSS unit (e.g., `height=\"200px\"`). Use `min_height` and `max_height` in a filling layout to ensure that the layout container does not shrink below a `min_height` or grow beyond a `max_height`.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional attributes to apply to the containing element.\n",
        "Examples": "from model_plots import (\n    plot_accuracy_over_time,\n    plot_feature_importance,\n    plot_loss_over_time,\n)\n\nfrom shiny.express import render, ui\n\nui.page_opts(title=\"Model Dashboard\")\n\nui.markdown(\"Using `ui.layout_columns()` for the layout.\")\n\n\nwith ui.layout_columns(\n    col_widths={\"sm\": (5, 7, 12)},\n    # row_heights=(2, 3),\n    # height=\"700px\",\n):\n    with ui.card(full_screen=True):\n        ui.card_header(\"Loss Over Time\")\n\n        @render.plot\n        def loss_over_time():\n            return plot_loss_over_time()\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Accuracy Over Time\")\n\n        @render.plot\n        def accuracy_over_time():\n            return plot_accuracy_over_time()\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Feature Importance\")\n\n        @render.plot\n        def feature_importance():\n            return plot_feature_importance()\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny import ui\n\n\ndef plot_loss_over_time():\n    epochs = np.arange(1, 101)\n    loss = 1000 / np.sqrt(epochs) + np.random.rand(100) * 25\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.plot(epochs, loss)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    return fig\n\n\ndef plot_accuracy_over_time():\n    epochs = np.arange(1, 101)\n    accuracy = np.sqrt(epochs) / 12 + np.random.rand(100) * 0.15\n    accuracy = [np.min([np.max(accuracy[:i]), 1]) for i in range(1, 101)]\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.plot(epochs, accuracy)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy\")\n    return fig\n\n\ndef plot_feature_importance():\n    features = [\"Product Category\", \"Price\", \"Brand\", \"Rating\", \"Number of Reviews\"]\n    importance = np.random.rand(5)\n\n    fig = plt.figure(figsize=(10, 6))\n    plt.barh(features, importance)\n    plt.xlabel(\"Importance\")\n    return fig\n\n\ncard_loss = ui.card(\n    ui.card_header(\"Loss Over Time\"),\n    ui.output_plot(\"loss_over_time\"),\n    full_screen=True,\n)\n\ncard_acc = ui.card(\n    ui.card_header(\"Accuracy Over Time\"),\n    ui.output_plot(\"accuracy_over_time\"),\n    full_screen=True,\n)\n\ncard_feat = ui.card(\n    ui.card_header(\"Feature Importance\"),\n    ui.output_plot(\"feature_importance\"),\n    full_screen=True,\n)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.layout_sidebar",
        "Usage": "express.ui.layout_sidebar(\n    fillable=True,\n    fill=True,\n    bg=None,\n    fg=None,\n    border=None,\n    border_radius=None,\n    border_color=None,\n    gap=None,\n    padding=None,\n    height=None,\n    **kwargs,\n)",
        "Description": "Context manager for sidebar layout\n\nThis function wraps [](:func:`~shiny.ui.layout_sidebar`).\n\nCreate a sidebar layout component which can be dropped inside any Shiny UI page\nmethod (e.g. [](:func:`~shiny.express.ui.page_fillable`)) or [](:func:`~shiny.express.ui.card`)\ncontext.\n\nThe first child needs to be of class [](:class:`~shiny.express.ui.Sidebar`) object created by\n[](:func:`~shiny.express.ui.sidebar`). The remaining arguments will contain the contents\nto the main content area. Or tag attributes that are supplied to the resolved\n[](:class:`~htmltools.Tag`) object.",
        "Parameters": "\n<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not the main content area should be wrapped in a fillable container. See [](:func:`~shiny.express.ui.fill.as_fillable_container`) for details.\n\n<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not the sidebar layout should be wrapped in a fillable container. See [](:func:`~shiny.express.ui.fill.as_fill_item`) for details.\n\n<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A background or foreground color.\n\n<code>[**border**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Whether or not to show a border around the sidebar layout.\n\n<code>[**border_radius**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Whether or not to round the corners of the sidebar layout.\n\n<code>[**border_color**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A border color.\n\n<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements provided to `*args`. This value will only be used if `fillable` is `True`.\n\n<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`) \\| [list](`list`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Padding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. `padding` may be one to four values. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Any valid CSS unit to use for the height.\n",
        "Examples": "import matplotlib.pyplot as plt\nimport numpy as np\n\nfrom shiny.express import input, render, ui\n\nwith ui.layout_sidebar():\n    with ui.sidebar():\n        ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)\n\n    @render.plot(alt=\"A histogram\")\n    def plot() -> object:\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True)\n        return fig\n\n\n\n================"
    },
    {
        "File Name": "express.ui.markdown",
        "Usage": "express.ui.markdown(text, *, render_func=None, **kwargs)",
        "Description": "Convert a string of markdown to [](:func:`ui.HTML`).",
        "Parameters": "\n<code>[**text**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A string of text containing markdown.\n\n<code>[**render_func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Callable](`typing.Callable`)\\[\\[[str](`str`)\\], [str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A function (with at least 1 argument) which accepts a string of markdown and returns a string of HTML. By default, a customized instance of the `markdown_id.main.MarkdownIt` class (which supports Github-flavored markdown) from the ``markdown-it`` package is used.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional keyword arguments passed to the ``render_func``.\n",
        "Examples": "from shiny.express import ui\n\nui.markdown(\n    \"\"\"\n    # Hello World\n\n    This is **markdown** and here is some `code`:\n\n    ```python\n    print('Hello world!')\n    ```\n    \"\"\"\n)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.modal_button",
        "Usage": "express.ui.modal_button(label, icon=None, **kwargs)",
        "Description": "Creates a button that will dismiss a [](:func:`~shiny.express.ui.modal`).\n\n[](:func:`~shiny.ui.modal_button`) is usually\npassed to the `footer` of a [](:func:`~shiny.express.ui.modal`) to add a button to the footer that will close\nthe [](:func:`~shiny.express.ui.modal`).",
        "Parameters": "\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   An input label.\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes to be applied to the button.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        title=\"Somewhat important message\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.modal_remove",
        "Usage": "express.ui.modal_remove(session=None)",
        "Description": "Remove a modal dialog box.\n\n[](:func:`~shiny.ui.modal_remove`) provides a way to remove a modal programmatically.\nModals can also be removed manually by the user if a [](:func:`~shiny.express.ui.modal_button`)\nis provided, or if the modal is created with `easy_close=True`.",
        "Parameters": "\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The [](:class:`~shiny.Session`) instance that contains the modal to remove. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\n\ndef run_model(delay=10.0):\n    import time\n\n    # Pretend to run a model for `delay` seconds\n    start_time = time.time()\n    while time.time() - start_time < delay:\n        pass\n    return time.time()\n\n\nui.input_action_button(\"run\", \"Run Model\")\n\nmodel_result = reactive.value()\n\n\ndef the_modal():\n    return ui.modal(\n        \"The model is running, please wait.\",\n        title=\"Running model\",\n        easy_close=False,\n        footer=None,\n    )\n\n\n@reactive.effect\n@reactive.event(input.run)\ndef do_run_model():\n    # Show the modal, blocking interaction with the UI\n    ui.modal_show(the_modal())\n\n    result = run_model(delay=4)\n\n    # Now that we have model results, remove the modal\n    # and update the model result reactive value\n    ui.modal_remove()\n    model_result.set(result)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.modal_show",
        "Usage": "express.ui.modal_show(modal, session=None)",
        "Description": "Show a modal dialog.\n\n[](:func:`~shiny.ui.modal_show`) is used to display a modal that has been\ncreated with [](:func:`~shiny.express.ui.modal`).",
        "Parameters": "\n<code>[**modal**]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>\n\n:   Typically a [](:func:`~shiny.express.ui.modal`) instance.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The [](:class:`~shiny.Session`) instance to display the modal in. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        title=\"Somewhat important message\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.modal",
        "Usage": "express.ui.modal(\n    *args,\n    title=None,\n    footer=MISSING,\n    size='m',\n    easy_close=False,\n    fade=True,\n    **kwargs,\n)",
        "Description": "Creates the UI for a modal dialog, using Bootstrap&#x27;s modal class.\n\nA modal is a dialog box that appears in front of the app. Modals are\ntypically used for showing important messages, or for presenting UI that requires\ninput from the user, such as a user name and/or password input.",
        "Parameters": "\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \\| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   UI elements for the body of the modal.\n\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An optional title for the modal dialog.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   UI for footer. Use ``None`` for no footer.\n\n<code>[**size**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['m', 's', 'l', 'xl'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'m\\']{.parameter-default}</code>\n\n:   The size of the modal dialogue box. Use one of \"s\" for small, \"m\" (the default) for medium, or \"l\" for large.\n\n<code>[**easy_close**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True``, the modal dialog can be dismissed by clicking outside the dialog box, or by pressing the Escape key. If ``False`` (the default), the modal dialog can't be dismissed in those ways; instead it must be dismissed by clicking on a ``modal_button()``, or from a call to ``modal_remove()`` on the server.\n\n<code>[**fade**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   If ``False``, the modal dialog will have no fade-in animation (it will simply appear rather than fade in to view).\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes to be applied to the modal's body tag.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        title=\"Somewhat important message\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.nav_menu",
        "Usage": "express.ui.nav_menu(title, *, value=None, icon=None, align='left')",
        "Description": "Context manager for a menu of nav items.\n\nThis function wraps [](:func:`~shiny.ui.nav_menu`).",
        "Parameters": "\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   A title to display. Can be a character string or UI elements (i.e., tags).\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The value of the item. This is used to determine whether the item is active (when an ``id`` is provided to the nav container), programmatically select the item (e.g., [](:func:`~shiny.express.ui.update_navs`)), and/or be provided to the ``selected`` argument of the navigation container (e.g., [](:func:`~shiny.express.ui.navset_tab`)).\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link.\n\n<code>[**align**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['left', 'right'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'left\\']{.parameter-default}</code>\n\n:   Horizontal alignment of the dropdown menu relative to dropdown toggle.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_card_pill(id=\"selected_card_pill\"):\n    with ui.nav_menu(\"Nav Menu items\"):\n        with ui.nav_panel(\"A\"):\n            \"Page A content\"\n        with ui.nav_panel(\"B\"):\n            \"Page B content\"\n        with ui.nav_panel(\"C\"):\n            \"Page C content\"\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_card_pill()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.nav_panel",
        "Usage": "express.ui.nav_panel(title, *, value=None, icon=None)",
        "Description": "Context manager for nav item pointing to some internal content.\n\nThis function wraps [](:func:`~shiny.express.ui.nav`).",
        "Parameters": "\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   A title to display. Can be a character string or UI elements (i.e., tags).\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The value of the item. This is used to determine whether the item is active (when an ``id`` is provided to the nav container), programmatically select the item (e.g., [](:func:`~shiny.express.ui.update_navs`)), and/or be provided to the ``selected`` argument of the navigation container (e.g., [](:func:`~shiny.express.ui.navset_tab`)).\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link.\n",
        "Examples": "from shiny.express import ui\n\nui.page_opts(title=\"Nav Panel Example\")\n\nwith ui.nav_panel(\"Page 1\"):\n    \"Page 1 content\"\n\nwith ui.nav_panel(\"Page 2\"):\n    with ui.navset_card_underline():\n        with ui.nav_panel(\"Tab 1\"):\n            \"Tab 1 content\"\n        with ui.nav_panel(\"Tab 2\"):\n            \"Tab 2 content\"\n        with ui.nav_panel(\"Tab 3\"):\n            \"Tab 3 content\"\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_bar",
        "Usage": "express.ui.navset_bar(\n    title,\n    id=None,\n    selected=None,\n    sidebar=None,\n    fillable=True,\n    gap=None,\n    padding=None,\n    position='static-top',\n    header=None,\n    footer=None,\n    bg=None,\n    inverse=False,\n    underline=True,\n    collapsible=True,\n    fluid=True,\n)",
        "Description": "Context manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps [](:func:`~shiny.ui.navset_bar`).",
        "Parameters": "\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   Title to display in the navbar.\n\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match it's ``value``).\n\n<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[ui](`shiny.ui`).[Sidebar](`shiny.express.ui.Sidebar`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.express.ui.Sidebar`) component to display on every [](:func:`~shiny.express.ui.nav_panel`) page.\n\n<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \\| [list](`list`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether or not to allow fill items to grow/shrink to fit the browser window. If `True`, all `nav()` pages are fillable. A character vector, matching the value of `nav()`s to be filled, may also be provided. Note that, if a `sidebar` is provided, `fillable` makes the main content portion fillable.\n\n<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A CSS length unit defining the gap (i.e., spacing) between elements provided to `*args`.\n\n<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`) \\| [list](`list`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Padding to use for the body. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. The length can be between one and four. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively.\n\n<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['static-top', 'fixed-top', 'fixed-bottom', 'sticky-top'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'static-top\\']{.parameter-default}</code>\n\n:   Determines whether the navbar should be displayed at the top of the page with normal scrolling behavior (\"static-top\"), pinned at the top (\"fixed-top\"), or pinned at the bottom (\"fixed-bottom\"). Note that using \"fixed-top\" or \"fixed-bottom\" will cause the navbar to overlay your body content, unless you add padding (e.g., ``tags.style(\"body {padding-top: 70px;}\")``).\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n\n<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Background color of the navbar (a CSS color).\n\n<code>[**inverse**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Either ``True`` for a light text color or ``False`` for a dark text color.\n\n<code>[**collapsible**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   ``True`` to automatically collapse the navigation elements into an expandable menu on mobile devices or narrow window widths.\n\n<code>[**fluid**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   ``True`` to use fluid layout; ``False`` to use fixed layout.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_bar(title=\"Navset Bar\", id=\"selected_navset_bar\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_bar()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_card_pill",
        "Usage": "express.ui.navset_card_pill(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
        "Description": "Context manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps [](:func:`~shiny.ui.navset_card_pill`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match it's ``value``).\n\n<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[ui](`shiny.ui`).[Sidebar](`shiny.express.ui.Sidebar`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`shiny.express.ui.Sidebar`) component to display on every [](:func:`~shiny.express.ui.nav`) page.\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n\n<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['above', 'below'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'above\\']{.parameter-default}</code>\n\n:   Placement of the nav items relative to the content.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_card_pill(id=\"selected_navset_card_pill\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_card_pill()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_card_tab",
        "Usage": "express.ui.navset_card_tab(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n)",
        "Description": "Context manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps [](:func:`~shiny.ui.navset_card_tab`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match it's ``value``).\n\n<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[ui](`shiny.ui`).[Sidebar](`shiny.express.ui.Sidebar`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`shiny.express.ui.Sidebar`) component to display on every [](:func:`~shiny.express.ui.nav`) page.\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_card_tab(id=\"selected_navset_card_tab\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_card_tab()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_card_underline",
        "Usage": "express.ui.navset_card_underline(\n    id=None,\n    selected=None,\n    title=None,\n    sidebar=None,\n    header=None,\n    footer=None,\n    placement='above',\n)",
        "Description": "Context manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps [](:func:`~shiny.ui.navset_card_underline`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match it's ``value``).\n\n<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[ui](`shiny.ui`).[Sidebar](`shiny.express.ui.Sidebar`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`shiny.express.ui.Sidebar`) component to display on every [](:func:`~shiny.express.ui.nav`) page.\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n\n<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['above', 'below'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'above\\']{.parameter-default}</code>\n\n:   Placement of the nav items relative to the content.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_card_underline(id=\"selected_navset_card_underline\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_card_underline()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_hidden",
        "Usage": "express.ui.navset_hidden(id=None, selected=None, header=None, footer=None)",
        "Description": "Context manager for nav contents without the nav items.\n\nThis function wraps [](:func:`~shiny.ui.navset_hidden`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match it's ``value``).\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.sidebar():\n    ui.input_radio_buttons(\"controller\", \"Controller\", [\"1\", \"2\", \"3\"], selected=\"1\")\n\nwith ui.navset_hidden(id=\"hidden_tabs\"):\n    with ui.nav_panel(None, value=\"panel1\"):\n        \"Panel 1 content\"\n    with ui.nav_panel(None, value=\"panel2\"):\n        \"Panel 2 content\"\n    with ui.nav_panel(None, value=\"panel3\"):\n        \"Panel 3 content\"\n\n\n@reactive.effect\n@reactive.event(input.controller)\ndef _():\n    ui.update_navs(\"hidden_tabs\", selected=\"panel\" + str(input.controller()))\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_pill_list",
        "Usage": "express.ui.navset_pill_list(\n    id=None,\n    selected=None,\n    header=None,\n    footer=None,\n    well=True,\n    widths=(4, 8),\n)",
        "Description": "Context manager for a set of nav items as a tabset inside a card container.\n\nThis function wraps [](:func:`~shiny.ui.navset_pill_list`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match its ``value``).\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n\n<code>[**well**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   ``True`` to place a well (gray rounded rectangle) around the navigation list.\n\n<code>[**widths**]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\\[[int](`int`), [int](`int`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [(4, 8)]{.parameter-default}</code>\n\n:   Column widths of the navigation list and tabset content areas respectively.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_pill_list(id=\"selected_navset_pill_list\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_pill_list()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_pill",
        "Usage": "express.ui.navset_pill(id=None, selected=None, header=None, footer=None)",
        "Description": "Context manager for a set of nav items as a pillset.\n\nThis function wraps [](:func:`~shiny.ui.navset_pill`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match it's ``value``).\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_pill(id=\"selected_navset_pill\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_pill()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_tab",
        "Usage": "express.ui.navset_tab(id=None, selected=None, header=None, footer=None)",
        "Description": "Context manager for a set of nav items as a tabset.\n\nThis function wraps [](:func:`~shiny.ui.navset_tab`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match it's ``value``).\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_tab(id=\"selected_navset_tab\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_tab()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.navset_underline",
        "Usage": "express.ui.navset_underline(id=None, selected=None, header=None, footer=None)",
        "Description": "Context manager for a set of nav items whose active/focused navigation links are\nstyled with an underline.\n\nThis function wraps [](:func:`~shiny.ui.navset_underline`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If provided, will create an input value that holds the currently selected nav item.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Choose a particular nav item to select by default value (should match it's ``value``).\n\n<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display above the selected content.\n\n<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   UI to display below the selected content.\n",
        "Examples": "from shiny.express import input, render, ui\n\nwith ui.navset_underline(id=\"selected_navset_underline\"):\n    with ui.nav_panel(\"A\"):\n        \"Panel A content\"\n\n    with ui.nav_panel(\"B\"):\n        \"Panel B content\"\n\n    with ui.nav_panel(\"C\"):\n        \"Panel C content\"\n\n    with ui.nav_menu(\"Other links\"):\n        with ui.nav_panel(\"D\"):\n            \"Page D content\"\n\n        \"----\"\n        \"Description:\"\n        with ui.nav_control():\n            ui.a(\"Shiny\", href=\"https://shiny.posit.co\", target=\"_blank\")\nui.h5(\"Selected:\")\n\n\n@render.code\ndef _():\n    return input.selected_navset_underline()\n\n\n\n================"
    },
    {
        "File Name": "express.ui.notification_show",
        "Usage": "express.ui.notification_show(\n    ui,\n    *,\n    action=None,\n    duration=5,\n    close_button=True,\n    id=None,\n    type='default',\n    session=None,\n)",
        "Description": "Show a notification to the user.\n\nA notification is a message that appears near the bottom corner of the app.\nNotifications normally disappear after a short period of time, and should multiple\nnotifications appear together, they will stack on top of one another.",
        "Parameters": "\n<code>[**ui**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>\n\n:   Contents of the notification message.\n\n<code>[**action**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[TagChild](`htmltools.TagChild`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Message content that represents an action. For example, this could be a link that the user can click on. This is separate from ui so customized layouts can handle the main notification content separately from the action content.\n\n<code>[**duration**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[int](`int`) \\| [float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [5]{.parameter-default}</code>\n\n:   Number of seconds to display the message before it disappears. Use ``None`` to prevent the message from disappearing automatically. The user will need to click the corner of the notification to close it.\n\n<code>[**close_button**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   If ``True``, display a button which will make the notification disappear when clicked. If ``False`` do not display.\n\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An optional unique identifier for the notification. If supplied, any existing notification with the same ``id`` will be replaced with this one (otherwise, a new notification is created).\n\n<code>[**type**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['default', 'message', 'warning', 'error'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'default\\']{.parameter-default}</code>\n\n:   A string which controls the color of the notification. This should be one of \"default\" (gray), \"message\" (blue), \"warning\" (yellow), or \"error\" (red).\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The [](:class:`~shiny.Session`) in which the notification should appear.  If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show\")\nui.input_action_button(\"remove\", \"Remove\")\n\nids: list[str] = []\nn: int = 0\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef _():\n    global ids\n    global n\n    # Save the ID for removal later\n    id = ui.notification_show(\"Message \" + str(n), duration=None)\n    ids.append(id)\n    n += 1\n\n\n@reactive.effect\n@reactive.event(input.remove)\ndef _():\n    global ids\n    if ids:\n        ui.notification_remove(ids.pop())\n\n\n\n================"
    },
    {
        "File Name": "express.ui.page_opts",
        "Usage": "express.ui.page_opts(\n    title=MISSING,\n    window_title=MISSING,\n    lang=MISSING,\n    theme=MISSING,\n    page_fn=MISSING,\n    fillable=MISSING,\n    full_width=MISSING,\n    **kwargs,\n)",
        "Description": "Set page-level options for the current app.\n\nThe arguments to this function get passed to [](:func:`~shiny.express.ui.page_auto`), which\ndetermines which page function should be used based on the page options and the\ntop-level items in the app.\n\nIf there is a top-level [](:func:`~shiny.express.ui.nav_panel`), [](:func:`~shiny.express.ui.page_auto`)\nwill use [](:func:`~shiny.express.ui.page_navbar`). Otherwise, if there is a top-level sidebar,\n[](:func:`~shiny.express.ui.page_sidebar`) is used.\n\nIf there are neither top-level nav panels nor sidebars, this will use the `fillable`\nand `full_width` arguments to determine which page function to use:\n\n1. If `fillable` is `True`, [](:func:`~shiny.express.ui.page_fillable`) is used.\n2. Otherwise, if `full_width` is `True`, [](:func:`~shiny.express.ui.page_fluid`) is used.\n3. If neither are `True`, [](:func:`~shiny.express.ui.page_fixed`) is used.",
        "Parameters": "\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   A title shown on the page.\n\n<code>[**window_title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   The browser window title. If no value is provided, this will use the value of ``title``.\n\n<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   ISO 639-1 language code for the HTML page, such as ``\"en\"`` or ``\"ko\"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang=\"en\">``. The default, `None`, results in an empty string.\n\n<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [Path](`pathlib.Path`) \\| [ui](`shiny.ui`).[Theme](`shiny.express.ui.Theme`) \\| [ThemeProvider](`shiny.express.ui._html_deps_external.ThemeProvider`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   A custom Shiny theme created using the [](:class:`~shiny.express.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.express.ui.include_css`) to add custom CSS.\n\n<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   If there is a top-level sidebar or nav, then the value is passed through to the [](:func:`~shiny.express.ui.page_sidebar`) or [](:func:`~shiny.express.ui.page_navbar`) function. Otherwise, if ``True``, use [](:func:`~shiny.express.ui.page_fillable`), where the content fills the window; if ``False`` (the default), the value of ``full_width`` will determine which page function is used.\n\n<code>[**full_width**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   This has an effect only if there are no sidebars or top-level navs, and ``fillable`` is ``False``. If this is ``False`` (the default), use use [](:func:`~shiny.express.ui.page_fixed`); if ``True``, use [](:func:`~shiny.express.ui.page_fillable`).\n\n<code>[**page_fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\\[..., [Tag](`htmltools.Tag`)\\] \\| None \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   The page function to use. If ``None`` (the default), will automatically choose one based on the arguments provided. If not ``None``, this will override all heuristics for choosing page functions.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional arguments to pass to the page function. See the description above for further details on how the page function is selected.\n",
        "Examples": "from shiny.express import ui\n\nui.page_opts(title=\"App with Navbar\", fillable=True, id=\"page\")\n\nwith ui.sidebar():\n    ui.input_select(\"data\", \"Dataset\", (\"tips\", \"flights\", \"exercise\"))\n\n    with ui.panel_conditional(\"input.page === 'View'\"):\n        ui.input_select(\"view\", \"View\", (\"plot\", \"table\"))\n\nui.nav_spacer()\n\nwith ui.nav_panel(\"Data\"):\n    \"This page could be used to pick a dataset.\"\n\nwith ui.nav_panel(\"View\"):\n    \"This page could be used to view the dataset.\"\n    \"Notice the additional controls that appear when 'View' is selected.\"\n\n\n\n================"
    },
    {
        "File Name": "express.ui.panel_absolute",
        "Usage": "express.ui.panel_absolute(\n    top=None,\n    left=None,\n    right=None,\n    bottom=None,\n    width=None,\n    height=None,\n    draggable=False,\n    fixed=False,\n    cursor='auto',\n    **kwargs,\n)",
        "Description": "Context manager for a panel of absolutely positioned content.\n\nThis function wraps [](:func:`~shiny.ui.panel_absolute`).\n\nCreates a ``&lt;div&gt;`` tag whose CSS position is set to absolute (or fixed if ``fixed =\nTrue``). The way absolute positioning works in HTML is that absolute coordinates are\nspecified relative to its nearest parent element whose position is not set to static\n(which is the default), and if no such parent is found, then relative to the page\nborders. If you&#x27;re not sure what that means, just keep in mind that you may get\nstrange results if you use this function from inside of certain types of panels.",
        "Parameters": "\n<code>[**top**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Distance between the top of the panel, and the top of the page or parent container.\n\n<code>[**left**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Distance between the left side of the panel, and the left of the page or parent container.\n\n<code>[**right**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Distance between the right side of the panel, and the right of the page or parent container.\n\n<code>[**bottom**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Distance between the bottom of the panel, and the bottom of the page or parent container.\n\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Width of the panel.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Height of the panel.\n\n<code>[**draggable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True``, allows the user to move the panel by clicking and dragging.\n\n<code>[**fixed**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Positions the panel relative to the browser window and prevents it from being scrolled with the rest of the page.\n\n<code>[**cursor**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['auto', 'move', 'default', 'inherit'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'auto\\']{.parameter-default}</code>\n\n:   The type of cursor that should appear when the user mouses over the panel. Use ``\"move\"`` for a north-east-south-west icon, ``\"default\"`` for the usual cursor arrow, or ``\"inherit\"`` for the usual cursor behavior (including changing to an I-beam when the cursor is over text). The default is ``\"auto\"``, which is equivalent to ``\"move\" if draggable else \"inherit\"``.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes added to the content's container tag.\n\n## Tip {.doc-section .doc-section-tip}\n\nThe position (``top``, ``left``, ``right``, ``bottom``) and size (``width``,\n``height``) parameters are all optional, but you should specify exactly two of top,\nbottom, and height and exactly two of left, right, and width for predictable\nresults.\n\nLike most other distance parameters in Shiny, the position and size parameters take\na number (interpreted as pixels) or a valid CSS size string, such as ``\"100px\"``\n(100 pixels) or ``\"25%\"``.\n\nFor arcane HTML reasons, to have the panel fill the page or parent you should\nspecify 0 for ``top``, ``left``, ``right``, and ``bottom`` rather than the more\nobvious ``width = \"100%\"`` and ``height = \"100%\"``.\n",
        "Examples": "from shiny.express import ui\n\nui.h2(\"A basic absolute panel example\")\n\nwith ui.panel_absolute(draggable=True, width=\"300px\", right=\"50px\", top=\"25%\"):\n    with ui.panel_well():\n        \"Drag me around!\"\n        ui.input_slider(\"n\", \"N\", min=0, max=100, value=20)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.panel_conditional",
        "Usage": "express.ui.panel_conditional(condition, **kwargs)",
        "Description": "Context manager for a conditional panel\n\nThis function wraps [](:func:`~shiny.ui.panel_conditional`).\n\nShow UI elements only if a ``JavaScript`` condition is ``true``.",
        "Parameters": "\n<code>[**condition**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A JavaScript expression that will be evaluated repeatedly to determine whether the panel should be displayed.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Attributes to place on the panel tag.\n\n## Note {.doc-section .doc-section-note}\n\nIn the JS expression, you can refer to input and output JavaScript objects that\ncontain the current values of input and output. For example, if you have an input\nwith an id of foo, then you can use input.foo to read its value. (Be sure not to\nmodify the input/output objects, as this may cause unpredictable behavior.)\n\nYou are not recommended to use special JavaScript characters such as a period . in\nthe input id's, but if you do use them anyway, for example, ``id = \"foo.bar\"``, you\nwill have to use ``input[\"foo.bar\"]`` instead of ``input.foo.bar`` to read the input\nvalue.\n\n## Tip {.doc-section .doc-section-tip}\n\nA more powerful (but slower) way to conditionally show UI content is to use\n[](:class:`~shiny.express.render.ui`).\n",
        "Examples": "from shiny.express import ui\n\nui.input_checkbox(\"show\", \"Show radio buttons\", False)\n\nwith ui.panel_conditional(\"input.show\"):\n    ui.input_radio_buttons(\"radio\", \"Choose \", [\"slider\", \"select\"])\n\nwith ui.panel_conditional(\"input.show && input.radio === 'slider'\"):\n    ui.input_slider(\"slider\", None, min=0, max=100, value=50)\n\nwith ui.panel_conditional(\"input.show && input.radio === 'select'\"):\n    ui.input_select(\"select\", None, [\"A\", \"B\", \"C\"])\n\n\n\n================"
    },
    {
        "File Name": "express.ui.panel_title",
        "Usage": "express.ui.panel_title(title, window_title=MISSING)",
        "Description": "Create title(s) for the application.",
        "Parameters": "\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [Tag](`htmltools.Tag`) \\| [TagList](`htmltools.TagList`)]{.parameter-annotation}</code>\n\n:   A title to display in the app's UI.\n\n<code>[**window_title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   A title to display on the browser tab.\n",
        "Examples": "from shiny.express import ui\n\nui.panel_title(\"Page title\", \"Window title\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.popover",
        "Usage": "express.ui.popover(\n    title=None,\n    id=None,\n    placement='auto',\n    options=None,\n    **kwargs,\n)",
        "Description": "Context manager for a popover\n\nThis function wraps [](:func:`~shiny.ui.popover`).\n\nDisplay additional information when clicking on a UI element (typically a\nbutton).",
        "Parameters": "\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[TagChild](`htmltools.TagChild`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A title to display in the popover. Can be a character string or UI elements (i.e., tags).\n\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A character string. Required to reactively respond to the visibility of the popover (via the `input[id]` value) and/or update the visibility/contents of the popover.\n\n<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['auto', 'top', 'right', 'bottom', 'left'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'auto\\']{.parameter-default}</code>\n\n:   The placement of the popover relative to its trigger.\n\n<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[dict](`dict`)\\[[str](`str`), [object](`object`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A list of additional [Bootstrap options](https://getbootstrap.com/docs/5.3/components/popovers/#options).\n",
        "Examples": "from icons import gear_fill\n\nfrom shiny.express import input, render, ui\n\nwith ui.popover(id=\"btn_popover\"):\n    ui.input_action_button(\"btn\", \"A button\", class_=\"mt-3\")\n\n    \"A popover with more context and information than should be used in a tooltip.\"\n    \"You can even have multiple DOM elements in a popover!\"\n\n\nwith ui.card(class_=\"mt-3\"):\n    with ui.card_header():\n        \"Plot title (Click the gear to change variables)\"\n        with ui.popover(placement=\"right\", id=\"card_popover\"):\n            ui.span(gear_fill, style=\"position:absolute; top: 5px; right: 7px;\")\n            \"Put dropdowns here to alter your plot!\"\n            ui.input_selectize(\"x\", \"X\", [\"x1\", \"x2\", \"x3\"])\n            ui.input_selectize(\"y\", \"Y\", [\"y1\", \"y2\", \"y3\"])\n\n    @render.text\n    def plot_txt():\n        return f\"<Making plot using x: {input.x()} and y: {input.y()}>\"\n\n\nfrom shiny import ui\n\n# https://icons.getbootstrap.com/icons/gear-fill/\ngear_fill = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-gear-fill\" viewBox=\"0 0 16 16\"><path d=\"M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z\"/></svg>'\n)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.Progress",
        "Usage": "express.ui.Progress(self, min=0, max=1, session=None)",
        "Description": "Initialize a progress bar.\n\n`Progress` creates a computation manager that can be used with `with` to\nrun a block of code. Shiny will display a progress bar while the code runs, which\nyou can update by calling the `set()` and `message()` methods of the computation\nmanager at strategic points in the code block.",
        "Parameters": "\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>\n\n:   The value that represents the starting point of the progress bar. Must be less than ``max``.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>\n\n:   The value that represents the end of the progress bar. Must be greater than ``min``.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The [](:class:`~shiny.Session`) instance that the progress bar should appear in. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).\n",
        "Examples": "import asyncio\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_action_button(\"button\", \"Compute\")\n\n\n@render.text\n@reactive.event(input.button)\nasync def compute():\n    with ui.Progress(min=1, max=15) as p:\n        p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n        for i in range(1, 15):\n            p.set(i, message=\"Computing\")\n            await asyncio.sleep(0.1)\n            # Normally use time.sleep() instead, but it doesn't yet work in Pyodide.\n            # https://github.com/pyodide/pyodide/issues/2354\n\n    return \"Done computing!\"\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [close](#shiny.express.ui.Progress.close) | Close the progress bar. You can also use the Progress object as a context manager, which will cause the progress bar to close on exit. |\n| [inc](#shiny.express.ui.Progress.inc) | Increment the progress bar. |\n| [set](#shiny.express.ui.Progress.set) | Opens and updates the progress panel. |\n\n### close { #shiny.express.ui.Progress.close }\n\nexpress.ui.Progress.close()\n\nClose the progress bar. You can also use the Progress object as a context\nmanager, which will cause the progress bar to close on exit.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>\n\n:   The object instance\n\n#### Note {.doc-section .doc-section-note}\n\nRemoves the progress panel. Future calls to set and close will be ignored.\n\n### inc { #shiny.express.ui.Progress.inc }\n\nexpress.ui.Progress.inc(amount=0.1, message=None, detail=None)\n\nIncrement the progress bar.\n\nLike ``set``, this updates the progress panel. The difference is that ``inc``\nincreases the progress bar by amount, instead of setting it to a specific value.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>\n\n:   The object instance\n\n<code>[**amount**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0.1]{.parameter-default}</code>\n\n:   The amount to increment in progress.\n\n<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The message to be displayed to the user or ``None`` to hide the current message (if any).\n\n<code>[**detail**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The detail message to be displayed to the user or ``None`` to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\n\n### set { #shiny.express.ui.Progress.set }\n\nexpress.ui.Progress.set(value=None, message=None, detail=None)\n\nOpens and updates the progress panel.\n\nWhen called the first time, the progress panel is displayed.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>\n\n:   The object instance\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The value at which to set the progress bar, relative to ``min`` and ``max``. ``None`` hides the progress bar, if it is currently visible.\n\n<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The message to be displayed to the user or ``None`` to hide the current message (if any).\n\n<code>[**detail**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The detail message to be displayed to the user or ``None`` to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.\n\n================"
    },
    {
        "File Name": "express.ui.remove_accordion_panel",
        "Usage": "express.ui.remove_accordion_panel(id, target, session=None)",
        "Description": "Remove an [](:func:`~shiny.express.ui.accordion_panel`).",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A string that matches an existing [](:func:`~shiny.express.ui.accordion`)'s `id`.\n\n<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [list](`list`)\\[[str](`str`)\\]]{.parameter-annotation}</code>\n\n:   The `value` of an existing panel to remove.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A Shiny session object (the default should almost always be used).\n\n## References {.doc-section .doc-section-references}\n\n[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)\n",
        "Examples": "import random\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nchoices = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nrandom.shuffle(choices)\n\nui.input_action_button(\n    \"remove_panel\",\n    f\"Remove Section {choices[-1]}\",\n    class_=\"mt-3 mb-3\",\n)\n\n\" (Sections randomly picked at server start)\"\n\nwith ui.accordion(id=\"acc\", multiple=True):\n    for letter in \"ABCDE\":\n        with ui.accordion_panel(f\"Section {letter}\"):\n            f\"Some narrative for section {letter}\"\n\n\nuser_choices = [choice for choice in choices]\n\n\n@reactive.effect\n@reactive.event(input.remove_panel)\ndef _():\n    if len(user_choices) == 0:\n        ui.notification_show(\"No more panels to remove!\")\n        return\n\n    ui.remove_accordion_panel(\"acc\", f\"Section {user_choices.pop()}\")\n\n    label = \"No more panels to remove!\"\n    if len(user_choices) > 0:\n        label = f\"Remove Section {user_choices[-1]}\"\n    ui.update_action_button(\"remove_panel\", label=label)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.remove_ui",
        "Usage": "express.ui.remove_ui(selector, multiple=False, immediate=False, session=None)",
        "Description": "Remove UI objects.",
        "Parameters": "\n<code>[**selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A string that is accepted by jQuery's selector (i.e. the string ``x`` to be placed in a ``$(x)`` jQuery call), which determines the element(s) to remove. If you want to remove a Shiny input or output, note that many of these are wrapped in ``<div>``s, so you may need to use a somewhat complex selector \u2014 see the Examples below. (Alternatively, you could also wrap the inputs/outputs that you want to be able to remove easily in a ``<div>`` with an id.)\n\n<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   In case your selector matches more than one element, ``multiple`` determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).\n\n<code>[**immediate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Whether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session._session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"rmv\", \"Remove UI\")\nui.input_text(\"txt\", \"Click button above to remove me\")\n\n\n@reactive.effect\n@reactive.event(input.rmv)\ndef _():\n    ui.remove_ui(selector=\"div:has(> #txt)\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.sidebar",
        "Usage": "express.ui.sidebar(\n    position='left',\n    open=None,\n    width=250,\n    id=None,\n    title=None,\n    bg=None,\n    fg=None,\n    class_=None,\n    max_height_mobile=None,\n    gap=None,\n    padding=None,\n    **kwargs,\n)",
        "Description": "Context manager for sidebar element\n\nThis function wraps [](:func:`~shiny.ui.sidebar`).",
        "Parameters": "\n<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.express.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [250]{.parameter-default}</code>\n\n:   A valid CSS unit used for the width of the sidebar.\n\n<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['left', 'right'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'left\\']{.parameter-default}</code>\n\n:   Where the sidebar should appear relative to the main content, one of `\"left\"` or `\"right\"`.\n\n<code>[**open**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SidebarOpenSpec](`shiny.express.ui._sidebar.SidebarOpenSpec`) \\| [SidebarOpenValue](`shiny.express.ui._sidebar.SidebarOpenValue`) \\| [Literal](`typing.Literal`)\\['desktop'\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The initial state of the sidebar. If a string, the possible values are:  * `\"open\"`: the sidebar starts open * `\"closed\"`: the sidebar starts closed * `\"always\"`: the sidebar is always open and cannot be closed  Alternatively, you can provide a dictionary with keys `\"desktop\"` and `\"mobile\"` to set different initial states for desktop and mobile. For example, when `{\"desktop\": \"open\", \"mobile\": \"closed\"}` the sidebar is initialized in the open state on desktop screens or in the closed state on mobile screens.\n\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A character string. Required if wanting to reactively read (or update) the `collapsible` state in a Shiny app.\n\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \\| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A character title to be used as the sidebar title, which will be wrapped in a `<div>` element with class `sidebar-title`. You can also provide a custom [](:class:`~htmltools.Tag`) for the title element, in which case you'll likely want to give this element `class = \"sidebar-title\"`.\n\n<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A background or foreground color.\n\n<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   CSS classes for the sidebar container element, in addition to the fixed `.sidebar` class.\n\n<code>[**max_height_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A CSS length unit (passed through [](:func:`~shiny.express.ui.css.as_css_unit`)) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.\n\n<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements provided to `*args`.\n\n<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`) \\| [list](`list`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Padding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. `padding` may be one to four values.  * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while   the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left   and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left   respectively.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Named attributes are supplied to the sidebar content container.\n",
        "Examples": "from shiny.express import input, render, ui\n\nui.page_opts(fillable=True)\n\nwith ui.card():\n    with ui.layout_sidebar():\n        with ui.sidebar(id=\"sidebar_left\", open=\"desktop\"):\n            \"Left sidebar content\"\n\n        @render.code\n        def state_left():\n            return f\"input.sidebar_left(): {input.sidebar_left()}\"\n\n\nwith ui.card():\n    with ui.layout_sidebar():\n        with ui.sidebar(id=\"sidebar_right\", position=\"right\", open=\"desktop\"):\n            \"Right sidebar content\"\n\n        @render.code\n        def state_right():\n            return f\"input.sidebar_right(): {input.sidebar_right()}\"\n\n\nwith ui.card():\n    with ui.layout_sidebar():\n        with ui.sidebar(id=\"sidebar_closed\", open=\"closed\"):\n            \"Closed sidebar content\"\n\n        @render.code\n        def state_closed():\n            return f\"input.sidebar_closed(): {input.sidebar_closed()}\"\n\n\nwith ui.card():\n    with ui.layout_sidebar():\n        with ui.sidebar(id=\"sidebar_always\", open=\"always\"):\n            \"Always sidebar content\"\n\n        @render.code\n        def state_always():\n            return f\"input.sidebar_always(): {input.sidebar_always()}\"\n\n\n\n================"
    },
    {
        "File Name": "express.ui.TagList",
        "Usage": "express.ui.TagList(self, *args)",
        "Description": "Create an HTML tag list (i.e., a fragment of HTML)",
        "Parameters": "\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools._core.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   The tag children to add to the list.\n",
        "Examples": ">>> from htmltools import TagList, div\n>>> TagList(\"hello\", div(id=\"foo\", class_=\"bar\"))\nhello\n<div id=\"foo\" class=\"bar\"></div>\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [append](#shiny.express.ui.TagList.append) | Append tag children to the end of the list. |\n| [extend](#shiny.express.ui.TagList.extend) | Extend the children by appending an iterable of children. |\n| [get_dependencies](#shiny.express.ui.TagList.get_dependencies) | Get any dependencies needed to render the HTML. |\n| [get_html_string](#shiny.express.ui.TagList.get_html_string) | Return the HTML string for this tag list. |\n| [insert](#shiny.express.ui.TagList.insert) | Insert tag children before a given index. |\n| [render](#shiny.express.ui.TagList.render) | Get string representation as well as its HTML dependencies. |\n| [save_html](#shiny.express.ui.TagList.save_html) | Save to a HTML file. |\n| [show](#shiny.express.ui.TagList.show) | Preview as a complete HTML document. |\n| [tagify](#shiny.express.ui.TagList.tagify) | Convert any tagifiable children to Tag/TagList objects. |\n\n### append { #shiny.express.ui.TagList.append }\n\nexpress.ui.TagList.append(item, *args)\n\nAppend tag children to the end of the list.\n\n### extend { #shiny.express.ui.TagList.extend }\n\nexpress.ui.TagList.extend(other)\n\nExtend the children by appending an iterable of children.\n\n### get_dependencies { #shiny.express.ui.TagList.get_dependencies }\n\nexpress.ui.TagList.get_dependencies(dedup=True)\n\nGet any dependencies needed to render the HTML.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**dedup**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether to deduplicate the dependencies.\n\n### get_html_string { #shiny.express.ui.TagList.get_html_string }\n\nexpress.ui.TagList.get_html_string(\n    indent=0,\n    eol='\\n',\n    *,\n    add_ws=True,\n    _escape_strings=True,\n)\n\nReturn the HTML string for this tag list.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**indent**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>\n\n:   Number of spaces to indent each line of the HTML.\n\n<code>[**eol**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'\\n\\']{.parameter-default}</code>\n\n:   End-of-line character(s).\n\n<code>[**add_ws**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether to add whitespace between the opening tag and the first child. If either this is True, or the child's add_ws attribute is True, then whitespace will be added; if they are both False, then no whitespace will be added.\n\n### insert { #shiny.express.ui.TagList.insert }\n\nexpress.ui.TagList.insert(i, item)\n\nInsert tag children before a given index.\n\n### render { #shiny.express.ui.TagList.render }\n\nexpress.ui.TagList.render()\n\nGet string representation as well as its HTML dependencies.\n\n### save_html { #shiny.express.ui.TagList.save_html }\n\nexpress.ui.TagList.save_html(file, *, libdir='lib', include_version=True)\n\nSave to a HTML file.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**file**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   The file to save to.\n\n<code>[**libdir**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'lib\\']{.parameter-default}</code>\n\n:   The directory to save the dependencies to.\n\n<code>[**include_version**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether to include the version number in the dependency folder name.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   The path to the generated HTML file.\n\n### show { #shiny.express.ui.TagList.show }\n\nexpress.ui.TagList.show(renderer='auto')\n\nPreview as a complete HTML document.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**renderer**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['auto', 'ipython', 'browser'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'auto\\']{.parameter-default}</code>\n\n:   The renderer to use.\n\n### tagify { #shiny.express.ui.TagList.tagify }\n\nexpress.ui.TagList.tagify()\n\nConvert any tagifiable children to Tag/TagList objects.\n\n================"
    },
    {
        "File Name": "express.ui.Theme",
        "Usage": "express.ui.Theme(self, preset=None, name=None, include_paths=None)",
        "Description": "Create a custom Shiny theme.\n\nThe `Theme` class allows you to create a custom Shiny theme by providing custom Sass\ncode. The theme can be based on one of the available presets, such as `\"shiny\"` or\n`\"bootstrap\"`, or a Bootswatch theme. Use the `.add_*()` methods can be chained\ntogether to add custom Sass functions, defaults, mixins, and rules.\n\nPass the `Theme` object directly to the `theme` argument of any Shiny page function,\nsuch as [](:func:`~shiny.express.ui.page_sidebar`) or [](:func:`~shiny.express.ui.page_navbar`). In Shiny\nExpress apps, use the `theme` argument of [](:func:`~shiny.express.ui.page_opts`) to set\nthe app theme.\n\n**Note: Compiling custom themes requires the\n[libsass](https://pypi.org/project/libsass/) package**, which is not installed by\ndefault with Shiny. Use `pip install libsass` or `pip install \"shiny[theme]\"` to\ninstall it.\n\nCustomized themes are compiled to CSS when the theme is used. The `Theme` class\ncaches the compiled CSS so that it&#x27;s only compiled for the first user to load your\napp, but you can speed up app loading (and avoid the runtime `libsass` dependency)\nby pre-compiling the theme CSS and saving it to a file. To do this, use the\n`.to_css()` method to render the theme to a single minified CSS string.\n\n```{.python filename=\"my_theme.py\"}\nfrom pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\")\n    .add_defaults(\n        my_purple=\"#aa00aa\",\n    )\n    .add_mixins(\n        headings_color=\"$my-purple\",\n    )\n)\n\nwith open(Path(__file__).parent / \"my_theme.css\", \"w\") as f:\n    f.write(my_theme.to_css())\n```\n\nRun this script with `python my_theme.py` to generate the CSS file. Once saved to a\nfile, the CSS can be used in any Shiny app by passing the file path to the `theme`\nargument instead of the `Theme` object.\n\n```{.python filename=\"app.py\"}\nfrom pathlib import Path\n\nfrom shiny import App, ui\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello, themed Shiny!\"),\n    # App content here\n    title=\"My App\",\n    theme=Path(__file__).parent / \"my_theme.css\",\n)\n\ndef server(input):\n    pass\n\napp = App(app_ui, server)\n```",
        "Parameters": "\n<code>[**preset**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The name of the preset to use as a base. `\"shiny\"` is the default theme for Shiny apps and `\"bootstrap\"` uses standard Bootstrap 5 styling. Bootswatch theme presets are also available. Use `Theme.available_presets()` to see the full list.\n\n<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A custom name for the theme. If not provided, the preset name will be used.\n\n<code>[**include_paths**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [pathlib](`pathlib`).[Path](`pathlib.Path`) \\| [list](`list`)\\[[str](`str`) \\| [pathlib](`pathlib`).[Path](`pathlib.Path`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Additional paths to include when looking for Sass files used in `@import` statements in the theme. This can be a single path as a string or [](:class:`pathlib.Path`), or a list of paths. The paths should point to directories containing additional Sass files that the theme depends on.\n\n## Raises {.doc-section .doc-section-raises}\n\n<code>[:]{.parameter-annotation-sep} [[ValueError](`ValueError`)]{.parameter-annotation}</code>\n\n:   If the `preset` is not a valid theme preset.\n",
        "Examples": "from shared import filler_text, my_theme\n\nfrom shiny.express import input, render, ui\n\nui.page_opts(\n    title=\"Theme Example\",\n    theme=my_theme,\n)\n\nwith ui.sidebar(title=\"Parameters\"):\n    ui.input_numeric(\"n\", \"N\", min=0, max=100, value=20)\n    ui.input_slider(\"m\", \"M\", min=0, max=100, value=50)\n    ui.input_selectize(\"letter\", \"Letter\", choices=[\"A\", \"B\", \"C\"])\n\nui.h2(\"Output\")\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"\n\n\nui.markdown(filler_text)\n\n\nfrom pathlib import Path\n\nfrom shiny import ui\n\nmy_theme = (\n    ui.Theme(\"shiny\", include_paths=Path(__file__).parent)\n    .add_defaults(\n        bslib_dashboard_design=True,\n    )\n    .add_mixins(\n        headings_color=\"$success\",\n        bar_color=\"$purple\",\n        select_color_text=\"$orange\",\n    )\n    .add_rules(\n        \"\"\"\n        em { color: $warning; }\n        .sidebar-title { color: $danger; }\n        \"\"\"\n    )\n    .add_rules('@import \"css/rules.scss\";')\n)\n\n\nif False:\n    # To avoid runtime Sass compilation, save your theme CSS to a file\n    # and then use that CSS file in the `theme` argument.\n    css_dir = Path(__file__).parent / \"css\"\n    css_dir.mkdir(exist_ok=True)\n    with open(css_dir / \"shiny-theme-demo.css\", \"w\") as f:\n        f.write(my_theme.to_css())\n\nfiller_text = \"\"\"\n**AI-generated filler text.** In the world of exotic fruits, the durian stands out with its spiky exterior and strong odor. Despite its divisive smell, many people are drawn to its rich, creamy texture and unique flavor profile. This tropical fruit is often referred to as the \"king of fruits\" in various Southeast Asian countries.\n\nDurians are known for their large size and thorn-covered husk, _which requires careful handling_. The flesh inside can vary in color from pale yellow to deep orange, with a custard-like consistency that melts in your mouth. Some describe its taste as a mix of sweet, savory, and creamy, while others find it overpowering and pungent.\n\"\"\"\n\n\n@import url(\"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Source+Code+Pro:ital,wght@0,400;0,600;1,400;1,600&display=swap\");:root{}/*!\n   * Bootstrap  v5.3.1 (https://getbootstrap.com/)\n   * Copyright 2011-2023 The Bootstrap Authors\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   */:root{--bs-font-monospace: \"Source Code Pro\", SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;--bs-body-font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--bs-body-font-size:1rem;--bs-body-font-weight: 400;--bs-body-line-height: 1.5;--bs-body-color: #1D1F21;--bs-body-bg: #fff;--bs-emphasis-color: #000;--bs-emphasis-color-rgb: 0,0,0;--bs-secondary-color: rgba(29,31,33,0.75);--bs-secondary-bg: #e9ecef;--bs-tertiary-bg: #f8f8f8;--bs-heading-color: #00891a;--bs-link-color-rgb: 0,123,194;--bs-link-hover-color-rgb: 0,98,155;--bs-border-width: 1px;--bs-border-color: #dee2e6;--bs-border-color-translucent: rgba(40,70,94,0.1);--bs-border-radius: 3px}*,*::before,*::after{box-sizing:border-box}@media (prefers-reduced-motion: no-preference){:root{scroll-behavior:smooth}}body{margin:0;font-family:var(--bs-body-font-family);font-size:var(--bs-body-font-size);font-weight:var(--bs-body-font-weight);line-height:var(--bs-body-line-height);color:var(--bs-body-color);text-align:var(--bs-body-text-align);background-color:var(--bs-body-bg);-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}h2,.h2,h1,.h1{margin-top:0;margin-bottom:.5rem;font-weight:400;line-height:1.2;color:var(--bs-heading-color)}h1,.h1{font-size:calc(1.335rem + 1.02vw)}@media (min-width: 1200px){h1,.h1{font-size:2.1rem}}h2,.h2{font-size:calc(1.325rem + .9vw)}@media (min-width: 1200px){h2,.h2{font-size:2rem}}p{margin-top:0;margin-bottom:1rem}strong{font-weight:bolder}a{color:rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1));text-decoration:underline;-webkit-text-decoration:underline;-moz-text-decoration:underline;-ms-text-decoration:underline;-o-text-decoration:underline}a:hover{--bs-link-color-rgb: var(--bs-link-hover-color-rgb)}a:not([href]):not([class]),a:not([href]):not([class]):hover{color:inherit;text-decoration:none}pre{font-family:var(--bs-font-monospace);font-size:1em}pre{display:block;margin-top:0;margin-bottom:1rem;overflow:auto;font-size:.875em;color:RGB(var(--bs-emphasis-color-rgb, 0, 0, 0));background-color:RGBA(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.04);padding:.5rem;border:1px solid var(--bs-border-color, #dee2e6);border-radius:3px}img,svg{vertical-align:middle}label{display:inline-block}button{border-radius:0}button:focus:not(:focus-visible){outline:0}input,button{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button{text-transform:none}[role=\"button\"]{cursor:pointer}button,[type=\"button\"]{-webkit-appearance:button}button:not(:disabled),[type=\"button\"]:not(:disabled){cursor:pointer}::-moz-focus-inner{padding:0;border-style:none}::-webkit-datetime-edit-fields-wrapper,::-webkit-datetime-edit-text,::-webkit-datetime-edit-minute,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding:0}::-webkit-inner-spin-button{height:auto}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-color-swatch-wrapper{padding:0}::file-selector-button{font:inherit;-webkit-appearance:button}.container-fluid{--bs-gutter-x: 1.5rem;width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-right:auto;margin-left:auto}:root{}.shiny-input-container .control-label{margin-bottom:.5rem}.form-control{display:block;width:100%;padding:.375rem .75rem;font-size:.9375rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);appearance:none;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;-o-appearance:none;background-color:var(--bs-body-bg);background-clip:padding-box;border:var(--bs-border-width) solid #8D959E;border-radius:var(--bs-border-radius);transition:border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.form-control{transition:none}}.form-control:focus{color:var(--bs-body-color);background-color:var(--bs-body-bg);border-color:#80bde1;outline:0;box-shadow:0 0 0 .25rem rgba(0,123,194,0.25)}.form-control::-webkit-date-and-time-value{min-width:85px;height:1.5em;margin:0}.form-control::-webkit-datetime-edit{display:block;padding:0}.form-control::placeholder{color:var(--bs-secondary-color);opacity:1}.form-control:disabled{background-color:var(--bs-secondary-bg);opacity:1}.form-control::file-selector-button{padding:.375rem .75rem;margin:-.375rem -.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;transition:color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.form-control::file-selector-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::file-selector-button{background-color:var(--bs-secondary-bg)}.navbar{--bs-navbar-padding-x: .66rem;--bs-navbar-padding-y: .5rem;--bs-navbar-brand-padding-y: .3125rem;--bs-navbar-brand-margin-end: 1rem;--bs-navbar-brand-font-size: 1.25rem;--bs-navbar-brand-color: rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-hover-color: rgba(var(--bs-emphasis-color-rgb), 1);position:relative;display:flex;display:-webkit-flex;flex-wrap:wrap;-webkit-flex-wrap:wrap;align-items:center;-webkit-align-items:center;justify-content:space-between;-webkit-justify-content:space-between;padding:var(--bs-navbar-padding-y) var(--bs-navbar-padding-x)}.navbar>.container-fluid{display:flex;display:-webkit-flex;flex-wrap:inherit;-webkit-flex-wrap:inherit;align-items:center;-webkit-align-items:center;justify-content:space-between;-webkit-justify-content:space-between}.navbar-brand{padding-top:var(--bs-navbar-brand-padding-y);padding-bottom:var(--bs-navbar-brand-padding-y);margin-right:var(--bs-navbar-brand-margin-end);font-size:var(--bs-navbar-brand-font-size);color:var(--bs-navbar-brand-color);text-decoration:none;-webkit-text-decoration:none;-moz-text-decoration:none;-ms-text-decoration:none;-o-text-decoration:none;white-space:nowrap}.navbar-brand:hover,.navbar-brand:focus{color:var(--bs-navbar-brand-hover-color)}@keyframes progress-bar-stripes{0%{background-position-x:1rem}}@keyframes spinner-border{to{transform:rotate(360deg) /* rtl:ignore */}}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1;transform:none}}@keyframes placeholder-glow{50%{opacity:.2}}@keyframes placeholder-wave{100%{mask-position:-200% 0%;-webkit-mask-position:-200% 0%}}:root{--bslib-spacer: 1.5rem;--bslib-mb-spacer: var(--bslib-spacer, 1rem)}.bslib-mb-spacing{margin-bottom:var(--bslib-mb-spacer)}.bslib-gap-spacing{gap:var(--bslib-mb-spacer)}.bslib-gap-spacing>.bslib-mb-spacing,.bslib-gap-spacing>.form-group,.bslib-gap-spacing>p,.bslib-gap-spacing>pre{margin-bottom:0}.html-fill-container>.html-fill-item.bslib-mb-spacing{margin-bottom:0}:root{}:root{--bslib-dashboard-main-bg: rgb(247, 247, 247);--bs-card-border-color: var(--bslib-dashboard-border-color-translucent, var(--bs-border-color-translucent));--bslib-sidebar-bg: var(--bs-body-bg);--bslib-sidebar-fg: var(--bs-color)}.main:has(.tab-content>.bslib-page-dashboard.active){background-color:var(--bslib-dashboard-main-bg);--_main-bg: var(--bslib-dashboard-main-bg)}.bslib-page-sidebar{--bslib-page-sidebar-title-bg: var(--bs-body-bg);--bslib-page-sidebar-title-color: var(--bs-body-color)}.bslib-page-sidebar .bslib-page-title{border-color:var(--bs-border-color-translucent)}@keyframes bslib-full-screen-overlay-enter{0%{opacity:0}100%{opacity:1}}.bslib-page-fill{width:100%;height:100%;margin:0;padding:var(--bslib-spacer, 1rem);gap:var(--bslib-spacer, 1rem)}@media (max-width: 575.98px){.bslib-flow-mobile>.html-fill-item{flex:0 0 auto}.bslib-flow-mobile.bslib-page-sidebar>.html-fill-item{flex:1 1 auto}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout>.main>.html-fill-item{flex:0 0 auto}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout:not(.sidebar-right)>.main{padding-left:var(--_padding-icon);padding-top:var(--_padding)}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout:not(.sidebar-right)>.collapse-toggle{left:calc(var(--_icon-size) / 2)}}.navbar+.container-fluid:has(>.tab-content>.tab-pane.active.html-fill-container){padding-left:0;padding-right:0}.navbar+div>.bslib-sidebar-layout{border-top:var(--bslib-sidebar-border)}:root{--bslib-page-sidebar-title-bg: #202020;--bslib-page-sidebar-title-color: #fff}.bslib-page-sidebar>.navbar{--bs-navbar-brand-color: var(--bslib-page-sidebar-title-color);border-bottom:var(--bs-border-width) solid var(--bs-border-color-translucent);background-color:var(--bslib-page-sidebar-title-bg);color:var(--bslib-page-sidebar-title-color)}.bslib-page-sidebar .bslib-page-title{margin-bottom:0;line-height:var(--bs-body-line-height)}.bslib-sidebar-layout{--_transition-duration: 0;--_transition-easing-x: var(--bslib-sidebar-transition-easing-x, cubic-bezier(0.8, 0.78, 0.22, 1.07));--_border: var(--bslib-sidebar-border, var(--bs-card-border-width, var(--bs-border-width)) solid var(--bs-card-border-color, var(--bs-border-color-translucent)));--_border-radius: var(--bslib-sidebar-border-radius, var(--bs-border-radius));--_vert-border: var(--bslib-sidebar-vert-border, var(--_border));--_sidebar-width: var(--bslib-sidebar-width, 250px);--_sidebar-bg: var(--bslib-sidebar-bg, rgba(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.05));--_sidebar-fg: var(--bslib-sidebar-fg, var(--bs-emphasis-color, black));--_main-fg: var(--bslib-sidebar-main-fg, var(--bs-card-color, var(--bs-body-color)));--_main-bg: var(--bslib-sidebar-main-bg, transparent);--_toggle-bg: var(--bslib-sidebar-toggle-bg, rgba(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.1));--_padding: var(--bslib-sidebar-padding, var(--bslib-spacer, 1.5rem));--_icon-size: var(--bslib-sidebar-icon-size, 1rem);--_icon-button-size: var(--bslib-sidebar-icon-button-size, calc(var(--_icon-size, 1rem) * 2));--_padding-icon: calc(var(--_icon-button-size, 2rem) * 1.5);--_toggle-border-radius: var(--bslib-collapse-toggle-border-radius, var(--bs-border-radius, 3px));--_toggle-transform: var(--bslib-collapse-toggle-transform, 0deg);--_toggle-transition-easing: var(--bslib-sidebar-toggle-transition-easing, cubic-bezier(1, 0, 0, 1));--_mobile-max-height: var(--bslib-sidebar-mobile-max-height, var(--bslib-sidebar-max-height-mobile));--_sidebar-mobile-opacity: var(--bslib-sidebar-mobile-opacity);--_sidebar-mobile-max-width: var(--bslib-sidebar-mobile-max-width);--_sidebar-mobile-box-shadow: var(--bslib-sidebar-mobile-box-shadow);--_column-main: minmax(0, 1fr);--_toggle-collective-height: calc(calc(var(--_icon-button-size) + 0.5em) * var(--_js-toggle-count-max-side, 1));display:grid !important;grid-template-columns:Min(calc(100% - var(--_padding-icon)), var(--_sidebar-width)) var(--_column-main);position:relative;transition:grid-template-columns ease-in-out var(--_transition-duration);border:var(--_border);border-radius:var(--_border-radius)}@media (prefers-reduced-motion: reduce){.bslib-sidebar-layout{transition:none}}.bslib-sidebar-layout,.html-fill-container>.bslib-sidebar-layout.html-fill-item{min-height:var(--_toggle-collective-height)}.bslib-sidebar-layout[data-bslib-sidebar-border=\"false\"]{border:none}.bslib-sidebar-layout[data-bslib-sidebar-border-radius=\"false\"]{border-radius:initial}.bslib-sidebar-layout>.main,.bslib-sidebar-layout>.sidebar{grid-row:1 / 2;border-radius:inherit;overflow:auto}.bslib-sidebar-layout>.main{grid-column:2 / 3;border-top-left-radius:0;border-bottom-left-radius:0;padding:var(--_padding);transition:padding var(--_transition-easing-x) var(--_transition-duration);color:var(--_main-fg);background-color:var(--_main-bg)}.bslib-sidebar-layout>.sidebar{grid-column:1 / 2;width:100%;border-right:var(--_vert-border);border-top-right-radius:0;border-bottom-right-radius:0;color:var(--_sidebar-fg);background-color:var(--_sidebar-bg);backdrop-filter:blur(5px)}.bslib-sidebar-layout>.sidebar>.sidebar-content{display:flex;flex-direction:column;gap:var(--bslib-spacer, 1rem);padding:var(--_padding);padding-top:var(--_padding-icon)}.bslib-sidebar-layout>.sidebar>.sidebar-content>:last-child:not(.sidebar-title){margin-bottom:0}.bslib-sidebar-layout>.sidebar .shiny-input-container{width:100%}.bslib-sidebar-layout>.collapse-toggle{grid-row:1 / 2;grid-column:1 / 2;z-index:1000;display:inline-flex;align-items:center;position:absolute;right:calc(var(--_icon-size));top:calc(var(--_icon-size, 1rem) / 2);border:none;border-radius:var(--_toggle-border-radius);height:var(--_icon-button-size, 2rem);width:var(--_icon-button-size, 2rem);display:flex;align-items:center;justify-content:center;padding:0;color:var(--_sidebar-fg);background-color:unset;transition:color var(--_transition-easing-x) var(--_transition-duration),top var(--_transition-easing-x) var(--_transition-duration),right var(--_transition-easing-x) var(--_transition-duration),left var(--_transition-easing-x) var(--_transition-duration)}.bslib-sidebar-layout>.collapse-toggle:hover{background-color:var(--_toggle-bg)}.bslib-sidebar-layout>.collapse-toggle>.collapse-icon{opacity:0.8;width:var(--_icon-size);height:var(--_icon-size);transform:rotateY(var(--_toggle-transform));transition:transform var(--_toggle-transition-easing) var(--_transition-duration)}.bslib-sidebar-layout>.collapse-toggle:hover>.collapse-icon{opacity:1}.bslib-sidebar-layout .sidebar-title{font-size:1.25rem;line-height:1.25;margin-top:0;margin-bottom:1rem;padding-bottom:1rem;border-bottom:var(--_border)}.bslib-sidebar-layout{}@media (max-width: 575.98px){.bslib-sidebar-layout{}}@media (min-width: 576px){.bslib-sidebar-layout[data-collapsible-desktop=\"false\"]{--_padding-icon: var(--_padding)}.bslib-sidebar-layout[data-collapsible-desktop=\"false\"]>.collapse-toggle{display:none}}@media (max-width: 575.98px){.bslib-sidebar-layout>.sidebar{border:none}.bslib-sidebar-layout>.main{grid-column:1 / 3}.bslib-sidebar-layout[data-collapsible-mobile=\"true\"]{grid-template-columns:100% 0}.bslib-sidebar-layout[data-collapsible-mobile=\"true\"]:not(.sidebar-collapsed)>.sidebar{z-index:1045}.bslib-sidebar-layout[data-collapsible-mobile=\"true\"]:not(.sidebar-collapsed)>.collapse-toggle{z-index:1045}.bslib-sidebar-layout[data-collapsible-mobile=\"true\"]:not(.sidebar-right)>.collapse-toggle{left:var(--_icon-size);right:unset}.bslib-sidebar-layout[data-collapsible-mobile=\"true\"]>.sidebar{opacity:var(--_sidebar-mobile-opacity, 1);max-width:var(--_sidebar-mobile-max-width, 100%);box-shadow:var(--_sidebar-mobile-box-shadow);margin:0}.bslib-sidebar-layout[data-collapsible-mobile=\"true\"]:not(.sidebar-right)>.sidebar{margin-right:auto}.bslib-sidebar-layout[data-collapsible-mobile=\"true\"]>.main{padding-top:var(--_toggle-collective-height);padding-left:var(--_padding);padding-right:var(--_padding)}}@media (max-width: 575.98px){.bslib-sidebar-layout[data-collapsible-mobile=\"false\"]{display:block !important;--_padding-icon: var(--_padding);--_vert-border: var(--_border)}.bslib-sidebar-layout[data-collapsible-mobile=\"false\"]>.sidebar{max-height:var(--_mobile-max-height);overflow-y:auto;border-top:var(--_vert-border)}.bslib-sidebar-layout[data-collapsible-mobile=\"false\"]>.collapse-toggle{display:none}}@media screen and (min-width: 575.98px){}pre.shiny-text-output:empty::before{content:\" \"}pre.shiny-text-output.noplaceholder:empty{margin:0;padding:0;border-width:0;height:0}pre.shiny-text-output{word-wrap:normal;border-radius:3px}@keyframes fadeIn{to{opacity:0.1}}.shiny-input-container:not(.shiny-input-container-inline){width:300px;max-width:100%}@use \"sass:math\";@keyframes lds-dual-ring{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.datepicker{border-radius:3px;direction:ltr}em{color:#f9b928}.sidebar-title{color:#c10000}strong{color:#c10000}\n\n\nstrong {\n  color: $danger;\n}\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [add_defaults](#shiny.express.ui.Theme.add_defaults) | Add custom default values to the theme. |\n| [add_functions](#shiny.express.ui.Theme.add_functions) | Add custom Sass functions to the theme. |\n| [add_mixins](#shiny.express.ui.Theme.add_mixins) | Add custom Sass mixins to the theme. |\n| [add_rules](#shiny.express.ui.Theme.add_rules) | Add custom Sass rules to the theme. |\n| [available_presets](#shiny.express.ui.Theme.available_presets) | Get a list of available theme presets. |\n| [from_brand](#shiny.express.ui.Theme.from_brand) | Create a custom Shiny theme from a `_brand.yml` |\n| [to_css](#shiny.express.ui.Theme.to_css) | Compile the theme to CSS and return the result as a string. |\n| [to_sass](#shiny.express.ui.Theme.to_sass) | Returns the custom theme as a single Sass string. |\n\n### add_defaults { #shiny.express.ui.Theme.add_defaults }\n\nexpress.ui.Theme.add_defaults(*args, **kwargs)\n\nAdd custom default values to the theme.\n\nSass code added via this method will be placed **before** the default values of\nthe theme preset, allowing you to override or extend the default values.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   Sass code, as a single or multiple strings, containing default value declarations to add.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [float](`float`) \\| [int](`int`) \\| [bool](`bool`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Keyword arguments containing default value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_defaults(primary_color=\"#ff0000\")` is equivalent to `.add_defaults(\"$primary-color: #ff0000 !default;\")`.\n\n### add_functions { #shiny.express.ui.Theme.add_functions }\n\nexpress.ui.Theme.add_functions(*args)\n\nAdd custom Sass functions to the theme.\n\nSass code added via this method will be placed **after** the function\ndeclarations from the theme preset, allowing you to override or extend the\ndefault functions.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   The Sass functions to add as a single or multiple strings.\n\n### add_mixins { #shiny.express.ui.Theme.add_mixins }\n\nexpress.ui.Theme.add_mixins(*args, **kwargs)\n\nAdd custom Sass mixins to the theme.\n\nSass code added via this method will be placed **after** the mixin declarations\nfrom the theme preset, allowing you to override or extend the default mixins.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   Sass code, as a single or multiple strings, containing mixins to add.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [float](`float`) \\| [int](`int`) \\| [bool](`bool`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Keyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_mixins(primary_color=\"#ff0000\")` is equivalent to `.add_mixins(\"$primary-color: #ff0000;\")`.\n\n### add_rules { #shiny.express.ui.Theme.add_rules }\n\nexpress.ui.Theme.add_rules(*args, **kwargs)\n\nAdd custom Sass rules to the theme.\n\nSass code added via this method will be placed **after** the rule declarations\nfrom the theme preset, allowing you to override or extend the default rules.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   Sass code, as a single or multiple strings, containing rules to add.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [float](`float`) \\| [int](`int`) \\| [bool](`bool`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Keyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_rules(primary_color=\"#ff0000\")` is equivalent to `.add_rules(\"$primary-color: #ff0000;\")`.\n\n### available_presets { #shiny.express.ui.Theme.available_presets }\n\nexpress.ui.Theme.available_presets()\n\nGet a list of available theme presets.\n\n### from_brand { #shiny.express.ui.Theme.from_brand }\n\nexpress.ui.Theme.from_brand(brand)\n\nCreate a custom Shiny theme from a `_brand.yml`\n\nCreates a custom Shiny theme for your brand using\n[brand.yml](https://posit-dev.github.io/brand-yml), a single YAML file that\ndescribes the brand&#x27;s color and typography. Learn more about writing a\n`_brand.yml` file for your brand at the\n[brand.yml homepage](https://posit-dev.github.io/brand-yml).\n\nAs a simple example, suppose your brand guidelines include a color palette with\ncustom orange and black colors. The orange is used as the primary accent color\nand the black for all text. For typography, the brand also uses\n[Roboto](https://fonts.google.com/specimen/Roboto?query=roboto) and\n[Roboto Mono](https://fonts.google.com/specimen/Roboto+Mono?query=roboto) from\nGoogle Fonts for text and monospace-styled text, respectively. Here&#x27;s a\n`_brand.yml` file for this brand:\n\nmeta:\n  name: brand.yml Example\n\ncolor:\n  palette:\n    orange: \"#F96302\"\n    black: \"#000000\"\n  foreground: black\n  primary: orange\n\ntypography:\n  fonts:\n    - family: Roboto\n      source: google\n    - family: Roboto Mono\n      source: google\n  base: Roboto\n  monospace: Roboto Mono\n\nYou can store the `_brand.yml` file next to your Shiny `app.py` or, for larger\nprojects, in a parent folder. To use a theme generated from the `_brand.yml`\nfile, call [](:meth:`~shiny.express.ui.Theme.from_brand`) on `__file__` and pass the result\nto the `theme` argument of [](:func:`~shiny.express.ui.page_opts`) (Shiny Express)\nor the `theme` argument of `shiny.express.ui.page_*` functions, like\n[](:func:`~shiny.express.ui.page_sidebar`).\n\nfrom shiny.express import input, render, ui\n\nui.page_opts(theme=ui.Theme.from_brand(__file__))\n\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\n@render.code\ndef txt():\n    return f\"n*2 is {input.n() * 2}\"\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**brand**]{.parameter-name} [:]{.parameter-annotation-sep} ['str \\| pathlib.Path \\| Brand']{.parameter-annotation}</code>\n\n:   A [](:class:`brand_yml.Brand`) instance, or a path to help locate `_brand.yml`. For a path, you can pass `__file__` or a directory containing the `_brand.yml` or a path directly to the `_brand.yml` file.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>\n\n:   A [](:class:`shiny.express.ui.Theme`) instance with a custom Shiny theme created from the brand guidelines (see [](:class:`brand_yml.Brand`)).\n\n### to_css { #shiny.express.ui.Theme.to_css }\n\nexpress.ui.Theme.to_css(compile_args=None)\n\nCompile the theme to CSS and return the result as a string.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**compile_args**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SassCompileArgs](`shiny.express.ui._theme.SassCompileArgs`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A dictionary of keyword arguments to pass to [`sass.compile()`](https://sass.github.io/libsass-python/sass.html#sass.compile).\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   The compiled CSS for the theme. The value is cached such that previously compiled themes are returned immediately. Adding additional custom Sass code or changing the preset will invalidate the cache.\n\n### to_sass { #shiny.express.ui.Theme.to_sass }\n\nexpress.ui.Theme.to_sass()\n\nReturns the custom theme as a single Sass string.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   The custom theme as a single Sass string.\n\n================"
    },
    {
        "File Name": "express.ui.tooltip",
        "Usage": "express.ui.tooltip(id=None, placement='auto', options=None, **kwargs)",
        "Description": "Context manager for a tooltip\n\nThis function wraps [](:func:`~shiny.ui.tooltip`).\n\nDisplay additional information when focusing (or hovering over) a UI element.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A character string. Required to reactively respond to the visibility of the tooltip (via the `input[id]` value) and/or update the visibility/contents of the tooltip.\n\n<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\\['auto', 'top', 'right', 'bottom', 'left'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'auto\\']{.parameter-default}</code>\n\n:   The placement of the tooltip relative to its trigger.\n\n<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[dict](`dict`)\\[[str](`str`), [object](`object`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A list of additional [Bootstrap options](https://getbootstrap.com/docs/5.3/components/tooltips/#options).\n",
        "Examples": "from icons import question_circle_fill\n\nfrom shiny.express import ui\n\nwith ui.tooltip(id=\"btn_tooltip\"):\n    ui.input_action_button(\"btn\", \"A button\", class_=\"mt-3\")\n\n    \"A message\"\n\nwith ui.card(class_=\"mt-3\"):\n    with ui.card_header():\n        with ui.tooltip(placement=\"right\", id=\"card_tooltip\"):\n            ui.span(\"Card title \", question_circle_fill)\n            \"Additional info\"\n\n    \"Card body content...\"\n\n\nfrom shiny import ui\n\n# https://icons.getbootstrap.com/icons/question-circle-fill/\nquestion_circle_fill = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-question-circle-fill mb-1\" viewBox=\"0 0 16 16\"><path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z\"/></svg>'\n)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_accordion_panel",
        "Usage": "express.ui.update_accordion_panel(\n    id,\n    target,\n    *body,\n    title=MISSING,\n    value=MISSING,\n    icon=MISSING,\n    show=None,\n    session=None,\n)",
        "Description": "Dynamically update accordion panel contents.\n\nDynamically (i.e., programmatically) update/modify [](:func:`~shiny.express.ui.accordion`) panels in a Shiny app.\nThese functions require an `id` to be provided to the [](:func:`~shiny.express.ui.accordion`) and must also be\ncalled within an active Shiny session.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A string that matches an existing [](:func:`~shiny.express.ui.accordion`)'s `id`.\n\n<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   The `value` of an existing panel to update.\n\n<code>[***body**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   If provided, the new body contents of the panel.\n\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \\| None \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   If not missing, the new title of the panel.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| None \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   If not missing, the new value of the panel.\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \\| None \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   If not missing, the new icon of the panel.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A Shiny session object (the default should almost always be used).\n\n## References {.doc-section .doc-section-references}\n\n[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_switch(\"update_panel\", \"Update (and open) Sections\")\n\nwith ui.accordion(id=\"acc\", multiple=True):\n    for letter in \"ABCDE\":\n        with ui.accordion_panel(f\"Section {letter}\", value=f\"sec_{letter}\"):\n            f\"Some narrative for section {letter}\"\n\n\n@reactive.effect\n@reactive.event(input.update_panel)\ndef _():\n    txt = \" (updated)\" if input.update_panel() else \"\"\n    show = bool(input.update_panel() % 2 == 1)\n    for letter in \"ABCDE\":\n        ui.update_accordion_panel(\n            \"acc\",\n            f\"sec_{letter}\",\n            f\"Some{txt} narrative for section {letter}\",\n            title=f\"Section {letter}{txt}\",\n            # Open Accordion Panel to see updated contents\n            show=show,\n        )\n    next_show_txt = \"close\" if show else \"open\"\n\n    ui.update_switch(\"update_panel\", label=f\"Update (and {next_show_txt}) Sections\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_accordion",
        "Usage": "express.ui.update_accordion(id, *, show, session=None)",
        "Description": "Dynamically set accordions&#x27; states.\n\nDynamically (i.e., programmatically) update/modify [](:func:`~shiny.express.ui.accordion`)s in a Shiny app.\nThese functions require an `id` to be provided to the [](:func:`~shiny.express.ui.accordion`) and must also be\ncalled within an active Shiny session.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A string that matches an existing [](:func:`~shiny.express.ui.accordion`)'s `id`.\n\n<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \\| [str](`str`) \\| [list](`list`)\\[[str](`str`)\\]]{.parameter-annotation}</code>\n\n:   Either a string or list of strings (used to identify particular [](:func:`~shiny.express.ui.accordion_panel`)(s) by their `value`) or a `bool` to set the state of all panels.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A Shiny session object (the default should almost always be used).\n\n## References {.doc-section .doc-section-references}\n\n[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"set_acc\", \"Only open sections A,C,E\", class_=\"mt-3 mb-3\")\n\nwith ui.accordion(id=\"acc\", open=[\"Section B\", \"Section D\"], multiple=True):\n    for letter in \"ABCDE\":\n        with ui.accordion_panel(f\"Section {letter}\"):\n            f\"Some narrative for section {letter}\"\n\n\n@reactive.effect\n@reactive.event(input.set_acc)\ndef _():\n    ui.update_accordion(\"acc\", show=[\"Section A\", \"Section C\", \"Section E\"])\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_action_button",
        "Usage": "express.ui.update_action_button(\n    id,\n    *,\n    label=None,\n    icon=None,\n    disabled=None,\n    session=None,\n)",
        "Description": "Change the label and/or icon of an action button on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link.\n\n<code>[**disabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   If `True`, disable the button making it unclickable; if `False`, the button will become enabled and clickable.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive, req\nfrom shiny.express import input, ui\n\nwith ui.sidebar():\n    ui.input_action_button(\"update\", \"Update other buttons and link\")\n\nwith ui.layout_column_wrap():\n    ui.input_action_button(\"goButton\", \"Go\")\n    ui.input_action_button(\"goButton2\", \"Go 2\", icon=\"\ud83e\udd29\")\n    ui.input_action_button(\"goButton3\", \"Go 3\")\n    ui.input_action_link(\"goLink\", \"Go Link\")\n\n\n@reactive.effect\ndef _():\n    req(input.update())\n    # Updates goButton's label and icon\n    ui.update_action_button(\"goButton\", label=\"New label\", icon=\"\ud83d\udcc5\")\n    # Leaves goButton2's label unchanged and removes its icon\n    ui.update_action_button(\"goButton2\", icon=[])\n    # Leaves goButton3's icon, if it exists, unchanged and changes its label\n    ui.update_action_button(\"goButton3\", label=\"New label 3\")\n    # Updates goLink's label and icon\n    ui.update_action_link(\"goLink\", label=\"New link label\", icon=\"\ud83d\udd17\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_action_link",
        "Usage": "express.ui.update_action_link(id, *, label=None, icon=None, session=None)",
        "Description": "Change the label and/or icon of an action link on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An icon to appear inline with the button/link.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive, req\nfrom shiny.express import input, ui\n\nwith ui.sidebar():\n    ui.input_action_button(\"update\", \"Update other buttons and link\")\n\nwith ui.layout_column_wrap():\n    ui.input_action_button(\"goButton\", \"Go\")\n    ui.input_action_button(\"goButton2\", \"Go 2\", icon=\"\ud83e\udd29\")\n    ui.input_action_button(\"goButton3\", \"Go 3\")\n    ui.input_action_link(\"goLink\", \"Go Link\")\n\n\n@reactive.effect\ndef _():\n    req(input.update())\n    # Updates goButton's label and icon\n    ui.update_action_button(\"goButton\", label=\"New label\", icon=\"\ud83d\udcc5\")\n    # Leaves goButton2's label unchanged and removes its icon\n    ui.update_action_button(\"goButton2\", icon=[])\n    # Leaves goButton3's icon, if it exists, unchanged and changes its label\n    ui.update_action_button(\"goButton3\", label=\"New label 3\")\n    # Updates goLink's label and icon\n    ui.update_action_link(\"goLink\", label=\"New link label\", icon=\"\ud83d\udd17\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_checkbox_group",
        "Usage": "express.ui.update_checkbox_group(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
        "Description": "Change the value of a checkbox group input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[ChoicesArg](`shiny.express.ui._input_check_radio.ChoicesArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [list](`list`)\\[[str](`str`)\\] \\| [tuple](`tuple`)\\[[str](`str`), ...\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True``, the result is displayed inline\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\n\"The first checkbox group controls the second\"\nui.input_checkbox_group(\n    \"inCheckboxGroup\", \"Input checkbox\", [\"Item A\", \"Item B\", \"Item C\"]\n)\nui.input_checkbox_group(\n    \"inCheckboxGroup2\", \"Input checkbox 2\", [\"Item A\", \"Item B\", \"Item C\"]\n)\n\n\n@reactive.effect\ndef _():\n    x = input.inCheckboxGroup()\n\n    # Can also set the label and select items\n    ui.update_checkbox_group(\n        \"inCheckboxGroup2\",\n        label=\"Checkboxgroup label \" + str(len(x)),\n        choices=x,\n        selected=x,\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_checkbox",
        "Usage": "express.ui.update_checkbox(id, *, label=None, value=None, session=None)",
        "Description": "Change the value of a checkbox input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A new value.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"controller\", \"Controller\", min=0, max=1, value=0, step=1)\nui.input_checkbox(\"inCheckbox\", \"Input checkbox\")\n\n\n@reactive.effect\ndef _():\n    # True if controller is odd, False if even.\n    x_even = input.controller() % 2 == 1\n    ui.update_checkbox(\"inCheckbox\", value=x_even)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_date_range",
        "Usage": "express.ui.update_date_range(\n    id,\n    *,\n    label=None,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    session=None,\n)",
        "Description": "Change the start and end values of a date range input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**start**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The initial start date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.\n\n<code>[**end**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The initial end date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed value.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from datetime import date, timedelta\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"n\", \"Day of month\", min=1, max=30, value=10)\nui.input_date_range(\"inDateRange\", \"Input date\")\n\n\n@reactive.effect\ndef _():\n    d = date(2013, 4, input.n())\n    ui.update_date_range(\n        \"inDateRange\",\n        label=\"Date range label \" + str(input.n()),\n        start=d - timedelta(days=1),\n        end=d + timedelta(days=1),\n        min=d - timedelta(days=5),\n        max=d + timedelta(days=5),\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_date",
        "Usage": "express.ui.update_date(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    session=None,\n)",
        "Description": "Change the value of a date input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The starting date. Either a `date()` object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed value.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from datetime import date, timedelta\n\nfrom shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"n\", \"Day of month\", min=1, max=30, value=10)\nui.input_date(\"inDate\", \"Input date\")\n\n\n@reactive.effect\ndef _():\n    d = date(2013, 4, input.n())\n    ui.update_date(\n        \"inDate\",\n        label=\"Date label \" + str(input.n()),\n        value=d,\n        min=d - timedelta(days=3),\n        max=d + timedelta(days=3),\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_navs",
        "Usage": "express.ui.update_navs(id, selected=None, session=None)",
        "Description": "Change the value of a navs container on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.sidebar():\n    ui.input_slider(\"controller\", \"Controller\", min=1, max=3, value=1)\n\nwith ui.navset_card_tab(id=\"inTabset\"):\n    with ui.nav_panel(\"Panel 1\", value=\"panel1\"):\n        \"Panel 1 content\"\n    with ui.nav_panel(\"Panel 2\", value=\"panel2\"):\n        \"Panel 2 content\"\n    with ui.nav_panel(\"Panel 3\", value=\"panel3\"):\n        \"Panel 3 content\"\n\n\n@reactive.effect\ndef _():\n    ui.update_navs(\"inTabset\", selected=\"panel\" + str(input.controller()))\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_numeric",
        "Usage": "express.ui.update_numeric(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    session=None,\n)",
        "Description": "Change the value of a number input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A new value.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed value.\n\n<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Interval to use when stepping between min and max.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The [](:class:`~shiny.Session`) object passed to the server function of a [](:class:`~shiny.App`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"controller\", \"Controller\", min=0, max=20, value=10)\nui.input_numeric(\"inNumber\", \"Input number\", 0)\nui.input_numeric(\"inNumber2\", \"Input number 2\", 0)\n\n\n@reactive.effect\ndef _():\n    x = input.controller()\n    ui.update_numeric(\"inNumber\", value=x)\n    ui.update_numeric(\n        \"inNumber2\",\n        label=\"Number label \" + str(x),\n        value=x,\n        min=x - 10,\n        max=x + 10,\n        step=5,\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_popover",
        "Usage": "express.ui.update_popover(id, *args, title=None, show=None, session=None)",
        "Description": "Update the contents or title of a popover.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   The id of the popover DOM element to update.\n\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   The new contents of the popover.\n\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[TagChild](`htmltools.TagChild`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The new title of the popover.\n\n<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Opens (`True`) or closes (`False`) the popover.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A Shiny session object (the default should almost always be used).\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"btn_show\", \"Show popover\", class_=\"mt-3 me-3\")\nui.input_action_button(\"btn_close\", \"Close popover\", class_=\"mt-3 me-3\")\n\nui.br()\nui.br()\n\nwith ui.popover(id=\"popover_id\"):\n    ui.input_action_button(\"btn_w_popover\", \"A button w/ a popover\", class_=\"mt-3\")\n    \"A message\"\n\n\n@reactive.effect\n@reactive.event(input.btn_show)\ndef _():\n    ui.update_popover(\"popover_id\", show=True)\n\n\n@reactive.effect\n@reactive.event(input.btn_close)\ndef _():\n    ui.update_popover(\"popover_id\", show=False)\n\n\n@reactive.effect\n@reactive.event(input.btn_w_popover)\ndef _():\n    ui.notification_show(\"Button clicked!\", duration=3, type=\"message\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_radio_buttons",
        "Usage": "express.ui.update_radio_buttons(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
        "Description": "Change the value of a radio input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[ChoicesArg](`shiny.express.ui._input_check_radio.ChoicesArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True```, the result is displayed inline\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.markdown(\"The first radio button group controls the second\")\n\nui.input_radio_buttons(\n    \"inRadioButtons\", \"Input radio buttons\", [\"Item A\", \"Item B\", \"Item C\"]\n)\nui.input_radio_buttons(\n    \"inRadioButtons2\", \"Input radio buttons 2\", [\"Item A\", \"Item B\", \"Item C\"]\n)\n\n\n@reactive.effect\ndef _():\n    x = input.inRadioButtons()\n\n    # Can also set the label and select items\n    ui.update_radio_buttons(\n        \"inRadioButtons2\",\n        label=\"Radio buttons label \" + x,\n        choices=[x],\n        selected=x,\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_select",
        "Usage": "express.ui.update_select(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    session=None,\n)",
        "Description": "Change the value of a select input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SelectChoicesArg](`shiny.express.ui._input_select.SelectChoicesArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [list](`list`)\\[[str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.markdown(\"The checkbox group controls the select input\")\n\nui.input_checkbox_group(\n    \"inCheckboxGroup\", \"Input checkbox\", [\"Item A\", \"Item B\", \"Item C\"]\n)\nui.input_select(\"inSelect\", \"Select input\", [\"Item A\", \"Item B\", \"Item C\"])\n\n\n@reactive.effect\ndef _():\n    x = input.inCheckboxGroup()\n\n    # Can use [] to remove all choices\n    if x is None:\n        x = []\n    elif isinstance(x, str):\n        x = [x]\n\n    ui.update_select(\n        \"inSelect\",\n        label=\"Select input label \" + str(len(x)),\n        choices=x,\n        selected=x[len(x) - 1] if len(x) > 0 else None,\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_selectize",
        "Usage": "express.ui.update_selectize(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    options=None,\n    server=False,\n    session=None,\n)",
        "Description": "Change the value of a selectize.js powered input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SelectChoicesArg](`shiny.express.ui._input_select.SelectChoicesArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [list](`list`)\\[[str](`str`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[dict](`dict`)\\[[str](`str`), [str](`str`) \\| [float](`float`) \\| [JSEval](`shiny.express.ui._utils.JSEval`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Options to send to update, see `input_selectize` for details.\n\n<code>[**server**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   Whether to store choices on the server side, and load the select options dynamically on searching, instead of writing all choices into the page at once (i.e., only use the client-side version of selectize.js)\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import ui\n\nui.input_selectize(\"x\", \"Server side selectize\", choices=[], multiple=True)\n\n\n@reactive.effect\ndef _():\n    ui.update_selectize(\n        \"x\",\n        choices=[f\"Foo {i}\" for i in range(10000)],\n        selected=[\"Foo 0\", \"Foo 1\"],\n        server=True,\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_sidebar",
        "Usage": "express.ui.update_sidebar(id, *, show=None, session=None)",
        "Description": "Update a sidebar&#x27;s visibility.\n\nSet a [](:func:`~shiny.express.ui.sidebar`) state during an active Shiny user session.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   The `id` of the [](:func:`~shiny.express.ui.sidebar`) to toggle.\n\n<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The desired visible state of the sidebar, where `True` opens the sidebar and `False` closes the sidebar (if not already in that state).\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A Shiny session object (the default should almost always be used).\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nwith ui.sidebar(id=\"sidebar\"):\n    \"Sidebar content\"\n\nui.input_action_button(\"open_sidebar\", label=\"Open sidebar\", class_=\"me-3\")\nui.input_action_button(\"close_sidebar\", label=\"Close sidebar\", class_=\"me-3\")\n\n\n@render.text\ndef state():\n    return f\"input.sidebar(): {input.sidebar()}\"\n\n\n@reactive.effect\n@reactive.event(input.open_sidebar)\ndef _():\n    ui.update_sidebar(\"sidebar\", show=True)\n\n\n@reactive.effect\n@reactive.event(input.close_sidebar)\ndef _():\n    ui.update_sidebar(\"sidebar\", show=False)\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_slider",
        "Usage": "express.ui.update_slider(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    time_format=None,\n    timezone=None,\n    session=None,\n)",
        "Description": "Change the value of a slider input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`) \\| [tuple](`tuple`)\\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`), [SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A new value.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed value.\n\n<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[SliderStepArg](`shiny.express.ui._input_slider.SliderStepArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Specifies the interval between each selectable value on the slider. Either ``None`` (the default), which uses a heuristic to determine the step size or a single number. If the values are dates, step is in days; if the values are date-times, step is in seconds.\n\n<code>[**time_format**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Only used if the slider values are [](:class:`~datetime.date`) or [](:class:`~datetime.datetime`) objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is \"%F\" (like \"2015-07-01\"), and for Datetimes, the default is \"%F %T\" (like \"2015-07-01 15:32:10\").\n\n<code>[**timezone**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Only used if the values are [](:class:`~datetime.datetime`) objects. A string specifying the time zone offset for the displayed times, in the format \"+HHMM\" or \"-HHMM\". If ``None`` (the default), times will be displayed in the browser's time zone. The value \"+0000\" will result in UTC time.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_slider(\"receiver\", \"Receiver:\", min=0, max=100, value=50, step=1, width=\"100%\")\nui.p(\"Change the min and max values below to see the receiver slider above update.\")\n\nwith ui.layout_column_wrap(width=1 / 2):\n    ui.input_slider(\"min\", \"Min:\", min=0, max=50, value=0, step=1)\n    ui.input_slider(\"max\", \"Max:\", min=50, max=100, value=100, step=1)\n\n\n@reactive.effect\ndef _():\n    # You can update the value, min, max, and step.\n    ui.update_slider(\n        \"receiver\",\n        value=max(min(input.receiver(), input.max()), input.min()),\n        min=input.min(),\n        max=input.max(),\n    )\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_text_area",
        "Usage": "express.ui.update_text_area(\n    id,\n    *,\n    label=None,\n    value=None,\n    placeholder=None,\n    session=None,\n)",
        "Description": "Change the value of a text input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A new value.\n\n<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A hint as to what can be entered into the control.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.layout_column_wrap(width=1 / 2):\n    ui.input_radio_buttons(\"pet_type\", \"Pet type\", [\"Dog\", \"Cat\", \"Bird\"], inline=True)\n    ui.input_radio_buttons(\"pet_sex\", \"Pet sex\", [\"Male\", \"Female\"], inline=True)\n    ui.input_text(\"name\", \"Pet name\", \"Charlie\")\n    ui.input_text(\"royal_name\", \"Royal Name\", \"King Charlie\")\n\n\n@reactive.effect\n@reactive.event(input.pet_type)\ndef _():\n    # Update the label of the pet name input\n    ui.update_text(\"name\", label=f\"{input.pet_type()}'s name\")\n\n\n@reactive.effect\ndef _():\n    # Update the value of the royal name input\n    royal_noun = \"King\" if input.pet_sex() == \"Male\" else \"Queen\"\n    ui.update_text(\"royal_name\", value=f\"{royal_noun} {input.name()}\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_text",
        "Usage": "express.ui.update_text(\n    id,\n    *,\n    label=None,\n    value=None,\n    placeholder=None,\n    session=None,\n)",
        "Description": "Change the value of a text input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A new value.\n\n<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A hint as to what can be entered into the control.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and\n[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and\n[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nwith ui.layout_column_wrap(width=1 / 2):\n    ui.input_radio_buttons(\"pet_type\", \"Pet type\", [\"Dog\", \"Cat\", \"Bird\"], inline=True)\n    ui.input_radio_buttons(\"pet_sex\", \"Pet sex\", [\"Male\", \"Female\"], inline=True)\n    ui.input_text(\"name\", \"Pet name\", \"Charlie\")\n    ui.input_text(\"royal_name\", \"Royal Name\", \"King Charlie\")\n\n\n@reactive.effect\n@reactive.event(input.pet_type)\ndef _():\n    # Update the label of the pet name input\n    ui.update_text(\"name\", label=f\"{input.pet_type()}'s name\")\n\n\n@reactive.effect\ndef _():\n    # Update the value of the royal name input\n    royal_noun = \"King\" if input.pet_sex() == \"Male\" else \"Queen\"\n    ui.update_text(\"royal_name\", value=f\"{royal_noun} {input.name()}\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.update_tooltip",
        "Usage": "express.ui.update_tooltip(id, *args, show=None, session=None)",
        "Description": "Update tooltip contents.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   A character string that matches an existing tooltip id.\n\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   Contents to the tooltip's body.\n\n<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Opens (`True`) or closes (`False`) the tooltip.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A Shiny session object (the default should almost always be used).\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"btn_show\", \"Show tooltip\", class_=\"mt-3 me-3\")\nui.input_action_button(\"btn_close\", \"Close tooltip\", class_=\"mt-3 me-3\")\nui.input_action_button(\n    \"btn_update\", \"Update tooltip phrase (and show tooltip)\", class_=\"mt-3 me-3\"\n)\n\nwith ui.tooltip(id=\"tooltip_id\"):\n    ui.input_action_button(\n        \"btn_w_tooltip\",\n        \"A button w/ a tooltip\",\n        class_=\"btn-primary mt-5\",\n    )\n    \"A message\"\n\n\n@reactive.effect\n@reactive.event(input.btn_show)\ndef _():\n    ui.update_tooltip(\"tooltip_id\", show=True)\n\n\n@reactive.effect\n@reactive.event(input.btn_close)\ndef _():\n    ui.update_tooltip(\"tooltip_id\", show=False)\n\n\n@reactive.effect\n@reactive.event(input.btn_update)\ndef _():\n    content = \"A \" + \" \".join([\"NEW\" for _ in range(input.btn_update())]) + \" message\"\n\n    ui.update_tooltip(\"tooltip_id\", content, show=True)\n\n\n@reactive.effect\n@reactive.event(input.btn_w_tooltip)\ndef _():\n    ui.notification_show(\"Button clicked!\", duration=3, type=\"message\")\n\n\n\n================"
    },
    {
        "File Name": "express.ui.value_box",
        "Usage": "express.ui.value_box(\n    showcase=None,\n    showcase_layout='left center',\n    full_screen=False,\n    theme=None,\n    height=None,\n    max_height=None,\n    min_height=None,\n    fill=True,\n    class_=None,\n    **kwargs,\n)",
        "Description": "Context manager for a value box\n\nThis function wraps [](:func:`~shiny.ui.value_box`).\n\nAn opinionated ([](:func:`~shiny.express.ui.card`)-powered) box, designed for displaying a title\n(the 1st child), value (the 2nd child), and other explanation text (other children,\nif any). Optionally, a `showcase` can provide for context for what the `value`\nrepresents (for example, it could hold an icon, or even a\n[](:func:`~shiny.express.ui.output_plot`)).",
        "Parameters": "\n<code>[**showcase**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[TagChild](`htmltools.TagChild`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~htmltools.Tag`) child to showcase (e.g., an icon, a [](:func:`~shiny.express.ui.output_plot`), etc).\n\n<code>[**showcase_layout**]{.parameter-name} [:]{.parameter-annotation-sep} [[ui](`shiny.ui`).[_valuebox](`shiny.express.ui._valuebox`).[SHOWCASE_LAYOUTS_STR](`shiny.express.ui._valuebox.SHOWCASE_LAYOUTS_STR`) \\| [ui](`shiny.ui`).[ShowcaseLayout](`shiny.express.ui.ShowcaseLayout`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\\'left center\\']{.parameter-default}</code>\n\n:   One of `\"left center\"` (default), `\"top right\"` or `\"bottom\"`. Alternatively, you can customize the showcase layout options with the [](:func:`~shiny.express.ui.showcase_left_center`), :func:`~shiny.express.ui.showcase_top_right()`, or :func:`~shiny.express.ui.showcase_bottom()` functions. Use the options functions when you want to control the height or width of the showcase area.\n\n<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`) \\| [ui](`shiny.ui`).[ValueBoxTheme](`shiny.express.ui.ValueBoxTheme`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The name of a theme (e.g. `\"primary\"`, `\"danger\"`, `\"purple\"`, `\"bg-green\"`, `\"text-red\"`) for the value box, or a theme constructed with [](:func:`~shiny.ui.value_box_theme`). The theme names provide a convenient way to use your app's Bootstrap theme colors as the foreground or background colors of the value box. For more control, you can create your own theme with [](:func:`~shiny.ui.value_box_theme`) where you can pass foreground and background colors directly. Bootstrap supported color themes: `\"blue\"`, `\"purple\"`, `\"pink\"`, `\"red\"`, `\"orange\"`, `\"yellow\"`, `\"green\"`, `\"teal\"`, and `\"cyan\"`. These colors can be used with `bg-NAME`, `text-NAME`, and `bg-gradient-NAME1-NAME2` to change the background, foreground, or use a background gradient respectively. If a `theme` string does not start with `text-` or `bg-`, it will be auto prefixed with `bg-`.\n\n<code>[**full_screen**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If `True`, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.\n\n<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[CssUnit](`shiny.express.ui.css.CssUnit`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Any valid CSS unit (e.g., `height=\"200px\"`). Doesn't apply when a value box is made `full_screen`.\n\n<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether to allow the value box to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.express.ui.page_fillable`)).\n\n<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Utility classes for customizing the appearance of the summary card. Use `bg-*` and `text-*` classes (e.g, `\"bg-danger\"` and `\"text-light\"`) to customize the background/foreground colors.\n\n<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>\n\n:   Additional attributes to pass to [](:func:`~shiny.express.ui.card`).\n",
        "Examples": "from icons import piggy_bank\n\nfrom shiny.express import ui\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=piggy_bank, theme=\"bg-gradient-orange-red\", full_screen=True\n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=piggy_bank,\n        theme=\"text-green\",\n        showcase_layout=\"top right\",\n        full_screen=True,\n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n    with ui.value_box(\n        showcase=piggy_bank, theme=\"purple\", showcase_layout=\"bottom\", full_screen=True\n    ):\n        \"KPI Title\"\n        \"$1 Billion Dollars\"\n        \"Up 30% VS PREVIOUS 30 DAYS\"\n\n\nfrom shiny import ui\n\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\n\n\n================"
    },
    {
        "File Name": "reactive.calc",
        "Usage": "reactive.calc(fn=None, *, session=MISSING)",
        "Description": "Mark a function as a reactive calculation.\n\nA reactive calculation is a function whose return value depends on other\nreactive value(s) (i.e., [](:class:`~shiny.Inputs`), [](:class:`~shiny.reactive.Value`)s,\nand other reactive calculations). Whenever a reactive value changes, any reactive\ncalculations that depend on it are &quot;invalidated&quot; and automatically re-execute if called while invalid. If a reactive calculation is marked as invalidated, any other reactive\ncalculations that recently called it are also marked as invalidated. In this way,\ninvalidations ripple through reactive calculations that depend on each other.",
        "Parameters": "\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} ['MISSING_TYPE \\| Session \\| None']{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).\n",
        "Examples": "import random\nimport time\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\n\n@reactive.calc\ndef first():\n    input.first()\n    p = ui.Progress()\n    for i in range(30):\n        p.set(i / 30, message=\"Computing, please wait...\")\n        time.sleep(0.1)\n    p.close()\n    return random.randint(1, 1000)\n\n\n@reactive.calc\ndef second():\n    input.second()\n    return random.randint(1, 1000)\n\n\nwith ui.card():\n    with ui.layout_columns():\n        ui.input_action_button(\"first\", \"Invalidate first (slow) computation\")\n        ui.input_action_button(\"second\", \"Invalidate second (fast) computation\")\n\n    @render.text\n    def result():\n        return first() + second()\n\n\n\n================"
    },
    {
        "File Name": "reactive.effect",
        "Usage": "reactive.effect(fn=None, *, suspended=False, priority=0, session=MISSING)",
        "Description": "Mark a function as a reactive side effect.\n\nA reactive effect is like a reactive calculation ([](:func:`~shiny.reactive.calc`)) in\nthat it can read reactive values and call reactive calculations, and will\nautomatically re-execute when those dependencies change. But unlike reactive\ncalculations, it doesn&#x27;t return a result and can&#x27;t be used as an input to other\nreactive expressions. Thus, reactive effects are only useful for their side effects (for\nexample, performing I/O).\n\nAnother contrast between reactive calculations and effects is their execution\nstrategy. Reactive calculations use lazy evaluation; that is, when their\ndependencies change, they don&#x27;t re-execute right away but rather wait until they are\ncalled by someone else. Indeed, if they are not called, then they will never\nre-execute. In contrast, effects use eager evaluation; as soon as their dependencies\nchange, they schedule themselves to re-execute.",
        "Parameters": "\n<code>[**suspended**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``TRUE``, start the effect in a suspended state (i.e., it will not execute until resumed and invalidated).\n\n<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>\n\n:   The new priority. A higher value means higher priority: an effect with a higher priority value will execute before all effects with lower priority values. Positive, negative, and zero values are allowed.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} ['MISSING_TYPE \\| Session \\| None']{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, ui\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_important_message():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n\n\n\n================"
    },
    {
        "File Name": "reactive.event",
        "Usage": "reactive.event(*args, ignore_none=True, ignore_init=False)",
        "Description": "Mark a function to react only when an &quot;event&quot; occurs.\n\nShiny&#x27;s reactive programming framework is primarily designed for calculated values\n([](:func:`~shiny.reactive.calc`)) and side-effect-causing actions\n([](:func:`~shiny.reactive.effect`)) that respond to **any** of their inputs changing.\nThat&#x27;s often what is desired in Shiny apps, but not always: sometimes you want to\nwait for a specific action to be taken from the user, like clicking an\n[](:func:`~shiny.express.ui.input_action_button`), before calculating or taking an action. You\ndo not want the calculation or action to be prematurely triggered if other reactive\nvalues that it calls are invalidated. The reactive value (or function) which triggers\nother calculations or actions in this way is called an event.\n\nThese situations demand a more imperative, &quot;event handling&quot; style of programming,\nwhich ``@reactive.event()`` provides. It does this by using the\n[](:func:`~shiny.reactive.isolate`) primitive under-the-hood to essentially &quot;limit&quot; the\nset of reactive dependencies to those in ``args``. In other words, the event can call\nas many reactive values as it likes in its code body without taking a reactive\ndependency on them; it will be invalidated only when a dependency listed in args is\ninvalidated.",
        "Parameters": "\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\\[\\[\\], [object](`object`)\\] \\| [Callable](`typing.Callable`)\\[\\[\\], [Awaitable](`typing.Awaitable`)\\[[object](`object`)\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   One or more callables that represent the event; most likely this will be a reactive input value linked to a [](:func:`~shiny.express.ui.input_action_button`) or similar (e.g., ``input.click``), but it can also be a (reactive or non-reactive) function that returns a value.\n\n<code>[**ignore_none**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>\n\n:   Whether to ignore the event if the value is ``None`` or ``0``.\n\n<code>[**ignore_init**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``False``, the event triggers on the first run.\n",
        "Examples": "import random\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_ui\n\nui.markdown(\n    f\"\"\"\n    This example demonstrates how `@reactive.event()` can be used to restrict\n    execution of: (1) a `@render` function, (2) `@reactive.calc`, or (3)\n    `@reactive.effect`.\n\n    In all three cases, the output is dependent on a random value that gets updated\n    every 0.5 seconds (currently, it is {output_ui(\"number\", inline=True)}), but\n    the output is only updated when the button is clicked.\n    \"\"\"\n)\n\n# Always update this output when the number is updated\nwith ui.hold():\n\n    @render.ui\n    def number():\n        return val.get()\n\n\nui.input_action_button(\"btn_out\", \"(1) Update number\")\n\n\n# Since ignore_none=False, the function executes before clicking the button.\n# (input.btn_out() is 0 on page load, but @@reactive.event() treats 0 as None for\n# action buttons.)\n@render.text\n@reactive.event(input.btn_out, ignore_none=False)\ndef out_out():\n    return str(val.get())\n\n\nui.input_action_button(\"btn_calc\", \"(2) Show 1 / number\")\n\n\n@render.text\ndef out_calc():\n    return str(calc())\n\n\nui.input_action_button(\"btn_effect\", \"(3) Log number\")\nui.div(id=\"out_effect\")\n\n\n# Update a random number every second\nval = reactive.value(random.randint(0, 1000))\n\n\n@reactive.effect\ndef _():\n    reactive.invalidate_later(0.5)\n    val.set(random.randint(0, 1000))\n\n\n@reactive.calc\n@reactive.event(input.btn_calc)\ndef calc():\n    return 1 / val.get()\n\n\n@reactive.effect\n@reactive.event(input.btn_effect)\ndef _():\n    ui.insert_ui(\n        ui.p(\"Random number! \", val.get()),\n        selector=\"#out_effect\",\n        where=\"afterEnd\",\n    )\n\n\n\n================"
    },
    {
        "File Name": "reactive.extended_task",
        "Usage": "reactive.extended_task(func=None)",
        "Description": "Decorator to mark an async function as a slow computation. This will cause the\nfunction to be run in a background asyncio task, and the results will be available\nvia the [](:class:`~shiny.reactive.ExtendedTask`) object returned by the decorator.\n\nUnlike normal async render functions, effects, and calcs, `extended_task` async\ncomputations do not block Shiny reactive processing from proceeding. This means that\nthey can be used to perform long-running tasks without freezing the session that\nowns them, nor other sessions.\n\nHowever, this also means that they cannot access reactive sources. This is because\nprocessing of inputs and reactivity is not blocked, and so the reactive sources may\nchange while the computation is running, which is almost never the desired behavior.\nIf any reactive sources are needed by the computation, the decorated function must\ntake them as parameters, and the resulting `ExtendedTask` object must be invoked\nwith the corresponding arguments.",
        "Parameters": "\n<code>[**func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Callable](`typing.Callable`)\\[[P](`shiny.reactive._extended_task.P`), [Awaitable](`typing.Awaitable`)\\[[R](`shiny.reactive._extended_task.R`)\\]\\]\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The function to decorate. It must be ``async``. It can take any parameters and return any value (including None).\n",
        "Examples": "import asyncio\nfrom datetime import datetime\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.h5(\"Current time\")\n\n\n@render.text\ndef current_time():\n    reactive.invalidate_later(1)\n    return datetime.now().strftime(\"%H:%M:%S\")\n\n\nwith ui.p():\n    \"Notice that the time above updates every second, even if you click the button below.\"\n\n\n@ui.bind_task_button(button_id=\"btn\")\n@reactive.extended_task\nasync def slow_compute(a: int, b: int) -> int:\n    await asyncio.sleep(3)\n    return a + b\n\n\nwith ui.layout_sidebar():\n    with ui.sidebar():\n        ui.input_numeric(\"x\", \"x\", 1)\n        ui.input_numeric(\"y\", \"y\", 2)\n        ui.input_task_button(\"btn\", \"Compute, slowly\")\n        ui.input_action_button(\"btn_cancel\", \"Cancel\")\n\n    @reactive.effect\n    @reactive.event(input.btn, ignore_none=False)\n    def handle_click():\n        # slow_compute.cancel()\n        slow_compute(input.x(), input.y())\n\n    @reactive.effect\n    @reactive.event(input.btn_cancel)\n    def handle_cancel():\n        slow_compute.cancel()\n\n    ui.h5(\"Sum of x and y\")\n\n    @render.text\n    def show_result():\n        return str(slow_compute.result())\n\n\n\n================"
    },
    {
        "File Name": "reactive.file_reader",
        "Usage": "reactive.file_reader(filepath, interval_secs=1, *, priority=1, session=MISSING)",
        "Description": "Create a reactive file reader.\n\nThis is a decorator, meant to be applied to a no-argument function that reads data\nfrom a file on disk. Whenever the file changes (or to be precise, the file size or\nlast modified time changes), past readers of the data are reactively invalidated.\nThis makes it incredibly easy to write apps that automatically update all of their\noutputs as soon as files on disk change.\n\nNote that `file_reader` works only on single files, not directories of files.\n\nBoth the `filepath` function and the decorated (file reading) function can read\nreactive values and [](:func:`~shiny.reactive.calc`) objects. Any invalidations\ntriggered by reactive dependencies will apply to the reactive file reader object\nimmediately (not waiting for the `interval_secs` delay to expire).",
        "Parameters": "\n<code>[**filepath**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \\| [os](`os`).[PathLike](`os.PathLike`)\\[[str](`str`)\\] \\| [Callable](`typing.Callable`)\\[\\[\\], [str](`str`)\\] \\| [Callable](`typing.Callable`)\\[\\[\\], [os](`os`).[PathLike](`os.PathLike`)\\[[str](`str`)\\]\\]]{.parameter-annotation}</code>\n\n:   Either a string indicating the file path to be monitored, or, a no-argument function that returns such a string. The latter is useful if the file to be monitored depends on some user input, the current date/time, etc.  The file path provided MUST exist, otherwise Shiny will treat it as an unhandled error and close the session.  If a function is used, make sure it is high performance (or is cached, i.e. use a :class:`~shiny.reactive.calc)`, as it will be called very frequently.\n\n<code>[**interval_secs**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>\n\n:   The number of seconds to wait after each time the file metadata is checked. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.\n\n<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>\n\n:   Reactive polling is implemented using an [](:func:`~shiny.reactive.effect`) to call `poll_func` on a timer; use the `priority` argument to control the order of this Effect's execution versus other Effects in your app. See [](:func:`~shiny.reactive.effect`) for more details.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \\| [Session](`shiny.Session`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, a session is inferred via [](:func:`~shiny.session.get_current_session`). If there is no current session (i.e. `poll` is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.\n",
        "Examples": "import pathlib\n\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import render\n\nfile = pathlib.Path(__file__).parent / \"mtcars.csv\"\n\n\n@reactive.file_reader(file)\ndef read_file():\n    return pd.read_csv(file)\n\n\n@render.table\ndef result():\n    return read_file()\n\n\nmpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n\n\n================"
    },
    {
        "File Name": "reactive.invalidate_later",
        "Usage": "reactive.invalidate_later(delay, *, session=MISSING)",
        "Description": "Scheduled Invalidation\n\nWhen called from within a reactive context, [](:func:`~shiny.reactive.invalidate_later`)\nschedules the reactive context to be invalidated in the given number of seconds.",
        "Parameters": "\n<code>[**delay**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation}</code>\n\n:   The number of seconds to wait before invalidating.\n\n## Note {.doc-section .doc-section-note}\n\nWhen called within a reactive function (i.e., [](:func:`~shiny.reactive.effect`),\n[](:func:`~shiny.reactive.calc`), [](:class:`shiny.express.render.ui`), etc.), that reactive context\nis invalidated (and re-executes) after the interval has passed. The re-execution\nwill reset the invalidation flag, so in a typical use case, the object will keep\nre-executing and waiting for the specified interval. It's possible to stop this\ncycle by adding conditional logic that prevents the ``invalidate_later`` from being\nrun.\n",
        "Examples": "import random\n\nfrom shiny import reactive\nfrom shiny.express import render\n\n\n@render.text\ndef value():\n    reactive.invalidate_later(0.5)\n    return \"Random int: \" + str(random.randint(0, 10000))\n\n\n\n================"
    },
    {
        "File Name": "reactive.poll",
        "Usage": "reactive.poll(\n    poll_func,\n    interval_secs=1,\n    *,\n    equals=eq,\n    priority=0,\n    session=MISSING,\n)",
        "Description": "Create a reactive polling object.\n\nPolling is a technique that approximates &quot;real-time&quot; or streaming updates, as if a\ndata source were pushing notifications each time it is updated. The data source does\nnot actually push notifications; a polling object repeatedly checks for changes in an\nefficient way at specified intervals. If a change is detected, the polling object runs\na function to re-read the data source.\n\nA reactive polling object is constructed using two functions: a polling function,\nwhich is a fast-running, inexpensive function that is used to determine whether some\ndata source has changed (such as the timestamp of a file, or a `SELECT MAX(updated)\nFROM table` query); and a slower-running reading function that actually loads and\nreturns the data that is desired. The `poll()` function is intended to be used as a\ndecorator: the poll function is passed as the `poll_func` arg to `@poll()`, while\nthe data reading function is the target of the decorator.\n\nReactive consumers can invoke the resulting polling object to get the current data,\nand will automatically invalidate when the polling function detects a change.\nPolling objects also cache the results of the read function; for this reason, apps\nwhere all sessions depend on the same data source may want to declare the polling\nobject at the top level of app.py (outside of the server function).\n\nBoth `poll_func` and the decorated (data reading) function can read reactive values\nand [](:func:`~shiny.reactive.calc`) objects. Any invalidations triggered by reactive\ndependencies will apply to the reactive polling object immediately (not waiting for\nthe `interval_secs` delay to expire).",
        "Parameters": "\n<code>[**poll_func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\\[\\[\\], [Any](`typing.Any`)\\] \\| [Callable](`typing.Callable`)\\[\\[\\], [Awaitable](`typing.Awaitable`)\\[[Any](`typing.Any`)\\]\\]]{.parameter-annotation}</code>\n\n:   A function to be called frequently to determine whether a data source has changed. The return value should be something that can be compared inexpensively using `==`. Both regular functions and co-routine functions are allowed.  Note that the `poll_func` should NOT return a bool that indicates whether the data source has changed. Rather, each `poll_func` return value will be checked for equality with its preceding `poll_func` return value (using `==` semantics by default), and if it differs, the data source will be considered changed.\n\n<code>[**interval_secs**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>\n\n:   The number of seconds to wait after each `poll_func` invocation before polling again. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.\n\n<code>[**equals**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\\[\\[[Any](`typing.Any`), [Any](`typing.Any`)\\], [bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [eq]{.parameter-default}</code>\n\n:   The function that will be used to compare each `poll_func` return value with its immediate predecessor.\n\n<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>\n\n:   Reactive polling is implemented using an [](:func:`~shiny.reactive.effect`) to call `poll_func` on a timer; use the `priority` argument to control the order of this Effect's execution versus other Effects in your app. See [](:func:`~shiny.reactive.effect`) for more details.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \\| [Session](`shiny.Session`) \\| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, a session is inferred via [](:func:`~shiny.session.get_current_session`). If there is no current session (i.e. `poll` is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.\n",
        "Examples": "import asyncio\nimport random\nimport sqlite3\nfrom datetime import datetime\nfrom typing import Any, Awaitable\n\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nSYMBOLS = [\"AAA\", \"BBB\", \"CCC\", \"DDD\", \"EEE\", \"FFF\"]\n\n\ndef timestamp() -> str:\n    return datetime.now().strftime(\"%x %X\")\n\n\ndef rand_price() -> float:\n    return round(random.random() * 250, 2)\n\n\n# === Initialize the database =========================================\n\n\ndef init_db(con: sqlite3.Connection) -> None:\n    cur = con.cursor()\n    try:\n        cur.executescript(\n            \"\"\"\n            CREATE TABLE stock_quotes (timestamp text, symbol text, price real);\n            CREATE INDEX idx_timestamp ON stock_quotes (timestamp);\n            \"\"\"\n        )\n        cur.executemany(\n            \"INSERT INTO stock_quotes (timestamp, symbol, price) VALUES (?, ?, ?)\",\n            [(timestamp(), symbol, rand_price()) for symbol in SYMBOLS],\n        )\n        con.commit()\n    finally:\n        cur.close()\n\n\nconn = sqlite3.connect(\":memory:\")\ninit_db(conn)\n\n\n# === Randomly update the database with an asyncio.task ==============\n\n\ndef update_db(con: sqlite3.Connection) -> None:\n    \"\"\"Update a single stock price entry at random\"\"\"\n\n    cur = con.cursor()\n    try:\n        sym = SYMBOLS[random.randint(0, len(SYMBOLS) - 1)]\n        print(f\"Updating {sym}\")\n        cur.execute(\n            \"UPDATE stock_quotes SET timestamp = ?, price = ? WHERE symbol = ?\",\n            (timestamp(), rand_price(), sym),\n        )\n        con.commit()\n    finally:\n        cur.close()\n\n\nasync def update_db_task(con: sqlite3.Connection) -> Awaitable[None]:\n    \"\"\"Task that alternates between sleeping and updating prices\"\"\"\n    while True:\n        await asyncio.sleep(random.random() * 1.5)\n        update_db(con)\n\n\n_ = asyncio.create_task(update_db_task(conn))\n\n\n# === Create the reactive.poll object ===============================\n\n\ndef tbl_last_modified() -> Any:\n    df = pd.read_sql_query(\"SELECT MAX(timestamp) AS timestamp FROM stock_quotes\", conn)\n    return df[\"timestamp\"].to_list()\n\n\n@reactive.poll(tbl_last_modified, 0.5)\ndef stock_quotes() -> pd.DataFrame:\n    return pd.read_sql_query(\"SELECT timestamp, symbol, price FROM stock_quotes\", conn)\n\n\nwith ui.card():\n    ui.markdown(\n        \"\"\"\n        # `shiny.reactive.poll` demo\n\n        This example app shows how to stream results from a database (in this\n        case, an in-memory sqlite3) with the help of `shiny.reactive.poll`.\n        \"\"\"\n    )\n    ui.input_selectize(\"symbols\", \"Filter by symbol\", [\"\"] + SYMBOLS, multiple=True)\n\n    @render.data_frame\n    def table():\n        df = stock_quotes()\n        if input.symbols():\n            df = df[df[\"symbol\"].isin(input.symbols())]\n        return df\n\n\n\n================"
    },
    {
        "File Name": "reactive.value",
        "Usage": "reactive.value(self, value=MISSING, *, read_only=False)",
        "Description": "Create a reactive value.\n\nReactive values are the source of reactivity in Shiny. Changes to reactive values\ninvalidate downstream reactive functions ([](:func:`~shiny.reactive.calc`),\n[](:func:`~shiny.reactive.effect`), and `render` functions decorated with `@output`).\nWhen these functions are invalidated, they get scheduled to re-execute.\n\nShiny input values are read-only reactive values. For example, `input.x` is a\nreactive value object, and to get the current value, you can call `input.x()` or\n`input.x.get()`. When you do that inside of a reactive function, the function takes\na dependency on the reactive value.",
        "Parameters": "\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`) \\| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>\n\n:   An optional initial value.\n\n<code>[**read_only**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True``, then the reactive value cannot be `set()`.\n",
        "Examples": "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nval = reactive.value(0)\n\n\n@reactive.effect\n@reactive.event(input.minus)\ndef _():\n    newVal = val.get() - 1\n    val.set(newVal)\n\n\n@reactive.effect\n@reactive.event(input.plus)\ndef _():\n    newVal = val.get() + 1\n    val.set(newVal)\n\n\nwith ui.sidebar():\n    ui.input_action_button(\"minus\", \"-1\")\n    ui.input_action_button(\"plus\", \"+1\")\n\n\n@render.text\ndef value():\n    return str(val.get())\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [freeze](#shiny.reactive.value.freeze) | Freeze the reactive value. |\n| [get](#shiny.reactive.value.get) | Read the reactive value. |\n| [is_set](#shiny.reactive.value.is_set) | Check if the reactive value is set. |\n| [set](#shiny.reactive.value.set) | Set the reactive value to a new value. |\n| [unset](#shiny.reactive.value.unset) | Unset the reactive value. |\n\n### freeze { #shiny.reactive.value.freeze }\n\nreactive.value.freeze()\n\nFreeze the reactive value.\n\nFreezing is equivalent to unsetting the value, but it does not invalidate\ndependents.\n\n### get { #shiny.reactive.value.get }\n\nreactive.value.get()\n\nRead the reactive value.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`)]{.parameter-annotation}</code>\n\n:   A value.\n\n#### Raises {.doc-section .doc-section-raises}\n\n<code>[:]{.parameter-annotation-sep} [[](:class:`~shiny.types.SilentException`)]{.parameter-annotation}</code>\n\n:   If the value is not set.\n\n<code>[:]{.parameter-annotation-sep} [[RuntimeError](`RuntimeError`)]{.parameter-annotation}</code>\n\n:   If called from outside a reactive function.\n\n### is_set { #shiny.reactive.value.is_set }\n\nreactive.value.is_set()\n\nCheck if the reactive value is set.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>\n\n:   ``True`` if the value is set, ``False`` otherwise.\n\n### set { #shiny.reactive.value.set }\n\nreactive.value.set(value)\n\nSet the reactive value to a new value.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`)]{.parameter-annotation}</code>\n\n:   A value.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>\n\n:   ``True`` if the value was set to a different value and ``False`` otherwise.\n\n#### Raises {.doc-section .doc-section-raises}\n\n<code>[:]{.parameter-annotation-sep} [[RuntimeError](`RuntimeError`)]{.parameter-annotation}</code>\n\n:   If called on a read-only reactive value.\n\n### unset { #shiny.reactive.value.unset }\n\nreactive.value.unset()\n\nUnset the reactive value.\n\n#### Returns {.doc-section .doc-section-returns}\n\n<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [None]{.parameter-annotation}</code>\n\n:   ``True`` if the value was set prior to this unsetting.\n\n================"
    },
    {
        "File Name": "req",
        "Usage": "req(*args, cancel_output=False)",
        "Description": "Throw a silent exception for falsy values.\n\nThis is a convenient shorthand for throwing [](:class:`~shiny.types.SilentException`) /\n[](:class:`~shiny.types.SilentCancelOutputException`) if any of the arguments are falsy.\n\nThe term &quot;falsy&quot; generally indicates that a value is considered `False` when\nencountered in a logical context. We use the term a little loosely here; our usage\ntries to match the intuitive notions of &quot;Is this value missing or available?&quot;, or\n&quot;Has the user provided an answer?&quot;, or in the case of action buttons, &quot;Has the\nbutton been clicked?&quot;. So `False`, `None`, `0`, and `\"\"` would be examples of Falsy\nvalues.",
        "Parameters": "\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny._validation.T`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   Any number of arguments to check.\n\n<code>[**cancel_output**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \\| [Literal](`typing.Literal`)\\['progress'\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True``, throw [](:class:`~shiny.types.SilentCancelOutputException`) instead of [](:class:`~shiny.types.SilentException`).\n",
        "Examples": "from shiny import reactive, req\nfrom shiny.express import input, render, ui\nfrom shiny.types import SafeException\n\nui.input_action_button(\"safe\", \"Throw a safe error\")\n\n\n@render.ui\ndef safe():\n    # This error _won't_ be sanitized when deployed (i.e., it's \"safe\")\n    raise SafeException(f\"You've clicked {str(safe_click())} times\")\n\n\nui.input_action_button(\"unsafe\", \"Throw an unsafe error\")\n\n\n@render.ui\ndef unsafe():\n    req(input.unsafe())\n    # This error _will_ be sanitized when deployed (i.e., it's \"unsafe\")\n    raise Exception(f\"Super secret number of clicks: {str(input.unsafe())}\")\n\n\nui.input_text(\n    \"txt\",\n    \"Enter some text below, then remove it. Notice how the text is never fully removed.\",\n)\n\n\n@render.ui\ndef txt_out():\n    req(input.txt(), cancel_output=True)\n    return input.txt()\n\n\n@reactive.calc\ndef safe_click():\n    req(input.safe())\n    return input.safe()\n\n\n@reactive.effect\ndef _():\n    req(input.unsafe())\n    print(\"unsafe clicks:\", input.unsafe())\n    # raise Exception(\"Observer exception: this should cause a crash\")"
    }
]
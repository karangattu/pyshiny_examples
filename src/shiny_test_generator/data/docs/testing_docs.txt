This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-06T16:02:37.515Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
_sidebar.yml
index.qmd
playwright.controller.Accordion.qmd
playwright.controller.AccordionPanel.qmd
playwright.controller.Card.qmd
playwright.controller.Chat.qmd
playwright.controller.DownloadButton.qmd
playwright.controller.DownloadLink.qmd
playwright.controller.InputActionLink.qmd
playwright.controller.InputCheckbox.qmd
playwright.controller.InputCheckboxGroup.qmd
playwright.controller.InputDarkMode.qmd
playwright.controller.InputDate.qmd
playwright.controller.InputDateRange.qmd
playwright.controller.InputFile.qmd
playwright.controller.InputNumeric.qmd
playwright.controller.InputPassword.qmd
playwright.controller.InputRadioButtons.qmd
playwright.controller.InputSelect.qmd
playwright.controller.InputSelectize.qmd
playwright.controller.InputSlider.qmd
playwright.controller.InputSliderRange.qmd
playwright.controller.InputSwitch.qmd
playwright.controller.InputTaskButton.qmd
playwright.controller.InputText.qmd
playwright.controller.InputTextArea.qmd
playwright.controller.NavItem.qmd
playwright.controller.NavPanel.qmd
playwright.controller.NavsetBar.qmd
playwright.controller.NavsetCardPill.qmd
playwright.controller.NavsetCardTab.qmd
playwright.controller.NavsetCardUnderline.qmd
playwright.controller.NavsetHidden.qmd
playwright.controller.NavsetPill.qmd
playwright.controller.NavsetPillList.qmd
playwright.controller.NavsetTab.qmd
playwright.controller.NavsetUnderline.qmd
playwright.controller.OutputCode.qmd
playwright.controller.OutputDataFrame.qmd
playwright.controller.OutputImage.qmd
playwright.controller.OutputPlot.qmd
playwright.controller.OutputTable.qmd
playwright.controller.OutputText.qmd
playwright.controller.OutputTextVerbatim.qmd
playwright.controller.OutputUi.qmd
playwright.controller.Popover.qmd
playwright.controller.Sidebar.qmd
playwright.controller.Tooltip.qmd
playwright.controller.ValueBox.qmd
playwright.controls.Accordion.qmd
playwright.controls.AccordionPanel.qmd
playwright.controls.Card.qmd
playwright.controls.DownloadButton.qmd
playwright.controls.DownloadLink.qmd
playwright.controls.InputActionLink.qmd
playwright.controls.InputCheckbox.qmd
playwright.controls.InputCheckboxGroup.qmd
playwright.controls.InputDarkMode.qmd
playwright.controls.InputDate.qmd
playwright.controls.InputDateRange.qmd
playwright.controls.InputFile.qmd
playwright.controls.InputNumeric.qmd
playwright.controls.InputPassword.qmd
playwright.controls.InputRadioButtons.qmd
playwright.controls.InputSelect.qmd
playwright.controls.InputSelectize.qmd
playwright.controls.InputSlider.qmd
playwright.controls.InputSliderRange.qmd
playwright.controls.InputSwitch.qmd
playwright.controls.InputTaskButton.qmd
playwright.controls.InputText.qmd
playwright.controls.InputTextArea.qmd
playwright.controls.NavItem.qmd
playwright.controls.NavsetBar.qmd
playwright.controls.NavsetCardPill.qmd
playwright.controls.NavsetCardTab.qmd
playwright.controls.NavsetCardUnderline.qmd
playwright.controls.NavsetHidden.qmd
playwright.controls.NavsetPill.qmd
playwright.controls.NavsetPillList.qmd
playwright.controls.NavsetTab.qmd
playwright.controls.NavsetUnderline.qmd
playwright.controls.OutputCode.qmd
playwright.controls.OutputDataFrame.qmd
playwright.controls.OutputImage.qmd
playwright.controls.OutputPlot.qmd
playwright.controls.OutputTable.qmd
playwright.controls.OutputText.qmd
playwright.controls.OutputTextVerbatim.qmd
playwright.controls.OutputUi.qmd
playwright.controls.Popover.qmd
playwright.controls.Sidebar.qmd
playwright.controls.Tooltip.qmd
playwright.controls.ValueBox.qmd
playwright.expect.expect_attribute_to_have_value.qmd
playwright.expect.expect_not_to_have_attribute.qmd
playwright.expect.expect_not_to_have_class.qmd
playwright.expect.expect_not_to_have_style.qmd
playwright.expect.expect_to_change.qmd
playwright.expect.expect_to_have_class.qmd
playwright.expect.expect_to_have_style.qmd
pytest.create_app_fixture.qmd
pytest.ScopeName.qmd
run.run_shiny_app.qmd
run.ShinyAppProc.qmd

================================================================
Repository Files
================================================================

================
File: _sidebar.yml
================
website:
  sidebar:
  - contents:
    - api/testing/index.qmd
    - contents:
      - api/testing/playwright.controller.Accordion.qmd
      - api/testing/playwright.controller.AccordionPanel.qmd
      - api/testing/playwright.controller.Card.qmd
      - api/testing/playwright.controller.Popover.qmd
      - api/testing/playwright.controller.Sidebar.qmd
      - api/testing/playwright.controller.Tooltip.qmd
      section: UI Layouts
    - contents:
      - api/testing/playwright.controller.InputActionLink.qmd
      - api/testing/playwright.controller.InputCheckbox.qmd
      - api/testing/playwright.controller.InputCheckboxGroup.qmd
      - api/testing/playwright.controller.InputDarkMode.qmd
      - api/testing/playwright.controller.InputDate.qmd
      - api/testing/playwright.controller.InputDateRange.qmd
      - api/testing/playwright.controller.InputNumeric.qmd
      - api/testing/playwright.controller.InputPassword.qmd
      - api/testing/playwright.controller.InputRadioButtons.qmd
      - api/testing/playwright.controller.InputSelect.qmd
      - api/testing/playwright.controller.InputSelectize.qmd
      - api/testing/playwright.controller.InputSlider.qmd
      - api/testing/playwright.controller.InputSliderRange.qmd
      - api/testing/playwright.controller.InputSwitch.qmd
      - api/testing/playwright.controller.InputTaskButton.qmd
      - api/testing/playwright.controller.InputText.qmd
      - api/testing/playwright.controller.InputTextArea.qmd
      section: UI Inputs
    - contents:
      - api/testing/playwright.controller.ValueBox.qmd
      section: Value boxes
    - contents:
      - api/testing/playwright.controller.NavsetBar.qmd
      - api/testing/playwright.controller.NavsetCardPill.qmd
      - api/testing/playwright.controller.NavsetCardTab.qmd
      - api/testing/playwright.controller.NavsetCardUnderline.qmd
      - api/testing/playwright.controller.NavsetHidden.qmd
      - api/testing/playwright.controller.NavsetPill.qmd
      - api/testing/playwright.controller.NavsetPillList.qmd
      - api/testing/playwright.controller.NavsetTab.qmd
      - api/testing/playwright.controller.NavsetUnderline.qmd
      - api/testing/playwright.controller.NavPanel.qmd
      section: Navigation (tab) panels
    - contents:
      - api/testing/playwright.controller.InputFile.qmd
      - api/testing/playwright.controller.DownloadButton.qmd
      - api/testing/playwright.controller.DownloadLink.qmd
      section: Upload and download
    - contents:
      - api/testing/playwright.controller.Chat.qmd
      section: Chat interface
    - contents:
      - api/testing/playwright.controller.OutputCode.qmd
      - api/testing/playwright.controller.OutputDataFrame.qmd
      - api/testing/playwright.controller.OutputImage.qmd
      - api/testing/playwright.controller.OutputPlot.qmd
      - api/testing/playwright.controller.OutputTable.qmd
      - api/testing/playwright.controller.OutputText.qmd
      - api/testing/playwright.controller.OutputTextVerbatim.qmd
      - api/testing/playwright.controller.OutputUi.qmd
      section: Rendering Outputs
    - contents:
      - api/testing/playwright.expect.expect_to_change.qmd
      - api/testing/playwright.expect.expect_not_to_have_attribute.qmd
      - api/testing/playwright.expect.expect_to_have_class.qmd
      - api/testing/playwright.expect.expect_not_to_have_class.qmd
      - api/testing/playwright.expect.expect_to_have_style.qmd
      - api/testing/playwright.expect.expect_not_to_have_style.qmd
      section: Playwright Expect
    - contents:
      - api/testing/pytest.create_app_fixture.qmd
      - api/testing/pytest.ScopeName.qmd
      section: Pytest
    - contents:
      - api/testing/run.run_shiny_app.qmd
      - api/testing/run.ShinyAppProc.qmd
      section: Run
    id: api/testing
  - id: dummy-sidebar

================
File: index.qmd
================
# Function reference {.doc .doc-index}

## UI Layouts

Methods for interacting with Shiny app multiple UI component controller.

| | |
| --- | --- |
| [playwright.controller.Accordion](playwright.controller.Accordion.qmd#shiny.playwright.controller.Accordion) | Controller for [](:func:`shiny.ui.accordion`). |
| [playwright.controller.AccordionPanel](playwright.controller.AccordionPanel.qmd#shiny.playwright.controller.AccordionPanel) | Controller for [](:func:`shiny.ui.accordion_panel`). |
| [playwright.controller.Card](playwright.controller.Card.qmd#shiny.playwright.controller.Card) | Controller for [](:func:`shiny.ui.card`). |
| [playwright.controller.Popover](playwright.controller.Popover.qmd#shiny.playwright.controller.Popover) | Controller for [](:func:`shiny.ui.popover`). |
| [playwright.controller.Sidebar](playwright.controller.Sidebar.qmd#shiny.playwright.controller.Sidebar) | Controller for [](:func:`shiny.ui.sidebar`). |
| [playwright.controller.Tooltip](playwright.controller.Tooltip.qmd#shiny.playwright.controller.Tooltip) | Controller for [](:func:`shiny.ui.tooltip`). |

## UI Inputs

Methods for interacting with Shiny app input value controller.

| | |
| --- | --- |
| [playwright.controller.InputActionLink](playwright.controller.InputActionLink.qmd#shiny.playwright.controller.InputActionLink) | Controller for [](:func:`shiny.ui.input_action_link`). |
| [playwright.controller.InputCheckbox](playwright.controller.InputCheckbox.qmd#shiny.playwright.controller.InputCheckbox) | Controller for [](:func:`shiny.ui.input_checkbox`). |
| [playwright.controller.InputCheckboxGroup](playwright.controller.InputCheckboxGroup.qmd#shiny.playwright.controller.InputCheckboxGroup) | Controller for [](:func:`shiny.ui.input_checkbox_group`). |
| [playwright.controller.InputDarkMode](playwright.controller.InputDarkMode.qmd#shiny.playwright.controller.InputDarkMode) | Controller for [](:func:`shiny.ui.input_dark_mode`). |
| [playwright.controller.InputDate](playwright.controller.InputDate.qmd#shiny.playwright.controller.InputDate) |  |
| [playwright.controller.InputDateRange](playwright.controller.InputDateRange.qmd#shiny.playwright.controller.InputDateRange) | Controller for [](:func:`shiny.ui.input_date_range`). |
| [playwright.controller.InputNumeric](playwright.controller.InputNumeric.qmd#shiny.playwright.controller.InputNumeric) | Controller for [](:func:`shiny.ui.input_numeric`). |
| [playwright.controller.InputPassword](playwright.controller.InputPassword.qmd#shiny.playwright.controller.InputPassword) | Controller for [](:func:`shiny.ui.input_password`). |
| [playwright.controller.InputRadioButtons](playwright.controller.InputRadioButtons.qmd#shiny.playwright.controller.InputRadioButtons) | Controller for [](:func:`shiny.ui.input_radio_buttons`). |
| [playwright.controller.InputSelect](playwright.controller.InputSelect.qmd#shiny.playwright.controller.InputSelect) | Controller for [](:func:`shiny.ui.input_select`). |
| [playwright.controller.InputSelectize](playwright.controller.InputSelectize.qmd#shiny.playwright.controller.InputSelectize) | Controller for [](:func:`shiny.ui.input_selectize`). |
| [playwright.controller.InputSlider](playwright.controller.InputSlider.qmd#shiny.playwright.controller.InputSlider) | Controller for [](:func:`shiny.ui.input_slider`). |
| [playwright.controller.InputSliderRange](playwright.controller.InputSliderRange.qmd#shiny.playwright.controller.InputSliderRange) | Controller for [](:func:`shiny.ui.input_slider`) with a slider range. |
| [playwright.controller.InputSwitch](playwright.controller.InputSwitch.qmd#shiny.playwright.controller.InputSwitch) | Controller for [](:func:`shiny.ui.input_switch`). |
| [playwright.controller.InputTaskButton](playwright.controller.InputTaskButton.qmd#shiny.playwright.controller.InputTaskButton) | Controller for [](:func:`shiny.ui.input_task_button`). |
| [playwright.controller.InputText](playwright.controller.InputText.qmd#shiny.playwright.controller.InputText) | Controller for [](:func:`shiny.ui.input_text`). |
| [playwright.controller.InputTextArea](playwright.controller.InputTextArea.qmd#shiny.playwright.controller.InputTextArea) | Controller for [](:func:`shiny.ui.input_text_area`). |

## Value boxes

Methods for interacting with Shiny app valuebox controller.

| | |
| --- | --- |
| [playwright.controller.ValueBox](playwright.controller.ValueBox.qmd#shiny.playwright.controller.ValueBox) | Controller for [](:func:`shiny.ui.value_box`). |

## Navigation (tab) panels

Methods for interacting with Shiny app UI content controller.

| | |
| --- | --- |
| [playwright.controller.NavsetBar](playwright.controller.NavsetBar.qmd#shiny.playwright.controller.NavsetBar) | Controller for [](:func:`shiny.ui.navset_bar`). |
| [playwright.controller.NavsetCardPill](playwright.controller.NavsetCardPill.qmd#shiny.playwright.controller.NavsetCardPill) | Controller for [](:func:`shiny.ui.navset_card_pill`). |
| [playwright.controller.NavsetCardTab](playwright.controller.NavsetCardTab.qmd#shiny.playwright.controller.NavsetCardTab) | Controller for [](:func:`shiny.ui.navset_card_tab`). |
| [playwright.controller.NavsetCardUnderline](playwright.controller.NavsetCardUnderline.qmd#shiny.playwright.controller.NavsetCardUnderline) | Controller for [](:func:`shiny.ui.navset_card_underline`). |
| [playwright.controller.NavsetHidden](playwright.controller.NavsetHidden.qmd#shiny.playwright.controller.NavsetHidden) | Controller for [](:func:`shiny.ui.navset_hidden`). |
| [playwright.controller.NavsetPill](playwright.controller.NavsetPill.qmd#shiny.playwright.controller.NavsetPill) | Controller for [](:func:`shiny.ui.navset_pill`). |
| [playwright.controller.NavsetPillList](playwright.controller.NavsetPillList.qmd#shiny.playwright.controller.NavsetPillList) | Controller for [](:func:`shiny.ui.navset_pill_list`). |
| [playwright.controller.NavsetTab](playwright.controller.NavsetTab.qmd#shiny.playwright.controller.NavsetTab) | Controller for [](:func:`shiny.ui.navset_tab`). |
| [playwright.controller.NavsetUnderline](playwright.controller.NavsetUnderline.qmd#shiny.playwright.controller.NavsetUnderline) | Controller for [](:func:`shiny.ui.navset_underline`). |
| [playwright.controller.NavPanel](playwright.controller.NavPanel.qmd#shiny.playwright.controller.NavPanel) | Controller for [](:func:`shiny.ui.nav_panel`). |

## Upload and download

Methods for interacting with Shiny app uploading and downloading controller.

| | |
| --- | --- |
| [playwright.controller.InputFile](playwright.controller.InputFile.qmd#shiny.playwright.controller.InputFile) | Controller for [](:func:`shiny.ui.input_file`). |
| [playwright.controller.DownloadButton](playwright.controller.DownloadButton.qmd#shiny.playwright.controller.DownloadButton) | Controller for [](:func:`shiny.ui.download_button`) |
| [playwright.controller.DownloadLink](playwright.controller.DownloadLink.qmd#shiny.playwright.controller.DownloadLink) | Controller for [](:func:`shiny.ui.download_link`). |

## Chat interface

Methods for interacting with Shiny app chat controller.

| | |
| --- | --- |
| [playwright.controller.Chat](playwright.controller.Chat.qmd#shiny.playwright.controller.Chat) | Controller for [](:func:`shiny.ui.chat`). |

## Rendering Outputs

Render output in a variety of ways.

| | |
| --- | --- |
| [playwright.controller.OutputCode](playwright.controller.OutputCode.qmd#shiny.playwright.controller.OutputCode) | Controller for [](:func:`shiny.ui.output_code`). |
| [playwright.controller.OutputDataFrame](playwright.controller.OutputDataFrame.qmd#shiny.playwright.controller.OutputDataFrame) | Controller for [](:func:`shiny.ui.output_data_frame`). |
| [playwright.controller.OutputImage](playwright.controller.OutputImage.qmd#shiny.playwright.controller.OutputImage) | Controller for [](:func:`shiny.ui.output_image`). |
| [playwright.controller.OutputPlot](playwright.controller.OutputPlot.qmd#shiny.playwright.controller.OutputPlot) | Controller for [](:func:`shiny.ui.output_plot`). |
| [playwright.controller.OutputTable](playwright.controller.OutputTable.qmd#shiny.playwright.controller.OutputTable) | Controller for [](:func:`shiny.ui.output_table`). |
| [playwright.controller.OutputText](playwright.controller.OutputText.qmd#shiny.playwright.controller.OutputText) | Controller for [](:func:`shiny.ui.output_text`). |
| [playwright.controller.OutputTextVerbatim](playwright.controller.OutputTextVerbatim.qmd#shiny.playwright.controller.OutputTextVerbatim) | Controller for [](:func:`shiny.ui.output_text_verbatim`). |
| [playwright.controller.OutputUi](playwright.controller.OutputUi.qmd#shiny.playwright.controller.OutputUi) | Controller for [](:func:`shiny.ui.output_ui`). |

## Playwright Expect

Methods for testing the state of a locator within a Shiny app.

| | |
| --- | --- |
| [playwright.expect.expect_to_change](playwright.expect.expect_to_change.qmd#shiny.playwright.expect.expect_to_change) | Context manager that yields when the value returned by func() changes. |
| [playwright.expect.expect_not_to_have_attribute](playwright.expect.expect_not_to_have_attribute.qmd#shiny.playwright.expect.expect_not_to_have_attribute) | Expect that the attribute does not exist. |
| [playwright.expect.expect_to_have_class](playwright.expect.expect_to_have_class.qmd#shiny.playwright.expect.expect_to_have_class) | Expect a CSS class value is found. |
| [playwright.expect.expect_not_to_have_class](playwright.expect.expect_not_to_have_class.qmd#shiny.playwright.expect.expect_not_to_have_class) | Expect a CSS class value is not found. |
| [playwright.expect.expect_to_have_style](playwright.expect.expect_to_have_style.qmd#shiny.playwright.expect.expect_to_have_style) | Expect the `style` attribute to have a value. |
| [playwright.expect.expect_not_to_have_style](playwright.expect.expect_not_to_have_style.qmd#shiny.playwright.expect.expect_not_to_have_style) | Expect a key within `style` attribute to not exist. |

## Pytest

Fixtures used for testing Shiny apps with Pytest.

| | |
| --- | --- |
| [pytest.create_app_fixture](pytest.create_app_fixture.qmd#shiny.pytest.create_app_fixture) | Create a fixture for a local Shiny app directory. |
| [pytest.ScopeName](pytest.ScopeName.qmd#shiny.pytest.ScopeName) | Pytest fixture scopes |

## Run

Methods for starting a local Shiny app in the background

| | |
| --- | --- |
| [run.run_shiny_app](run.run_shiny_app.qmd#shiny.run.run_shiny_app) | Run a Shiny app in a subprocess. |
| [run.ShinyAppProc](run.ShinyAppProc.qmd#shiny.run.ShinyAppProc) | Class that represents a running Shiny app process. |

================
File: playwright.controller.Accordion.qmd
================
# playwright.controller.Accordion { #shiny.playwright.controller.Accordion }

```python
playwright.controller.Accordion(self, page, id)
```

Controller for [](:func:`shiny.express.ui.accordion`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.Accordion.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.Accordion.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.Accordion.loc) | Playwright `Locator` for each accordion items. |
| [loc_container](#shiny.playwright.controller.Accordion.loc_container) | Playwright `Locator` for the accordion container. |
| [page](#shiny.playwright.controller.Accordion.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [accordion_panel](#shiny.playwright.controller.Accordion.accordion_panel) | Returns the accordion panel ([](:class:`~shiny.playwright.controls.AccordionPanel`)) with the specified data value. |
| [expect_class](#shiny.playwright.controller.Accordion.expect_class) | Expects the accordion to have the specified class. |
| [expect_height](#shiny.playwright.controller.Accordion.expect_height) | Expects the accordion to have the specified height. |
| [expect_multiple](#shiny.playwright.controller.Accordion.expect_multiple) | Expects the accordion to be multiple or not. |
| [expect_panels](#shiny.playwright.controller.Accordion.expect_panels) | Expects the accordion to have the specified panels. |
| [expect_width](#shiny.playwright.controller.Accordion.expect_width) | Expects the accordion to have the specified width. |
| [set](#shiny.playwright.controller.Accordion.set) | Sets the state of the accordion panel. |

### accordion_panel { #shiny.playwright.controller.Accordion.accordion_panel }

```python
playwright.controller.Accordion.accordion_panel(data_value)
```

Returns the accordion panel ([](:class:`~shiny.playwright.controls.AccordionPanel`))
with the specified data value.

#### Parameters {.doc-section .doc-section-parameters}

| Name       | Type         | Description                            | Default    |
|------------|--------------|----------------------------------------|------------|
| data_value | [str](`str`) | The data value of the accordion panel. | _required_ |

### expect_class { #shiny.playwright.controller.Accordion.expect_class }

```python
playwright.controller.Accordion.expect_class(class_name, *, timeout=None)
```

Expects the accordion to have the specified class.

#### Parameters {.doc-section .doc-section-parameters}

| Name       | Type                                         | Description                                                           | Default    |
|------------|----------------------------------------------|-----------------------------------------------------------------------|------------|
| class_name | [str](`str`)                                 | The class name to expect.                                             | _required_ |
| timeout    | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the class to appear. Defaults to `None`. | `None`     |

### expect_height { #shiny.playwright.controller.Accordion.expect_height }

```python
playwright.controller.Accordion.expect_height(value, *, timeout=None)
```

Expects the accordion to have the specified height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                                                 | Default    |
|---------|----------------------------------------------------|---------------------------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected height.                                                                        | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the height to be visible and interactable. Defaults to `None`. | `None`     |

### expect_multiple { #shiny.playwright.controller.Accordion.expect_multiple }

```python
playwright.controller.Accordion.expect_multiple(value, *, timeout=None)
```

Expects the accordion to be multiple or not.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the accordion is expected to be multiple, `False` otherwise.    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_panels { #shiny.playwright.controller.Accordion.expect_panels }

```python
playwright.controller.Accordion.expect_panels(value, *, timeout=None)
```

Expects the accordion to have the specified panels.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                                                 | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected panels.                                                                        | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the panels to be visible and interactable. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.Accordion.expect_width }

```python
playwright.controller.Accordion.expect_width(value, *, timeout=None)
```

Expects the accordion to have the specified width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                                       | Default    |
|---------|----------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.Accordion.set }

```python
playwright.controller.Accordion.set(open, *, timeout=None)
```

Sets the state of the accordion panel.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                           | Description                                                                                          | Default    |
|---------|------------------------------------------------|------------------------------------------------------------------------------------------------------|------------|
| open    | [str](`str`) \| [list](`list`)\[[str](`str`)\] | The open accordion panel(s).                                                                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)   | The maximum time to wait for the accordion panel to be visible and interactable. Defaults to `None`. | `None`     |

================
File: playwright.controller.AccordionPanel.qmd
================
# playwright.controller.AccordionPanel { #shiny.playwright.controller.AccordionPanel }

```python
playwright.controller.AccordionPanel(self, page, id, data_value)
```

Controller for [](:func:`shiny.express.ui.accordion_panel`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.AccordionPanel.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.AccordionPanel.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.AccordionPanel.loc) | Playwright `Locator` of the UI element. |
| [loc_body](#shiny.playwright.controller.AccordionPanel.loc_body) | Playwright `Locator` for the accordion panel's body. |
| [loc_container](#shiny.playwright.controller.AccordionPanel.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_header](#shiny.playwright.controller.AccordionPanel.loc_header) | Playwright `Locator` for the accordion panel's header. |
| [loc_icon](#shiny.playwright.controller.AccordionPanel.loc_icon) | Playwright `Locator` for the accordion panel's icon. |
| [loc_label](#shiny.playwright.controller.AccordionPanel.loc_label) | Playwright `Locator` for the accordion panel's label. |
| [page](#shiny.playwright.controller.AccordionPanel.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_body](#shiny.playwright.controller.AccordionPanel.expect_body) | Expects the accordion panel body to have the specified text. |
| [expect_icon](#shiny.playwright.controller.AccordionPanel.expect_icon) | Expects the accordion panel icon to exist or not. |
| [expect_label](#shiny.playwright.controller.AccordionPanel.expect_label) | Expects the accordion panel label to have the specified text. |
| [expect_open](#shiny.playwright.controller.AccordionPanel.expect_open) | Expects the accordion panel to be open or closed. |
| [expect_width](#shiny.playwright.controller.AccordionPanel.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |
| [set](#shiny.playwright.controller.AccordionPanel.set) | Sets the state of the control to open or closed. |

### expect_body { #shiny.playwright.controller.AccordionPanel.expect_body }

```python
playwright.controller.AccordionPanel.expect_body(value, *, timeout=None)
```

Expects the accordion panel body to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                          | Default    |
|---------|--------------------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                 | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the body to appear. Defaults to `None`. | `None`     |

### expect_icon { #shiny.playwright.controller.AccordionPanel.expect_icon }

```python
playwright.controller.AccordionPanel.expect_icon(exists, *, timeout=None)
```

Expects the accordion panel icon to exist or not.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                          | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------|------------|
| exists  | [bool](`bool`)                               | `True` if the icon is expected to exist, `False` otherwise.          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the icon to appear. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.AccordionPanel.expect_label }

```python
playwright.controller.AccordionPanel.expect_label(value, *, timeout=None)
```

Expects the accordion panel label to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                           | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the label to appear. Defaults to `None`. | `None`     |

### expect_open { #shiny.playwright.controller.AccordionPanel.expect_open }

```python
playwright.controller.AccordionPanel.expect_open(value, *, timeout=None)
```

Expects the accordion panel to be open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the accordion panel is expected to be open, `False` otherwise.  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.AccordionPanel.expect_width }

```python
playwright.controller.AccordionPanel.expect_width(value, *, timeout=None)
```

Expect the `width` attribute of a DOM element to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `width` attribute.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.AccordionPanel.set }

```python
playwright.controller.AccordionPanel.set(open, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                                  | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------------------------------|------------|
| open    | [bool](`bool`)                               | `True` to open the accordion panel, False to close it.                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the control to be visible and interactable. Defaults to `None`. | `None`     |

================
File: playwright.controller.Card.qmd
================
# playwright.controller.Card { #shiny.playwright.controller.Card }

```python
playwright.controller.Card(self, page, id)
```

Controller for [](:func:`shiny.express.ui.card`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.Card.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.Card.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.Card.loc) | Playwright `Locator` for the card's value. |
| [loc_body](#shiny.playwright.controller.Card.loc_body) | Playwright `Locator` for the card body. |
| [loc_container](#shiny.playwright.controller.Card.loc_container) | Playwright `Locator` for the card container. |
| [loc_footer](#shiny.playwright.controller.Card.loc_footer) | Playwright `Locator` for the card footer. |
| [loc_title](#shiny.playwright.controller.Card.loc_title) | Playwright `Locator` for the card title. |
| [page](#shiny.playwright.controller.Card.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_body](#shiny.playwright.controller.Card.expect_body) | Expect the card body element to have the specified text. |
| [expect_footer](#shiny.playwright.controller.Card.expect_footer) | Expects the card footer to have a specific text. |
| [expect_full_screen](#shiny.playwright.controller.Card.expect_full_screen) | Verifies if the full screen mode is currently open. |
| [expect_full_screen_available](#shiny.playwright.controller.Card.expect_full_screen_available) | Expects whether full screen mode is available for the element. |
| [expect_header](#shiny.playwright.controller.Card.expect_header) | Expects the card header to have a specific text. |
| [expect_height](#shiny.playwright.controller.Card.expect_height) | Expects the card to have a specific height. |
| [expect_max_height](#shiny.playwright.controller.Card.expect_max_height) | Expects the card to have a specific maximum height. |
| [expect_min_height](#shiny.playwright.controller.Card.expect_min_height) | Expects the card to have a specific minimum height. |
| [expect_width](#shiny.playwright.controller.Card.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |
| [set_full_screen](#shiny.playwright.controller.Card.set_full_screen) | Sets the element to full screen mode or exits full screen mode. |

### expect_body { #shiny.playwright.controller.Card.expect_body }

```python
playwright.controller.Card.expect_body(value, *, timeout=None)
```

Expect the card body element to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                                                                               | Description                                                          | Default    |
|---------|------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected text or a list of expected texts.                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                       | The maximum time to wait for the text to appear. Defaults to `None`. | `None`     |

### expect_footer { #shiny.playwright.controller.Card.expect_footer }

```python
playwright.controller.Card.expect_footer(value, *, timeout=None)
```

Expects the card footer to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                                            | Default    |
|---------|----------------------------------------------------------------|----------------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None | The expected text pattern or string Note: None if the footer is expected to not exist. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to pass. Defaults to `None`.              | `None`     |

### expect_full_screen { #shiny.playwright.controller.Card.expect_full_screen }

```python
playwright.controller.Card.expect_full_screen(value, *, timeout=None)
```

Verifies if the full screen mode is currently open.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                         | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the item is to be in full screen mode, `False` otherwise. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the verification. Defaults to `None`.  | `None`     |

### expect_full_screen_available { #shiny.playwright.controller.Card.expect_full_screen_available }

```python
playwright.controller.Card.expect_full_screen_available(value, *, timeout=None)
```

Expects whether full screen mode is available for the element.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                              | Default    |
|---------|----------------------------------------------|------------------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the element is expected to be available for full screen mode, False otherwise. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`.                | `None`     |

### expect_header { #shiny.playwright.controller.Card.expect_header }

```python
playwright.controller.Card.expect_header(value, *, timeout=None)
```

Expects the card header to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                                                | Default    |
|---------|----------------------------------------------------------------|--------------------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None | The expected text pattern or string.  Note: `None` if the header is expected to not exist. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to pass. Defaults to `None`.                  | `None`     |

### expect_height { #shiny.playwright.controller.Card.expect_height }

```python
playwright.controller.Card.expect_height(value, *, timeout=None)
```

Expects the card to have a specific height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                               | Default    |
|---------|----------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected height value.                                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_max_height { #shiny.playwright.controller.Card.expect_max_height }

```python
playwright.controller.Card.expect_max_height(value, *, timeout=None)
```

Expects the card to have a specific maximum height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                               | Default    |
|---------|----------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected maximum height value.                                        | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_min_height { #shiny.playwright.controller.Card.expect_min_height }

```python
playwright.controller.Card.expect_min_height(value, *, timeout=None)
```

Expects the card to have a specific minimum height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                               | Default    |
|---------|----------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected minimum height value.                                        | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.Card.expect_width }

```python
playwright.controller.Card.expect_width(value, *, timeout=None)
```

Expect the `width` attribute of a DOM element to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `width` attribute.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set_full_screen { #shiny.playwright.controller.Card.set_full_screen }

```python
playwright.controller.Card.set_full_screen(open, *, timeout=None)
```

Sets the element to full screen mode or exits full screen mode.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| open    | [bool](`bool`)                               | `True` to open the element in full screen mode, `False` to exit full screen mode. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the operation to complete. Defaults to `None`.       | `None`     |

================
File: playwright.controller.Chat.qmd
================
# playwright.controller.Chat { #shiny.playwright.controller.Chat }

```python
playwright.controller.Chat(self, page, id)
```

Controller for [](:func:`shiny.express.ui.chat`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.Chat.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.Chat.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.Chat.loc) | Playwright `Locator` for the chat. |
| [loc_input](#shiny.playwright.controller.Chat.loc_input) | Playwright `Locator` for the chat's <textarea> input. |
| [loc_input_button](#shiny.playwright.controller.Chat.loc_input_button) | Playwright `Locator` for the chat's <button> input. |
| [loc_input_container](#shiny.playwright.controller.Chat.loc_input_container) | Playwright `Locator` for the chat input container. |
| [loc_latest_message](#shiny.playwright.controller.Chat.loc_latest_message) | Playwright `Locator` for the last message in the chat. |
| [loc_messages](#shiny.playwright.controller.Chat.loc_messages) | Playwright `Locator` for the chat messages. |
| [page](#shiny.playwright.controller.Chat.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_latest_message](#shiny.playwright.controller.Chat.expect_latest_message) | Expects the last message in the chat. |
| [expect_messages](#shiny.playwright.controller.Chat.expect_messages) | Expects the chat messages. |
| [expect_user_input](#shiny.playwright.controller.Chat.expect_user_input) | Expects the user message in the chat. |
| [send_user_input](#shiny.playwright.controller.Chat.send_user_input) | Sends the user message in the chat. |
| [set_user_input](#shiny.playwright.controller.Chat.set_user_input) | Sets the user message in the chat. |

### expect_latest_message { #shiny.playwright.controller.Chat.expect_latest_message }

```python
playwright.controller.Chat.expect_latest_message(value, *, timeout=None)
```

Expects the last message in the chat.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected last message.                                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_messages { #shiny.playwright.controller.Chat.expect_messages }

```python
playwright.controller.Chat.expect_messages(value, *, timeout=None)
```

Expects the chat messages.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected messages.                                                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_user_input { #shiny.playwright.controller.Chat.expect_user_input }

```python
playwright.controller.Chat.expect_user_input(value, *, timeout=None)
```

Expects the user message in the chat.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected user message.                                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### send_user_input { #shiny.playwright.controller.Chat.send_user_input }

```python
playwright.controller.Chat.send_user_input(method='enter', timeout=None)
```

Sends the user message in the chat.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                            | Description                                                                                     | Default   |
|---------|-------------------------------------------------|-------------------------------------------------------------------------------------------------|-----------|
| method  | [Literal](`typing.Literal`)\['enter', 'click'\] | The method to send the user message. Defaults to `"enter"`.                                     | `'enter'` |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)    | The maximum time to wait for the chat input to be visible and interactable. Defaults to `None`. | `None`    |

### set_user_input { #shiny.playwright.controller.Chat.set_user_input }

```python
playwright.controller.Chat.set_user_input(value, *, timeout=None)
```

Sets the user message in the chat.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                                     | Default    |
|---------|----------------------------------------------|-------------------------------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The message to send.                                                                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the chat input to be visible and interactable. Defaults to `None`. | `None`     |

================
File: playwright.controller.DownloadButton.qmd
================
# playwright.controller.DownloadButton { #shiny.playwright.controller.DownloadButton }

```python
playwright.controller.DownloadButton(self, page, id)
```

Controller for [](:func:`shiny.express.ui.download_button`)

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.DownloadButton.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.DownloadButton.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.DownloadButton.loc) | Playwright `Locator` of the UI element. |
| [page](#shiny.playwright.controller.DownloadButton.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controller.DownloadButton.click) | Clicks the input action. |
| [expect_label](#shiny.playwright.controller.DownloadButton.expect_label) | Expect the label of the input button to have a specific value. |
| [expect_width](#shiny.playwright.controller.DownloadButton.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |

### click { #shiny.playwright.controller.DownloadButton.click }

```python
playwright.controller.DownloadButton.click(timeout=None, **kwargs)
```

Clicks the input action.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                      | Default   |
|---------|----------------------------------------------|----------------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input action to be clicked. Defaults to `None`. | `None`    |

### expect_label { #shiny.playwright.controller.DownloadButton.expect_label }

```python
playwright.controller.DownloadButton.expect_label(value, *, timeout=None)
```

Expect the label of the input button to have a specific value.

Note: This must include the icon if it is present!

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.DownloadButton.expect_width }

```python
playwright.controller.DownloadButton.expect_width(value, *, timeout=None)
```

Expect the `width` attribute of a DOM element to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `width` attribute.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

================
File: playwright.controller.DownloadLink.qmd
================
# playwright.controller.DownloadLink { #shiny.playwright.controller.DownloadLink }

```python
playwright.controller.DownloadLink(self, page, id)
```

Controller for [](:func:`shiny.express.ui.download_link`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.DownloadLink.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.DownloadLink.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.DownloadLink.loc) | Playwright `Locator` of the UI element. |
| [page](#shiny.playwright.controller.DownloadLink.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controller.DownloadLink.click) | Clicks the input action. |
| [expect_label](#shiny.playwright.controller.DownloadLink.expect_label) | Expect the label of the input button to have a specific value. |

### click { #shiny.playwright.controller.DownloadLink.click }

```python
playwright.controller.DownloadLink.click(timeout=None, **kwargs)
```

Clicks the input action.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                      | Default   |
|---------|----------------------------------------------|----------------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input action to be clicked. Defaults to `None`. | `None`    |

### expect_label { #shiny.playwright.controller.DownloadLink.expect_label }

```python
playwright.controller.DownloadLink.expect_label(value, *, timeout=None)
```

Expect the label of the input button to have a specific value.

Note: This must include the icon if it is present!

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputActionLink.qmd
================
# playwright.controller.InputActionLink { #shiny.playwright.controller.InputActionLink }

```python
playwright.controller.InputActionLink(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_action_link`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputActionLink.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputActionLink.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputActionLink.loc) | Playwright `Locator` of the UI element. |
| [page](#shiny.playwright.controller.InputActionLink.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controller.InputActionLink.click) | Clicks the input action. |
| [expect_label](#shiny.playwright.controller.InputActionLink.expect_label) | Expect the label of the input button to have a specific value. |

### click { #shiny.playwright.controller.InputActionLink.click }

```python
playwright.controller.InputActionLink.click(timeout=None, **kwargs)
```

Clicks the input action.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                      | Default   |
|---------|----------------------------------------------|----------------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input action to be clicked. Defaults to `None`. | `None`    |

### expect_label { #shiny.playwright.controller.InputActionLink.expect_label }

```python
playwright.controller.InputActionLink.expect_label(value, *, timeout=None)
```

Expect the label of the input button to have a specific value.

Note: This must include the icon if it is present!

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputCheckbox.qmd
================
# playwright.controller.InputCheckbox { #shiny.playwright.controller.InputCheckbox }

```python
playwright.controller.InputCheckbox(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_checkbox`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputCheckbox.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputCheckbox.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputCheckbox.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputCheckbox.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputCheckbox.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputCheckbox.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_checked](#shiny.playwright.controller.InputCheckbox.expect_checked) | Expect the input checkbox to be checked. |
| [expect_label](#shiny.playwright.controller.InputCheckbox.expect_label) | Expect the label of the input to have a specific text. |
| [expect_width](#shiny.playwright.controller.InputCheckbox.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputCheckbox.set) | Sets the input checkbox. |

### expect_checked { #shiny.playwright.controller.InputCheckbox.expect_checked }

```python
playwright.controller.InputCheckbox.expect_checked(value, *, timeout=None)
```

Expect the input checkbox to be checked.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | Whether the input checkbox is checked.                                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputCheckbox.expect_label }

```python
playwright.controller.InputCheckbox.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputCheckbox.expect_width }

```python
playwright.controller.InputCheckbox.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputCheckbox.set }

```python
playwright.controller.InputCheckbox.set(value, *, timeout=None, **kwargs)
```

Sets the input checkbox.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                    | Default    |
|---------|----------------------------------------------|--------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | The value of the input checkbox.                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input checkbox to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputCheckboxGroup.qmd
================
# playwright.controller.InputCheckboxGroup { #shiny.playwright.controller.InputCheckboxGroup }

```python
playwright.controller.InputCheckboxGroup(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_checkbox_group`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputCheckboxGroup.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputCheckboxGroup.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputCheckboxGroup.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputCheckboxGroup.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputCheckboxGroup.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputCheckboxGroup.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_choice_labels](#shiny.playwright.controller.InputCheckboxGroup.expect_choice_labels) | Expect the labels of the choices. |
| [expect_choices](#shiny.playwright.controller.InputCheckboxGroup.expect_choices) | Expect the checkbox choices. |
| [expect_inline](#shiny.playwright.controller.InputCheckboxGroup.expect_inline) | Expect the input to be inline. |
| [expect_label](#shiny.playwright.controller.InputCheckboxGroup.expect_label) | Expect the label of the input to have a specific text. |
| [expect_selected](#shiny.playwright.controller.InputCheckboxGroup.expect_selected) | Expect the selected checkboxes. |
| [expect_width](#shiny.playwright.controller.InputCheckboxGroup.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputCheckboxGroup.set) | Set the selected checkboxes. |

### expect_choice_labels { #shiny.playwright.controller.InputCheckboxGroup.expect_choice_labels }

```python
playwright.controller.InputCheckboxGroup.expect_choice_labels(
    value,
    *,
    timeout=None,
)
```

Expect the labels of the choices.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                          | Default    |
|---------|----------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected labels.                                 | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_choices { #shiny.playwright.controller.InputCheckboxGroup.expect_choices }

```python
playwright.controller.InputCheckboxGroup.expect_choices(value, *, timeout=None)
```

Expect the checkbox choices.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                          | Default    |
|---------|----------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected choices.                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_inline { #shiny.playwright.controller.InputCheckboxGroup.expect_inline }

```python
playwright.controller.InputCheckboxGroup.expect_inline(value, *, timeout=None)
```

Expect the input to be inline.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                          | Default    |
|---------|----------------------------------------------|------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | Whether the input is inline.                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputCheckboxGroup.expect_label }

```python
playwright.controller.InputCheckboxGroup.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_selected { #shiny.playwright.controller.InputCheckboxGroup.expect_selected }

```python
playwright.controller.InputCheckboxGroup.expect_selected(value, *, timeout=None)
```

Expect the selected checkboxes.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                          | Default    |
|---------|----------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected values of the selected checkboxes.      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputCheckboxGroup.expect_width }

```python
playwright.controller.InputCheckboxGroup.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputCheckboxGroup.set }

```python
playwright.controller.InputCheckboxGroup.set(
    selected,
    *,
    timeout=None,
    **kwargs,
)
```

Set the selected checkboxes.

#### Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                                     | Description                                     | Default    |
|----------|----------------------------------------------------------|-------------------------------------------------|------------|
| selected | [ListOrTuple](`shiny.types.ListOrTuple`)\[[str](`str`)\] | The values of the selected checkboxes.          | _required_ |
| timeout  | [Timeout](`shiny.playwright._types.Timeout`)             | The timeout for the action. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputDarkMode.qmd
================
# playwright.controller.InputDarkMode { #shiny.playwright.controller.InputDarkMode }

```python
playwright.controller.InputDarkMode(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_dark_mode`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputDarkMode.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputDarkMode.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputDarkMode.loc) | Playwright `Locator` of the UI element. |
| [page](#shiny.playwright.controller.InputDarkMode.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controller.InputDarkMode.click) | Clicks the input dark mode. |
| [expect_attribute](#shiny.playwright.controller.InputDarkMode.expect_attribute) | Expect the attribute named `attribute` of the input dark mode to have a specific value. |
| [expect_mode](#shiny.playwright.controller.InputDarkMode.expect_mode) | Expect the `mode` attribute of the input dark mode to have a specific value. |
| [expect_page_mode](#shiny.playwright.controller.InputDarkMode.expect_page_mode) | Expect the page to have a specific dark mode value. |

### click { #shiny.playwright.controller.InputDarkMode.click }

```python
playwright.controller.InputDarkMode.click(timeout=None)
```

Clicks the input dark mode.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                         | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input dark mode to be clicked. Defaults to `None`. | `None`    |

### expect_attribute { #shiny.playwright.controller.InputDarkMode.expect_attribute }

```python
playwright.controller.InputDarkMode.expect_attribute(value, *, timeout=None)
```

Expect the attribute named `attribute` of the input dark mode to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The expected value of the `attribute` attribute.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_mode { #shiny.playwright.controller.InputDarkMode.expect_mode }

```python
playwright.controller.InputDarkMode.expect_mode(value, *, timeout=None)
```

Expect the `mode` attribute of the input dark mode to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The expected value of the `mode` attribute.                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_page_mode { #shiny.playwright.controller.InputDarkMode.expect_page_mode }

```python
playwright.controller.InputDarkMode.expect_page_mode(value, *, timeout=None)
```

Expect the page to have a specific dark mode value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The expected value of the page's dark mode.                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputDate.qmd
================
# playwright.controller.InputDate { #shiny.playwright.controller.InputDate }

```python
playwright.controller.InputDate(self, page, id)
```



## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputDate.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputDate.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputDate.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputDate.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputDate.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputDate.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_autoclose](#shiny.playwright.controller.InputDate.expect_autoclose) | Asserts that the input element has the expected `data-date-autoclose` attribute value. |
| [expect_datesdisabled](#shiny.playwright.controller.InputDate.expect_datesdisabled) | Asserts that the input element has the expected `data-date-dates-disabled` attribute value. |
| [expect_daysofweekdisabled](#shiny.playwright.controller.InputDate.expect_daysofweekdisabled) | Asserts that the input element has the expected `data-date-days-of-week-disabled` attribute value. |
| [expect_format](#shiny.playwright.controller.InputDate.expect_format) | Asserts that the input element has the expected `data-date-format` attribute value. |
| [expect_label](#shiny.playwright.controller.InputDate.expect_label) | Expect the label of the input to have a specific text. |
| [expect_language](#shiny.playwright.controller.InputDate.expect_language) | Asserts that the input element has the expected `data-date-language` attribute value. |
| [expect_max_date](#shiny.playwright.controller.InputDate.expect_max_date) | Asserts that the input element has the expected `data-max-date` attribute value. |
| [expect_min_date](#shiny.playwright.controller.InputDate.expect_min_date) | Asserts that the input element has the expected `data-min-date` attribute value. |
| [expect_startview](#shiny.playwright.controller.InputDate.expect_startview) | Asserts that the input element has the expected `data-date-start-view` attribute value. |
| [expect_value](#shiny.playwright.controller.InputDate.expect_value) | Asserts that the input element has the expected value. |
| [expect_weekstart](#shiny.playwright.controller.InputDate.expect_weekstart) | Asserts that the input element has the expected `data-date-week-start` attribute value. |
| [expect_width](#shiny.playwright.controller.InputDate.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputDate.set) | Sets the text value |

### expect_autoclose { #shiny.playwright.controller.InputDate.expect_autoclose }

```python
playwright.controller.InputDate.expect_autoclose(value, *, timeout=None)
```

Asserts that the input element has the expected `data-date-autoclose` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                           | Description                                                           | Default    |
|---------|------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['true', 'false'\] | The expected `data-date-autoclose` attribute value.                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)   | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_datesdisabled { #shiny.playwright.controller.InputDate.expect_datesdisabled }

```python
playwright.controller.InputDate.expect_datesdisabled(value, *, timeout=None)
```

Asserts that the input element has the expected `data-date-dates-disabled` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                           | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[str](`str`)\] \| None       | The expected `data-date-dates-disabled` attribute value.              | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_daysofweekdisabled { #shiny.playwright.controller.InputDate.expect_daysofweekdisabled }

```python
playwright.controller.InputDate.expect_daysofweekdisabled(
    value,
    *,
    timeout=None,
)
```

Asserts that the input element has the expected `data-date-days-of-week-disabled` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                           | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[int](`int`)\] \| None       | The expected `data-date-days-of-week-disabled` attribute value.       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_format { #shiny.playwright.controller.InputDate.expect_format }

```python
playwright.controller.InputDate.expect_format(value, *, timeout=None)
```

Asserts that the input element has the expected `data-date-format` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected `data-date-format` attribute value.                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputDate.expect_label }

```python
playwright.controller.InputDate.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_language { #shiny.playwright.controller.InputDate.expect_language }

```python
playwright.controller.InputDate.expect_language(value, *, timeout=None)
```

Asserts that the input element has the expected `data-date-language` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected `data-date-language` attribute value.                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_max_date { #shiny.playwright.controller.InputDate.expect_max_date }

```python
playwright.controller.InputDate.expect_max_date(value, *, timeout=None)
```

Asserts that the input element has the expected `data-max-date` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected `data-max-date` attribute value.                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_min_date { #shiny.playwright.controller.InputDate.expect_min_date }

```python
playwright.controller.InputDate.expect_min_date(value, *, timeout=None)
```

Asserts that the input element has the expected `data-min-date` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected `data-min-date` attribute value.                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_startview { #shiny.playwright.controller.InputDate.expect_startview }

```python
playwright.controller.InputDate.expect_startview(value, *, timeout=None)
```

Asserts that the input element has the expected `data-date-start-view` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected `data-date-start-view` attribute value.                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.InputDate.expect_value }

```python
playwright.controller.InputDate.expect_value(value, *, timeout=None)
```

Asserts that the input element has the expected value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                           | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_weekstart { #shiny.playwright.controller.InputDate.expect_weekstart }

```python
playwright.controller.InputDate.expect_weekstart(value, *, timeout=None)
```

Asserts that the input element has the expected `data-date-week-start` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                             | Description                                                           | Default    |
|---------|------------------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [int](`int`) \| [AttrValue](`shiny.playwright._types.AttrValue`) | The expected `data-date-week-start` attribute value.                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputDate.expect_width }

```python
playwright.controller.InputDate.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputDate.set }

```python
playwright.controller.InputDate.set(value, *, timeout=None)
```

Sets the text value

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                          | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputDateRange.qmd
================
# playwright.controller.InputDateRange { #shiny.playwright.controller.InputDateRange }

```python
playwright.controller.InputDateRange(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_date_range`).

## Attributes

| Name | Description |
| --- | --- |
| [date_end](#shiny.playwright.controller.InputDateRange.date_end) | The end date input element. |
| [date_start](#shiny.playwright.controller.InputDateRange.date_start) | The start date input element. |
| [expect](#shiny.playwright.controller.InputDateRange.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputDateRange.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputDateRange.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputDateRange.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_end](#shiny.playwright.controller.InputDateRange.loc_end) | Playwright `Locator` of the end date input element. |
| [loc_label](#shiny.playwright.controller.InputDateRange.loc_label) | Playwright `Locator` for the label of the UI element. |
| [loc_separator](#shiny.playwright.controller.InputDateRange.loc_separator) | Playwright `Locator` of the separator between the two input elements. |
| [loc_start](#shiny.playwright.controller.InputDateRange.loc_start) | Playwright `Locator` of the start date input element. |
| [page](#shiny.playwright.controller.InputDateRange.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_autoclose](#shiny.playwright.controller.InputDateRange.expect_autoclose) | Asserts that the input element has the expected autoclose value. |
| [expect_format](#shiny.playwright.controller.InputDateRange.expect_format) | Asserts that the input element has the expected format. |
| [expect_label](#shiny.playwright.controller.InputDateRange.expect_label) | Expect the label of the input to have a specific text. |
| [expect_language](#shiny.playwright.controller.InputDateRange.expect_language) | Asserts that the input element has the expected language. |
| [expect_max_date](#shiny.playwright.controller.InputDateRange.expect_max_date) | Asserts that the input element has the expected maximum date. |
| [expect_min_date](#shiny.playwright.controller.InputDateRange.expect_min_date) | Asserts that the input element has the expected minimum date. |
| [expect_separator](#shiny.playwright.controller.InputDateRange.expect_separator) | Asserts that the input element has the expected separator. |
| [expect_startview](#shiny.playwright.controller.InputDateRange.expect_startview) | Asserts that the input element has the expected start view. |
| [expect_value](#shiny.playwright.controller.InputDateRange.expect_value) | Asserts that the input element has the expected value. |
| [expect_weekstart](#shiny.playwright.controller.InputDateRange.expect_weekstart) | Asserts that the input element has the expected week start. |
| [expect_width](#shiny.playwright.controller.InputDateRange.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputDateRange.set) | Sets the value of the input element. |

### expect_autoclose { #shiny.playwright.controller.InputDateRange.expect_autoclose }

```python
playwright.controller.InputDateRange.expect_autoclose(value, *, timeout=None)
```

Asserts that the input element has the expected autoclose value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                           | Description                                                           | Default    |
|---------|------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['true', 'false'\] | The expected autoclose value.                                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)   | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_format { #shiny.playwright.controller.InputDateRange.expect_format }

```python
playwright.controller.InputDateRange.expect_format(value, *, timeout=None)
```

Asserts that the input element has the expected format.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                            | Default    |
|---------|--------------------------------------------------|------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected format.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the format to appear. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputDateRange.expect_label }

```python
playwright.controller.InputDateRange.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_language { #shiny.playwright.controller.InputDateRange.expect_language }

```python
playwright.controller.InputDateRange.expect_language(value, *, timeout=None)
```

Asserts that the input element has the expected language.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                              | Default    |
|---------|--------------------------------------------------|--------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected language.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the language to appear. Defaults to `None`. | `None`     |

### expect_max_date { #shiny.playwright.controller.InputDateRange.expect_max_date }

```python
playwright.controller.InputDateRange.expect_max_date(value, *, timeout=None)
```

Asserts that the input element has the expected maximum date.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                  | Default    |
|---------|--------------------------------------------------|------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected maximum date.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the maximum date to appear. Defaults to `None`. | `None`     |

### expect_min_date { #shiny.playwright.controller.InputDateRange.expect_min_date }

```python
playwright.controller.InputDateRange.expect_min_date(value, *, timeout=None)
```

Asserts that the input element has the expected minimum date.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                  | Default    |
|---------|--------------------------------------------------|------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected minimum date.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the minimum date to appear. Defaults to `None`. | `None`     |

### expect_separator { #shiny.playwright.controller.InputDateRange.expect_separator }

```python
playwright.controller.InputDateRange.expect_separator(value, *, timeout=None)
```

Asserts that the input element has the expected separator.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected separator.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the separator to appear. Defaults to `None`. | `None`     |

### expect_startview { #shiny.playwright.controller.InputDateRange.expect_startview }

```python
playwright.controller.InputDateRange.expect_startview(value, *, timeout=None)
```

Asserts that the input element has the expected start view.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                | Default    |
|---------|--------------------------------------------------|----------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected start view.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the start view to appear. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.InputDateRange.expect_value }

```python
playwright.controller.InputDateRange.expect_value(value, *, timeout=None)
```

Asserts that the input element has the expected value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | Description                                                                                     | Default    |
|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------|------------|
| value   | [typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected value. The first element is the start date and the second element is the end date. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                                                                                                                                                                                                                                                                                                                         | The maximum time to wait for the value to appear. Defaults to `None`.                           | `None`     |

### expect_weekstart { #shiny.playwright.controller.InputDateRange.expect_weekstart }

```python
playwright.controller.InputDateRange.expect_weekstart(value, *, timeout=None)
```

Asserts that the input element has the expected week start.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                             | Description                                                                | Default    |
|---------|------------------------------------------------------------------|----------------------------------------------------------------------------|------------|
| value   | [int](`int`) \| [AttrValue](`shiny.playwright._types.AttrValue`) | The expected week start.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                     | The maximum time to wait for the week start to appear. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputDateRange.expect_width }

```python
playwright.controller.InputDateRange.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputDateRange.set }

```python
playwright.controller.InputDateRange.set(value, *, timeout=None)
```

Sets the value of the input element.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                                     | Description                                                                                   | Default    |
|---------|------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|------------|
| value   | [typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`) \| None, [str](`str`) \| None\] | The value to set. The first element is the start date and the second element is the end date. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                             | The maximum time to wait for the value to be set. Defaults to `None`.                         | `None`     |

================
File: playwright.controller.InputFile.qmd
================
# playwright.controller.InputFile { #shiny.playwright.controller.InputFile }

```python
playwright.controller.InputFile(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_file`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputFile.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputFile.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputFile.loc) | Playwright `Locator` of the UI element. |
| [loc_button](#shiny.playwright.controller.InputFile.loc_button) | Playwright `Locator` of the button. |
| [loc_container](#shiny.playwright.controller.InputFile.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_file_display](#shiny.playwright.controller.InputFile.loc_file_display) | Playwright `Locator` of the file display. |
| [loc_label](#shiny.playwright.controller.InputFile.loc_label) | Playwright `Locator` for the label of the UI element. |
| [loc_progress](#shiny.playwright.controller.InputFile.loc_progress) | Playwright `Locator` of the progress bar. |
| [page](#shiny.playwright.controller.InputFile.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_accept](#shiny.playwright.controller.InputFile.expect_accept) | Expect the `accept` attribute to have a specific value. |
| [expect_button_label](#shiny.playwright.controller.InputFile.expect_button_label) | Expect the button label to have a specific value. |
| [expect_capture](#shiny.playwright.controller.InputFile.expect_capture) | Expect the `capture` attribute to have a specific value. |
| [expect_complete](#shiny.playwright.controller.InputFile.expect_complete) | Expect the file upload to be complete. |
| [expect_label](#shiny.playwright.controller.InputFile.expect_label) | Expect the label of the input to have a specific text. |
| [expect_multiple](#shiny.playwright.controller.InputFile.expect_multiple) | Expect the `multiple` attribute to have a specific value. |
| [expect_width](#shiny.playwright.controller.InputFile.expect_width) | Expect the width of the input file to have a specific value. |
| [set](#shiny.playwright.controller.InputFile.set) | Set the file upload. |

### expect_accept { #shiny.playwright.controller.InputFile.expect_accept }

```python
playwright.controller.InputFile.expect_accept(value, *, timeout=None)
```

Expect the `accept` attribute to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                               | Description                                          | Default    |
|---------|------------------------------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [list](`list`)\[[str](`str`)\] \| [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `accept` attribute.        | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                       | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_button_label { #shiny.playwright.controller.InputFile.expect_button_label }

```python
playwright.controller.InputFile.expect_button_label(value, *, timeout=None)
```

Expect the button label to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                          | Default    |
|---------|--------------------------------------------------------|------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the button label.              | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_capture { #shiny.playwright.controller.InputFile.expect_capture }

```python
playwright.controller.InputFile.expect_capture(value, *, timeout=None)
```

Expect the `capture` attribute to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                         | Description                                          | Default    |
|---------|--------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['environment', 'user'\] \| None | The expected value of the `capture` attribute.       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                 | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_complete { #shiny.playwright.controller.InputFile.expect_complete }

```python
playwright.controller.InputFile.expect_complete(timeout=None)
```

Expect the file upload to be complete.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                          | Default   |
|---------|----------------------------------------------|------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the expectation. Defaults to `None`. | `None`    |

### expect_label { #shiny.playwright.controller.InputFile.expect_label }

```python
playwright.controller.InputFile.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_multiple { #shiny.playwright.controller.InputFile.expect_multiple }

```python
playwright.controller.InputFile.expect_multiple(value, *, timeout=None)
```

Expect the `multiple` attribute to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                          | Default    |
|---------|----------------------------------------------|------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | The expected value of the `multiple` attribute.      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputFile.expect_width }

```python
playwright.controller.InputFile.expect_width(value, *, timeout=None)
```

Expect the width of the input file to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                                       | Default    |
|---------|----------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected value of the width.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputFile.set }

```python
playwright.controller.InputFile.set(
    file_path,
    *,
    timeout=None,
    expect_complete_timeout=30 * 1000,
)
```

Set the file upload.

#### Parameters {.doc-section .doc-section-parameters}

| Name                    | Type                                                                                                                                                                                                                                                                   | Description                                                                           | Default     |
|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|-------------|
| file_path               | [str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`) \| [FilePayload](`playwright.sync_api.FilePayload`) \| [list](`list`)\[[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`)\] \| [list](`list`)\[[FilePayload](`playwright.sync_api.FilePayload`)\] | The path to the file to upload.                                                       | _required_  |
| timeout                 | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                                                                                                                           | The timeout for the action. Defaults to `None`.                                       | `None`      |
| expect_complete_timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                                                                                                                           | The timeout for the expectation that the upload is complete. Defaults to `30 * 1000`. | `30 * 1000` |

================
File: playwright.controller.InputNumeric.qmd
================
# playwright.controller.InputNumeric { #shiny.playwright.controller.InputNumeric }

```python
playwright.controller.InputNumeric(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_numeric`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputNumeric.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputNumeric.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputNumeric.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputNumeric.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputNumeric.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputNumeric.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_label](#shiny.playwright.controller.InputNumeric.expect_label) | Expect the label of the input to have a specific text. |
| [expect_max](#shiny.playwright.controller.InputNumeric.expect_max) | Expect the maximum numeric value to be a specific value. |
| [expect_min](#shiny.playwright.controller.InputNumeric.expect_min) | Expect the minimum numeric value to be a specific value. |
| [expect_step](#shiny.playwright.controller.InputNumeric.expect_step) | Expect step value when incrementing/decrementing the numeric input. |
| [expect_value](#shiny.playwright.controller.InputNumeric.expect_value) | Expect the value of the text input to have a specific value. |
| [expect_width](#shiny.playwright.controller.InputNumeric.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputNumeric.set) | Sets the text value |

### expect_label { #shiny.playwright.controller.InputNumeric.expect_label }

```python
playwright.controller.InputNumeric.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_max { #shiny.playwright.controller.InputNumeric.expect_max }

```python
playwright.controller.InputNumeric.expect_max(value, *, timeout=None)
```

Expect the maximum numeric value to be a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected maximum numeric value.                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_min { #shiny.playwright.controller.InputNumeric.expect_min }

```python
playwright.controller.InputNumeric.expect_min(value, *, timeout=None)
```

Expect the minimum numeric value to be a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected minimum numeric value.                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_step { #shiny.playwright.controller.InputNumeric.expect_step }

```python
playwright.controller.InputNumeric.expect_step(value, *, timeout=None)
```

Expect step value when incrementing/decrementing the numeric input.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected step value for the numeric input.                                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.InputNumeric.expect_value }

```python
playwright.controller.InputNumeric.expect_value(value, *, timeout=None)
```

Expect the value of the text input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the text input.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputNumeric.expect_width }

```python
playwright.controller.InputNumeric.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputNumeric.set }

```python
playwright.controller.InputNumeric.set(value, *, timeout=None)
```

Sets the text value

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                          | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputPassword.qmd
================
# playwright.controller.InputPassword { #shiny.playwright.controller.InputPassword }

```python
playwright.controller.InputPassword(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_password`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputPassword.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputPassword.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputPassword.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputPassword.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputPassword.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputPassword.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_label](#shiny.playwright.controller.InputPassword.expect_label) | Expect the label of the input to have a specific text. |
| [expect_placeholder](#shiny.playwright.controller.InputPassword.expect_placeholder) | Expect the `placeholder` attribute of the input to have a specific value. |
| [expect_value](#shiny.playwright.controller.InputPassword.expect_value) | Expect the value of the text input to have a specific value. |
| [expect_width](#shiny.playwright.controller.InputPassword.expect_width) | Expect the `width` attribute of the input password to have a specific value. |
| [set](#shiny.playwright.controller.InputPassword.set) | Sets the text value |

### expect_label { #shiny.playwright.controller.InputPassword.expect_label }

```python
playwright.controller.InputPassword.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_placeholder { #shiny.playwright.controller.InputPassword.expect_placeholder }

```python
playwright.controller.InputPassword.expect_placeholder(value, *, timeout=None)
```

Expect the `placeholder` attribute of the input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `placeholder` attribute.                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.InputPassword.expect_value }

```python
playwright.controller.InputPassword.expect_value(value, *, timeout=None)
```

Expect the value of the text input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the text input.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputPassword.expect_width }

```python
playwright.controller.InputPassword.expect_width(value, *, timeout=None)
```

Expect the `width` attribute of the input password to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                                       | Default    |
|---------|----------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected value of the `width` attribute.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputPassword.set }

```python
playwright.controller.InputPassword.set(value, *, timeout=None)
```

Sets the text value

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                          | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputRadioButtons.qmd
================
# playwright.controller.InputRadioButtons { #shiny.playwright.controller.InputRadioButtons }

```python
playwright.controller.InputRadioButtons(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_radio_buttons`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputRadioButtons.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputRadioButtons.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputRadioButtons.loc) | Playwright `Locator` of the UI element. |
| [loc_choice_labels](#shiny.playwright.controller.InputRadioButtons.loc_choice_labels) | Playwright `Locator` of the labels of the radio button choices. |
| [loc_choices](#shiny.playwright.controller.InputRadioButtons.loc_choices) | Playwright `Locator` of the radio button choices. |
| [loc_container](#shiny.playwright.controller.InputRadioButtons.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputRadioButtons.loc_label) | Playwright `Locator` for the label of the UI element. |
| [loc_selected](#shiny.playwright.controller.InputRadioButtons.loc_selected) | Playwright `Locator` of the selected radio button. |
| [page](#shiny.playwright.controller.InputRadioButtons.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_choice_labels](#shiny.playwright.controller.InputRadioButtons.expect_choice_labels) | Expect the labels of the choices. |
| [expect_choices](#shiny.playwright.controller.InputRadioButtons.expect_choices) | Expect the radio button choices. |
| [expect_inline](#shiny.playwright.controller.InputRadioButtons.expect_inline) | Expect the input to be inline. |
| [expect_label](#shiny.playwright.controller.InputRadioButtons.expect_label) | Expect the label of the input to have a specific text. |
| [expect_selected](#shiny.playwright.controller.InputRadioButtons.expect_selected) | Expect the selected radio button. |
| [expect_width](#shiny.playwright.controller.InputRadioButtons.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputRadioButtons.set) | Set the selected radio button. |

### expect_choice_labels { #shiny.playwright.controller.InputRadioButtons.expect_choice_labels }

```python
playwright.controller.InputRadioButtons.expect_choice_labels(
    value,
    *,
    timeout=None,
)
```

Expect the labels of the choices.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                          | Default    |
|---------|----------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected labels.                                 | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_choices { #shiny.playwright.controller.InputRadioButtons.expect_choices }

```python
playwright.controller.InputRadioButtons.expect_choices(value, *, timeout=None)
```

Expect the radio button choices.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                          | Default    |
|---------|----------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected choices.                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_inline { #shiny.playwright.controller.InputRadioButtons.expect_inline }

```python
playwright.controller.InputRadioButtons.expect_inline(value, *, timeout=None)
```

Expect the input to be inline.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                          | Default    |
|---------|----------------------------------------------|------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | Whether the input is inline.                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputRadioButtons.expect_label }

```python
playwright.controller.InputRadioButtons.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_selected { #shiny.playwright.controller.InputRadioButtons.expect_selected }

```python
playwright.controller.InputRadioButtons.expect_selected(value, *, timeout=None)
```

Expect the selected radio button.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                          | Default    |
|---------|----------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None | The expected value of the selected radio button.     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputRadioButtons.expect_width }

```python
playwright.controller.InputRadioButtons.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputRadioButtons.set }

```python
playwright.controller.InputRadioButtons.set(selected, *, timeout=None, **kwargs)
```

Set the selected radio button.

#### Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                         | Description                                     | Default    |
|----------|----------------------------------------------|-------------------------------------------------|------------|
| selected | [str](`str`)                                 | The value of the selected radio button.         | _required_ |
| timeout  | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the action. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputSelect.qmd
================
# playwright.controller.InputSelect { #shiny.playwright.controller.InputSelect }

```python
playwright.controller.InputSelect(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_select`).

If you have defined your app&#x27;s select input (`ui.input_select()`) with `selectize=TRUE`, use `InputSelectize` to test your app&#x27;s UI.

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputSelect.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputSelect.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputSelect.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputSelect.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputSelect.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputSelect.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_choice_groups](#shiny.playwright.controller.InputSelect.expect_choice_groups) | Expect the choice groups of the input select to be an exact match. |
| [expect_choice_labels](#shiny.playwright.controller.InputSelect.expect_choice_labels) | Expect the choice labels of the input select to be an exact match. |
| [expect_choices](#shiny.playwright.controller.InputSelect.expect_choices) | Expect the available options of the input select to be an exact match. |
| [expect_label](#shiny.playwright.controller.InputSelect.expect_label) | Expect the label of the input to have a specific text. |
| [expect_multiple](#shiny.playwright.controller.InputSelect.expect_multiple) | Expect the input selectize to allow multiple selections. |
| [expect_selected](#shiny.playwright.controller.InputSelect.expect_selected) | Expect the selected option(s) of the input select to be an exact match. |
| [expect_size](#shiny.playwright.controller.InputSelect.expect_size) | Expect the size attribute of the input select to have a specific value. |
| [expect_width](#shiny.playwright.controller.InputSelect.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputSelect.set) | Sets the selected option(s) of the input select. |

### expect_choice_groups { #shiny.playwright.controller.InputSelect.expect_choice_groups }

```python
playwright.controller.InputSelect.expect_choice_groups(
    choice_groups,
    *,
    timeout=None,
)
```

Expect the choice groups of the input select to be an exact match.

#### Parameters {.doc-section .doc-section-parameters}

| Name          | Type                                                           | Description                                                                       | Default    |
|---------------|----------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| choice_groups | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected choice groups of the input select.                                   | _required_ |
| timeout       | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_choice_labels { #shiny.playwright.controller.InputSelect.expect_choice_labels }

```python
playwright.controller.InputSelect.expect_choice_labels(value, *, timeout=None)
```

Expect the choice labels of the input select to be an exact match.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                                       | Default    |
|---------|----------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected choice labels of the input select.                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_choices { #shiny.playwright.controller.InputSelect.expect_choices }

```python
playwright.controller.InputSelect.expect_choices(choices, *, timeout=None)
```

Expect the available options of the input select to be an exact match.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                                       | Default    |
|---------|----------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| choices | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected choices of the input select.                                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputSelect.expect_label }

```python
playwright.controller.InputSelect.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_multiple { #shiny.playwright.controller.InputSelect.expect_multiple }

```python
playwright.controller.InputSelect.expect_multiple(value, *, timeout=None)
```

Expect the input selectize to allow multiple selections.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | Whether the input select allows multiple selections.                              | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_selected { #shiny.playwright.controller.InputSelect.expect_selected }

```python
playwright.controller.InputSelect.expect_selected(value, *, timeout=None)
```

Expect the selected option(s) of the input select to be an exact match.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                                                                     | Description                                                                       | Default    |
|---------|--------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected value(s) of the selected option(s).                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                             | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_size { #shiny.playwright.controller.InputSelect.expect_size }

```python
playwright.controller.InputSelect.expect_size(value, *, timeout=None)
```

Expect the size attribute of the input select to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `size` attribute.                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputSelect.expect_width }

```python
playwright.controller.InputSelect.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputSelect.set }

```python
playwright.controller.InputSelect.set(selected, *, timeout=None)
```

Sets the selected option(s) of the input select.

#### Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                                                     | Description                                                               | Default    |
|----------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| selected | [str](`str`) \| [ListOrTuple](`shiny.types.ListOrTuple`)\[[str](`str`)\] | The value(s) of the selected option(s).                                   | _required_ |
| timeout  | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the selection to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputSelectize.qmd
================
# playwright.controller.InputSelectize { #shiny.playwright.controller.InputSelectize }

```python
playwright.controller.InputSelectize(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_selectize`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputSelectize.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputSelectize.id) | The browser DOM `id` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputSelectize.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputSelectize.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputSelectize.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_choice_groups](#shiny.playwright.controller.InputSelectize.expect_choice_groups) | Expect the choice groups of the input select to be an exact match. |
| [expect_choice_labels](#shiny.playwright.controller.InputSelectize.expect_choice_labels) | Expect the choice labels of the input selectize to be an exact match. |
| [expect_choices](#shiny.playwright.controller.InputSelectize.expect_choices) | Expect the available options of the input selectize to be an exact match. |
| [expect_label](#shiny.playwright.controller.InputSelectize.expect_label) | Expect the label of the input to have a specific text. |
| [expect_multiple](#shiny.playwright.controller.InputSelectize.expect_multiple) | Expect the input selectize to allow multiple selections. |
| [expect_selected](#shiny.playwright.controller.InputSelectize.expect_selected) | Expect the selected option(s) of the input select to be an exact match. |
| [expect_width](#shiny.playwright.controller.InputSelectize.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputSelectize.set) | Sets the selected option(s) of the input selectize. |

### expect_choice_groups { #shiny.playwright.controller.InputSelectize.expect_choice_groups }

```python
playwright.controller.InputSelectize.expect_choice_groups(
    choice_groups,
    *,
    timeout=None,
)
```

Expect the choice groups of the input select to be an exact match.

#### Parameters {.doc-section .doc-section-parameters}

| Name          | Type                                                           | Description                                                                       | Default    |
|---------------|----------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| choice_groups | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected choice groups of the input select.                                   | _required_ |
| timeout       | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_choice_labels { #shiny.playwright.controller.InputSelectize.expect_choice_labels }

```python
playwright.controller.InputSelectize.expect_choice_labels(
    value,
    *,
    timeout=None,
)
```

Expect the choice labels of the input selectize to be an exact match.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                                       | Default    |
|---------|----------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected choice labels of the input select.                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_choices { #shiny.playwright.controller.InputSelectize.expect_choices }

```python
playwright.controller.InputSelectize.expect_choices(choices, *, timeout=None)
```

Expect the available options of the input selectize to be an exact match.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                                       | Default    |
|---------|----------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| choices | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected choices of the input select.                                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputSelectize.expect_label }

```python
playwright.controller.InputSelectize.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_multiple { #shiny.playwright.controller.InputSelectize.expect_multiple }

```python
playwright.controller.InputSelectize.expect_multiple(value, *, timeout=None)
```

Expect the input selectize to allow multiple selections.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | Whether the input select allows multiple selections.                              | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_selected { #shiny.playwright.controller.InputSelectize.expect_selected }

```python
playwright.controller.InputSelectize.expect_selected(value, *, timeout=None)
```

Expect the selected option(s) of the input select to be an exact match.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                                       | Default    |
|---------|----------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected value(s) of the selected option(s).                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputSelectize.expect_width }

```python
playwright.controller.InputSelectize.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputSelectize.set }

```python
playwright.controller.InputSelectize.set(selected, *, timeout=None)
```

Sets the selected option(s) of the input selectize.

#### Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                           | Description                                                               | Default    |
|----------|------------------------------------------------|---------------------------------------------------------------------------|------------|
| selected | [str](`str`) \| [list](`list`)\[[str](`str`)\] | The value(s) of the selected option(s).                                   | _required_ |
| timeout  | [Timeout](`shiny.playwright._types.Timeout`)   | The maximum time to wait for the selection to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputSlider.qmd
================
# playwright.controller.InputSlider { #shiny.playwright.controller.InputSlider }

```python
playwright.controller.InputSlider(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_slider`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputSlider.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputSlider.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputSlider.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputSlider.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_irs](#shiny.playwright.controller.InputSlider.loc_irs) | Playwright `Locator` of the input slider. |
| [loc_irs_label](#shiny.playwright.controller.InputSlider.loc_irs_label) | Playwright `Locator` of the input slider label. |
| [loc_irs_ticks](#shiny.playwright.controller.InputSlider.loc_irs_ticks) | Playwright `Locator` of the input slider ticks. |
| [loc_label](#shiny.playwright.controller.InputSlider.loc_label) | Playwright `Locator` for the label of the UI element. |
| [loc_play_pause](#shiny.playwright.controller.InputSlider.loc_play_pause) | Playwright `Locator` of the play/pause button. |
| [page](#shiny.playwright.controller.InputSlider.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [click_pause](#shiny.playwright.controller.InputSlider.click_pause) | Click the pause button. |
| [click_play](#shiny.playwright.controller.InputSlider.click_play) | Click the play button. |
| [expect_animate](#shiny.playwright.controller.InputSlider.expect_animate) | Expect the animate button to exist. |
| [expect_drag_range](#shiny.playwright.controller.InputSlider.expect_drag_range) | Asserts that the input element has the expected `data-drag-range` attribute value. |
| [expect_label](#shiny.playwright.controller.InputSlider.expect_label) | Expect the label of the input to have a specific text. |
| [expect_max](#shiny.playwright.controller.InputSlider.expect_max) | Expect the input element to have the expected `max` attribute value. |
| [expect_min](#shiny.playwright.controller.InputSlider.expect_min) | Expect the input element to have the expected `min` attribute value. |
| [expect_post](#shiny.playwright.controller.InputSlider.expect_post) | Expect the input element to have the expected `data-post` attribute value. |
| [expect_pre](#shiny.playwright.controller.InputSlider.expect_pre) | Expect the input element to have the expected `data-pre` attribute value. |
| [expect_sep](#shiny.playwright.controller.InputSlider.expect_sep) | Expect the input element to have the expected `data-sep` attribute value. |
| [expect_step](#shiny.playwright.controller.InputSlider.expect_step) | Expect the input element to have the expected `step` attribute value. |
| [expect_tick_labels](#shiny.playwright.controller.InputSlider.expect_tick_labels) | Expect the tick labels of the input slider. |
| [expect_ticks](#shiny.playwright.controller.InputSlider.expect_ticks) | Expect the input element to have the expected `data-ticks` attribute value. |
| [expect_time_format](#shiny.playwright.controller.InputSlider.expect_time_format) | Asserts that the input element has the expected `data-time-format` attribute value. |
| [expect_timezone](#shiny.playwright.controller.InputSlider.expect_timezone) | Asserts that the input element has the expected `data-timezone` attribute value. |
| [expect_value](#shiny.playwright.controller.InputSlider.expect_value) | Asserts that the input element has the expected value. |
| [expect_width](#shiny.playwright.controller.InputSlider.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputSlider.set) | Set the value of the slider. |

### click_pause { #shiny.playwright.controller.InputSlider.click_pause }

```python
playwright.controller.InputSlider.click_pause(timeout=None)
```

Click the pause button.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                     | Default   |
|---------|----------------------------------------------|-------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the action. Defaults to `None`. | `None`    |

### click_play { #shiny.playwright.controller.InputSlider.click_play }

```python
playwright.controller.InputSlider.click_play(timeout=None)
```

Click the play button.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                     | Default   |
|---------|----------------------------------------------|-------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the action. Defaults to `None`. | `None`    |

### expect_animate { #shiny.playwright.controller.InputSlider.expect_animate }

```python
playwright.controller.InputSlider.expect_animate(exists, *, timeout=None)
```

Expect the animate button to exist.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                          | Default    |
|---------|----------------------------------------------|------------------------------------------------------|------------|
| exists  | [bool](`bool`)                               | Whether the animate button should exist.             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_drag_range { #shiny.playwright.controller.InputSlider.expect_drag_range }

```python
playwright.controller.InputSlider.expect_drag_range(value, *, timeout=None)
```

Asserts that the input element has the expected `data-drag-range` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputSlider.expect_label }

```python
playwright.controller.InputSlider.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_max { #shiny.playwright.controller.InputSlider.expect_max }

```python
playwright.controller.InputSlider.expect_max(value, *, timeout=None)
```

Expect the input element to have the expected `max` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_min { #shiny.playwright.controller.InputSlider.expect_min }

```python
playwright.controller.InputSlider.expect_min(value, *, timeout=None)
```

Expect the input element to have the expected `min` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_post { #shiny.playwright.controller.InputSlider.expect_post }

```python
playwright.controller.InputSlider.expect_post(value, *, timeout=None)
```

Expect the input element to have the expected `data-post` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_pre { #shiny.playwright.controller.InputSlider.expect_pre }

```python
playwright.controller.InputSlider.expect_pre(value, *, timeout=None)
```

Expect the input element to have the expected `data-pre` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_sep { #shiny.playwright.controller.InputSlider.expect_sep }

```python
playwright.controller.InputSlider.expect_sep(value, *, timeout=None)
```

Expect the input element to have the expected `data-sep` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_step { #shiny.playwright.controller.InputSlider.expect_step }

```python
playwright.controller.InputSlider.expect_step(value, *, timeout=None)
```

Expect the input element to have the expected `step` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_tick_labels { #shiny.playwright.controller.InputSlider.expect_tick_labels }

```python
playwright.controller.InputSlider.expect_tick_labels(value, *, timeout=None)
```

Expect the tick labels of the input slider.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                   | Description                                          | Default    |
|---------|------------------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \| None | The expected tick labels.                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                           | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_ticks { #shiny.playwright.controller.InputSlider.expect_ticks }

```python
playwright.controller.InputSlider.expect_ticks(value, *, timeout=None)
```

Expect the input element to have the expected `data-ticks` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_time_format { #shiny.playwright.controller.InputSlider.expect_time_format }

```python
playwright.controller.InputSlider.expect_time_format(value, *, timeout=None)
```

Asserts that the input element has the expected `data-time-format` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_timezone { #shiny.playwright.controller.InputSlider.expect_timezone }

```python
playwright.controller.InputSlider.expect_timezone(value, *, timeout=None)
```

Asserts that the input element has the expected `data-timezone` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.InputSlider.expect_value }

```python
playwright.controller.InputSlider.expect_value(value, *, timeout=None)
```

Asserts that the input element has the expected value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                           | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputSlider.expect_width }

```python
playwright.controller.InputSlider.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputSlider.set }

```python
playwright.controller.InputSlider.set(value, *, max_err_values=15, timeout=None)
```

Set the value of the slider.

#### Parameters {.doc-section .doc-section-parameters}

| Name           | Type                                         | Description                                                                              | Default    |
|----------------|----------------------------------------------|------------------------------------------------------------------------------------------|------------|
| value          | [str](`str`)                                 | The value to set the slider to.                                                          | _required_ |
| max_err_values | [int](`int`)                                 | The maximum number of error values to display if the value is not found. Defaults to 15. | `15`       |
| timeout        | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the value to appear. Defaults to `None`.                    | `None`     |

================
File: playwright.controller.InputSliderRange.qmd
================
# playwright.controller.InputSliderRange { #shiny.playwright.controller.InputSliderRange }

```python
playwright.controller.InputSliderRange(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_slider`) with a slider range.

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputSliderRange.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputSliderRange.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputSliderRange.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputSliderRange.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_irs](#shiny.playwright.controller.InputSliderRange.loc_irs) | Playwright `Locator` of the input slider. |
| [loc_irs_label_from](#shiny.playwright.controller.InputSliderRange.loc_irs_label_from) | Playwright `Locator` of the input slider label for the `from` handle. |
| [loc_irs_label_to](#shiny.playwright.controller.InputSliderRange.loc_irs_label_to) | Playwright `Locator` of the input slider label for the `to` handle. |
| [loc_irs_ticks](#shiny.playwright.controller.InputSliderRange.loc_irs_ticks) | Playwright `Locator` of the input slider ticks. |
| [loc_label](#shiny.playwright.controller.InputSliderRange.loc_label) | Playwright `Locator` for the label of the UI element. |
| [loc_play_pause](#shiny.playwright.controller.InputSliderRange.loc_play_pause) | Playwright `Locator` of the play/pause button. |
| [page](#shiny.playwright.controller.InputSliderRange.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [click_pause](#shiny.playwright.controller.InputSliderRange.click_pause) | Click the pause button. |
| [click_play](#shiny.playwright.controller.InputSliderRange.click_play) | Click the play button. |
| [expect_animate](#shiny.playwright.controller.InputSliderRange.expect_animate) | Expect the animate button to exist. |
| [expect_drag_range](#shiny.playwright.controller.InputSliderRange.expect_drag_range) | Asserts that the input element has the expected `data-drag-range` attribute value. |
| [expect_label](#shiny.playwright.controller.InputSliderRange.expect_label) | Expect the label of the input to have a specific text. |
| [expect_max](#shiny.playwright.controller.InputSliderRange.expect_max) | Expect the input element to have the expected `max` attribute value. |
| [expect_min](#shiny.playwright.controller.InputSliderRange.expect_min) | Expect the input element to have the expected `min` attribute value. |
| [expect_post](#shiny.playwright.controller.InputSliderRange.expect_post) | Expect the input element to have the expected `data-post` attribute value. |
| [expect_pre](#shiny.playwright.controller.InputSliderRange.expect_pre) | Expect the input element to have the expected `data-pre` attribute value. |
| [expect_sep](#shiny.playwright.controller.InputSliderRange.expect_sep) | Expect the input element to have the expected `data-sep` attribute value. |
| [expect_step](#shiny.playwright.controller.InputSliderRange.expect_step) | Expect the input element to have the expected `step` attribute value. |
| [expect_tick_labels](#shiny.playwright.controller.InputSliderRange.expect_tick_labels) | Expect the tick labels of the input slider. |
| [expect_ticks](#shiny.playwright.controller.InputSliderRange.expect_ticks) | Expect the input element to have the expected `data-ticks` attribute value. |
| [expect_time_format](#shiny.playwright.controller.InputSliderRange.expect_time_format) | Asserts that the input element has the expected `data-time-format` attribute value. |
| [expect_timezone](#shiny.playwright.controller.InputSliderRange.expect_timezone) | Asserts that the input element has the expected `data-timezone` attribute value. |
| [expect_value](#shiny.playwright.controller.InputSliderRange.expect_value) | Asserts that the input element has the expected value. |
| [expect_width](#shiny.playwright.controller.InputSliderRange.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputSliderRange.set) | Set the value of the slider. |

### click_pause { #shiny.playwright.controller.InputSliderRange.click_pause }

```python
playwright.controller.InputSliderRange.click_pause(timeout=None)
```

Click the pause button.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                     | Default   |
|---------|----------------------------------------------|-------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the action. Defaults to `None`. | `None`    |

### click_play { #shiny.playwright.controller.InputSliderRange.click_play }

```python
playwright.controller.InputSliderRange.click_play(timeout=None)
```

Click the play button.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                     | Default   |
|---------|----------------------------------------------|-------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the action. Defaults to `None`. | `None`    |

### expect_animate { #shiny.playwright.controller.InputSliderRange.expect_animate }

```python
playwright.controller.InputSliderRange.expect_animate(exists, *, timeout=None)
```

Expect the animate button to exist.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                          | Default    |
|---------|----------------------------------------------|------------------------------------------------------|------------|
| exists  | [bool](`bool`)                               | Whether the animate button should exist.             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_drag_range { #shiny.playwright.controller.InputSliderRange.expect_drag_range }

```python
playwright.controller.InputSliderRange.expect_drag_range(value, *, timeout=None)
```

Asserts that the input element has the expected `data-drag-range` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputSliderRange.expect_label }

```python
playwright.controller.InputSliderRange.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_max { #shiny.playwright.controller.InputSliderRange.expect_max }

```python
playwright.controller.InputSliderRange.expect_max(value, *, timeout=None)
```

Expect the input element to have the expected `max` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_min { #shiny.playwright.controller.InputSliderRange.expect_min }

```python
playwright.controller.InputSliderRange.expect_min(value, *, timeout=None)
```

Expect the input element to have the expected `min` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_post { #shiny.playwright.controller.InputSliderRange.expect_post }

```python
playwright.controller.InputSliderRange.expect_post(value, *, timeout=None)
```

Expect the input element to have the expected `data-post` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_pre { #shiny.playwright.controller.InputSliderRange.expect_pre }

```python
playwright.controller.InputSliderRange.expect_pre(value, *, timeout=None)
```

Expect the input element to have the expected `data-pre` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_sep { #shiny.playwright.controller.InputSliderRange.expect_sep }

```python
playwright.controller.InputSliderRange.expect_sep(value, *, timeout=None)
```

Expect the input element to have the expected `data-sep` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_step { #shiny.playwright.controller.InputSliderRange.expect_step }

```python
playwright.controller.InputSliderRange.expect_step(value, *, timeout=None)
```

Expect the input element to have the expected `step` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_tick_labels { #shiny.playwright.controller.InputSliderRange.expect_tick_labels }

```python
playwright.controller.InputSliderRange.expect_tick_labels(
    value,
    *,
    timeout=None,
)
```

Expect the tick labels of the input slider.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                   | Description                                          | Default    |
|---------|------------------------------------------------------------------------|------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \| None | The expected tick labels.                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                           | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_ticks { #shiny.playwright.controller.InputSliderRange.expect_ticks }

```python
playwright.controller.InputSliderRange.expect_ticks(value, *, timeout=None)
```

Expect the input element to have the expected `data-ticks` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                          | Default    |
|---------|--------------------------------------------------|------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The timeout for the expectation. Defaults to `None`. | `None`     |

### expect_time_format { #shiny.playwright.controller.InputSliderRange.expect_time_format }

```python
playwright.controller.InputSliderRange.expect_time_format(
    value,
    *,
    timeout=None,
)
```

Asserts that the input element has the expected `data-time-format` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_timezone { #shiny.playwright.controller.InputSliderRange.expect_timezone }

```python
playwright.controller.InputSliderRange.expect_timezone(value, *, timeout=None)
```

Asserts that the input element has the expected `data-timezone` attribute value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.InputSliderRange.expect_value }

```python
playwright.controller.InputSliderRange.expect_value(value, *, timeout=None)
```

Asserts that the input element has the expected value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | Description                                                           | Default    |
|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                                                                                                                                                                                                                                                                                                                         | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputSliderRange.expect_width }

```python
playwright.controller.InputSliderRange.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputSliderRange.set }

```python
playwright.controller.InputSliderRange.set(
    value,
    *,
    max_err_values=15,
    timeout=None,
)
```

Set the value of the slider.

#### Parameters {.doc-section .doc-section-parameters}

| Name           | Type                                                                                                                                                                                                                                                                                         | Description                                                                              | Default    |
|----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|------------|
| value          | [typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`), [str](`str`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [str](`str`)\] | The value to set the slider to.                                                          | _required_ |
| max_err_values | [int](`int`)                                                                                                                                                                                                                                                                                 | The maximum number of error values to display if the value is not found. Defaults to 15. | `15`       |
| timeout        | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                                                                                                                                                 | The maximum time to wait for the value to appear. Defaults to `None`.                    | `None`     |

================
File: playwright.controller.InputSwitch.qmd
================
# playwright.controller.InputSwitch { #shiny.playwright.controller.InputSwitch }

```python
playwright.controller.InputSwitch(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_switch`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputSwitch.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputSwitch.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputSwitch.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputSwitch.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputSwitch.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputSwitch.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_checked](#shiny.playwright.controller.InputSwitch.expect_checked) | Expect the input checkbox to be checked. |
| [expect_label](#shiny.playwright.controller.InputSwitch.expect_label) | Expect the label of the input to have a specific text. |
| [expect_width](#shiny.playwright.controller.InputSwitch.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputSwitch.set) | Sets the input checkbox. |

### expect_checked { #shiny.playwright.controller.InputSwitch.expect_checked }

```python
playwright.controller.InputSwitch.expect_checked(value, *, timeout=None)
```

Expect the input checkbox to be checked.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | Whether the input checkbox is checked.                                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputSwitch.expect_label }

```python
playwright.controller.InputSwitch.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputSwitch.expect_width }

```python
playwright.controller.InputSwitch.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputSwitch.set }

```python
playwright.controller.InputSwitch.set(value, *, timeout=None, **kwargs)
```

Sets the input checkbox.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                    | Default    |
|---------|----------------------------------------------|--------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | The value of the input checkbox.                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input checkbox to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputTaskButton.qmd
================
# playwright.controller.InputTaskButton { #shiny.playwright.controller.InputTaskButton }

```python
playwright.controller.InputTaskButton(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_task_button`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputTaskButton.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputTaskButton.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputTaskButton.loc) | Playwright `Locator` of the UI element. |
| [page](#shiny.playwright.controller.InputTaskButton.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controller.InputTaskButton.click) | Clicks the input action. |
| [expect_auto_reset](#shiny.playwright.controller.InputTaskButton.expect_auto_reset) | Expect the `auto-reset` attribute of the input task button to have a specific value. |
| [expect_label](#shiny.playwright.controller.InputTaskButton.expect_label) | Expect the label of the input task button to have a specific value. |
| [expect_label_busy](#shiny.playwright.controller.InputTaskButton.expect_label_busy) | Expect the label of a busy input task button to have a specific value. |
| [expect_label_ready](#shiny.playwright.controller.InputTaskButton.expect_label_ready) | Expect the label of a ready input task button to have a specific value. |
| [expect_label_state](#shiny.playwright.controller.InputTaskButton.expect_label_state) | Expect the label of the input task button to have a specific value in a specific state. |
| [expect_state](#shiny.playwright.controller.InputTaskButton.expect_state) | Expect the state of the input task button to have a specific value. |
| [expect_width](#shiny.playwright.controller.InputTaskButton.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |

### click { #shiny.playwright.controller.InputTaskButton.click }

```python
playwright.controller.InputTaskButton.click(timeout=None, **kwargs)
```

Clicks the input action.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                      | Default   |
|---------|----------------------------------------------|----------------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the input action to be clicked. Defaults to `None`. | `None`    |

### expect_auto_reset { #shiny.playwright.controller.InputTaskButton.expect_auto_reset }

```python
playwright.controller.InputTaskButton.expect_auto_reset(value, timeout=None)
```

Expect the `auto-reset` attribute of the input task button to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | The expected value of the `auto-reset` attribute.                                 | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputTaskButton.expect_label }

```python
playwright.controller.InputTaskButton.expect_label(value, *, timeout=None)
```

Expect the label of the input task button to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label_busy { #shiny.playwright.controller.InputTaskButton.expect_label_busy }

```python
playwright.controller.InputTaskButton.expect_label_busy(value, *, timeout=None)
```

Expect the label of a busy input task button to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label_ready { #shiny.playwright.controller.InputTaskButton.expect_label_ready }

```python
playwright.controller.InputTaskButton.expect_label_ready(value, *, timeout=None)
```

Expect the label of a ready input task button to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label_state { #shiny.playwright.controller.InputTaskButton.expect_label_state }

```python
playwright.controller.InputTaskButton.expect_label_state(
    state,
    value,
    *,
    timeout=None,
)
```

Expect the label of the input task button to have a specific value in a specific state.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| state   | [str](`str`)                                           | The state of the input task button.                                               | _required_ |
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the label.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_state { #shiny.playwright.controller.InputTaskButton.expect_state }

```python
playwright.controller.InputTaskButton.expect_state(value, *, timeout=None)
```

Expect the state of the input task button to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                                       | Default    |
|---------|----------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['ready', 'busy'\] \| [str](`str`) | The expected value of the state of the input task button.                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputTaskButton.expect_width }

```python
playwright.controller.InputTaskButton.expect_width(value, *, timeout=None)
```

Expect the `width` attribute of a DOM element to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `width` attribute.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputText.qmd
================
# playwright.controller.InputText { #shiny.playwright.controller.InputText }

```python
playwright.controller.InputText(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_text`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputText.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputText.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputText.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputText.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputText.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputText.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_autocomplete](#shiny.playwright.controller.InputText.expect_autocomplete) | Expect the `autocomplete` attribute of the input to have a specific value. |
| [expect_label](#shiny.playwright.controller.InputText.expect_label) | Expect the label of the input to have a specific text. |
| [expect_placeholder](#shiny.playwright.controller.InputText.expect_placeholder) | Expect the `placeholder` attribute of the input to have a specific value. |
| [expect_spellcheck](#shiny.playwright.controller.InputText.expect_spellcheck) | Expect the `spellcheck` attribute of the input to have a specific value. |
| [expect_value](#shiny.playwright.controller.InputText.expect_value) | Expect the value of the text input to have a specific value. |
| [expect_width](#shiny.playwright.controller.InputText.expect_width) | Expect the input element to have a specific width. |
| [set](#shiny.playwright.controller.InputText.set) | Sets the text value |

### expect_autocomplete { #shiny.playwright.controller.InputText.expect_autocomplete }

```python
playwright.controller.InputText.expect_autocomplete(value, *, timeout=None)
```

Expect the `autocomplete` attribute of the input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `autocomplete` attribute.                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputText.expect_label }

```python
playwright.controller.InputText.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_placeholder { #shiny.playwright.controller.InputText.expect_placeholder }

```python
playwright.controller.InputText.expect_placeholder(value, *, timeout=None)
```

Expect the `placeholder` attribute of the input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `placeholder` attribute.                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_spellcheck { #shiny.playwright.controller.InputText.expect_spellcheck }

```python
playwright.controller.InputText.expect_spellcheck(value, *, timeout=None)
```

Expect the `spellcheck` attribute of the input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['true', 'false'\] \| None | The expected value of the `spellcheck` attribute.                                 | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.InputText.expect_value }

```python
playwright.controller.InputText.expect_value(value, *, timeout=None)
```

Expect the value of the text input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the text input.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputText.expect_width }

```python
playwright.controller.InputText.expect_width(value, *, timeout=None)
```

Expect the input element to have a specific width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputText.set }

```python
playwright.controller.InputText.set(value, *, timeout=None)
```

Sets the text value

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                          | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.InputTextArea.qmd
================
# playwright.controller.InputTextArea { #shiny.playwright.controller.InputTextArea }

```python
playwright.controller.InputTextArea(self, page, id)
```

Controller for [](:func:`shiny.express.ui.input_text_area`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.InputTextArea.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.InputTextArea.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.InputTextArea.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.InputTextArea.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_label](#shiny.playwright.controller.InputTextArea.loc_label) | Playwright `Locator` for the label of the UI element. |
| [page](#shiny.playwright.controller.InputTextArea.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_autocomplete](#shiny.playwright.controller.InputTextArea.expect_autocomplete) | Expect the `autocomplete` attribute of the input to have a specific value. |
| [expect_autoresize](#shiny.playwright.controller.InputTextArea.expect_autoresize) | Expect the `autoresize` attribute of the input text area to have a specific value. |
| [expect_cols](#shiny.playwright.controller.InputTextArea.expect_cols) | Expect the `cols` attribute of the input text area to have a specific value. |
| [expect_height](#shiny.playwright.controller.InputTextArea.expect_height) | Expect the `height` attribute of the input text area to have a specific value. |
| [expect_label](#shiny.playwright.controller.InputTextArea.expect_label) | Expect the label of the input to have a specific text. |
| [expect_placeholder](#shiny.playwright.controller.InputTextArea.expect_placeholder) | Expect the `placeholder` attribute of the input to have a specific value. |
| [expect_resize](#shiny.playwright.controller.InputTextArea.expect_resize) | Expect the `resize` attribute of the input text area to have a specific value. |
| [expect_rows](#shiny.playwright.controller.InputTextArea.expect_rows) | Expect the `rows` attribute of the input text area to have a specific value. |
| [expect_spellcheck](#shiny.playwright.controller.InputTextArea.expect_spellcheck) | Expect the `spellcheck` attribute of the input to have a specific value. |
| [expect_value](#shiny.playwright.controller.InputTextArea.expect_value) | Expect the value of the text input to have a specific value. |
| [expect_width](#shiny.playwright.controller.InputTextArea.expect_width) | Expect the `width` attribute of the input text area to have a specific value. |
| [set](#shiny.playwright.controller.InputTextArea.set) | Sets the text value |

### expect_autocomplete { #shiny.playwright.controller.InputTextArea.expect_autocomplete }

```python
playwright.controller.InputTextArea.expect_autocomplete(value, *, timeout=None)
```

Expect the `autocomplete` attribute of the input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `autocomplete` attribute.                               | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_autoresize { #shiny.playwright.controller.InputTextArea.expect_autoresize }

```python
playwright.controller.InputTextArea.expect_autoresize(value, *, timeout=None)
```

Expect the `autoresize` attribute of the input text area to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | The expected value of the `autoresize` attribute.                                 | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_cols { #shiny.playwright.controller.InputTextArea.expect_cols }

```python
playwright.controller.InputTextArea.expect_cols(value, *, timeout=None)
```

Expect the `cols` attribute of the input text area to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `cols` attribute.                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_height { #shiny.playwright.controller.InputTextArea.expect_height }

```python
playwright.controller.InputTextArea.expect_height(value, *, timeout=None)
```

Expect the `height` attribute of the input text area to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                                       | Default    |
|---------|----------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected value of the `height` attribute.                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_label { #shiny.playwright.controller.InputTextArea.expect_label }

```python
playwright.controller.InputTextArea.expect_label(value, *, timeout=None)
```

Expect the label of the input to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text value of the label.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_placeholder { #shiny.playwright.controller.InputTextArea.expect_placeholder }

```python
playwright.controller.InputTextArea.expect_placeholder(value, *, timeout=None)
```

Expect the `placeholder` attribute of the input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `placeholder` attribute.                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_resize { #shiny.playwright.controller.InputTextArea.expect_resize }

```python
playwright.controller.InputTextArea.expect_resize(value, *, timeout=None)
```

Expect the `resize` attribute of the input text area to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                         | Description                                                                       | Default    |
|---------|--------------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [Resize](`shiny.playwright.controller._base.Resize`) \| None | The expected value of the `resize` attribute.                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                 | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_rows { #shiny.playwright.controller.InputTextArea.expect_rows }

```python
playwright.controller.InputTextArea.expect_rows(value, *, timeout=None)
```

Expect the `rows` attribute of the input text area to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `rows` attribute.                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_spellcheck { #shiny.playwright.controller.InputTextArea.expect_spellcheck }

```python
playwright.controller.InputTextArea.expect_spellcheck(value, *, timeout=None)
```

Expect the `spellcheck` attribute of the input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['true', 'false'\] \| None | The expected value of the `spellcheck` attribute.                                 | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.InputTextArea.expect_value }

```python
playwright.controller.InputTextArea.expect_value(value, *, timeout=None)
```

Expect the value of the text input to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                       | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value of the text input.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.InputTextArea.expect_width }

```python
playwright.controller.InputTextArea.expect_width(value, *, timeout=None)
```

Expect the `width` attribute of the input text area to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                                       | Default    |
|---------|----------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected value of the `width` attribute.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.InputTextArea.set }

```python
playwright.controller.InputTextArea.set(value, *, timeout=None)
```

Sets the text value

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                          | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The text to set.                                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the text to be set. Defaults to `None`. | `None`     |

================
File: playwright.controller.NavItem.qmd
================
# playwright.controller.NavItem { #shiny.playwright.controller.NavItem }

`playwright.controller.NavItem(self, page, id, data_value)`

Controller for [](:func:`shiny.express.ui.nav_item`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controller.NavItem.loc) | Playwright `Locator` for the nav item. |
| [loc_container](#shiny.playwright.controller.NavItem.loc_container) | Playwright `Locator` for the nav item container. |
| [loc_content](#shiny.playwright.controller.NavItem.loc_content) | Returns the locator for the content of the nav item. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controller.NavItem.click) | Clicks the nav item. |
| [expect_active](#shiny.playwright.controller.NavItem.expect_active) | Expects the nav item to be active or inactive. |

### click { #shiny.playwright.controller.NavItem.click }

`playwright.controller.NavItem.click(timeout=None)`

Clicks the nav item.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the nav item to be visible and interactable. Defaults to `None`.

### expect_active { #shiny.playwright.controller.NavItem.expect_active }

`playwright.controller.NavItem.expect_active(value, *, timeout=None)`

Expects the nav item to be active or inactive.

#### Parameters

<code><span class="parameter-name">active</span></code>

:   `True` if the nav item is expected to be active, False otherwise.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

================
File: playwright.controller.NavPanel.qmd
================
# playwright.controller.NavPanel { #shiny.playwright.controller.NavPanel }

```python
playwright.controller.NavPanel(self, page, id, panel_value)
```

Controller for [](:func:`shiny.express.ui.nav_panel`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavPanel.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavPanel.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavPanel.loc) | Playwright `Locator` for the nav panel. |
| [loc_container](#shiny.playwright.controller.NavPanel.loc_container) | Playwright `Locator` for the nav panel container. |
| [loc_content](#shiny.playwright.controller.NavPanel.loc_content) | Returns the locator for the content of the nav panel. |
| [page](#shiny.playwright.controller.NavPanel.page) | Playwright `Page` of the Shiny app. |
| [panel_value](#shiny.playwright.controller.NavPanel.panel_value) | The `data-value` attribute used to identify the nav panel within the larger navset. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controller.NavPanel.click) | Clicks the nav panel. |
| [expect_active](#shiny.playwright.controller.NavPanel.expect_active) | Expects the nav panel to be active or inactive. |

### click { #shiny.playwright.controller.NavPanel.click }

```python
playwright.controller.NavPanel.click(timeout=None)
```

Clicks the nav panel.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                                    | Default   |
|---------|----------------------------------------------|------------------------------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the nav panel to be visible and interactable. Defaults to `None`. | `None`    |

### expect_active { #shiny.playwright.controller.NavPanel.expect_active }

```python
playwright.controller.NavPanel.expect_active(value, *, timeout=None)
```

Expects the nav panel to be active or inactive.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the nav panel is expected to be active, False otherwise.        | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

================
File: playwright.controller.NavsetBar.qmd
================
# playwright.controller.NavsetBar { #shiny.playwright.controller.NavsetBar }

```python
playwright.controller.NavsetBar(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_bar`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetBar.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetBar.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetBar.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.NavsetBar.loc_container) | Playwright `Locator` for the container of the UI element. |
| [page](#shiny.playwright.controller.NavsetBar.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_bg](#shiny.playwright.controller.NavsetBar.expect_bg) | Expects the navset bar to have the specified background color. |
| [expect_fluid](#shiny.playwright.controller.NavsetBar.expect_fluid) | Expects the navset bar to have a fluid or fixed layout. |
| [expect_gap](#shiny.playwright.controller.NavsetBar.expect_gap) | Expects the navset bar to have the specified gap. |
| [expect_inverse](#shiny.playwright.controller.NavsetBar.expect_inverse) | Expects the navset bar to be light text color if inverse is True |
| [expect_nav_titles](#shiny.playwright.controller.NavsetBar.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetBar.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_position](#shiny.playwright.controller.NavsetBar.expect_position) | Expects the navset bar to have the specified position. |
| [expect_sidebar](#shiny.playwright.controller.NavsetBar.expect_sidebar) | Assert whether or not the sidebar exists within the navset. |
| [expect_title](#shiny.playwright.controller.NavsetBar.expect_title) | Expects the navset title to have the specified text. |
| [expect_value](#shiny.playwright.controller.NavsetBar.expect_value) | Expects the control to have the specified value. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetBar.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetBar.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetBar.set) | Sets the state of the control to open or closed. |

### expect_bg { #shiny.playwright.controller.NavsetBar.expect_bg }

```python
playwright.controller.NavsetBar.expect_bg(bg, *, timeout=None)
```

Expects the navset bar to have the specified background color.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| bg      | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected background color.                                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_fluid { #shiny.playwright.controller.NavsetBar.expect_fluid }

```python
playwright.controller.NavsetBar.expect_fluid(value, *, timeout=None)
```

Expects the navset bar to have a fluid or fixed layout.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the layout is `fluid` or `False` if it is `fixed`.              | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_gap { #shiny.playwright.controller.NavsetBar.expect_gap }

```python
playwright.controller.NavsetBar.expect_gap(gap, *, timeout=None)
```

Expects the navset bar to have the specified gap.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| gap     | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected gap.                                                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_inverse { #shiny.playwright.controller.NavsetBar.expect_inverse }

```python
playwright.controller.NavsetBar.expect_inverse(value, *, timeout=None)
```

Expects the navset bar to be light text color if inverse is True

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                         | Default    |
|---------|----------------------------------------------|-------------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the navset bar is expected to have inverse text color, `False` otherwise. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`.           | `None`     |

### expect_nav_titles { #shiny.playwright.controller.NavsetBar.expect_nav_titles }

```python
playwright.controller.NavsetBar.expect_nav_titles(value, *, timeout=None)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetBar.expect_nav_values }

```python
playwright.controller.NavsetBar.expect_nav_values(value, *, timeout=None)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_position { #shiny.playwright.controller.NavsetBar.expect_position }

```python
playwright.controller.NavsetBar.expect_position(
    position='static-top',
    *,
    timeout=None,
)
```

Expects the navset bar to have the specified position.

#### Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                                                                              | Description                                                               | Default        |
|----------|---------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------|----------------|
| position | [Literal](`typing_extensions.Literal`)\['fixed-top', 'fixed-bottom', 'static-top', 'sticky-top'\] | The expected position. Defaults to `'static-top'`.                        | `'static-top'` |
| timeout  | [Timeout](`shiny.playwright._types.Timeout`)                                                      | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`         |

### expect_sidebar { #shiny.playwright.controller.NavsetBar.expect_sidebar }

```python
playwright.controller.NavsetBar.expect_sidebar(exists, *, timeout=None)
```

Assert whether or not the sidebar exists within the navset.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| exists  | [bool](`bool`)                               | `True` if the sidebar exists within the navset.                           | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_title { #shiny.playwright.controller.NavsetBar.expect_title }

```python
playwright.controller.NavsetBar.expect_title(value, *, timeout=None)
```

Expects the navset title to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetBar.expect_value }

```python
playwright.controller.NavsetBar.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetBar.get_loc_active_content }

```python
playwright.controller.NavsetBar.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetBar.nav_panel }

```python
playwright.controller.NavsetBar.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetBar.set }

```python
playwright.controller.NavsetBar.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.NavsetCardPill.qmd
================
# playwright.controller.NavsetCardPill { #shiny.playwright.controller.NavsetCardPill }

```python
playwright.controller.NavsetCardPill(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_card_pill`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetCardPill.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetCardPill.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetCardPill.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.NavsetCardPill.loc_container) | Playwright `Locator` for the container of the UI element. |
| [page](#shiny.playwright.controller.NavsetCardPill.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_nav_titles](#shiny.playwright.controller.NavsetCardPill.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetCardPill.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_placement](#shiny.playwright.controller.NavsetCardPill.expect_placement) | Expects the navset to have the specified placement. |
| [expect_sidebar](#shiny.playwright.controller.NavsetCardPill.expect_sidebar) | Assert whether or not the sidebar exists within the navset. |
| [expect_title](#shiny.playwright.controller.NavsetCardPill.expect_title) | Expects the navset title to have the specified text. |
| [expect_value](#shiny.playwright.controller.NavsetCardPill.expect_value) | Expects the control to have the specified value. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetCardPill.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetCardPill.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetCardPill.set) | Sets the state of the control to open or closed. |

### expect_nav_titles { #shiny.playwright.controller.NavsetCardPill.expect_nav_titles }

```python
playwright.controller.NavsetCardPill.expect_nav_titles(value, *, timeout=None)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetCardPill.expect_nav_values }

```python
playwright.controller.NavsetCardPill.expect_nav_values(value, *, timeout=None)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_placement { #shiny.playwright.controller.NavsetCardPill.expect_placement }

```python
playwright.controller.NavsetCardPill.expect_placement(
    location='above',
    *,
    timeout=None,
)
```

Expects the navset to have the specified placement.

#### Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                                       | Description                                                               | Default   |
|----------|------------------------------------------------------------|---------------------------------------------------------------------------|-----------|
| location | [Literal](`typing_extensions.Literal`)\['above', 'below'\] | The expected placement location. Defaults to `'above'`.                   | `'above'` |
| timeout  | [Timeout](`shiny.playwright._types.Timeout`)               | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`    |

### expect_sidebar { #shiny.playwright.controller.NavsetCardPill.expect_sidebar }

```python
playwright.controller.NavsetCardPill.expect_sidebar(exists, *, timeout=None)
```

Assert whether or not the sidebar exists within the navset.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| exists  | [bool](`bool`)                               | `True` if the sidebar exists within the navset.                           | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_title { #shiny.playwright.controller.NavsetCardPill.expect_title }

```python
playwright.controller.NavsetCardPill.expect_title(value, *, timeout=None)
```

Expects the navset title to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetCardPill.expect_value }

```python
playwright.controller.NavsetCardPill.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetCardPill.get_loc_active_content }

```python
playwright.controller.NavsetCardPill.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetCardPill.nav_panel }

```python
playwright.controller.NavsetCardPill.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetCardPill.set }

```python
playwright.controller.NavsetCardPill.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.NavsetCardTab.qmd
================
# playwright.controller.NavsetCardTab { #shiny.playwright.controller.NavsetCardTab }

```python
playwright.controller.NavsetCardTab(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_card_tab`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetCardTab.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetCardTab.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetCardTab.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.NavsetCardTab.loc_container) | Playwright `Locator` for the container of the UI element. |
| [page](#shiny.playwright.controller.NavsetCardTab.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_nav_titles](#shiny.playwright.controller.NavsetCardTab.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetCardTab.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_sidebar](#shiny.playwright.controller.NavsetCardTab.expect_sidebar) | Assert whether or not the sidebar exists within the navset. |
| [expect_title](#shiny.playwright.controller.NavsetCardTab.expect_title) | Expects the navset title to have the specified text. |
| [expect_value](#shiny.playwright.controller.NavsetCardTab.expect_value) | Expects the control to have the specified value. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetCardTab.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetCardTab.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetCardTab.set) | Sets the state of the control to open or closed. |

### expect_nav_titles { #shiny.playwright.controller.NavsetCardTab.expect_nav_titles }

```python
playwright.controller.NavsetCardTab.expect_nav_titles(value, *, timeout=None)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetCardTab.expect_nav_values }

```python
playwright.controller.NavsetCardTab.expect_nav_values(value, *, timeout=None)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_sidebar { #shiny.playwright.controller.NavsetCardTab.expect_sidebar }

```python
playwright.controller.NavsetCardTab.expect_sidebar(exists, *, timeout=None)
```

Assert whether or not the sidebar exists within the navset.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| exists  | [bool](`bool`)                               | `True` if the sidebar exists within the navset.                           | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_title { #shiny.playwright.controller.NavsetCardTab.expect_title }

```python
playwright.controller.NavsetCardTab.expect_title(value, *, timeout=None)
```

Expects the navset title to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetCardTab.expect_value }

```python
playwright.controller.NavsetCardTab.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetCardTab.get_loc_active_content }

```python
playwright.controller.NavsetCardTab.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetCardTab.nav_panel }

```python
playwright.controller.NavsetCardTab.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetCardTab.set }

```python
playwright.controller.NavsetCardTab.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.NavsetCardUnderline.qmd
================
# playwright.controller.NavsetCardUnderline { #shiny.playwright.controller.NavsetCardUnderline }

```python
playwright.controller.NavsetCardUnderline(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_card_underline`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetCardUnderline.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetCardUnderline.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetCardUnderline.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.NavsetCardUnderline.loc_container) | Playwright `Locator` for the container of the UI element. |
| [page](#shiny.playwright.controller.NavsetCardUnderline.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_nav_titles](#shiny.playwright.controller.NavsetCardUnderline.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetCardUnderline.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_placement](#shiny.playwright.controller.NavsetCardUnderline.expect_placement) | Expects the navset to have the specified placement. |
| [expect_sidebar](#shiny.playwright.controller.NavsetCardUnderline.expect_sidebar) | Assert whether or not the sidebar exists within the navset. |
| [expect_title](#shiny.playwright.controller.NavsetCardUnderline.expect_title) | Expects the navset title to have the specified text. |
| [expect_value](#shiny.playwright.controller.NavsetCardUnderline.expect_value) | Expects the control to have the specified value. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetCardUnderline.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetCardUnderline.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetCardUnderline.set) | Sets the state of the control to open or closed. |

### expect_nav_titles { #shiny.playwright.controller.NavsetCardUnderline.expect_nav_titles }

```python
playwright.controller.NavsetCardUnderline.expect_nav_titles(
    value,
    *,
    timeout=None,
)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetCardUnderline.expect_nav_values }

```python
playwright.controller.NavsetCardUnderline.expect_nav_values(
    value,
    *,
    timeout=None,
)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_placement { #shiny.playwright.controller.NavsetCardUnderline.expect_placement }

```python
playwright.controller.NavsetCardUnderline.expect_placement(
    location='above',
    *,
    timeout=None,
)
```

Expects the navset to have the specified placement.

#### Parameters {.doc-section .doc-section-parameters}

| Name     | Type                                                       | Description                                                               | Default   |
|----------|------------------------------------------------------------|---------------------------------------------------------------------------|-----------|
| location | [Literal](`typing_extensions.Literal`)\['above', 'below'\] | The expected placement location. Defaults to `'above'`.                   | `'above'` |
| timeout  | [Timeout](`shiny.playwright._types.Timeout`)               | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`    |

### expect_sidebar { #shiny.playwright.controller.NavsetCardUnderline.expect_sidebar }

```python
playwright.controller.NavsetCardUnderline.expect_sidebar(
    exists,
    *,
    timeout=None,
)
```

Assert whether or not the sidebar exists within the navset.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| exists  | [bool](`bool`)                               | `True` if the sidebar exists within the navset.                           | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_title { #shiny.playwright.controller.NavsetCardUnderline.expect_title }

```python
playwright.controller.NavsetCardUnderline.expect_title(value, *, timeout=None)
```

Expects the navset title to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetCardUnderline.expect_value }

```python
playwright.controller.NavsetCardUnderline.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetCardUnderline.get_loc_active_content }

```python
playwright.controller.NavsetCardUnderline.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetCardUnderline.nav_panel }

```python
playwright.controller.NavsetCardUnderline.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetCardUnderline.set }

```python
playwright.controller.NavsetCardUnderline.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.NavsetHidden.qmd
================
# playwright.controller.NavsetHidden { #shiny.playwright.controller.NavsetHidden }

```python
playwright.controller.NavsetHidden(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_hidden`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetHidden.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetHidden.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetHidden.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.NavsetHidden.loc_container) | Playwright `Locator` for the container of the UI element. |
| [page](#shiny.playwright.controller.NavsetHidden.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_nav_titles](#shiny.playwright.controller.NavsetHidden.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetHidden.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_value](#shiny.playwright.controller.NavsetHidden.expect_value) | Expects the control to have the specified value. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetHidden.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetHidden.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetHidden.set) | Sets the state of the control to open or closed. |

### expect_nav_titles { #shiny.playwright.controller.NavsetHidden.expect_nav_titles }

```python
playwright.controller.NavsetHidden.expect_nav_titles(value, *, timeout=None)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetHidden.expect_nav_values }

```python
playwright.controller.NavsetHidden.expect_nav_values(value, *, timeout=None)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetHidden.expect_value }

```python
playwright.controller.NavsetHidden.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetHidden.get_loc_active_content }

```python
playwright.controller.NavsetHidden.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetHidden.nav_panel }

```python
playwright.controller.NavsetHidden.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetHidden.set }

```python
playwright.controller.NavsetHidden.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.NavsetPill.qmd
================
# playwright.controller.NavsetPill { #shiny.playwright.controller.NavsetPill }

```python
playwright.controller.NavsetPill(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_pill`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetPill.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetPill.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetPill.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.NavsetPill.loc_container) | Playwright `Locator` for the container of the UI element. |
| [page](#shiny.playwright.controller.NavsetPill.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_nav_titles](#shiny.playwright.controller.NavsetPill.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetPill.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_value](#shiny.playwright.controller.NavsetPill.expect_value) | Expects the control to have the specified value. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetPill.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetPill.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetPill.set) | Sets the state of the control to open or closed. |

### expect_nav_titles { #shiny.playwright.controller.NavsetPill.expect_nav_titles }

```python
playwright.controller.NavsetPill.expect_nav_titles(value, *, timeout=None)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetPill.expect_nav_values }

```python
playwright.controller.NavsetPill.expect_nav_values(value, *, timeout=None)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetPill.expect_value }

```python
playwright.controller.NavsetPill.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetPill.get_loc_active_content }

```python
playwright.controller.NavsetPill.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetPill.nav_panel }

```python
playwright.controller.NavsetPill.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetPill.set }

```python
playwright.controller.NavsetPill.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.NavsetPillList.qmd
================
# playwright.controller.NavsetPillList { #shiny.playwright.controller.NavsetPillList }

```python
playwright.controller.NavsetPillList(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_pill_list`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetPillList.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetPillList.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetPillList.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.NavsetPillList.loc_container) | Playwright `Locator` for the container of the UI element. |
| [page](#shiny.playwright.controller.NavsetPillList.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_nav_titles](#shiny.playwright.controller.NavsetPillList.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetPillList.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_value](#shiny.playwright.controller.NavsetPillList.expect_value) | Expects the control to have the specified value. |
| [expect_well](#shiny.playwright.controller.NavsetPillList.expect_well) | Expects the navset pill list to have a well. |
| [expect_widths](#shiny.playwright.controller.NavsetPillList.expect_widths) | Expects the navset pill list to have the specified widths. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetPillList.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetPillList.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetPillList.set) | Sets the state of the control to open or closed. |

### expect_nav_titles { #shiny.playwright.controller.NavsetPillList.expect_nav_titles }

```python
playwright.controller.NavsetPillList.expect_nav_titles(value, *, timeout=None)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetPillList.expect_nav_values }

```python
playwright.controller.NavsetPillList.expect_nav_values(value, *, timeout=None)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetPillList.expect_value }

```python
playwright.controller.NavsetPillList.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_well { #shiny.playwright.controller.NavsetPillList.expect_well }

```python
playwright.controller.NavsetPillList.expect_well(value, *, timeout=None)
```

Expects the navset pill list to have a well.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                                  | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the navset pill list is expected to be constructed with a well, `False` otherwise. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`.                    | `None`     |

### expect_widths { #shiny.playwright.controller.NavsetPillList.expect_widths }

```python
playwright.controller.NavsetPillList.expect_widths(value, *, timeout=None)
```

Expects the navset pill list to have the specified widths.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                     | Description                                                               | Default    |
|---------|----------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [ListOrTuple](`shiny.types.ListOrTuple`)\[[int](`int`)\] | The expected widths of the navset pill list.                              | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetPillList.get_loc_active_content }

```python
playwright.controller.NavsetPillList.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetPillList.nav_panel }

```python
playwright.controller.NavsetPillList.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetPillList.set }

```python
playwright.controller.NavsetPillList.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.NavsetTab.qmd
================
# playwright.controller.NavsetTab { #shiny.playwright.controller.NavsetTab }

```python
playwright.controller.NavsetTab(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_tab`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetTab.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetTab.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetTab.loc) | Playwright `Locator` for the nav set tab. |
| [loc_container](#shiny.playwright.controller.NavsetTab.loc_container) | Playwright `Locator` for the nav set tab container. |
| [page](#shiny.playwright.controller.NavsetTab.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_nav_titles](#shiny.playwright.controller.NavsetTab.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetTab.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_value](#shiny.playwright.controller.NavsetTab.expect_value) | Expects the control to have the specified value. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetTab.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetTab.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetTab.set) | Sets the state of the control to open or closed. |

### expect_nav_titles { #shiny.playwright.controller.NavsetTab.expect_nav_titles }

```python
playwright.controller.NavsetTab.expect_nav_titles(value, *, timeout=None)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetTab.expect_nav_values }

```python
playwright.controller.NavsetTab.expect_nav_values(value, *, timeout=None)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetTab.expect_value }

```python
playwright.controller.NavsetTab.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetTab.get_loc_active_content }

```python
playwright.controller.NavsetTab.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetTab.nav_panel }

```python
playwright.controller.NavsetTab.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetTab.set }

```python
playwright.controller.NavsetTab.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.NavsetUnderline.qmd
================
# playwright.controller.NavsetUnderline { #shiny.playwright.controller.NavsetUnderline }

```python
playwright.controller.NavsetUnderline(self, page, id)
```

Controller for [](:func:`shiny.express.ui.navset_underline`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.NavsetUnderline.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.NavsetUnderline.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.NavsetUnderline.loc) | Playwright `Locator` of the UI element. |
| [loc_container](#shiny.playwright.controller.NavsetUnderline.loc_container) | Playwright `Locator` for the container of the UI element. |
| [page](#shiny.playwright.controller.NavsetUnderline.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_nav_titles](#shiny.playwright.controller.NavsetUnderline.expect_nav_titles) | Expects the control to have the specified nav titles. |
| [expect_nav_values](#shiny.playwright.controller.NavsetUnderline.expect_nav_values) | Expects the control to have the specified nav values. |
| [expect_value](#shiny.playwright.controller.NavsetUnderline.expect_value) | Expects the control to have the specified value. |
| [get_loc_active_content](#shiny.playwright.controller.NavsetUnderline.get_loc_active_content) | Returns the locator for the active content. |
| [nav_panel](#shiny.playwright.controller.NavsetUnderline.nav_panel) | Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`)) with the specified value. |
| [set](#shiny.playwright.controller.NavsetUnderline.set) | Sets the state of the control to open or closed. |

### expect_nav_titles { #shiny.playwright.controller.NavsetUnderline.expect_nav_titles }

```python
playwright.controller.NavsetUnderline.expect_nav_titles(value, *, timeout=None)
```

Expects the control to have the specified nav titles.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav titles.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nav_values { #shiny.playwright.controller.NavsetUnderline.expect_nav_values }

```python
playwright.controller.NavsetUnderline.expect_nav_values(value, *, timeout=None)
```

Expects the control to have the specified nav values.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                     | Description                                                               | Default    |
|---------|--------------------------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected nav values.                                                  | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                             | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.NavsetUnderline.expect_value }

```python
playwright.controller.NavsetUnderline.expect_value(value, *, timeout=None)
```

Expects the control to have the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_active_content { #shiny.playwright.controller.NavsetUnderline.get_loc_active_content }

```python
playwright.controller.NavsetUnderline.get_loc_active_content(timeout=None)
```

Returns the locator for the active content.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                             | Default   |
|---------|----------------------------------------------|-------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the locator to appear. Defaults to `None`. | `None`    |

### nav_panel { #shiny.playwright.controller.NavsetUnderline.nav_panel }

```python
playwright.controller.NavsetUnderline.nav_panel(value)
```

Returns the nav panel ([](:class:`~shiny.playwright.controls.NavPanel`))
with the specified value.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                 | Default    |
|--------|--------------|-----------------------------|------------|
| value  | [str](`str`) | The value of the nav panel. | _required_ |

### set { #shiny.playwright.controller.NavsetUnderline.set }

```python
playwright.controller.NavsetUnderline.set(value, *, timeout=None)
```

Sets the state of the control to open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description            | Default    |
|--------|--------------|------------------------|------------|
| value  | [str](`str`) | The selected nav item. | _required_ |

================
File: playwright.controller.OutputCode.qmd
================
# playwright.controller.OutputCode { #shiny.playwright.controller.OutputCode }

```python
playwright.controller.OutputCode(self, page, id)
```

Controller for [](:func:`shiny.express.ui.output_code`).

## Attributes

| Name | Description |
| --- | --- |
| [id](#shiny.playwright.controller.OutputCode.id) | The ID of the output control. |
| [loc](#shiny.playwright.controller.OutputCode.loc) | Playwright `Locator` of the code output. |
| [page](#shiny.playwright.controller.OutputCode.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_has_placeholder](#shiny.playwright.controller.OutputCode.expect_has_placeholder) | Asserts that the code output has the expected placeholder. |
| [expect_value](#shiny.playwright.controller.OutputCode.expect_value) | Asserts that the output has the expected value. |

### expect_has_placeholder { #shiny.playwright.controller.OutputCode.expect_has_placeholder }

```python
playwright.controller.OutputCode.expect_has_placeholder(
    value=False,
    *,
    timeout=None,
)
```

Asserts that the code output has the expected placeholder.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                 | Default   |
|---------|----------------------------------------------|-----------------------------------------------------------------------------|-----------|
| value   | [bool](`bool`)                               | Whether the code output has a placeholder.                                  | `False`   |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the placeholder to appear. Defaults to `None`. | `None`    |

### expect_value { #shiny.playwright.controller.OutputCode.expect_value }

```python
playwright.controller.OutputCode.expect_value(value, *, timeout=None)
```

Asserts that the output has the expected value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                           | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

================
File: playwright.controller.OutputDataFrame.qmd
================
# playwright.controller.OutputDataFrame { #shiny.playwright.controller.OutputDataFrame }

```python
playwright.controller.OutputDataFrame(self, page, id)
```

Controller for [](:func:`shiny.express.ui.output_data_frame`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.OutputDataFrame.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.OutputDataFrame.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.OutputDataFrame.loc) | Playwright `Locator` for the data frame. |
| [loc_body](#shiny.playwright.controller.OutputDataFrame.loc_body) | Playwright `Locator` for the body of the data frame table. |
| [loc_container](#shiny.playwright.controller.OutputDataFrame.loc_container) | Playwright `Locator` for the data frame container. |
| [loc_head](#shiny.playwright.controller.OutputDataFrame.loc_head) | Playwright `Locator` for the head of the data frame table. |
| [page](#shiny.playwright.controller.OutputDataFrame.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [cell_locator](#shiny.playwright.controller.OutputDataFrame.cell_locator) | Returns the locator for a specific cell in the data frame. |
| [expect_cell](#shiny.playwright.controller.OutputDataFrame.expect_cell) | Expects the cell in the data frame to have the specified text. |
| [expect_cell_class](#shiny.playwright.controller.OutputDataFrame.expect_cell_class) | Expects the class of the cell |
| [expect_cell_title](#shiny.playwright.controller.OutputDataFrame.expect_cell_title) | Expects the validation message of the cell in the data frame, which will be in the `title` attribute of the element. |
| [expect_class_state](#shiny.playwright.controller.OutputDataFrame.expect_class_state) | Expects the state of the class in the data frame. |
| [expect_column_labels](#shiny.playwright.controller.OutputDataFrame.expect_column_labels) | Expects the column labels in the data frame. |
| [expect_ncol](#shiny.playwright.controller.OutputDataFrame.expect_ncol) | Expects the number of columns in the data frame. |
| [expect_nrow](#shiny.playwright.controller.OutputDataFrame.expect_nrow) | Expects the number of rows in the data frame. |
| [expect_selected_num_rows](#shiny.playwright.controller.OutputDataFrame.expect_selected_num_rows) | Expects the number of selected rows in the data frame. |
| [expect_selected_rows](#shiny.playwright.controller.OutputDataFrame.expect_selected_rows) | Expects the specified rows to be selected. |
| [select_rows](#shiny.playwright.controller.OutputDataFrame.select_rows) | Selects the rows in the data frame. |
| [set_cell](#shiny.playwright.controller.OutputDataFrame.set_cell) | Saves the value of the cell in the data frame. |
| [set_filter](#shiny.playwright.controller.OutputDataFrame.set_filter) | Set or reset filters for columns in a table or grid component. This method allows setting string filters, numeric range filters, or clearing all filters. |
| [set_sort](#shiny.playwright.controller.OutputDataFrame.set_sort) | Set or modify the sorting of columns in a table or grid component. This method allows setting single or multiple column sorts, or resetting the sort order. |

### cell_locator { #shiny.playwright.controller.OutputDataFrame.cell_locator }

```python
playwright.controller.OutputDataFrame.cell_locator(row, col)
```

Returns the locator for a specific cell in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type         | Description                    | Default    |
|--------|--------------|--------------------------------|------------|
| row    | [int](`int`) | The row number of the cell.    | _required_ |
| col    | [int](`int`) | The column number of the cell. | _required_ |

### expect_cell { #shiny.playwright.controller.OutputDataFrame.expect_cell }

```python
playwright.controller.OutputDataFrame.expect_cell(
    value,
    *,
    row,
    col,
    timeout=None,
)
```

Expects the cell in the data frame to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text in the cell.                                            | _required_ |
| row     | [int](`int`)                                           | The row number of the cell.                                               | _required_ |
| col     | [int](`int`)                                           | The column number of the cell.                                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_cell_class { #shiny.playwright.controller.OutputDataFrame.expect_cell_class }

```python
playwright.controller.OutputDataFrame.expect_cell_class(
    value,
    *,
    row,
    col,
    timeout=None,
)
```

Expects the class of the cell

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The expected class of the cell.                                           | _required_ |
| row     | [int](`int`)                                 | The row number of the cell.                                               | _required_ |
| col     | [int](`int`)                                 | The column number of the cell.                                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_cell_title { #shiny.playwright.controller.OutputDataFrame.expect_cell_title }

```python
playwright.controller.OutputDataFrame.expect_cell_title(
    value,
    *,
    row,
    col,
    timeout=None,
)
```

Expects the validation message of the cell in the data frame, which will be in
the `title` attribute of the element.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The expected validation message of the cell.                              | _required_ |
| row     | [int](`int`)                                 | The row number of the cell.                                               | _required_ |
| col     | [int](`int`)                                 | The column number of the cell.                                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_class_state { #shiny.playwright.controller.OutputDataFrame.expect_class_state }

```python
playwright.controller.OutputDataFrame.expect_class_state(
    value,
    *,
    row,
    col,
    timeout=None,
)
```

Expects the state of the class in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The expected state of the class.                                          | _required_ |
| row     | [int](`int`)                                 | The row number of the cell.                                               | _required_ |
| col     | [int](`int`)                                 | The column number of the cell.                                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_column_labels { #shiny.playwright.controller.OutputDataFrame.expect_column_labels }

```python
playwright.controller.OutputDataFrame.expect_column_labels(
    value,
    *,
    timeout=None,
)
```

Expects the column labels in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                   | Description                                                                             | Default    |
|---------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \| None | The expected column labels.  Note: None if the column labels are expected to not exist. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                           | The maximum time to wait for the expectation to pass. Defaults to `None`.               | `None`     |

### expect_ncol { #shiny.playwright.controller.OutputDataFrame.expect_ncol }

```python
playwright.controller.OutputDataFrame.expect_ncol(value, *, timeout=None)
```

Expects the number of columns in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [int](`int`)                                 | The expected number of columns.                                           | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_nrow { #shiny.playwright.controller.OutputDataFrame.expect_nrow }

```python
playwright.controller.OutputDataFrame.expect_nrow(value, *, timeout=None)
```

Expects the number of rows in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [int](`int`)                                 | The expected number of rows.                                              | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_selected_num_rows { #shiny.playwright.controller.OutputDataFrame.expect_selected_num_rows }

```python
playwright.controller.OutputDataFrame.expect_selected_num_rows(
    value,
    *,
    timeout=None,
)
```

Expects the number of selected rows in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [int](`int`)                                 | The expected number of selected rows.                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_selected_rows { #shiny.playwright.controller.OutputDataFrame.expect_selected_rows }

```python
playwright.controller.OutputDataFrame.expect_selected_rows(
    rows,
    *,
    timeout=None,
)
```

Expects the specified rows to be selected.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| rows    | [list](`list`)\[[int](`int`)\]               | The row numbers.                                                          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### select_rows { #shiny.playwright.controller.OutputDataFrame.select_rows }

```python
playwright.controller.OutputDataFrame.select_rows(value, *, timeout=None)
```

Selects the rows in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                              | Default    |
|---------|----------------------------------------------|--------------------------------------------------------------------------|------------|
| value   | [list](`list`)\[[int](`int`)\]               | The list of row numbers to select.                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the action to complete. Defaults to `None`. | `None`     |

### set_cell { #shiny.playwright.controller.OutputDataFrame.set_cell }

```python
playwright.controller.OutputDataFrame.set_cell(
    text,
    *,
    row,
    col,
    finish_key=None,
    timeout=None,
)
```

Saves the value of the cell in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

| Name       | Type                                                                                        | Description                                                                                                                       | Default    |
|------------|---------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|------------|
| text       | [str](`str`)                                                                                | The key to save the value of the cell.                                                                                            | _required_ |
| row        | [int](`int`)                                                                                | The row number of the cell.                                                                                                       | _required_ |
| col        | [int](`int`)                                                                                | The column number of the cell.                                                                                                    | _required_ |
| finish_key | [Literal](`typing.Literal`)\['Enter', 'Shift+Enter', 'Tab', 'Shift+Tab', 'Escape'\] \| None | The key to save the value of the cell. If `None` (the default), no key will be pressed and instead the page body will be clicked. | `None`     |
| timeout    | [Timeout](`shiny.playwright._types.Timeout`)                                                | The maximum time to wait for the action to complete. Defaults to `None`.                                                          | `None`     |

### set_filter { #shiny.playwright.controller.OutputDataFrame.set_filter }

```python
playwright.controller.OutputDataFrame.set_filter(filter, *, timeout=None)
```

Set or reset filters for columns in a table or grid component.
This method allows setting string filters, numeric range filters, or clearing all filters.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                                                                                         | Description                                                                                                                                                                                                                                                                               | Default    |
|---------|----------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| filter  | [ColumnFilter](`shiny.express.render._data_frame.ColumnFilter`) \| [list](`list`)\[[ColumnFilter](`shiny.express.render._data_frame.ColumnFilter`)\] \| None | The filter to apply. Can be one of the following:     * `None`: Resets all filters.     * `ColumnFilterStr`: A dictionary specifying a string filter with 'col' and 'value' keys.     * `ColumnFilterNumber`: A dictionary specifying a numeric range filter with 'col' and 'value' keys. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                 | The maximum time to wait for the action to complete. Defaults to `None`.                                                                                                                                                                                                                  | `None`     |

### set_sort { #shiny.playwright.controller.OutputDataFrame.set_sort }

```python
playwright.controller.OutputDataFrame.set_sort(sort, *, timeout=None)
```

Set or modify the sorting of columns in a table or grid component.
This method allows setting single or multiple column sorts, or resetting the sort order.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                                                                                                                 | Description| Default    |
|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| sort    | [int](`int`) \| [ColumnSort](`shiny.express.render._data_frame.ColumnSort`) \| [list](`list`)\[[int](`int`) \| [ColumnSort](`shiny.express.render._data_frame.ColumnSort`)\] \| None | The sorting configuration to apply. Can be one of the following:     * `int`: Index of the column to sort by (ascending order by default).     * `ColumnSort`: A dictionary specifying a single column sort with 'col' and 'desc' keys.     * `list[int \| ColumnSort]`: A list of ints or dictionaries for multi-column sorting.     * `None`: No sorting applied (not implemented in the current code).  If a `desc` values is provided within your `ColumnSort` shaped dictionary, then the direction will be set to that value. If no `desc` value is provided, the column will be sorted in the default sorting order. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                                                         | The maximum time to wait for the action to complete. Defaults to `None`| `None`     |

================
File: playwright.controller.OutputImage.qmd
================
# playwright.controller.OutputImage { #shiny.playwright.controller.OutputImage }

```python
playwright.controller.OutputImage(self, page, id)
```

Controller for [](:func:`shiny.express.ui.output_image`).

## Attributes

| Name | Description |
| --- | --- |
| [id](#shiny.playwright.controller.OutputImage.id) | The ID of the output control. |
| [loc](#shiny.playwright.controller.OutputImage.loc) | Playwright `Locator` of the output control. |
| [loc_img](#shiny.playwright.controller.OutputImage.loc_img) | Playwright `Locator` of the image. |
| [page](#shiny.playwright.controller.OutputImage.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_container_tag](#shiny.playwright.controller.OutputImage.expect_container_tag) | Asserts that the output has the expected container tag. |
| [expect_height](#shiny.playwright.controller.OutputImage.expect_height) | Asserts that the image has the expected height. |
| [expect_img_alt](#shiny.playwright.controller.OutputImage.expect_img_alt) | Asserts that the image has the expected alt text. |
| [expect_img_height](#shiny.playwright.controller.OutputImage.expect_img_height) | Asserts that the image has the expected height. |
| [expect_img_src](#shiny.playwright.controller.OutputImage.expect_img_src) | Asserts that the image has the expected src. |
| [expect_img_width](#shiny.playwright.controller.OutputImage.expect_img_width) | Asserts that the image has the expected width. |
| [expect_inline](#shiny.playwright.controller.OutputImage.expect_inline) | Asserts that the output is inline. |
| [expect_width](#shiny.playwright.controller.OutputImage.expect_width) | Asserts that the image has the expected width. |

### expect_container_tag { #shiny.playwright.controller.OutputImage.expect_container_tag }

```python
playwright.controller.OutputImage.expect_container_tag(value, *, timeout=None)
```

Asserts that the output has the expected container tag.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                         | Description                                                                   | Default    |
|---------|--------------------------------------------------------------|-------------------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['span', 'div'\] \| [str](`str`) | The expected container tag.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                 | The maximum time to wait for the container tag to appear. Defaults to `None`. | `None`     |

### expect_height { #shiny.playwright.controller.OutputImage.expect_height }

```python
playwright.controller.OutputImage.expect_height(value, *, timeout=None)
```

Asserts that the image has the expected height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                            | Default    |
|---------|----------------------------------------------------|------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected height.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the height to appear. Defaults to `None`. | `None`     |

### expect_img_alt { #shiny.playwright.controller.OutputImage.expect_img_alt }

```python
playwright.controller.OutputImage.expect_img_alt(value, *, timeout=None)
```

Asserts that the image has the expected alt text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                              | Default    |
|---------|--------------------------------------------------|--------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected alt text.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the alt text to appear. Defaults to `None`. | `None`     |

### expect_img_height { #shiny.playwright.controller.OutputImage.expect_img_height }

```python
playwright.controller.OutputImage.expect_img_height(value, *, timeout=None)
```

Asserts that the image has the expected height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                            | Default    |
|---------|--------------------------------------------------|------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected height.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the height to appear. Defaults to `None`. | `None`     |

### expect_img_src { #shiny.playwright.controller.OutputImage.expect_img_src }

```python
playwright.controller.OutputImage.expect_img_src(value, *, timeout=None)
```

Asserts that the image has the expected src.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                         | Default    |
|---------|--------------------------------------------------|---------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected src.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the src to appear. Defaults to `None`. | `None`     |

### expect_img_width { #shiny.playwright.controller.OutputImage.expect_img_width }

```python
playwright.controller.OutputImage.expect_img_width(value, *, timeout=None)
```

Asserts that the image has the expected width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the width to appear. Defaults to `None`. | `None`     |

### expect_inline { #shiny.playwright.controller.OutputImage.expect_inline }

```python
playwright.controller.OutputImage.expect_inline(value=False, *, timeout=None)
```

Asserts that the output is inline.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                            | Default   |
|---------|----------------------------------------------|------------------------------------------------------------------------|-----------|
| value   | [bool](`bool`)                               | Whether the output is inline.                                          | `False`   |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the output to appear. Defaults to `None`. | `None`    |

### expect_width { #shiny.playwright.controller.OutputImage.expect_width }

```python
playwright.controller.OutputImage.expect_width(value, *, timeout=None)
```

Asserts that the image has the expected width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                           | Default    |
|---------|----------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected width.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the width to appear. Defaults to `None`. | `None`     |

================
File: playwright.controller.OutputPlot.qmd
================
# playwright.controller.OutputPlot { #shiny.playwright.controller.OutputPlot }

```python
playwright.controller.OutputPlot(self, page, id)
```

Controller for [](:func:`shiny.express.ui.output_plot`).

## Attributes

| Name | Description |
| --- | --- |
| [id](#shiny.playwright.controller.OutputPlot.id) | The ID of the output control. |
| [loc](#shiny.playwright.controller.OutputPlot.loc) | Playwright `Locator` of the plot output. |
| [loc_img](#shiny.playwright.controller.OutputPlot.loc_img) | Playwright `Locator` of the image. |
| [page](#shiny.playwright.controller.OutputPlot.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_container_tag](#shiny.playwright.controller.OutputPlot.expect_container_tag) | Asserts that the output has the expected container tag. |
| [expect_height](#shiny.playwright.controller.OutputPlot.expect_height) | Asserts that the image has the expected height. |
| [expect_img_alt](#shiny.playwright.controller.OutputPlot.expect_img_alt) | Asserts that the image has the expected alt text. |
| [expect_img_height](#shiny.playwright.controller.OutputPlot.expect_img_height) | Asserts that the image has the expected height. |
| [expect_img_src](#shiny.playwright.controller.OutputPlot.expect_img_src) | Asserts that the image has the expected src. |
| [expect_img_width](#shiny.playwright.controller.OutputPlot.expect_img_width) | Asserts that the image has the expected width. |
| [expect_inline](#shiny.playwright.controller.OutputPlot.expect_inline) | Asserts that the output is inline. |
| [expect_width](#shiny.playwright.controller.OutputPlot.expect_width) | Asserts that the image has the expected width. |

### expect_container_tag { #shiny.playwright.controller.OutputPlot.expect_container_tag }

```python
playwright.controller.OutputPlot.expect_container_tag(value, *, timeout=None)
```

Asserts that the output has the expected container tag.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                         | Description                                                                   | Default    |
|---------|--------------------------------------------------------------|-------------------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['span', 'div'\] \| [str](`str`) | The expected container tag.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                 | The maximum time to wait for the container tag to appear. Defaults to `None`. | `None`     |

### expect_height { #shiny.playwright.controller.OutputPlot.expect_height }

```python
playwright.controller.OutputPlot.expect_height(value, *, timeout=None)
```

Asserts that the image has the expected height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                            | Default    |
|---------|----------------------------------------------------|------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected height.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the height to appear. Defaults to `None`. | `None`     |

### expect_img_alt { #shiny.playwright.controller.OutputPlot.expect_img_alt }

```python
playwright.controller.OutputPlot.expect_img_alt(value, *, timeout=None)
```

Asserts that the image has the expected alt text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                              | Default    |
|---------|--------------------------------------------------|--------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected alt text.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the alt text to appear. Defaults to `None`. | `None`     |

### expect_img_height { #shiny.playwright.controller.OutputPlot.expect_img_height }

```python
playwright.controller.OutputPlot.expect_img_height(value, *, timeout=None)
```

Asserts that the image has the expected height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                            | Default    |
|---------|--------------------------------------------------|------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected height.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the height to appear. Defaults to `None`. | `None`     |

### expect_img_src { #shiny.playwright.controller.OutputPlot.expect_img_src }

```python
playwright.controller.OutputPlot.expect_img_src(value, *, timeout=None)
```

Asserts that the image has the expected src.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                         | Default    |
|---------|--------------------------------------------------|---------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected src.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the src to appear. Defaults to `None`. | `None`     |

### expect_img_width { #shiny.playwright.controller.OutputPlot.expect_img_width }

```python
playwright.controller.OutputPlot.expect_img_width(value, *, timeout=None)
```

Asserts that the image has the expected width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                           | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected width.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the width to appear. Defaults to `None`. | `None`     |

### expect_inline { #shiny.playwright.controller.OutputPlot.expect_inline }

```python
playwright.controller.OutputPlot.expect_inline(value=False, *, timeout=None)
```

Asserts that the output is inline.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                            | Default   |
|---------|----------------------------------------------|------------------------------------------------------------------------|-----------|
| value   | [bool](`bool`)                               | Whether the output is inline.                                          | `False`   |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the output to appear. Defaults to `None`. | `None`    |

### expect_width { #shiny.playwright.controller.OutputPlot.expect_width }

```python
playwright.controller.OutputPlot.expect_width(value, *, timeout=None)
```

Asserts that the image has the expected width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                           | Default    |
|---------|----------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected width.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the width to appear. Defaults to `None`. | `None`     |

================
File: playwright.controller.OutputTable.qmd
================
# playwright.controller.OutputTable { #shiny.playwright.controller.OutputTable }

```python
playwright.controller.OutputTable(self, page, id)
```

Controller for [](:func:`shiny.express.ui.output_table`).

## Attributes

| Name | Description |
| --- | --- |
| [id](#shiny.playwright.controller.OutputTable.id) | The ID of the output control. |
| [loc](#shiny.playwright.controller.OutputTable.loc) | Playwright `Locator` of the output control. |
| [page](#shiny.playwright.controller.OutputTable.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_cell](#shiny.playwright.controller.OutputTable.expect_cell) | Asserts that the table cell has the expected text. |
| [expect_column_labels](#shiny.playwright.controller.OutputTable.expect_column_labels) | Asserts that the table has the expected column labels. |
| [expect_column_text](#shiny.playwright.controller.OutputTable.expect_column_text) | Asserts that the column has the expected text. |
| [expect_ncol](#shiny.playwright.controller.OutputTable.expect_ncol) | Asserts that the table has the expected number of columns. |
| [expect_nrow](#shiny.playwright.controller.OutputTable.expect_nrow) | Asserts that the table has the expected number of rows. |

### expect_cell { #shiny.playwright.controller.OutputTable.expect_cell }

```python
playwright.controller.OutputTable.expect_cell(value, row, col, *, timeout=None)
```

Asserts that the table cell has the expected text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                          | Default    |
|---------|--------------------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text in the cell.                                       | _required_ |
| row     | [int](`int`)                                           | The row number.                                                      | _required_ |
| col     | [int](`int`)                                           | The column number.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the text to appear. Defaults to `None`. | `None`     |

### expect_column_labels { #shiny.playwright.controller.OutputTable.expect_column_labels }

```python
playwright.controller.OutputTable.expect_column_labels(value, *, timeout=None)
```

Asserts that the table has the expected column labels.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                   | Description                                                                          | Default    |
|---------|------------------------------------------------------------------------|--------------------------------------------------------------------------------------|------------|
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \| None | The expected column labels. If None, it asserts that the table has no column labels. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                           | The maximum time to wait for the column labels to appear. Defaults to `None`.        | `None`     |

### expect_column_text { #shiny.playwright.controller.OutputTable.expect_column_text }

```python
playwright.controller.OutputTable.expect_column_text(
    col,
    value,
    *,
    timeout=None,
)
```

Asserts that the column has the expected text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                           | Description                                                          | Default    |
|---------|----------------------------------------------------------------|----------------------------------------------------------------------|------------|
| col     | [int](`int`)                                                   | The column number.                                                   | _required_ |
| value   | [ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) | The expected text in the column.                                     | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                   | The maximum time to wait for the text to appear. Defaults to `None`. | `None`     |

### expect_ncol { #shiny.playwright.controller.OutputTable.expect_ncol }

```python
playwright.controller.OutputTable.expect_ncol(value, *, timeout=None)
```

Asserts that the table has the expected number of columns.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                                        | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------------------------------------|------------|
| value   | [int](`int`)                                 | The expected number of columns in the table.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the table to have the expected number of columns. Defaults to `None`. | `None`     |

### expect_nrow { #shiny.playwright.controller.OutputTable.expect_nrow }

```python
playwright.controller.OutputTable.expect_nrow(value, *, timeout=None)
```

Asserts that the table has the expected number of rows.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                                     | Default    |
|---------|----------------------------------------------|-------------------------------------------------------------------------------------------------|------------|
| value   | [int](`int`)                                 | The expected number of rows in the table.                                                       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the table to have the expected number of rows. Defaults to `None`. | `None`     |

================
File: playwright.controller.OutputText.qmd
================
# playwright.controller.OutputText { #shiny.playwright.controller.OutputText }

```python
playwright.controller.OutputText(self, page, id)
```

Controller for [](:func:`shiny.express.ui.output_text`).

## Attributes

| Name | Description |
| --- | --- |
| [id](#shiny.playwright.controller.OutputText.id) | The ID of the output control. |
| [loc](#shiny.playwright.controller.OutputText.loc) | Playwright `Locator` of the text output. |
| [page](#shiny.playwright.controller.OutputText.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_container_tag](#shiny.playwright.controller.OutputText.expect_container_tag) | Asserts that the output has the expected container tag. |
| [expect_inline](#shiny.playwright.controller.OutputText.expect_inline) | Asserts that the output is inline. |
| [expect_value](#shiny.playwright.controller.OutputText.expect_value) | Asserts that the output has the expected value. |
| [get_value](#shiny.playwright.controller.OutputText.get_value) | Gets the text value of the output. |

### expect_container_tag { #shiny.playwright.controller.OutputText.expect_container_tag }

```python
playwright.controller.OutputText.expect_container_tag(value, *, timeout=None)
```

Asserts that the output has the expected container tag.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                         | Description                                                                   | Default    |
|---------|--------------------------------------------------------------|-------------------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['span', 'div'\] \| [str](`str`) | The expected container tag.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                 | The maximum time to wait for the container tag to appear. Defaults to `None`. | `None`     |

### expect_inline { #shiny.playwright.controller.OutputText.expect_inline }

```python
playwright.controller.OutputText.expect_inline(value=False, *, timeout=None)
```

Asserts that the output is inline.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                            | Default   |
|---------|----------------------------------------------|------------------------------------------------------------------------|-----------|
| value   | [bool](`bool`)                               | Whether the output is inline.                                          | `False`   |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the output to appear. Defaults to `None`. | `None`    |

### expect_value { #shiny.playwright.controller.OutputText.expect_value }

```python
playwright.controller.OutputText.expect_value(value, *, timeout=None)
```

Asserts that the output has the expected value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                           | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

### get_value { #shiny.playwright.controller.OutputText.get_value }

```python
playwright.controller.OutputText.get_value(timeout=None)
```

Gets the text value of the output.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                           | Default   |
|---------|----------------------------------------------|-----------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the value to appear. Defaults to `None`. | `None`    |

================
File: playwright.controller.OutputTextVerbatim.qmd
================
# playwright.controller.OutputTextVerbatim { #shiny.playwright.controller.OutputTextVerbatim }

```python
playwright.controller.OutputTextVerbatim(self, page, id)
```

Controller for [](:func:`shiny.express.ui.output_text_verbatim`).

## Attributes

| Name | Description |
| --- | --- |
| [id](#shiny.playwright.controller.OutputTextVerbatim.id) | The ID of the output control. |
| [loc](#shiny.playwright.controller.OutputTextVerbatim.loc) | Playwright `Locator` of the verbatim text output. |
| [page](#shiny.playwright.controller.OutputTextVerbatim.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_has_placeholder](#shiny.playwright.controller.OutputTextVerbatim.expect_has_placeholder) | Asserts that the verbatim text output has the expected placeholder. |
| [expect_value](#shiny.playwright.controller.OutputTextVerbatim.expect_value) | Asserts that the output has the expected value. |

### expect_has_placeholder { #shiny.playwright.controller.OutputTextVerbatim.expect_has_placeholder }

```python
playwright.controller.OutputTextVerbatim.expect_has_placeholder(
    value=False,
    *,
    timeout=None,
)
```

Asserts that the verbatim text output has the expected placeholder.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                 | Default   |
|---------|----------------------------------------------|-----------------------------------------------------------------------------|-----------|
| value   | [bool](`bool`)                               | Whether the verbatim text output has a placeholder.                         | `False`   |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the placeholder to appear. Defaults to `None`. | `None`    |

### expect_value { #shiny.playwright.controller.OutputTextVerbatim.expect_value }

```python
playwright.controller.OutputTextVerbatim.expect_value(value, *, timeout=None)
```

Asserts that the output has the expected value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                           | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected value.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the value to appear. Defaults to `None`. | `None`     |

================
File: playwright.controller.OutputUi.qmd
================
# playwright.controller.OutputUi { #shiny.playwright.controller.OutputUi }

```python
playwright.controller.OutputUi(self, page, id)
```

Controller for [](:func:`shiny.express.ui.output_ui`).

## Attributes

| Name | Description |
| --- | --- |
| [id](#shiny.playwright.controller.OutputUi.id) | The ID of the output control. |
| [loc](#shiny.playwright.controller.OutputUi.loc) | Playwright `Locator` of the output control. |
| [page](#shiny.playwright.controller.OutputUi.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_container_tag](#shiny.playwright.controller.OutputUi.expect_container_tag) | Asserts that the output has the expected container tag. |
| [expect_empty](#shiny.playwright.controller.OutputUi.expect_empty) | Asserts that the output is empty. |
| [expect_inline](#shiny.playwright.controller.OutputUi.expect_inline) | Asserts that the output is inline. |

### expect_container_tag { #shiny.playwright.controller.OutputUi.expect_container_tag }

```python
playwright.controller.OutputUi.expect_container_tag(value, *, timeout=None)
```

Asserts that the output has the expected container tag.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                         | Description                                                                   | Default    |
|---------|--------------------------------------------------------------|-------------------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['span', 'div'\] \| [str](`str`) | The expected container tag.                                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                 | The maximum time to wait for the container tag to appear. Defaults to `None`. | `None`     |

### expect_empty { #shiny.playwright.controller.OutputUi.expect_empty }

```python
playwright.controller.OutputUi.expect_empty(value, *, timeout=None)
```

Asserts that the output is empty.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                              | Default    |
|---------|----------------------------------------------|--------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | Whether the output is empty.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the output to be empty. Defaults to `None`. | `None`     |

### expect_inline { #shiny.playwright.controller.OutputUi.expect_inline }

```python
playwright.controller.OutputUi.expect_inline(value=False, *, timeout=None)
```

Asserts that the output is inline.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                            | Default   |
|---------|----------------------------------------------|------------------------------------------------------------------------|-----------|
| value   | [bool](`bool`)                               | Whether the output is inline.                                          | `False`   |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the output to appear. Defaults to `None`. | `None`    |

================
File: playwright.controller.Popover.qmd
================
# playwright.controller.Popover { #shiny.playwright.controller.Popover }

```python
playwright.controller.Popover(self, page, id)
```

Controller for [](:func:`shiny.express.ui.popover`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.Popover.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.Popover.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.Popover.loc) | Playwright `Locator` of the UI element. |
| [loc_overlay_body](#shiny.playwright.controller.Popover.loc_overlay_body) | Playwright `Locator` for the popover body. |
| [loc_overlay_container](#shiny.playwright.controller.Popover.loc_overlay_container) | Playwright `Locator` for the popover container. |
| [loc_trigger](#shiny.playwright.controller.Popover.loc_trigger) | Playwright `Locator` for the trigger element that opens/closes the popover. |
| [page](#shiny.playwright.controller.Popover.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_active](#shiny.playwright.controller.Popover.expect_active) | Expects the overlay to be active or inactive. |
| [expect_body](#shiny.playwright.controller.Popover.expect_body) | Expects the overlay body to have the specified text. |
| [expect_placement](#shiny.playwright.controller.Popover.expect_placement) | Expects the overlay to have the specified placement. |
| [expect_title](#shiny.playwright.controller.Popover.expect_title) | Expects the popover title to have the specified text. |
| [get_loc_overlay_container](#shiny.playwright.controller.Popover.get_loc_overlay_container) | Returns the locator for the overlay container. |
| [set](#shiny.playwright.controller.Popover.set) | Sets the state of the popover. |

### expect_active { #shiny.playwright.controller.Popover.expect_active }

```python
playwright.controller.Popover.expect_active(value, *, timeout=None)
```

Expects the overlay to be active or inactive.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the overlay is expected to be active, False otherwise.          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_body { #shiny.playwright.controller.Popover.expect_body }

```python
playwright.controller.Popover.expect_body(value, *, timeout=None)
```

Expects the overlay body to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                  | Default    |
|---------|--------------------------------------------------------|------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the overlay body to appear. Defaults to `None`. | `None`     |

### expect_placement { #shiny.playwright.controller.Popover.expect_placement }

```python
playwright.controller.Popover.expect_placement(value, *, timeout=None)
```

Expects the overlay to have the specified placement.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The expected placement value.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_title { #shiny.playwright.controller.Popover.expect_title }

```python
playwright.controller.Popover.expect_title(value, *, timeout=None)
```

Expects the popover title to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                    | Default    |
|---------|--------------------------------------------------------|--------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                           | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the popover header to appear. Defaults to `None`. | `None`     |

### get_loc_overlay_container { #shiny.playwright.controller.Popover.get_loc_overlay_container }

```python
playwright.controller.Popover.get_loc_overlay_container(timeout=None)
```

Returns the locator for the overlay container.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default   |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the overlay container to appear. Defaults to `None`. | `None`    |

### set { #shiny.playwright.controller.Popover.set }

```python
playwright.controller.Popover.set(open, timeout=None)
```

Sets the state of the popover.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                                  | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------------------------------|------------|
| open    | [bool](`bool`)                               | `True` to open the popover and `False` to close it.                                          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the popover to be visible and interactable. Defaults to `None`. | `None`     |

================
File: playwright.controller.Sidebar.qmd
================
# playwright.controller.Sidebar { #shiny.playwright.controller.Sidebar }

```python
playwright.controller.Sidebar(self, page, id)
```

Controller for [](:func:`shiny.express.ui.sidebar`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.Sidebar.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.Sidebar.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.Sidebar.loc) | Playwright `Locator` for the sidebar. |
| [loc_container](#shiny.playwright.controller.Sidebar.loc_container) | Playwright `Locator` for the sidebar layout. |
| [loc_content](#shiny.playwright.controller.Sidebar.loc_content) | Playwright `Locator` for the content of the sidebar. |
| [loc_handle](#shiny.playwright.controller.Sidebar.loc_handle) | Playwright `Locator` for the open/close handle of the sidebar. |
| [loc_position](#shiny.playwright.controller.Sidebar.loc_position) | Playwright `Locator` for the position of the sidebar. |
| [loc_title](#shiny.playwright.controller.Sidebar.loc_title) | Playwright `Locator` for the title of the sidebar. |
| [page](#shiny.playwright.controller.Sidebar.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_bg_color](#shiny.playwright.controller.Sidebar.expect_bg_color) | Asserts that the sidebar has the expected background color. |
| [expect_class](#shiny.playwright.controller.Sidebar.expect_class) | Asserts that the sidebar has or does not have a CSS class. |
| [expect_desktop_state](#shiny.playwright.controller.Sidebar.expect_desktop_state) | Asserts that the sidebar has the expected state on desktop. |
| [expect_gap](#shiny.playwright.controller.Sidebar.expect_gap) | Asserts that the sidebar has the expected gap. |
| [expect_handle](#shiny.playwright.controller.Sidebar.expect_handle) | Asserts that the sidebar handle exists or does not exist. |
| [expect_mobile_max_height](#shiny.playwright.controller.Sidebar.expect_mobile_max_height) | Asserts that the sidebar has the expected maximum height on mobile. |
| [expect_mobile_state](#shiny.playwright.controller.Sidebar.expect_mobile_state) | Asserts that the sidebar has the expected state on mobile. |
| [expect_open](#shiny.playwright.controller.Sidebar.expect_open) | Expect the sidebar to be open or closed. |
| [expect_padding](#shiny.playwright.controller.Sidebar.expect_padding) | Asserts that the sidebar has the expected padding. |
| [expect_position](#shiny.playwright.controller.Sidebar.expect_position) | Asserts that the sidebar is in the expected position. |
| [expect_text](#shiny.playwright.controller.Sidebar.expect_text) | Asserts that the sidebar has the expected text. |
| [expect_title](#shiny.playwright.controller.Sidebar.expect_title) | Asserts that the sidebar has the expected title. |
| [expect_width](#shiny.playwright.controller.Sidebar.expect_width) | Asserts that the sidebar has the expected width. |
| [set](#shiny.playwright.controller.Sidebar.set) | Sets the sidebar to be open or closed. |

### expect_bg_color { #shiny.playwright.controller.Sidebar.expect_bg_color }

```python
playwright.controller.Sidebar.expect_bg_color(value, *, timeout=None)
```

Asserts that the sidebar has the expected background color.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                      | Default    |
|---------|--------------------------------------------------------|----------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected background color of the sidebar.                                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the background color to appear. Defaults to `None`. | `None`     |

### expect_class { #shiny.playwright.controller.Sidebar.expect_class }

```python
playwright.controller.Sidebar.expect_class(
    class_name,
    *,
    has_class=True,
    timeout=None,
)
```

Asserts that the sidebar has or does not have a CSS class.

#### Parameters {.doc-section .doc-section-parameters}

| Name       | Type                                         | Description                                                             | Default    |
|------------|----------------------------------------------|-------------------------------------------------------------------------|------------|
| class_name | [str](`str`)                                 | The CSS class to check for.                                             | _required_ |
| has_class  | [bool](`bool`)                               | `True` if the sidebar should have the CSS class, `False` otherwise.     | `True`     |
| timeout    | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the sidebar to appear. Defaults to `None`. | `None`     |

### expect_desktop_state { #shiny.playwright.controller.Sidebar.expect_desktop_state }

```python
playwright.controller.Sidebar.expect_desktop_state(value, *, timeout=None)
```

Asserts that the sidebar has the expected state on desktop.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                      | Description                                                           | Default    |
|---------|-----------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['open', 'closed', 'always'\] | The expected state of the sidebar on desktop.                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)              | The maximum time to wait for the state to appear. Defaults to `None`. | `None`     |

### expect_gap { #shiny.playwright.controller.Sidebar.expect_gap }

```python
playwright.controller.Sidebar.expect_gap(value, *, timeout=None)
```

Asserts that the sidebar has the expected gap.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                         | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected gap of the sidebar.                                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the gap to appear. Defaults to `None`. | `None`     |

### expect_handle { #shiny.playwright.controller.Sidebar.expect_handle }

```python
playwright.controller.Sidebar.expect_handle(exists, *, timeout=None)
```

Asserts that the sidebar handle exists or does not exist.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                    | Default    |
|---------|----------------------------------------------|--------------------------------------------------------------------------------|------------|
| exists  | [bool](`bool`)                               | `True` if the sidebar open/close handle should exist, `False` otherwise.       | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the sidebar handle to appear. Defaults to `None`. | `None`     |

### expect_mobile_max_height { #shiny.playwright.controller.Sidebar.expect_mobile_max_height }

```python
playwright.controller.Sidebar.expect_mobile_max_height(value, *, timeout=None)
```

Asserts that the sidebar has the expected maximum height on mobile.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                    | Default    |
|---------|--------------------------------------------------------|--------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected maximum height of the sidebar on mobile.                          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the maximum height to appear. Defaults to `None`. | `None`     |

### expect_mobile_state { #shiny.playwright.controller.Sidebar.expect_mobile_state }

```python
playwright.controller.Sidebar.expect_mobile_state(value, *, timeout=None)
```

Asserts that the sidebar has the expected state on mobile.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                      | Description                                                           | Default    |
|---------|-----------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['open', 'closed', 'always'\] | The expected state of the sidebar on mobile.                          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)              | The maximum time to wait for the state to appear. Defaults to `None`. | `None`     |

### expect_open { #shiny.playwright.controller.Sidebar.expect_open }

```python
playwright.controller.Sidebar.expect_open(value, *, timeout=None)
```

Expect the sidebar to be open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                    | Default    |
|---------|----------------------------------------------|--------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the sidebar should be open, `False` to be closed.                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the sidebar to open or close. Defaults to `None`. | `None`     |

### expect_padding { #shiny.playwright.controller.Sidebar.expect_padding }

```python
playwright.controller.Sidebar.expect_padding(value, *, timeout=None)
```

Asserts that the sidebar has the expected padding.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                           | Description                                                             | Default    |
|---------|------------------------------------------------|-------------------------------------------------------------------------|------------|
| value   | [str](`str`) \| [list](`list`)\[[str](`str`)\] | The expected padding of the sidebar.                                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)   | The maximum time to wait for the padding to appear. Defaults to `None`. | `None`     |

### expect_position { #shiny.playwright.controller.Sidebar.expect_position }

```python
playwright.controller.Sidebar.expect_position(value, *, timeout=None)
```

Asserts that the sidebar is in the expected position.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                           | Description                                                             | Default    |
|---------|------------------------------------------------|-------------------------------------------------------------------------|------------|
| value   | [Literal](`typing.Literal`)\['left', 'right'\] | The expected position of the sidebar.                                   | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)   | The maximum time to wait for the sidebar to appear. Defaults to `None`. | `None`     |

### expect_text { #shiny.playwright.controller.Sidebar.expect_text }

```python
playwright.controller.Sidebar.expect_text(value, *, timeout=None)
```

Asserts that the sidebar has the expected text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                          | Default    |
|---------|--------------------------------------------------------|----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text in the sidebar.                                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the text to appear. Defaults to `None`. | `None`     |

### expect_title { #shiny.playwright.controller.Sidebar.expect_title }

```python
playwright.controller.Sidebar.expect_title(value, *, timeout=None)
```

Asserts that the sidebar has the expected title.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                           | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected title of the sidebar.                                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the title to appear. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.Sidebar.expect_width }

```python
playwright.controller.Sidebar.expect_width(value, *, timeout=None)
```

Asserts that the sidebar has the expected width.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                           | Default    |
|---------|--------------------------------------------------------|-----------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected width of the sidebar.                                    | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the width to appear. Defaults to `None`. | `None`     |

### set { #shiny.playwright.controller.Sidebar.set }

```python
playwright.controller.Sidebar.set(open, *, timeout=None)
```

Sets the sidebar to be open or closed.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                    | Default    |
|---------|----------------------------------------------|--------------------------------------------------------------------------------|------------|
| open    | [bool](`bool`)                               | `True` to open the sidebar and `False` to close it.                            | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the sidebar to open or close. Defaults to `None`. | `None`     |

================
File: playwright.controller.Tooltip.qmd
================
# playwright.controller.Tooltip { #shiny.playwright.controller.Tooltip }

```python
playwright.controller.Tooltip(self, page, id)
```

Controller for [](:func:`shiny.express.ui.tooltip`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.Tooltip.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.Tooltip.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.Tooltip.loc) | Playwright `Locator` for the tooltip content. |
| [loc_container](#shiny.playwright.controller.Tooltip.loc_container) | Playwright `Locator` for the container tooltip. |
| [loc_overlay_body](#shiny.playwright.controller.Tooltip.loc_overlay_body) | Playwright `Locator` for the overlay body. |
| [loc_overlay_container](#shiny.playwright.controller.Tooltip.loc_overlay_container) | Playwright `Locator` for the overlay container. |
| [loc_trigger](#shiny.playwright.controller.Tooltip.loc_trigger) | Playwright `Locator` for the trigger element. |
| [page](#shiny.playwright.controller.Tooltip.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_active](#shiny.playwright.controller.Tooltip.expect_active) | Expects the overlay to be active or inactive. |
| [expect_body](#shiny.playwright.controller.Tooltip.expect_body) | Expects the overlay body to have the specified text. |
| [expect_placement](#shiny.playwright.controller.Tooltip.expect_placement) | Expects the overlay to have the specified placement. |
| [get_loc_overlay_container](#shiny.playwright.controller.Tooltip.get_loc_overlay_container) | Returns the locator for the overlay container. |
| [set](#shiny.playwright.controller.Tooltip.set) | Sets the state of the tooltip. |

### expect_active { #shiny.playwright.controller.Tooltip.expect_active }

```python
playwright.controller.Tooltip.expect_active(value, *, timeout=None)
```

Expects the overlay to be active or inactive.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the overlay is expected to be active, False otherwise.          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_body { #shiny.playwright.controller.Tooltip.expect_body }

```python
playwright.controller.Tooltip.expect_body(value, *, timeout=None)
```

Expects the overlay body to have the specified text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                                  | Default    |
|---------|--------------------------------------------------------|------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                         | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the overlay body to appear. Defaults to `None`. | `None`     |

### expect_placement { #shiny.playwright.controller.Tooltip.expect_placement }

```python
playwright.controller.Tooltip.expect_placement(value, *, timeout=None)
```

Expects the overlay to have the specified placement.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [str](`str`)                                 | The expected placement value.                                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### get_loc_overlay_container { #shiny.playwright.controller.Tooltip.get_loc_overlay_container }

```python
playwright.controller.Tooltip.get_loc_overlay_container(timeout=None)
```

Returns the locator for the overlay container.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default   |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|-----------|
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the overlay container to appear. Defaults to `None`. | `None`    |

### set { #shiny.playwright.controller.Tooltip.set }

```python
playwright.controller.Tooltip.set(open, timeout=None)
```

Sets the state of the tooltip.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                                  | Default    |
|---------|----------------------------------------------|----------------------------------------------------------------------------------------------|------------|
| open    | [bool](`bool`)                               | `True` to open the tooltip and `False` to close it.                                          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the tooltip to be visible and interactable. Defaults to `None`. | `None`     |

================
File: playwright.controller.ValueBox.qmd
================
# playwright.controller.ValueBox { #shiny.playwright.controller.ValueBox }

```python
playwright.controller.ValueBox(self, page, id)
```

Controller for [](:func:`shiny.express.ui.value_box`).

## Attributes

| Name | Description |
| --- | --- |
| [expect](#shiny.playwright.controller.ValueBox.expect) | Expectation method equivalent to `playwright.expect(self.loc)`. |
| [id](#shiny.playwright.controller.ValueBox.id) | The browser DOM `id` of the UI element. |
| [loc](#shiny.playwright.controller.ValueBox.loc) | Playwright `Locator` for the value box's value. |
| [loc_body](#shiny.playwright.controller.ValueBox.loc_body) | Playwright `Locator` for the value box body. |
| [loc_container](#shiny.playwright.controller.ValueBox.loc_container) | Playwright `Locator` for the container of the UI element. |
| [loc_showcase](#shiny.playwright.controller.ValueBox.loc_showcase) | Playwright `Locator` for the value box showcase. |
| [loc_title](#shiny.playwright.controller.ValueBox.loc_title) | Playwright `Locator` for the value box title. |
| [page](#shiny.playwright.controller.ValueBox.page) | Playwright `Page` of the Shiny app. |

## Methods

| Name | Description |
| --- | --- |
| [expect_body](#shiny.playwright.controller.ValueBox.expect_body) | Expects the value box body to have specific text. |
| [expect_full_screen](#shiny.playwright.controller.ValueBox.expect_full_screen) | Verifies if the full screen mode is currently open. |
| [expect_full_screen_available](#shiny.playwright.controller.ValueBox.expect_full_screen_available) | Expects whether full screen mode is available for the element. |
| [expect_height](#shiny.playwright.controller.ValueBox.expect_height) | Expects the value box to have a specific height. |
| [expect_title](#shiny.playwright.controller.ValueBox.expect_title) | Expects the value box title to have a specific text. |
| [expect_value](#shiny.playwright.controller.ValueBox.expect_value) | Expects the value box value to have a specific text. |
| [expect_width](#shiny.playwright.controller.ValueBox.expect_width) | Expect the `width` attribute of a DOM element to have a specific value. |
| [set_full_screen](#shiny.playwright.controller.ValueBox.set_full_screen) | Sets the element to full screen mode or exits full screen mode. |

### expect_body { #shiny.playwright.controller.ValueBox.expect_body }

```python
playwright.controller.ValueBox.expect_body(value, *, timeout=None)
```

Expects the value box body to have specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                                                                                               | Description                                                                                                                  | Default    |
|---------|------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] | The expected text pattern or list of patterns/strings.  Note: If testing against multiple elements, text should be an array. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)                                                                                       | The maximum time to wait for the expectation to pass. Defaults to `None`.                                                    | `None`     |

### expect_full_screen { #shiny.playwright.controller.ValueBox.expect_full_screen }

```python
playwright.controller.ValueBox.expect_full_screen(value, *, timeout=None)
```

Verifies if the full screen mode is currently open.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                         | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the item is to be in full screen mode, `False` otherwise. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the verification. Defaults to `None`.  | `None`     |

### expect_full_screen_available { #shiny.playwright.controller.ValueBox.expect_full_screen_available }

```python
playwright.controller.ValueBox.expect_full_screen_available(
    value,
    *,
    timeout=None,
)
```

Expects whether full screen mode is available for the element.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                              | Default    |
|---------|----------------------------------------------|------------------------------------------------------------------------------------------|------------|
| value   | [bool](`bool`)                               | `True` if the element is expected to be available for full screen mode, False otherwise. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the expectation to pass. Defaults to `None`.                | `None`     |

### expect_height { #shiny.playwright.controller.ValueBox.expect_height }

```python
playwright.controller.ValueBox.expect_height(value, *, timeout=None)
```

Expects the value box to have a specific height.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                               | Description                                                               | Default    |
|---------|----------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [StyleValue](`shiny.playwright._types.StyleValue`) | The expected height value.                                                | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)       | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_title { #shiny.playwright.controller.ValueBox.expect_title }

```python
playwright.controller.ValueBox.expect_title(value, *, timeout=None)
```

Expects the value box title to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_value { #shiny.playwright.controller.ValueBox.expect_value }

```python
playwright.controller.ValueBox.expect_value(value, *, timeout=None)
```

Expects the value box value to have a specific text.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                                               | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------------------------------|------------|
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The expected text pattern or string.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the expectation to pass. Defaults to `None`. | `None`     |

### expect_width { #shiny.playwright.controller.ValueBox.expect_width }

```python
playwright.controller.ValueBox.expect_width(value, *, timeout=None)
```

Expect the `width` attribute of a DOM element to have a specific value.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                             | Description                                                                       | Default    |
|---------|--------------------------------------------------|-----------------------------------------------------------------------------------|------------|
| value   | [AttrValue](`shiny.playwright._types.AttrValue`) | The expected value of the `width` attribute.                                      | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)     | The maximum time to wait for the expectation to be fulfilled. Defaults to `None`. | `None`     |

### set_full_screen { #shiny.playwright.controller.ValueBox.set_full_screen }

```python
playwright.controller.ValueBox.set_full_screen(open, *, timeout=None)
```

Sets the element to full screen mode or exits full screen mode.

#### Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                       | Default    |
|---------|----------------------------------------------|-----------------------------------------------------------------------------------|------------|
| open    | [bool](`bool`)                               | `True` to open the element in full screen mode, `False` to exit full screen mode. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the operation to complete. Defaults to `None`.       | `None`     |

================
File: playwright.controls.Accordion.qmd
================
# playwright.controls.Accordion { #shiny.playwright.controls.Accordion }

`playwright.controls.Accordion(self, page, id)`

Controller for [](:func:`shiny.express.ui.accordion`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.Accordion.loc) | Playwright `Locator` for each accordion items. |
| [loc_container](#shiny.playwright.controls.Accordion.loc_container) | Playwright `Locator` for the accordion container. |

## Methods

| Name | Description |
| --- | --- |
| [accordion_panel](#shiny.playwright.controls.Accordion.accordion_panel) | Returns the accordion panel ([](:class:`~shiny.playwright.controls.AccordionPanel`)) with the specified data value. |
| [expect_height](#shiny.playwright.controls.Accordion.expect_height) | Expects the accordion to have the specified height. |
| [expect_panels](#shiny.playwright.controls.Accordion.expect_panels) | Expects the accordion to have the specified panels. |
| [expect_width](#shiny.playwright.controls.Accordion.expect_width) | Expects the accordion to have the specified width. |
| [set](#shiny.playwright.controls.Accordion.set) | Sets the state of the accordion panel. |

### accordion_panel { #shiny.playwright.controls.Accordion.accordion_panel }

`playwright.controls.Accordion.accordion_panel(data_value)`

Returns the accordion panel ([](:class:`~shiny.playwright.controls.AccordionPanel`))
with the specified data value.

#### Parameters

<code><span class="parameter-name">data_value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The data value of the accordion panel.

### expect_height { #shiny.playwright.controls.Accordion.expect_height }

`playwright.controls.Accordion.expect_height(value, *, timeout=None)`

Expects the accordion to have the specified height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected height.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the height to be visible and interactable. Defaults to `None`.

### expect_panels { #shiny.playwright.controls.Accordion.expect_panels }

`playwright.controls.Accordion.expect_panels(value, *, timeout=None)`

Expects the accordion to have the specified panels.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\]</span></code>

:   The expected panels.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the panels to be visible and interactable. Defaults to `None`.

### expect_width { #shiny.playwright.controls.Accordion.expect_width }

`playwright.controls.Accordion.expect_width(value, *, timeout=None)`

Expects the accordion to have the specified width.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected width.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the width to be visible and interactable. Defaults to `None`.

### set { #shiny.playwright.controls.Accordion.set }

`playwright.controls.Accordion.set(selected, *, timeout=None)`

Sets the state of the accordion panel.

#### Parameters

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [list](`list`)\[[str](`str`)\]</span></code>

:   The selected accordion panel(s).

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the accordion panel to be visible and interactable. Defaults to `None`.

================
File: playwright.controls.AccordionPanel.qmd
================
# playwright.controls.AccordionPanel { #shiny.playwright.controls.AccordionPanel }

`playwright.controls.AccordionPanel(self, page, id, data_value)`

Controller for [](:func:`shiny.express.ui.accordion_panel`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_body](#shiny.playwright.controls.AccordionPanel.loc_body) | Playwright `Locator` for the accordion panel's body. |
| [loc_header](#shiny.playwright.controls.AccordionPanel.loc_header) | Playwright `Locator` for the accordion panel's header. |
| [loc_icon](#shiny.playwright.controls.AccordionPanel.loc_icon) | Playwright `Locator` for the accordion panel's icon. |
| [loc_label](#shiny.playwright.controls.AccordionPanel.loc_label) | Playwright `Locator` for the accordion panel's label. |

## Methods

| Name | Description |
| --- | --- |
| [expect_body](#shiny.playwright.controls.AccordionPanel.expect_body) | Expects the accordion panel body to have the specified text. |
| [expect_icon](#shiny.playwright.controls.AccordionPanel.expect_icon) | Expects the accordion panel icon to have the specified text. |
| [expect_label](#shiny.playwright.controls.AccordionPanel.expect_label) | Expects the accordion panel label to have the specified text. |
| [expect_open](#shiny.playwright.controls.AccordionPanel.expect_open) | Expects the accordion panel to be open or closed. |
| [set](#shiny.playwright.controls.AccordionPanel.set) | Sets the state of the control to open or closed. |
| [toggle](#shiny.playwright.controls.AccordionPanel.toggle) | Toggles the state of the control. |

### expect_body { #shiny.playwright.controls.AccordionPanel.expect_body }

`playwright.controls.AccordionPanel.expect_body(value, *, timeout=None)`

Expects the accordion panel body to have the specified text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the body to appear. Defaults to `None`.

### expect_icon { #shiny.playwright.controls.AccordionPanel.expect_icon }

`playwright.controls.AccordionPanel.expect_icon(value, *, timeout=None)`

Expects the accordion panel icon to have the specified text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the icon to appear. Defaults to `None`.

### expect_label { #shiny.playwright.controls.AccordionPanel.expect_label }

`playwright.controls.AccordionPanel.expect_label(value, *, timeout=None)`

Expects the accordion panel label to have the specified text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the label to appear. Defaults to `None`.

### expect_open { #shiny.playwright.controls.AccordionPanel.expect_open }

`playwright.controls.AccordionPanel.expect_open(value, *, timeout=None)`

Expects the accordion panel to be open or closed.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` if the accordion panel is expected to be open, `False` otherwise.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### set { #shiny.playwright.controls.AccordionPanel.set }

`playwright.controls.AccordionPanel.set(open, *, timeout=None)`

Sets the state of the control to open or closed.

#### Parameters

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` to open the accordion panel, False to close it.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the control to be visible and interactable. Defaults to `None`.

### toggle { #shiny.playwright.controls.AccordionPanel.toggle }

`playwright.controls.AccordionPanel.toggle(timeout=None)`

Toggles the state of the control.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the control to be visible and interactable. Defaults to `None`.

================
File: playwright.controls.Card.qmd
================
# playwright.controls.Card { #shiny.playwright.controls.Card }

`playwright.controls.Card(self, page, id)`

Controller for [](:func:`shiny.express.ui.card`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.Card.loc) | Playwright `Locator` for the card's value. |
| [loc_body](#shiny.playwright.controls.Card.loc_body) | Playwright `Locator` for the card body. |
| [loc_container](#shiny.playwright.controls.Card.loc_container) | Playwright `Locator` for the card container. |
| [loc_footer](#shiny.playwright.controls.Card.loc_footer) | Playwright `Locator` for the card footer. |
| [loc_title](#shiny.playwright.controls.Card.loc_title) | Playwright `Locator` for the card title. |

## Methods

| Name | Description |
| --- | --- |
| [expect_footer](#shiny.playwright.controls.Card.expect_footer) | Expects the card footer to have a specific text. |
| [expect_header](#shiny.playwright.controls.Card.expect_header) | Expects the card header to have a specific text. |
| [expect_height](#shiny.playwright.controls.Card.expect_height) | Expects the card to have a specific height. |
| [expect_max_height](#shiny.playwright.controls.Card.expect_max_height) | Expects the card to have a specific maximum height. |
| [expect_min_height](#shiny.playwright.controls.Card.expect_min_height) | Expects the card to have a specific minimum height. |

### expect_footer { #shiny.playwright.controls.Card.expect_footer }

`playwright.controls.Card.expect_footer(value, *, timeout=None)`

Expects the card footer to have a specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None</span></code>

:   The expected text pattern or string
    Note: None if the footer is expected to not exist.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_header { #shiny.playwright.controls.Card.expect_header }

`playwright.controls.Card.expect_header(value, *, timeout=None)`

Expects the card header to have a specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None</span></code>

:   The expected text pattern or string.

    Note: `None` if the header is expected to not exist.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_height { #shiny.playwright.controls.Card.expect_height }

`playwright.controls.Card.expect_height(value, *, timeout=None)`

Expects the card to have a specific height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected height value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_max_height { #shiny.playwright.controls.Card.expect_max_height }

`playwright.controls.Card.expect_max_height(value, *, timeout=None)`

Expects the card to have a specific maximum height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected maximum height value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_min_height { #shiny.playwright.controls.Card.expect_min_height }

`playwright.controls.Card.expect_min_height(value, *, timeout=None)`

Expects the card to have a specific minimum height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected minimum height value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

================
File: playwright.controls.DownloadButton.qmd
================
# playwright.controls.DownloadButton { #shiny.playwright.controls.DownloadButton }

`playwright.controls.DownloadButton(self, page, id)`

Controller for [](:func:`shiny.express.ui.download_button`)

================
File: playwright.controls.DownloadLink.qmd
================
# playwright.controls.DownloadLink { #shiny.playwright.controls.DownloadLink }

`playwright.controls.DownloadLink(self, page, id)`

Controller for [](:func:`shiny.express.ui.download_link`).

================
File: playwright.controls.InputActionLink.qmd
================
# playwright.controls.InputActionLink { #shiny.playwright.controls.InputActionLink }

`playwright.controls.InputActionLink(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_action_link`).

================
File: playwright.controls.InputCheckbox.qmd
================
# playwright.controls.InputCheckbox { #shiny.playwright.controls.InputCheckbox }

`playwright.controls.InputCheckbox(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_checkbox`).

================
File: playwright.controls.InputCheckboxGroup.qmd
================
# playwright.controls.InputCheckboxGroup { #shiny.playwright.controls.InputCheckboxGroup }

`playwright.controls.InputCheckboxGroup(self, page, id)`



## Methods

| Name | Description |
| --- | --- |
| [expect_choices](#shiny.playwright.controls.InputCheckboxGroup.expect_choices) | Expect the checkbox choices. |
| [expect_selected](#shiny.playwright.controls.InputCheckboxGroup.expect_selected) | Expect the selected checkboxes. |
| [set](#shiny.playwright.controls.InputCheckboxGroup.set) | Set the selected checkboxes. |

### expect_choices { #shiny.playwright.controls.InputCheckboxGroup.expect_choices }

`playwright.controls.InputCheckboxGroup.expect_choices(value, *, timeout=None)`

Expect the checkbox choices.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected choices.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_selected { #shiny.playwright.controls.InputCheckboxGroup.expect_selected }

`playwright.controls.InputCheckboxGroup.expect_selected(value, *, timeout=None)`

Expect the selected checkboxes.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected values of the selected checkboxes.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### set { #shiny.playwright.controls.InputCheckboxGroup.set }

`playwright.controls.InputCheckboxGroup.set(selected, *, timeout=None, **kwargs)`

Set the selected checkboxes.

#### Parameters

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[list](`list`)\[[str](`str`)\]</span></code>

:   The values of the selected checkboxes.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the action. Defaults to `None`.

================
File: playwright.controls.InputDarkMode.qmd
================
# playwright.controls.InputDarkMode { #shiny.playwright.controls.InputDarkMode }

`playwright.controls.InputDarkMode(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_dark_mode`).

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controls.InputDarkMode.click) | Clicks the input dark mode. |
| [expect_mode](#shiny.playwright.controls.InputDarkMode.expect_mode) | Expect the `mode` attribute of the input dark mode to have a specific value. |
| [expect_page_mode](#shiny.playwright.controls.InputDarkMode.expect_page_mode) | Expect the page to have a specific dark mode value. |
| [expect_wc_attribute](#shiny.playwright.controls.InputDarkMode.expect_wc_attribute) | Expect the `wc` attribute of the input dark mode to have a specific value. |

### click { #shiny.playwright.controls.InputDarkMode.click }

`playwright.controls.InputDarkMode.click(timeout=None)`

Clicks the input dark mode.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the input dark mode to be clicked. Defaults to `None`.

### expect_mode { #shiny.playwright.controls.InputDarkMode.expect_mode }

`playwright.controls.InputDarkMode.expect_mode(value, *, timeout=None)`

Expect the `mode` attribute of the input dark mode to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected value of the `mode` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_page_mode { #shiny.playwright.controls.InputDarkMode.expect_page_mode }

`playwright.controls.InputDarkMode.expect_page_mode(value, *, timeout=None)`

Expect the page to have a specific dark mode value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected value of the page's dark mode.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_wc_attribute { #shiny.playwright.controls.InputDarkMode.expect_wc_attribute }

`playwright.controls.InputDarkMode.expect_wc_attribute(value, *, timeout=None)`

Expect the `wc` attribute of the input dark mode to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected value of the `wc` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

================
File: playwright.controls.InputDate.qmd
================
# playwright.controls.InputDate { #shiny.playwright.controls.InputDate }

`playwright.controls.InputDate(self, page, id)`

================
File: playwright.controls.InputDateRange.qmd
================
# playwright.controls.InputDateRange { #shiny.playwright.controls.InputDateRange }

`playwright.controls.InputDateRange(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_date_range`).

## Attributes

| Name | Description |
| --- | --- |
| [date_end](#shiny.playwright.controls.InputDateRange.date_end) | The end date input element. |
| [date_start](#shiny.playwright.controls.InputDateRange.date_start) | The start date input element. |
| [loc_end](#shiny.playwright.controls.InputDateRange.loc_end) | Playwright `Locator` of the end date input element. |
| [loc_separator](#shiny.playwright.controls.InputDateRange.loc_separator) | Playwright `Locator` of the separator between the two input elements. |
| [loc_start](#shiny.playwright.controls.InputDateRange.loc_start) | Playwright `Locator` of the start date input element. |

## Methods

| Name | Description |
| --- | --- |
| [expect_autoclose](#shiny.playwright.controls.InputDateRange.expect_autoclose) | Asserts that the input element has the expected autoclose value. |
| [expect_format](#shiny.playwright.controls.InputDateRange.expect_format) | Asserts that the input element has the expected format. |
| [expect_language](#shiny.playwright.controls.InputDateRange.expect_language) | Asserts that the input element has the expected language. |
| [expect_max_date](#shiny.playwright.controls.InputDateRange.expect_max_date) | Asserts that the input element has the expected maximum date. |
| [expect_min_date](#shiny.playwright.controls.InputDateRange.expect_min_date) | Asserts that the input element has the expected minimum date. |
| [expect_separator](#shiny.playwright.controls.InputDateRange.expect_separator) | Asserts that the input element has the expected separator. |
| [expect_startview](#shiny.playwright.controls.InputDateRange.expect_startview) | Asserts that the input element has the expected start view. |
| [expect_value](#shiny.playwright.controls.InputDateRange.expect_value) | Asserts that the input element has the expected value. |
| [expect_weekstart](#shiny.playwright.controls.InputDateRange.expect_weekstart) | Asserts that the input element has the expected week start. |
| [set](#shiny.playwright.controls.InputDateRange.set) | Sets the value of the input element. |

### expect_autoclose { #shiny.playwright.controls.InputDateRange.expect_autoclose }

`playwright.controls.InputDateRange.expect_autoclose(value, *, timeout=None)`

Asserts that the input element has the expected autoclose value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['true', 'false'\]</span></code>

:   The expected autoclose value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

### expect_format { #shiny.playwright.controls.InputDateRange.expect_format }

`playwright.controls.InputDateRange.expect_format(value, *, timeout=None)`

Asserts that the input element has the expected format.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected format.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the format to appear. Defaults to `None`.

### expect_language { #shiny.playwright.controls.InputDateRange.expect_language }

`playwright.controls.InputDateRange.expect_language(value, *, timeout=None)`

Asserts that the input element has the expected language.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected language.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the language to appear. Defaults to `None`.

### expect_max_date { #shiny.playwright.controls.InputDateRange.expect_max_date }

`playwright.controls.InputDateRange.expect_max_date(value, *, timeout=None)`

Asserts that the input element has the expected maximum date.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected maximum date.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the maximum date to appear. Defaults to `None`.

### expect_min_date { #shiny.playwright.controls.InputDateRange.expect_min_date }

`playwright.controls.InputDateRange.expect_min_date(value, *, timeout=None)`

Asserts that the input element has the expected minimum date.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected minimum date.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the minimum date to appear. Defaults to `None`.

### expect_separator { #shiny.playwright.controls.InputDateRange.expect_separator }

`playwright.controls.InputDateRange.expect_separator(value, *, timeout=None)`

Asserts that the input element has the expected separator.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected separator.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the separator to appear. Defaults to `None`.

### expect_startview { #shiny.playwright.controls.InputDateRange.expect_startview }

`playwright.controls.InputDateRange.expect_startview(value, *, timeout=None)`

Asserts that the input element has the expected start view.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected start view.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the start view to appear. Defaults to `None`.

### expect_value { #shiny.playwright.controls.InputDateRange.expect_value }

`playwright.controls.InputDateRange.expect_value(value, *, timeout=None)`

Asserts that the input element has the expected value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\]</span></code>

:   The expected value. The first element is the start date and the second element is the end date.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

### expect_weekstart { #shiny.playwright.controls.InputDateRange.expect_weekstart }

`playwright.controls.InputDateRange.expect_weekstart(value, *, timeout=None)`

Asserts that the input element has the expected week start.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`) \| [AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected week start.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the week start to appear. Defaults to `None`.

### set { #shiny.playwright.controls.InputDateRange.set }

`playwright.controls.InputDateRange.set(value, *, timeout=None)`

Sets the value of the input element.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`) \| None, [str](`str`) \| None\]</span></code>

:   The value to set. The first element is the start date and the second element is the end date.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to be set. Defaults to `None`.

================
File: playwright.controls.InputFile.qmd
================
# playwright.controls.InputFile { #shiny.playwright.controls.InputFile }

`playwright.controls.InputFile(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_file`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_button](#shiny.playwright.controls.InputFile.loc_button) | Playwright `Locator` of the button. |
| [loc_file_display](#shiny.playwright.controls.InputFile.loc_file_display) | Playwright `Locator` of the file display. |
| [loc_progress](#shiny.playwright.controls.InputFile.loc_progress) | Playwright `Locator` of the progress bar. |

## Methods

| Name | Description |
| --- | --- |
| [expect_accept](#shiny.playwright.controls.InputFile.expect_accept) | Expect the `accept` attribute to have a specific value. |
| [expect_button_label](#shiny.playwright.controls.InputFile.expect_button_label) | Expect the button label to have a specific value. |
| [expect_capture](#shiny.playwright.controls.InputFile.expect_capture) | Expect the `capture` attribute to have a specific value. |
| [expect_complete](#shiny.playwright.controls.InputFile.expect_complete) | Expect the file upload to be complete. |
| [expect_multiple](#shiny.playwright.controls.InputFile.expect_multiple) | Expect the `multiple` attribute to have a specific value. |
| [expect_width](#shiny.playwright.controls.InputFile.expect_width) | Expect the width of the input file to have a specific value. |
| [set](#shiny.playwright.controls.InputFile.set) | Set the file upload. |

### expect_accept { #shiny.playwright.controls.InputFile.expect_accept }

`playwright.controls.InputFile.expect_accept(value, *, timeout=None)`

Expect the `accept` attribute to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[list](`list`)\[[str](`str`)\] \| [AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected value of the `accept` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_button_label { #shiny.playwright.controls.InputFile.expect_button_label }

`playwright.controls.InputFile.expect_button_label(value, *, timeout=None)`

Expect the button label to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the button label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_capture { #shiny.playwright.controls.InputFile.expect_capture }

`playwright.controls.InputFile.expect_capture(value, *, timeout=None)`

Expect the `capture` attribute to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['environment', 'user'\] \| None</span></code>

:   The expected value of the `capture` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_complete { #shiny.playwright.controls.InputFile.expect_complete }

`playwright.controls.InputFile.expect_complete(timeout=None)`

Expect the file upload to be complete.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_multiple { #shiny.playwright.controls.InputFile.expect_multiple }

`playwright.controls.InputFile.expect_multiple(value, *, timeout=None)`

Expect the `multiple` attribute to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   The expected value of the `multiple` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_width { #shiny.playwright.controls.InputFile.expect_width }

`playwright.controls.InputFile.expect_width(value, *, timeout=None)`

Expect the width of the input file to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected value of the width.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### set { #shiny.playwright.controls.InputFile.set }

`playwright.controls.InputFile.set(file_path, *, timeout=None, expect_complete_timeout=30 * 1000)`

Set the file upload.

#### Parameters

<code><span class="parameter-name">file_path</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`) \| [FilePayload](`playwright.sync_api.FilePayload`) \| [list](`list`)\[[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`)\] \| [list](`list`)\[[FilePayload](`playwright.sync_api.FilePayload`)\]</span></code>

:   The path to the file to upload.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the action. Defaults to `None`.

<code><span class="parameter-name">expect_complete_timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">30 * 1000</span></code>

:   The timeout for the expectation that the upload is complete. Defaults to `30 * 1000`.

================
File: playwright.controls.InputNumeric.qmd
================
# playwright.controls.InputNumeric { #shiny.playwright.controls.InputNumeric }

`playwright.controls.InputNumeric(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_numeric`).

## Methods

| Name | Description |
| --- | --- |
| [expect_max](#shiny.playwright.controls.InputNumeric.expect_max) | Expect the maximum numeric value to be a specific value. |
| [expect_min](#shiny.playwright.controls.InputNumeric.expect_min) | Expect the minimum numeric value to be a specific value. |
| [expect_step](#shiny.playwright.controls.InputNumeric.expect_step) | Expect step value when incrementing/decrementing the numeric input. |

### expect_max { #shiny.playwright.controls.InputNumeric.expect_max }

`playwright.controls.InputNumeric.expect_max(value, *, timeout=None)`

Expect the maximum numeric value to be a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected maximum numeric value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_min { #shiny.playwright.controls.InputNumeric.expect_min }

`playwright.controls.InputNumeric.expect_min(value, *, timeout=None)`

Expect the minimum numeric value to be a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected minimum numeric value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_step { #shiny.playwright.controls.InputNumeric.expect_step }

`playwright.controls.InputNumeric.expect_step(value, *, timeout=None)`

Expect step value when incrementing/decrementing the numeric input.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected step value for the numeric input.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

================
File: playwright.controls.InputPassword.qmd
================
# playwright.controls.InputPassword { #shiny.playwright.controls.InputPassword }

`playwright.controls.InputPassword(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_password`).

## Methods

| Name | Description |
| --- | --- |
| [expect_width](#shiny.playwright.controls.InputPassword.expect_width) | Expect the `width` attribute of the input password to have a specific value. |

### expect_width { #shiny.playwright.controls.InputPassword.expect_width }

`playwright.controls.InputPassword.expect_width(value, *, timeout=None)`

Expect the `width` attribute of the input password to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected value of the `width` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

================
File: playwright.controls.InputRadioButtons.qmd
================
# playwright.controls.InputRadioButtons { #shiny.playwright.controls.InputRadioButtons }

`playwright.controls.InputRadioButtons(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_radio_buttons`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_choice_labels](#shiny.playwright.controls.InputRadioButtons.loc_choice_labels) | Playwright `Locator` of the labels of the radio button choices. |
| [loc_choices](#shiny.playwright.controls.InputRadioButtons.loc_choices) | Playwright `Locator` of the radio button choices. |
| [loc_selected](#shiny.playwright.controls.InputRadioButtons.loc_selected) | Playwright `Locator` of the selected radio button. |

## Methods

| Name | Description |
| --- | --- |
| [expect_choices](#shiny.playwright.controls.InputRadioButtons.expect_choices) | Expect the radio button choices. |
| [expect_selected](#shiny.playwright.controls.InputRadioButtons.expect_selected) | Expect the selected radio button. |
| [set](#shiny.playwright.controls.InputRadioButtons.set) | Set the selected radio button. |

### expect_choices { #shiny.playwright.controls.InputRadioButtons.expect_choices }

`playwright.controls.InputRadioButtons.expect_choices(value, *, timeout=None)`

Expect the radio button choices.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected choices.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### expect_selected { #shiny.playwright.controls.InputRadioButtons.expect_selected }

`playwright.controls.InputRadioButtons.expect_selected(value, *, timeout=None)`

Expect the selected radio button.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| None</span></code>

:   The expected value of the selected radio button.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the expectation. Defaults to `None`.

### set { #shiny.playwright.controls.InputRadioButtons.set }

`playwright.controls.InputRadioButtons.set(selected, *, timeout=None, **kwargs)`

Set the selected radio button.

#### Parameters

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The value of the selected radio button.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The timeout for the action. Defaults to `None`.

================
File: playwright.controls.InputSelect.qmd
================
# playwright.controls.InputSelect { #shiny.playwright.controls.InputSelect }

`playwright.controls.InputSelect(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_select`).

## Methods

| Name | Description |
| --- | --- |
| [expect_selectize](#shiny.playwright.controls.InputSelect.expect_selectize) | Expect the input select to be selectize. |

### expect_selectize { #shiny.playwright.controls.InputSelect.expect_selectize }

`playwright.controls.InputSelect.expect_selectize(value, *, timeout=None)`

Expect the input select to be selectize.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   Whether the input select is selectize.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

================
File: playwright.controls.InputSelectize.qmd
================
# playwright.controls.InputSelectize { #shiny.playwright.controls.InputSelectize }

`playwright.controls.InputSelectize(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_selectize`).

================
File: playwright.controls.InputSlider.qmd
================
# playwright.controls.InputSlider { #shiny.playwright.controls.InputSlider }

`playwright.controls.InputSlider(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_slider`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_irs_label](#shiny.playwright.controls.InputSlider.loc_irs_label) | Playwright `Locator` of the input slider label. |

## Methods

| Name | Description |
| --- | --- |
| [expect_value](#shiny.playwright.controls.InputSlider.expect_value) | Asserts that the input element has the expected value. |
| [set](#shiny.playwright.controls.InputSlider.set) | Set the value of the slider. |

### expect_value { #shiny.playwright.controls.InputSlider.expect_value }

`playwright.controls.InputSlider.expect_value(value, *, timeout=None)`

Asserts that the input element has the expected value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

### set { #shiny.playwright.controls.InputSlider.set }

`playwright.controls.InputSlider.set(value, *, max_err_values=15, timeout=None)`

Set the value of the slider.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The value to set the slider to.

<code><span class="parameter-name">max_err_values</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">15</span></code>

:   The maximum number of error values to display if the value is not found. Defaults to 15.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

================
File: playwright.controls.InputSliderRange.qmd
================
# playwright.controls.InputSliderRange { #shiny.playwright.controls.InputSliderRange }

`playwright.controls.InputSliderRange(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_slider_range`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_irs_label_from](#shiny.playwright.controls.InputSliderRange.loc_irs_label_from) | Playwright `Locator` of the input slider label for the `from` handle. |
| [loc_irs_label_to](#shiny.playwright.controls.InputSliderRange.loc_irs_label_to) | Playwright `Locator` of the input slider label for the `to` handle. |

## Methods

| Name | Description |
| --- | --- |
| [expect_value](#shiny.playwright.controls.InputSliderRange.expect_value) | Asserts that the input element has the expected value. |
| [set](#shiny.playwright.controls.InputSliderRange.set) | Set the value of the slider. |

### expect_value { #shiny.playwright.controls.InputSliderRange.expect_value }

`playwright.controls.InputSliderRange.expect_value(value, *, timeout=None)`

Asserts that the input element has the expected value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [PatternOrStr](`shiny.playwright._types.PatternOrStr`)\]</span></code>

:   The expected value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

### set { #shiny.playwright.controls.InputSliderRange.set }

`playwright.controls.InputSliderRange.set(value, *, max_err_values=15, timeout=None)`

Set the value of the slider.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`), [str](`str`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[str](`str`), [MISSING_TYPE](`shiny.types.MISSING_TYPE`)\] \| [typing](`typing`).[Tuple](`typing.Tuple`)\[[MISSING_TYPE](`shiny.types.MISSING_TYPE`), [str](`str`)\]</span></code>

:   The value to set the slider to.

<code><span class="parameter-name">max_err_values</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">15</span></code>

:   The maximum number of error values to display if the value is not found. Defaults to 15.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

================
File: playwright.controls.InputSwitch.qmd
================
# playwright.controls.InputSwitch { #shiny.playwright.controls.InputSwitch }

`playwright.controls.InputSwitch(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_switch`).

================
File: playwright.controls.InputTaskButton.qmd
================
# playwright.controls.InputTaskButton { #shiny.playwright.controls.InputTaskButton }

`playwright.controls.InputTaskButton(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_task_button`).

## Methods

| Name | Description |
| --- | --- |
| [expect_auto_reset](#shiny.playwright.controls.InputTaskButton.expect_auto_reset) | Expect the `auto-reset` attribute of the input task button to have a specific value. |
| [expect_label](#shiny.playwright.controls.InputTaskButton.expect_label) | Expect the label of the input task button to have a specific value. |
| [expect_label_busy](#shiny.playwright.controls.InputTaskButton.expect_label_busy) | Expect the label of a busy input task button to have a specific value. |
| [expect_label_ready](#shiny.playwright.controls.InputTaskButton.expect_label_ready) | Expect the label of a ready input task button to have a specific value. |
| [expect_label_state](#shiny.playwright.controls.InputTaskButton.expect_label_state) | Expect the label of the input task button to have a specific value in a specific state. |
| [expect_state](#shiny.playwright.controls.InputTaskButton.expect_state) | Expect the state of the input task button to have a specific value. |

### expect_auto_reset { #shiny.playwright.controls.InputTaskButton.expect_auto_reset }

`playwright.controls.InputTaskButton.expect_auto_reset(value, timeout=None)`

Expect the `auto-reset` attribute of the input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   The expected value of the `auto-reset` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_label { #shiny.playwright.controls.InputTaskButton.expect_label }

`playwright.controls.InputTaskButton.expect_label(value, *, timeout=None)`

Expect the label of the input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_label_busy { #shiny.playwright.controls.InputTaskButton.expect_label_busy }

`playwright.controls.InputTaskButton.expect_label_busy(value, *, timeout=None)`

Expect the label of a busy input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_label_ready { #shiny.playwright.controls.InputTaskButton.expect_label_ready }

`playwright.controls.InputTaskButton.expect_label_ready(value, *, timeout=None)`

Expect the label of a ready input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_label_state { #shiny.playwright.controls.InputTaskButton.expect_label_state }

`playwright.controls.InputTaskButton.expect_label_state(state, value, *, timeout=None)`

Expect the label of the input task button to have a specific value in a specific state.

#### Parameters

<code><span class="parameter-name">state</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The state of the input task button.

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected value of the label.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_state { #shiny.playwright.controls.InputTaskButton.expect_state }

`playwright.controls.InputTaskButton.expect_state(value, *, timeout=None)`

Expect the state of the input task button to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['ready', 'busy'\] \| [str](`str`)</span></code>

:   The expected value of the state of the input task button.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

================
File: playwright.controls.InputText.qmd
================
# playwright.controls.InputText { #shiny.playwright.controls.InputText }

`playwright.controls.InputText(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_text`).

================
File: playwright.controls.InputTextArea.qmd
================
# playwright.controls.InputTextArea { #shiny.playwright.controls.InputTextArea }

`playwright.controls.InputTextArea(self, page, id)`

Controller for [](:func:`shiny.express.ui.input_text_area`).

## Methods

| Name | Description |
| --- | --- |
| [expect_autoresize](#shiny.playwright.controls.InputTextArea.expect_autoresize) | Expect the `autoresize` attribute of the input text area to have a specific value. |
| [expect_cols](#shiny.playwright.controls.InputTextArea.expect_cols) | Expect the `cols` attribute of the input text area to have a specific value. |
| [expect_height](#shiny.playwright.controls.InputTextArea.expect_height) | Expect the `height` attribute of the input text area to have a specific value. |
| [expect_resize](#shiny.playwright.controls.InputTextArea.expect_resize) | Expect the `resize` attribute of the input text area to have a specific value. |
| [expect_rows](#shiny.playwright.controls.InputTextArea.expect_rows) | Expect the `rows` attribute of the input text area to have a specific value. |
| [expect_width](#shiny.playwright.controls.InputTextArea.expect_width) | Expect the `width` attribute of the input text area to have a specific value. |

### expect_autoresize { #shiny.playwright.controls.InputTextArea.expect_autoresize }

`playwright.controls.InputTextArea.expect_autoresize(value, *, timeout=None)`

Expect the `autoresize` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   The expected value of the `autoresize` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_cols { #shiny.playwright.controls.InputTextArea.expect_cols }

`playwright.controls.InputTextArea.expect_cols(value, *, timeout=None)`

Expect the `cols` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected value of the `cols` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_height { #shiny.playwright.controls.InputTextArea.expect_height }

`playwright.controls.InputTextArea.expect_height(value, *, timeout=None)`

Expect the `height` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected value of the `height` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_resize { #shiny.playwright.controls.InputTextArea.expect_resize }

`playwright.controls.InputTextArea.expect_resize(value, *, timeout=None)`

Expect the `resize` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Resize](`shiny.playwright.controls._controls.Resize`) \| None</span></code>

:   The expected value of the `resize` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_rows { #shiny.playwright.controls.InputTextArea.expect_rows }

`playwright.controls.InputTextArea.expect_rows(value, *, timeout=None)`

Expect the `rows` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AttrValue](`shiny.playwright._types.AttrValue`)</span></code>

:   The expected value of the `rows` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

### expect_width { #shiny.playwright.controls.InputTextArea.expect_width }

`playwright.controls.InputTextArea.expect_width(value, *, timeout=None)`

Expect the `width` attribute of the input text area to have a specific value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected value of the `width` attribute.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to be fulfilled. Defaults to `None`.

================
File: playwright.controls.NavItem.qmd
================
# playwright.controls.NavItem { #shiny.playwright.controls.NavItem }

`playwright.controls.NavItem(self, page, id, data_value)`

Controller for [](:func:`shiny.express.ui.nav_item`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.NavItem.loc) | Playwright `Locator` for the nav item. |
| [loc_container](#shiny.playwright.controls.NavItem.loc_container) | Playwright `Locator` for the nav item container. |
| [loc_content](#shiny.playwright.controls.NavItem.loc_content) | Returns the locator for the content of the nav item. |

## Methods

| Name | Description |
| --- | --- |
| [click](#shiny.playwright.controls.NavItem.click) | Clicks the nav item. |
| [expect_active](#shiny.playwright.controls.NavItem.expect_active) | Expects the nav item to be active or inactive. |
| [expect_content](#shiny.playwright.controls.NavItem.expect_content) | Expects the nav item content to have the specified text. |

### click { #shiny.playwright.controls.NavItem.click }

`playwright.controls.NavItem.click(timeout=None)`

Clicks the nav item.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the nav item to be visible and interactable. Defaults to `None`.

### expect_active { #shiny.playwright.controls.NavItem.expect_active }

`playwright.controls.NavItem.expect_active(value, *, timeout=None)`

Expects the nav item to be active or inactive.

#### Parameters

<code><span class="parameter-name">active</span></code>

:   `True` if the nav item is expected to be active, False otherwise.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_content { #shiny.playwright.controls.NavItem.expect_content }

`playwright.controls.NavItem.expect_content(value, *, timeout=None)`

Expects the nav item content to have the specified text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

================
File: playwright.controls.NavsetBar.qmd
================
# playwright.controls.NavsetBar { #shiny.playwright.controls.NavsetBar }

`playwright.controls.NavsetBar(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_bar`).

================
File: playwright.controls.NavsetCardPill.qmd
================
# playwright.controls.NavsetCardPill { #shiny.playwright.controls.NavsetCardPill }

`playwright.controls.NavsetCardPill(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_card_pill`).

================
File: playwright.controls.NavsetCardTab.qmd
================
# playwright.controls.NavsetCardTab { #shiny.playwright.controls.NavsetCardTab }

`playwright.controls.NavsetCardTab(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_card_tab`).

================
File: playwright.controls.NavsetCardUnderline.qmd
================
# playwright.controls.NavsetCardUnderline { #shiny.playwright.controls.NavsetCardUnderline }

`playwright.controls.NavsetCardUnderline(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_card_underline`).

================
File: playwright.controls.NavsetHidden.qmd
================
# playwright.controls.NavsetHidden { #shiny.playwright.controls.NavsetHidden }

`playwright.controls.NavsetHidden(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_hidden`).

================
File: playwright.controls.NavsetPill.qmd
================
# playwright.controls.NavsetPill { #shiny.playwright.controls.NavsetPill }

`playwright.controls.NavsetPill(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_pill`).

================
File: playwright.controls.NavsetPillList.qmd
================
# playwright.controls.NavsetPillList { #shiny.playwright.controls.NavsetPillList }

`playwright.controls.NavsetPillList(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_pill_list`).

================
File: playwright.controls.NavsetTab.qmd
================
# playwright.controls.NavsetTab { #shiny.playwright.controls.NavsetTab }

`playwright.controls.NavsetTab(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_tab`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.NavsetTab.loc) | Playwright `Locator` for the nav set tab. |
| [loc_container](#shiny.playwright.controls.NavsetTab.loc_container) | Playwright `Locator` for the nav set tab container. |

================
File: playwright.controls.NavsetUnderline.qmd
================
# playwright.controls.NavsetUnderline { #shiny.playwright.controls.NavsetUnderline }

`playwright.controls.NavsetUnderline(self, page, id)`

Controller for [](:func:`shiny.express.ui.navset_underline`).

================
File: playwright.controls.OutputCode.qmd
================
# playwright.controls.OutputCode { #shiny.playwright.controls.OutputCode }

`playwright.controls.OutputCode(self, page, id)`

Controller for [](:func:`shiny.express.ui.code_output`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputCode.loc) | Playwright `Locator` of the code output. |

## Methods

| Name | Description |
| --- | --- |
| [expect_has_placeholder](#shiny.playwright.controls.OutputCode.expect_has_placeholder) | Asserts that the code output has the expected placeholder. |

### expect_has_placeholder { #shiny.playwright.controls.OutputCode.expect_has_placeholder }

`playwright.controls.OutputCode.expect_has_placeholder(value=False, *, timeout=None)`

Asserts that the code output has the expected placeholder.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Whether the code output has a placeholder.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the placeholder to appear. Defaults to `None`.

================
File: playwright.controls.OutputDataFrame.qmd
================
# playwright.controls.OutputDataFrame { #shiny.playwright.controls.OutputDataFrame }

`playwright.controls.OutputDataFrame(self, page, id)`

Controller for [](:func:`shiny.express.ui.output_data_frame`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputDataFrame.loc) | Playwright `Locator` for the data frame. |
| [loc_body](#shiny.playwright.controls.OutputDataFrame.loc_body) | Playwright `Locator` for the body of the data frame table. |
| [loc_container](#shiny.playwright.controls.OutputDataFrame.loc_container) | Playwright `Locator` for the data frame container. |
| [loc_head](#shiny.playwright.controls.OutputDataFrame.loc_head) | Playwright `Locator` for the head of the data frame table. |

## Methods

| Name | Description |
| --- | --- |
| [cell_locator](#shiny.playwright.controls.OutputDataFrame.cell_locator) | Returns the locator for a specific cell in the data frame. |
| [edit_cell](#shiny.playwright.controls.OutputDataFrame.edit_cell) | Edits the cell in the data frame. |
| [expect_cell](#shiny.playwright.controls.OutputDataFrame.expect_cell) | Expects the cell in the data frame to have the specified text. |
| [expect_cell_class](#shiny.playwright.controls.OutputDataFrame.expect_cell_class) | Expects the class of the cell |
| [expect_cell_title](#shiny.playwright.controls.OutputDataFrame.expect_cell_title) | Expects the validation message of the cell in the data frame. |
| [expect_class_state](#shiny.playwright.controls.OutputDataFrame.expect_class_state) | Expects the state of the class in the data frame. |
| [expect_column_label](#shiny.playwright.controls.OutputDataFrame.expect_column_label) | Expects the text in the specified column of the data frame. |
| [expect_column_labels](#shiny.playwright.controls.OutputDataFrame.expect_column_labels) | Expects the column labels in the data frame. |
| [expect_n_col](#shiny.playwright.controls.OutputDataFrame.expect_n_col) | Expects the number of columns in the data frame. |
| [expect_n_row](#shiny.playwright.controls.OutputDataFrame.expect_n_row) | Expects the number of rows in the data frame. |
| [save_cell](#shiny.playwright.controls.OutputDataFrame.save_cell) | Saves the value of the cell in the data frame. |
| [select_rows](#shiny.playwright.controls.OutputDataFrame.select_rows) | Selects the rows in the data frame. |
| [set_column_filter](#shiny.playwright.controls.OutputDataFrame.set_column_filter) | Filters the column in the data frame. |
| [set_column_sort](#shiny.playwright.controls.OutputDataFrame.set_column_sort) | Sorts the column in the data frame. |

### cell_locator { #shiny.playwright.controls.OutputDataFrame.cell_locator }

`playwright.controls.OutputDataFrame.cell_locator(row, col)`

Returns the locator for a specific cell in the data frame.

#### Parameters

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

### edit_cell { #shiny.playwright.controls.OutputDataFrame.edit_cell }

`playwright.controls.OutputDataFrame.edit_cell(text, *, row, col, timeout=None)`

Edits the cell in the data frame.

#### Parameters

<code><span class="parameter-name">value</span></code>

:   The value to edit in the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

### expect_cell { #shiny.playwright.controls.OutputDataFrame.expect_cell }

`playwright.controls.OutputDataFrame.expect_cell(value, *, row, col, timeout=None)`

Expects the cell in the data frame to have the specified text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text in the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_cell_class { #shiny.playwright.controls.OutputDataFrame.expect_cell_class }

`playwright.controls.OutputDataFrame.expect_cell_class(value, *, row, col, timeout=None)`

Expects the class of the cell

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected class of the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_cell_title { #shiny.playwright.controls.OutputDataFrame.expect_cell_title }

`playwright.controls.OutputDataFrame.expect_cell_title(value, *, row, col, timeout=None)`

Expects the validation message of the cell in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected validation message of the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_class_state { #shiny.playwright.controls.OutputDataFrame.expect_class_state }

`playwright.controls.OutputDataFrame.expect_class_state(value, *, row, col, timeout=None)`

Expects the state of the class in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected state of the class.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_column_label { #shiny.playwright.controls.OutputDataFrame.expect_column_label }

`playwright.controls.OutputDataFrame.expect_column_label(value, *, col, timeout=None)`

Expects the text in the specified column of the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected text in the column.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_column_labels { #shiny.playwright.controls.OutputDataFrame.expect_column_labels }

`playwright.controls.OutputDataFrame.expect_column_labels(value, *, timeout=None)`

Expects the column labels in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \| None</span></code>

:   The expected column labels.

    Note: None if the column labels are expected to not exist.

<code><span class="parameter-name">edit</span></code>

:   `True` if the data frame is to be in edit mode, `False` otherwise.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_n_col { #shiny.playwright.controls.OutputDataFrame.expect_n_col }

`playwright.controls.OutputDataFrame.expect_n_col(value, *, timeout=None)`

Expects the number of columns in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The expected number of columns.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_n_row { #shiny.playwright.controls.OutputDataFrame.expect_n_row }

`playwright.controls.OutputDataFrame.expect_n_row(value, *, timeout=None)`

Expects the number of rows in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The expected number of rows.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### save_cell { #shiny.playwright.controls.OutputDataFrame.save_cell }

`playwright.controls.OutputDataFrame.save_cell(text, *, row, col, save_key, timeout=None)`

Saves the value of the cell in the data frame.

#### Parameters

<code><span class="parameter-name">text</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The key to save the value of the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number of the cell.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number of the cell.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

### select_rows { #shiny.playwright.controls.OutputDataFrame.select_rows }

`playwright.controls.OutputDataFrame.select_rows(value, *, timeout=None)`

Selects the rows in the data frame.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[list](`list`)\[[int](`int`)\]</span></code>

:   The list of row numbers to select.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

### set_column_filter { #shiny.playwright.controls.OutputDataFrame.set_column_filter }

`playwright.controls.OutputDataFrame.set_column_filter(col, *, text, timeout=None)`

Filters the column in the data frame.

#### Parameters

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number to filter.

<code><span class="parameter-name">text</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [list](`list`)\[[str](`str`)\] \| [tuple](`tuple`)\[[str](`str`), [str](`str`)\]</span></code>

:   The text to filter the column.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

### set_column_sort { #shiny.playwright.controls.OutputDataFrame.set_column_sort }

`playwright.controls.OutputDataFrame.set_column_sort(col, *, timeout=None)`

Sorts the column in the data frame.

#### Parameters

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number to sort.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the action to complete. Defaults to `None`.

================
File: playwright.controls.OutputImage.qmd
================
# playwright.controls.OutputImage { #shiny.playwright.controls.OutputImage }

`playwright.controls.OutputImage(self, page, id)`

================
File: playwright.controls.OutputPlot.qmd
================
# playwright.controls.OutputPlot { #shiny.playwright.controls.OutputPlot }

`playwright.controls.OutputPlot(self, page, id)`

Controller for [](:func:`shiny.express.ui.plot_output`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputPlot.loc) | Playwright `Locator` of the plot output. |

================
File: playwright.controls.OutputTable.qmd
================
# playwright.controls.OutputTable { #shiny.playwright.controls.OutputTable }

`playwright.controls.OutputTable(self, page, id)`

Controller for [](:func:`shiny.express.ui.table_output`).

## Methods

| Name | Description |
| --- | --- |
| [expect_cell](#shiny.playwright.controls.OutputTable.expect_cell) | Asserts that the table cell has the expected text. |
| [expect_column_labels](#shiny.playwright.controls.OutputTable.expect_column_labels) | Asserts that the table has the expected column labels. |
| [expect_column_text](#shiny.playwright.controls.OutputTable.expect_column_text) | Asserts that the column has the expected text. |
| [expect_n_col](#shiny.playwright.controls.OutputTable.expect_n_col) | Asserts that the table has the expected number of columns. |
| [expect_n_row](#shiny.playwright.controls.OutputTable.expect_n_row) | Asserts that the table has the expected number of rows. |

### expect_cell { #shiny.playwright.controls.OutputTable.expect_cell }

`playwright.controls.OutputTable.expect_cell(value, row, col, *, timeout=None)`

Asserts that the table cell has the expected text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text in the cell.

<code><span class="parameter-name">row</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The row number.

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the text to appear. Defaults to `None`.

### expect_column_labels { #shiny.playwright.controls.OutputTable.expect_column_labels }

`playwright.controls.OutputTable.expect_column_labels(value, *, timeout=None)`

Asserts that the table has the expected column labels.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`) \| None</span></code>

:   The expected column labels. If None, it asserts that the table has no column labels.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the column labels to appear. Defaults to `None`.

### expect_column_text { #shiny.playwright.controls.OutputTable.expect_column_text }

`playwright.controls.OutputTable.expect_column_text(col, value, *, timeout=None)`

Asserts that the column has the expected text.

#### Parameters

<code><span class="parameter-name">col</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The column number.

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ListPatternOrStr](`shiny.playwright._types.ListPatternOrStr`)</span></code>

:   The expected text in the column.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the text to appear. Defaults to `None`.

### expect_n_col { #shiny.playwright.controls.OutputTable.expect_n_col }

`playwright.controls.OutputTable.expect_n_col(value, *, timeout=None)`

Asserts that the table has the expected number of columns.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The expected number of columns in the table.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the table to have the expected number of columns. Defaults to `None`.

### expect_n_row { #shiny.playwright.controls.OutputTable.expect_n_row }

`playwright.controls.OutputTable.expect_n_row(value, *, timeout=None)`

Asserts that the table has the expected number of rows.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span></code>

:   The expected number of rows in the table.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the table to have the expected number of rows. Defaults to `None`.

================
File: playwright.controls.OutputText.qmd
================
# playwright.controls.OutputText { #shiny.playwright.controls.OutputText }

`playwright.controls.OutputText(self, page, id)`

Controller for [](:func:`shiny.express.ui.text_output`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputText.loc) | Playwright `Locator` of the text output. |

## Methods

| Name | Description |
| --- | --- |
| [get_value](#shiny.playwright.controls.OutputText.get_value) | Gets the text value of the output. |

### get_value { #shiny.playwright.controls.OutputText.get_value }

`playwright.controls.OutputText.get_value(timeout=None)`

Gets the text value of the output.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the value to appear. Defaults to `None`.

================
File: playwright.controls.OutputTextVerbatim.qmd
================
# playwright.controls.OutputTextVerbatim { #shiny.playwright.controls.OutputTextVerbatim }

`playwright.controls.OutputTextVerbatim(self, page, id)`

Controller for [](:func:`shiny.express.ui.text_output_verbatim`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.OutputTextVerbatim.loc) | Playwright `Locator` of the verbatim text output. |

## Methods

| Name | Description |
| --- | --- |
| [expect_has_placeholder](#shiny.playwright.controls.OutputTextVerbatim.expect_has_placeholder) | Asserts that the verbatim text output has the expected placeholder. |

### expect_has_placeholder { #shiny.playwright.controls.OutputTextVerbatim.expect_has_placeholder }

`playwright.controls.OutputTextVerbatim.expect_has_placeholder(value=False, *, timeout=None)`

Asserts that the verbatim text output has the expected placeholder.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Whether the verbatim text output has a placeholder.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the placeholder to appear. Defaults to `None`.

================
File: playwright.controls.OutputUi.qmd
================
# playwright.controls.OutputUi { #shiny.playwright.controls.OutputUi }

`playwright.controls.OutputUi(self, page, id)`

Controller for [](:func:`shiny.express.ui.ui_output`).

## Methods

| Name | Description |
| --- | --- |
| [expect_empty](#shiny.playwright.controls.OutputUi.expect_empty) | Asserts that the output is empty. |
| [expect_text](#shiny.playwright.controls.OutputUi.expect_text) | Asserts that the output has the expected text. |

### expect_empty { #shiny.playwright.controls.OutputUi.expect_empty }

`playwright.controls.OutputUi.expect_empty(value, *, timeout=None)`

Asserts that the output is empty.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   Whether the output is empty.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the output to be empty. Defaults to `None`.

### expect_text { #shiny.playwright.controls.OutputUi.expect_text }

`playwright.controls.OutputUi.expect_text(value, *, timeout=None)`

Asserts that the output has the expected text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The expected text.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the text to appear. Defaults to `None`.

================
File: playwright.controls.Popover.qmd
================
# playwright.controls.Popover { #shiny.playwright.controls.Popover }

`playwright.controls.Popover(self, page, id)`

Controller for [](:func:`shiny.express.ui.popover`).

## Attributes

| Name | Description |
| --- | --- |
| [loc_overlay_body](#shiny.playwright.controls.Popover.loc_overlay_body) | Playwright `Locator` for the popover body. |
| [loc_overlay_container](#shiny.playwright.controls.Popover.loc_overlay_container) | Playwright `Locator` for the popover container. |
| [loc_trigger](#shiny.playwright.controls.Popover.loc_trigger) | Playwright `Locator` for the trigger element that opens/closes the popover. |

## Methods

| Name | Description |
| --- | --- |
| [set](#shiny.playwright.controls.Popover.set) | Sets the state of the popover. |
| [toggle](#shiny.playwright.controls.Popover.toggle) | Toggles the state of the popover. |

### set { #shiny.playwright.controls.Popover.set }

`playwright.controls.Popover.set(open, timeout=None)`

Sets the state of the popover.

#### Parameters

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` to open the popover and `False` to close it.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the popover to be visible and interactable. Defaults to `None`.

### toggle { #shiny.playwright.controls.Popover.toggle }

`playwright.controls.Popover.toggle(timeout=None)`

Toggles the state of the popover.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the popover to be visible and interactable. Defaults to `None`.

================
File: playwright.controls.Sidebar.qmd
================
# playwright.controls.Sidebar { #shiny.playwright.controls.Sidebar }

`playwright.controls.Sidebar(self, page, id)`

Controller for func: `shiny.express.ui.sidebar`.

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.Sidebar.loc) | Playwright `Locator` for the sidebar. |
| [loc_container](#shiny.playwright.controls.Sidebar.loc_container) | Playwright `Locator` for the sidebar layout. |
| [loc_handle](#shiny.playwright.controls.Sidebar.loc_handle) | Playwright `Locator` for the open/close handle of the sidebar. |
| [loc_position](#shiny.playwright.controls.Sidebar.loc_position) | Playwright `Locator` for the position of the sidebar. |

## Methods

| Name | Description |
| --- | --- |
| [expect_handle](#shiny.playwright.controls.Sidebar.expect_handle) | Asserts that the sidebar handle exists or does not exist. |
| [expect_open](#shiny.playwright.controls.Sidebar.expect_open) | Expect the sidebar to be open or closed. |
| [expect_position](#shiny.playwright.controls.Sidebar.expect_position) | Asserts that the sidebar is in the expected position. |
| [expect_text](#shiny.playwright.controls.Sidebar.expect_text) | Asserts that the sidebar has the expected text. |
| [set](#shiny.playwright.controls.Sidebar.set) | Sets the sidebar to be open or closed. |
| [toggle](#shiny.playwright.controls.Sidebar.toggle) | Toggles the sidebar open or closed. |

### expect_handle { #shiny.playwright.controls.Sidebar.expect_handle }

`playwright.controls.Sidebar.expect_handle(exists, *, timeout=None)`

Asserts that the sidebar handle exists or does not exist.

#### Parameters

<code><span class="parameter-name">exists</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` if the sidebar open/close handle should exist, `False` otherwise.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar handle to appear. Defaults to `None`.

### expect_open { #shiny.playwright.controls.Sidebar.expect_open }

`playwright.controls.Sidebar.expect_open(value, *, timeout=None)`

Expect the sidebar to be open or closed.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` if the sidebar should be open, `False` to be closed.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar to open or close. Defaults to `None`.

### expect_position { #shiny.playwright.controls.Sidebar.expect_position }

`playwright.controls.Sidebar.expect_position(value, *, timeout=None)`

Asserts that the sidebar is in the expected position.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['left', 'right'\]</span></code>

:   The expected position of the sidebar.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar to appear. Defaults to `None`.

### expect_text { #shiny.playwright.controls.Sidebar.expect_text }

`playwright.controls.Sidebar.expect_text(value, *, timeout=None)`

Asserts that the sidebar has the expected text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text in the sidebar.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the text to appear. Defaults to `None`.

### set { #shiny.playwright.controls.Sidebar.set }

`playwright.controls.Sidebar.set(open, *, timeout=None)`

Sets the sidebar to be open or closed.

#### Parameters

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` to open the sidebar and `False` to close it.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar to open or close. Defaults to `None`.

### toggle { #shiny.playwright.controls.Sidebar.toggle }

`playwright.controls.Sidebar.toggle(timeout=None)`

Toggles the sidebar open or closed.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the sidebar to toggle. Defaults to `None`.

================
File: playwright.controls.Tooltip.qmd
================
# playwright.controls.Tooltip { #shiny.playwright.controls.Tooltip }

`playwright.controls.Tooltip(self, page, id)`

Controller for [](:func:`shiny.express.ui.tooltip`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.Tooltip.loc) | Playwright `Locator` for the tooltip content. |
| [loc_container](#shiny.playwright.controls.Tooltip.loc_container) | Playwright `Locator` for the container tooltip. |
| [loc_overlay_body](#shiny.playwright.controls.Tooltip.loc_overlay_body) | Playwright `Locator` for the overlay body. |
| [loc_overlay_container](#shiny.playwright.controls.Tooltip.loc_overlay_container) | Playwright `Locator` for the overlay container. |
| [loc_trigger](#shiny.playwright.controls.Tooltip.loc_trigger) | Playwright `Locator` for the trigger element. |

## Methods

| Name | Description |
| --- | --- |
| [set](#shiny.playwright.controls.Tooltip.set) | Sets the state of the tooltip. |
| [toggle](#shiny.playwright.controls.Tooltip.toggle) | Toggles the state of the tooltip. |

### set { #shiny.playwright.controls.Tooltip.set }

`playwright.controls.Tooltip.set(open, timeout=None)`

Sets the state of the tooltip.

#### Parameters

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span></code>

:   `True` to open the tooltip and `False` to close it.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the tooltip to be visible and interactable. Defaults to `None`.

### toggle { #shiny.playwright.controls.Tooltip.toggle }

`playwright.controls.Tooltip.toggle(timeout=None)`

Toggles the state of the tooltip.

#### Parameters

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the tooltip to be visible and interactable. Defaults to `None`.

================
File: playwright.controls.ValueBox.qmd
================
# playwright.controls.ValueBox { #shiny.playwright.controls.ValueBox }

`playwright.controls.ValueBox(self, page, id)`

Controller for [](:func:`shiny.express.ui.value_box`).

## Attributes

| Name | Description |
| --- | --- |
| [loc](#shiny.playwright.controls.ValueBox.loc) | Playwright `Locator` for the value box's value. |
| [loc_body](#shiny.playwright.controls.ValueBox.loc_body) | Playwright `Locator` for the value box body. |
| [loc_showcase](#shiny.playwright.controls.ValueBox.loc_showcase) | Playwright `Locator` for the value box showcase. |
| [loc_title](#shiny.playwright.controls.ValueBox.loc_title) | Playwright `Locator` for the value box title. |

## Methods

| Name | Description |
| --- | --- |
| [expect_body](#shiny.playwright.controls.ValueBox.expect_body) | Expects the value box body to have specific text. |
| [expect_height](#shiny.playwright.controls.ValueBox.expect_height) | Expects the value box to have a specific height. |
| [expect_title](#shiny.playwright.controls.ValueBox.expect_title) | Expects the value box title to have a specific text. |
| [expect_value](#shiny.playwright.controls.ValueBox.expect_value) | Expects the value box value to have a specific text. |

### expect_body { #shiny.playwright.controls.ValueBox.expect_body }

`playwright.controls.ValueBox.expect_body(value, *, timeout=None)`

Expects the value box body to have specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`) \| [list](`list`)\[[PatternOrStr](`shiny.playwright._types.PatternOrStr`)\]</span></code>

:   The expected text pattern or list of patterns/strings.

    Note: If testing against multiple elements, text should be an array.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_height { #shiny.playwright.controls.ValueBox.expect_height }

`playwright.controls.ValueBox.expect_height(value, *, timeout=None)`

Expects the value box to have a specific height.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[StyleValue](`shiny.playwright._types.StyleValue`)</span></code>

:   The expected height value.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_title { #shiny.playwright.controls.ValueBox.expect_title }

`playwright.controls.ValueBox.expect_title(value, *, timeout=None)`

Expects the value box title to have a specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

### expect_value { #shiny.playwright.controls.ValueBox.expect_value }

`playwright.controls.ValueBox.expect_value(value, *, timeout=None)`

Expects the value box value to have a specific text.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[PatternOrStr](`shiny.playwright._types.PatternOrStr`)</span></code>

:   The expected text pattern or string.

<code><span class="parameter-name">timeout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Timeout](`shiny.playwright._types.Timeout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum time to wait for the expectation to pass. Defaults to `None`.

================
File: playwright.expect.expect_attribute_to_have_value.qmd
================
# playwright.expect.expect_attribute_to_have_value { #shiny.playwright.expect.expect_attribute_to_have_value }

`playwright.expect.expect_attribute_to_have_value(loc, name, value, timeout=None)`

Expect an attribute to have a value. If `value` is `None`, then the attribute should not exist.

================
File: playwright.expect.expect_not_to_have_attribute.qmd
================
# playwright.expect.expect_not_to_have_attribute { #shiny.playwright.expect.expect_not_to_have_attribute }

```python
playwright.expect.expect_not_to_have_attribute(loc, name, *, timeout=None)
```

Expect that the attribute does not exist.

This method wraps Playwright&#x27;s Locator expectation `not_to_have_attribute()` and
sets the value to a regular expression that matches anything.

If you&#x27;d like to check for a specific value, use Playwright&#x27;s
`expect(loc).to_have_attribute()` method, instead.

## Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                                  | Default    |
|---------|----------------------------------------------|------------------------------------------------------------------------------|------------|
| loc     | [Locator](`playwright.sync_api.Locator`)     | The Playwright locator to check.                                             | _required_ |
| name    | [str](`str`)                                 | The attribute name that should **not** be found within the resolved locator. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the attribute to appear                         | `None`     |

================
File: playwright.expect.expect_not_to_have_class.qmd
================
# playwright.expect.expect_not_to_have_class { #shiny.playwright.expect.expect_not_to_have_class }

```python
playwright.expect.expect_not_to_have_class(loc, class_, *, timeout=None)
```

Expect a CSS class value is not found.

This method wraps Playwright&#x27;s Locator expectation [`not_to_have_class()`
method](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-not-to-have-class).
However, Playwright does not have an easy method to check for individual class
values _within_ the elements `class` value.

This method will insert the class string
value into a regex pattern to check for the class value within the `class` attribute
according to word boundaries or the start/end of the `class` string.

## Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                                               | Default    |
|---------|----------------------------------------------|---------------------------------------------------------------------------|------------|
| loc     | [Locator](`playwright.sync_api.Locator`)     | The Playwright locator to check.                                          | _required_ |
| class_  | [str](`str`)                                 | The class value that should **not** be found within the resolved locator. | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the class to disappear.                      | `None`     |

## See Also {.doc-section .doc-section-see-also}

* [](:func:`shiny.playwright.expect.expect_to_have_class`)

================
File: playwright.expect.expect_not_to_have_style.qmd
================
# playwright.expect.expect_not_to_have_style { #shiny.playwright.expect.expect_not_to_have_style }

```python
playwright.expect.expect_not_to_have_style(loc, key, *, timeout=None)
```

Expect a key within `style` attribute to not exist.

Convenience method to check if a CSS key does not exist within the `style`
attribute. The `key` is escaped within a regular expression that checks within
word boundaries or the start/end of the `style` string.

This is different than Playwright&#x27;s [`to_have_css(key, value)`
method](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css),
as that method will check for the computed style of the element. Whereas this method
will check the `style` attribute directly.

## Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                       | Default    |
|---------|----------------------------------------------|---------------------------------------------------|------------|
| loc     | [Locator](`playwright.sync_api.Locator`)     | The Playwright locator to check.                  | _required_ |
| key     | [str](`str`)                                 | The CSS key to check.                             | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the style to appear. | `None`     |

## See Also {.doc-section .doc-section-see-also}

* :func:`shiny.playwright.expect.expect_to_have_style

================
File: playwright.expect.expect_to_change.qmd
================
# playwright.expect.expect_to_change { #shiny.playwright.expect.expect_to_change }

```python
playwright.expect.expect_to_change(func, timeout_secs=10)
```

Context manager that yields when the value returned by func() changes.

Use this around code that has a side-effect of changing some state asynchronously
(such as all browser actions), to prevent moving onto the next step of the test
until this one has actually taken effect.

## Parameters {.doc-section .doc-section-parameters}

| Name         | Type                                                       | Description                                                                                                                                  | Default    |
|--------------|------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|------------|
| func         | [Callable](`typing.Callable`)\[\[\], [Any](`typing.Any`)\] | A function that returns a value. The value returned by this function is compared to the value returned by subsequent calls to this function. | _required_ |
| timeout_secs | [float](`float`)                                           | How long to wait for the value to change before raising TimeoutError.                                                                        | `10`       |

## Raises {.doc-section .doc-section-raises}

| Name   | Type                           | Description                                       |
|--------|--------------------------------|---------------------------------------------------|
|        | [TimeoutError](`TimeoutError`) | If the value does not change within timeout_secs. |

## Example {.doc-section .doc-section-example}


    with expect_to_change(lambda: page.locator("#name").value()):
        page.keyboard.send_keys("hello")

================
File: playwright.expect.expect_to_have_class.qmd
================
# playwright.expect.expect_to_have_class { #shiny.playwright.expect.expect_to_have_class }

```python
playwright.expect.expect_to_have_class(loc, class_, *, timeout=None)
```

Expect a CSS class value is found.

This method wraps Playwright&#x27;s Locator expectation [`to_have_class()`
method](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-class).
However, Playwright does not have an easy method to check for individual class
values _within_ the elements `class` value.

This method will insert the class value
into a regex pattern to check for the class value within the `class` attribute
according to word boundaries or the start/end of the `class` string.

## Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                         | Description                                       | Default    |
|---------|----------------------------------------------|---------------------------------------------------|------------|
| loc     | [Locator](`playwright.sync_api.Locator`)     | The Playwright locator to check.                  | _required_ |
| class_  | [str](`str`)                                 | The class value to find.                          | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`) | The maximum time to wait for the class to appear. | `None`     |

## See Also {.doc-section .doc-section-see-also}

* [](:func:`shiny.playwright.expect.expect_not_to_have_class`)

================
File: playwright.expect.expect_to_have_style.qmd
================
# playwright.expect.expect_to_have_style { #shiny.playwright.expect.expect_to_have_style }

```python
playwright.expect.expect_to_have_style(loc, key, value, *, timeout=None)
```

Expect the `style` attribute to have a value.

This is different than Playwright&#x27;s [`to_have_css(key, value)`
method](https://playwright.dev/python/docs/api/class-locatorassertions#locator-assertions-to-have-css),
as that method will check for the computed style of the element. Whereas this method
will check the `style` attribute directly.

## Parameters {.doc-section .doc-section-parameters}

| Name    | Type                                                   | Description                                       | Default    |
|---------|--------------------------------------------------------|---------------------------------------------------|------------|
| loc     | [Locator](`playwright.sync_api.Locator`)               | The Playwright locator to check.                  | _required_ |
| key     | [str](`str`)                                           | The CSS key to check.                             | _required_ |
| value   | [PatternOrStr](`shiny.playwright._types.PatternOrStr`) | The CSS value to check.                           | _required_ |
| timeout | [Timeout](`shiny.playwright._types.Timeout`)           | The maximum time to wait for the style to appear. | `None`     |

## See Also {.doc-section .doc-section-see-also}

* [](:func:`shiny.playwright.expect.expect_not_to_have_style`)

================
File: pytest.create_app_fixture.qmd
================
# pytest.create_app_fixture { #shiny.pytest.create_app_fixture }

```python
pytest.create_app_fixture(app, scope='module')
```

Create a fixture for a local Shiny app directory.

Creates a fixture for a local Shiny app that is not contained within the same folder. This fixture is used to start the Shiny app process and return the local URL of the app.

If the app path is located in the same directory as the test file, then `create_app_fixture()` can be skipped and `local_app` test fixture can be used instead.

## Parameters {.doc-section .doc-section-parameters}

| Name   | Type                                                                    | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | Default    |
|--------|-------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| app    | [Union](`typing.Union`)\[[PurePath](`pathlib.PurePath`), [str](`str`)\] | The path to the Shiny app file.  If `app` is a `Path` or `PurePath` instance and `Path(app).is_file()` returns `True`, then this value will be used directly. Note, `app`'s file path will be checked from where corresponding `pytest` test is collected, not necessarily where `create_app_fixture()` is called.  Otherwise, all `app` paths will be considered to be relative paths from where the test function was collected.  To be sure that your `app` path is always relative, supply a `str` value. | _required_ |
| scope  | [ScopeName](`shiny.pytest._fixture.ScopeName`)                          | The scope of the fixture.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     | `'module'` |

## Returns {.doc-section .doc-section-returns}

| Name   | Type                           | Description           |
|--------|--------------------------------|-----------------------|
|        | [fixture_func](`fixture_func`) | The fixture function. |

## Examples {.doc-section .doc-section-examples}

```python
from playwright.sync_api import Page

from shiny.playwright import controller
from shiny.pytest import create_app_fixture
from shiny.run import ShinyAppProc

# The variable name `app` MUST match the parameter name in the test function
app = create_app_fixture("relative/path/to/app.py")


def test_app_code(page: Page, app: ShinyAppProc):

    page.goto(app.url)
    # Add test code here
    ...
```

================
File: pytest.ScopeName.qmd
================
# pytest.ScopeName { #shiny.pytest.ScopeName }

`pytest.ScopeName`

Pytest fixture scopes

Fixtures are created when first requested by a test, and are destroyed based on their scope:

* `function`: the default scope, the fixture is destroyed at the end of the test.
* `class`: the fixture is destroyed during teardown of the last test in the class.
* `module`: the fixture is destroyed during teardown of the last test in the module.
* `package`: the fixture is destroyed during teardown of the last test in the package.
* `session`: the fixture is destroyed at the end of the test session.

**Note:** Pytest only caches one instance of a fixture at a time, which means that when using a parametrized fixture, pytest may invoke a fixture more than once in the given scope.

Documentation taken from [https://docs.pytest.org/en/7.1.x/how-to/fixtures.html#fixture-scopes](https://docs.pytest.org/en/7.1.x/how-to/fixtures.html#fixture-scopes)

================
File: run.run_shiny_app.qmd
================
# run.run_shiny_app { #shiny.run.run_shiny_app }

```python
run.run_shiny_app(
    app_file,
    *,
    start_attempts=3,
    port=0,
    cwd=None,
    wait_for_start=True,
    timeout_secs=30,
    bufsize=64 * 1024,
)
```

Run a Shiny app in a subprocess.

## Parameters {.doc-section .doc-section-parameters}

| Name           | Type                                                                    | Description                                                                                                                                                                                                          | Default     |
|----------------|-------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|
| app_file       | [Union](`typing.Union`)\[[str](`str`), [PurePath](`pathlib.PurePath`)\] | The path to the Shiny app file.                                                                                                                                                                                      | _required_  |
| start_attempts | [int](`int`)                                                            | Number of attempts to try and start the Shiny app. If the random port is already in use, a new random port will be chosen and another attempt will be made. If all attempts have been made, an error will be raised. | `3`         |
| port           | [int](`int`)                                                            | The port to run the app on. If 0, a random port will be chosen.                                                                                                                                                      | `0`         |
| cwd            | [Optional](`typing.Optional`)\[[str](`str`)\]                           | The working directory to run the app in.                                                                                                                                                                             | `None`      |
| wait_for_start | [bool](`bool`)                                                          | If True, wait for the app to become ready before returning.                                                                                                                                                          | `True`      |
| timeout_secs   | [float](`float`)                                                        | The maximum number of seconds to wait for the app to become ready.                                                                                                                                                   | `30`        |
| bufsize        | [int](`int`)                                                            | The buffer size to use for stdout and stderr.                                                                                                                                                                        | `64 * 1024` |

## Returns {.doc-section .doc-section-returns}

| Name   | Type                                          | Description                                                                          |
|--------|-----------------------------------------------|--------------------------------------------------------------------------------------|
|        | [ShinyAppProc](`shiny.run._run.ShinyAppProc`) | A [](:class:`shiny.run.ShinyAppProc`) object representing the running Shiny app process. |

================
File: run.ShinyAppProc.qmd
================
# run.ShinyAppProc { #shiny.run.ShinyAppProc }

```python
run.ShinyAppProc(self, proc, port, *, app_file)
```

Class that represents a running Shiny app process.

This class is a context manager that can be used to run a Shiny app in a subprocess. It provides a way to interact
with the app and terminate it when it is no longer needed.

## Attributes

| Name | Description |
| --- | --- |
| [file](#shiny.run.ShinyAppProc.file) | The path to the Shiny app file. |
| [port](#shiny.run.ShinyAppProc.port) | The port that the Shiny app is running on. |
| [proc](#shiny.run.ShinyAppProc.proc) | The subprocess object that represents the running Shiny app. |
| [stderr](#shiny.run.ShinyAppProc.stderr) | The standard error stream of the Shiny app subprocess. |
| [stdout](#shiny.run.ShinyAppProc.stdout) | The standard output stream of the Shiny app subprocess. |
| [url](#shiny.run.ShinyAppProc.url) | The URL that the Shiny app is running on. |

## Methods

| Name | Description |
| --- | --- |
| [close](#shiny.run.ShinyAppProc.close) | Closes the connection and terminates the process. |
| [wait_until_ready](#shiny.run.ShinyAppProc.wait_until_ready) | Waits until the shiny app is ready to serve requests. |

### close { #shiny.run.ShinyAppProc.close }

```python
run.ShinyAppProc.close()
```

Closes the connection and terminates the process.

This method is responsible for closing the connection and terminating the process associated with it.

### wait_until_ready { #shiny.run.ShinyAppProc.wait_until_ready }

```python
run.ShinyAppProc.wait_until_ready(timeout_secs)
```

Waits until the shiny app is ready to serve requests.

#### Parameters {.doc-section .doc-section-parameters}

| Name         | Type             | Description                                                        | Default    |
|--------------|------------------|--------------------------------------------------------------------|------------|
| timeout_secs | [float](`float`) | The maximum number of seconds to wait for the app to become ready. | _required_ |

#### Raises {.doc-section .doc-section-raises}

| Name   | Type                                 | Description                                                          |
|--------|--------------------------------------|----------------------------------------------------------------------|
|        | [ConnectionError](`ConnectionError`) | If there is an error while starting the shiny app.                   |
|        | [TimeoutError](`TimeoutError`)       | If the shiny app does not become ready within the specified timeout. |

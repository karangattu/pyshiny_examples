{
  "chat": {
    "core": "from shiny import App, ui\n\napp_ui = ui.page_fillable(\n    ui.panel_title(\"Hello Shiny Chat\"),\n    ui.chat_ui(\"chat\"),  # <<\n    fillable_mobile=True,\n)\n\n\ndef server(input):\n    # Create a chat instance and display it\n    chat = ui.Chat(id=\"chat\")  # <<\n\n    # Define a callback to run when the user submits a message\n    @chat.on_user_submit  # <<\n    async def _():  # <<\n        # Simply echo the user's input back to them\n        await chat.append_message(f\"You said: {chat.user_input()}\")  # <<\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny.express import ui\n\nui.page_opts(\n    title=\"Hello Shiny Chat\",\n    fillable=True,\n    fillable_mobile=True,\n)\n\n# Create a chat instance and display it\nchat = ui.Chat(id=\"chat\")  # <<\nchat.ui()  # <<\n\n\n# Define a callback to run when the user submits a message\n@chat.on_user_submit  # <<\nasync def _():  # <<\n    # Simply echo the user's input back to them\n    await chat.append_message(f\"You said: {chat.user_input()}\")  # <<\n"
  },
  "modal": {
    "core": "from shiny import App, reactive, ui\n\napp_ui = ui.page_fixed(\n    ui.input_action_button(\"show\", \"Show modal dialog\"),\n)\n\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        m = ui.modal(  # <<\n            \"This is a somewhat important message.\",  # <<\n            title=\"Somewhat important message\",  # <<\n            easy_close=True,  # <<\n        )  # <<\n        ui.modal_show(m)  # <<\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import reactive\nfrom shiny.express import ui, input\n\nui.input_action_button(\"show\", \"Show modal dialog\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_important_message():\n    m = ui.modal(  # <<\n        \"This is a somewhat important message.\",  # <<\n        easy_close=True,  # <<\n        footer=None,  # <<\n    )  # <<\n    ui.modal_show(m)\n"
  },
  "notifications": {
    "core": "from shiny import App, reactive, ui\n\ntypes = [\"default\", \"message\", \"warning\", \"error\"]\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(\"type\", \"Notification Type\", types, inline=True),\n    ui.input_action_button(\"show\", \"Show Notification\"),\n)\n\n\ndef server(input, output, session):\n    @reactive.effect\n    @reactive.event(input.show)\n    def _():\n        type_txt = \"notification\" if input.type() == \"default\" else input.type()\n\n        ui.notification_show(\n            f\"This {type_txt} will disappear after 2 seconds.\",\n            type=input.type(),\n            duration=2,\n        )\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import reactive\nfrom shiny.express import input, ui\n\ntypes = [\"default\", \"message\", \"warning\", \"error\"]\n\nui.input_radio_buttons(\"type\", \"Notification Type\", types, inline=True)\nui.input_action_button(\"show\", \"Show Notification\")\n\n\n@reactive.effect\n@reactive.event(input.show)\ndef show_notification():\n    type_txt = \"notification\" if input.type() == \"default\" else input.type()\n    ui.notification_show(\n        f\"This {type_txt} will disappear after 2 seconds.\",\n        type=input.type(),\n        duration=2,\n    )\n"
  },
  "progress-bar": {
    "core": "import asyncio\n\nfrom shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"button\", \"Compute\"),\n    ui.output_ui(\"compute\"),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    @reactive.event(input.button)\n    async def compute():\n        with ui.Progress(min=1, max=15) as p:\n            p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n            for i in range(1, 15):\n                p.set(i, message=\"Computing\")\n                await asyncio.sleep(0.1)\n\n        return \"Done computing!\"\n\n\napp = App(app_ui, server)\n",
    "express": "import asyncio\n\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.input_action_button(\"do_compute\", \"Compute\")\n\n\n@render.ui\n@reactive.event(input.do_compute)\nasync def compute():\n    with ui.Progress(min=1, max=15) as p:\n        p.set(message=\"Calculation in progress\", detail=\"This may take a while...\")\n\n        for i in range(1, 15):\n            p.set(i, message=\"Computing\")\n            await asyncio.sleep(0.1)\n\n    return \"Done computing!\"\n"
  },
  "tooltips": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.tooltip(  # <<\n        ui.input_action_button(\"btn\", \"A button with a tooltip\"),\n        \"A message\",  # <<\n        id=\"btn_tooltip\",  # <<\n        placement=\"right\",  # <<\n    ),\n    ui.output_text_verbatim(\"text\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def text():\n        return f\"Tooltip state: {input.btn_tooltip()}\"  # <<\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\nwith ui.tooltip(id=\"btn_tooltip\", placement=\"right\"):  # <<\n    ui.input_action_button(\"btn\", \"A button with a tooltip\")  # <<\n    \"The tooltip message\"  # <<\n\n\n@render.text\ndef btn_tooltip_state():\n    return f\"Tooltip state: {input.btn_tooltip()}\"  # <<\n"
  },
  "action-button": {
    "core": "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button(\"action_button\", \"Action\"),  # <<\n    ui.output_text(\"counter\"),\n)\n\n\ndef server(input, output, session):\n    @render.text()\n    @reactive.event(input.action_button)\n    def counter():\n        return f\"{input.action_button()}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import reactive, render\nfrom shiny.express import input, ui\n\n\nui.input_action_button(\"action_button\", \"Action\")  # <<\n\n\n@render.text()\n@reactive.event(input.action_button)\ndef counter():\n    return f\"{input.action_button()}\"\n"
  },
  "action-link": {
    "core": "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_link(\"action_link\", \"Increase Number\"),  # <<\n    ui.output_text(\"counter\"),\n)\n\n\ndef server(input, output, session):\n    count = reactive.value(0)\n\n    @reactive.effect\n    @reactive.event(input.action_link)  # <<\n    def _():\n        count.set(count() + 1)\n\n    @render.text()\n    def counter():\n        return f\"{count()}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import reactive\nfrom shiny.express import input, render, ui\n\nui.input_action_link(\"action_link\", \"Increase Number\")  # <<\n\n\ncount = reactive.value(0)\n\n\n@reactive.effect\n@reactive.event(input.action_link)\ndef _():\n    count.set(count() + 1)\n\n\n@render.text()\ndef counter():\n    return f\"{count()}\"\n"
  },
  "checkbox": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"checkbox\", \"Checkbox\", False),  # <<\n    ui.output_ui(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.checkbox()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\nui.input_checkbox(\"checkbox\", \"Checkbox\", False)  # <<\n\n\n@render.ui\ndef value():\n    return input.checkbox()\n"
  },
  "checkbox-group": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox_group(  # <<\n        \"checkbox_group\",  # <<\n        \"Checkbox group\",  # <<\n        {  # <<\n            \"a\": \"A\",  # <<\n            \"b\": \"B\",  # <<\n            \"c\": \"C\",  # <<\n        },  # <<\n    ),  # <<\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return \", \".join(input.checkbox_group())\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_checkbox_group(  # <<\n    \"checkbox_group\",  # <<\n    \"Checkbox group\",  # <<\n    {  # <<\n        \"a\": \"A\",  # <<\n        \"b\": \"B\",  # <<\n        \"c\": \"C\",  # <<\n    },  # <<\n)  # <<\n\n\n@render.text\ndef value():\n    return \", \".join(input.checkbox_group())\n"
  },
  "dark-mode": {
    "core": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_dark_mode() # <<\n)\n\ndef server(input, output, session):\n    pass\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_dark_mode() # <<\n"
  },
  "date-range-selector": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date_range(\"daterange\", \"Date range\", start=\"2020-01-01\"),  # <<\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.daterange()[0]} to {input.daterange()[1]}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_date_range(\"daterange\", \"Date range\", start=\"2020-01-01\")  # <<\n\n\n@render.text\ndef value():\n    return f\"{input.daterange()[0]} to {input.daterange()[1]}\"\n"
  },
  "date-selector": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_date(\"date\", \"Date\"),  # <<\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.date()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_date(\"date\", \"Date\")  # <<\n\n\n@render.text\ndef value():\n    return input.date()\n"
  },
  "numeric-input": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric(\"numeric\", \"Numeric input\", 1, min=1, max=10),  # <<\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.numeric()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_numeric(\"numeric\", \"Numeric input\", 1, min=1, max=10)  # <<\n\n\n@render.text\ndef value():\n    return input.numeric()\n"
  },
  "password-field": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_password(\"password\", \"Password\", \"mypassword1\"),  # <<\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.password()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_password(\"password\", \"Password\", \"mypassword1\")  # <<\n\n\n@render.text\ndef value():\n    return input.password()\n"
  },
  "radio-buttons": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_radio_buttons(  # <<\n        \"radio\",  # <<\n        \"Radio buttons\",  # <<\n        {\"1\": \"Option 1\", \"2\": \"Option 2\", \"3\": \"Option 3\"},  # <<\n    ),  # <<\n    ui.output_ui(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.radio()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_radio_buttons(  # <<\n    \"radio\",  # <<\n    \"Radio buttons\",  # <<\n    {\"1\": \"Option 1\", \"2\": \"Option 2\", \"3\": \"Option 3\"},  # <<\n)  # <<\n\n\n@render.ui\ndef value():\n    return input.radio()\n"
  },
  "select-multiple": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_select(  # <<\n        \"select\",  # <<\n        \"Select options below:\",  # <<\n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  # <<\n        multiple=True,  # <<\n    ),  # <<\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_select(  # <<\n    \"select\",  # <<\n    \"Select options below:\",  # <<\n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  # <<\n    multiple=True,  # <<\n)  # <<\n\n\n@render.text\ndef value():\n    return f\"{input.select()}\"\n"
  },
  "select-single": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fixed(\n    ui.input_select(  # <<\n        \"select\",  # <<\n        \"Select an option below:\",  # <<\n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  # <<\n    ),  # <<\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.select()}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_select(  # <<\n    \"select\",  # <<\n    \"Select an option below:\",  # <<\n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  # <<\n)  # <<\n\n\n@render.text\ndef value():\n    return f\"{input.select()}\"\n"
  },
  "selectize-multiple": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  # <<\n        \"selectize\",  # <<\n        \"Select options below:\",  # <<\n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  # <<\n        multiple=True,  # <<\n    ),  # <<\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_selectize(  # <<\n    \"selectize\",  # <<\n    \"Select options below:\",  # <<\n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  # <<\n    multiple=True,  # <<\n)  # <<\n\n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"\n"
  },
  "selectize-single": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(  # <<\n        \"selectize\",  # <<\n        \"Select an option below:\",  # <<\n        {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  # <<\n    ),  # <<\n    ui.output_text(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.selectize()}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_selectize(  # <<\n    \"selectize\",  # <<\n    \"Select an option below:\",  # <<\n    {\"1A\": \"Choice 1A\", \"1B\": \"Choice 1B\", \"1C\": \"Choice 1C\"},  # <<\n)  # <<\n\n\n@render.text\ndef value():\n    return f\"{input.selectize()}\"\n"
  },
  "slider": {
    "core": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"Slider\", 0, 100, 50),  # <<\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\n(ui.input_slider(\"slider\", \"Slider\", 0, 100, 50),)  # <<\n\n\n@render.text\ndef value():\n    return f\"{input.slider()}\"\n"
  },
  "slider-range": {
    "core": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"slider\", \"Slider\", min=0, max=100, value=[35, 65]),  # <<\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return f\"{input.slider()}\"\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_slider(\"slider\", \"Slider\", min=0, max=100, value=[35, 65])  # <<\n\n\n@render.text\ndef value():\n    return f\"{input.slider()}\"\n"
  },
  "switch": {
    "core": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"switch\", \"Switch\", False),  # <<\n    ui.output_ui(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.ui\n    def value():\n        return input.switch()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_switch(\"switch\", \"Switch\", False)  # <<\n\n\n@render.ui\ndef value():\n    return input.switch()\n"
  },
  "text-area": {
    "core": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text_area(\"textarea\", \"Text input\", \"Hello World\"),  # <<\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.textarea()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\n(ui.input_text_area(\"textarea\", \"Text input\", \"Hello World\"),)  # <<\n\n\n@render.text\ndef value():\n    return input.textarea()\n"
  },
  "text-box": {
    "core": "from shiny import ui, render, App\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"text\", \"Text input\", \"Enter text...\"),  # <<\n    ui.output_text_verbatim(\"value\"),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def value():\n        return input.text()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\n\nui.input_text(\"text\", \"Text input\", \"Enter text...\")  # <<\n\n\n@render.text\ndef value():\n    return input.text()\n"
  },
  "data-grid": {
    "core": "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render.data_frame  # <<\n    def penguins_df():\n        return render.DataGrid(penguins)  # <<\n\n\napp = App(app_ui, server)\n",
    "express": "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\n@render.data_frame  # <<\ndef penguins_df():\n    return render.DataGrid(penguins)  # <<\n"
  },
  "data-table": {
    "core": "from palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Palmer Penguins\"),\n    ui.output_data_frame(\"penguins_df\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render.data_frame  # <<\n    def penguins_df():\n        return render.DataTable(penguins)  # <<\n\n\napp = App(app_ui, server)\n",
    "express": "from palmerpenguins import load_penguins\nfrom shiny.express import render, ui\n\npenguins = load_penguins()\n\nui.h2(\"Palmer Penguins\")\n\n\n@render.data_frame  # <<\ndef penguins_df():\n    return render.DataTable(penguins)  # <<\n"
  },
  "image": {
    "core": "from pathlib import Path\n\nfrom shiny import App, render, ui\n\nhere = Path(__file__).parent\n\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show\", \"Show image?\", value=True),\n    ui.output_image(\"image\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render.image  # <<\n    def image():\n        img = {\"src\": here / \"shiny.png\", \"width\": \"100px\"}  # <<\n        return img if input.show() else None\n\n\napp = App(app_ui, server)\n",
    "express": "from pathlib import Path\n\nfrom shiny import render\nfrom shiny.express import input, ui\n\nhere = Path(__file__).parent\n\nui.input_checkbox(\"show\", \"Show image?\", value=True)\n\n\n@render.image  # <<\ndef image():\n    img = {\"src\": here / \"shiny.png\", \"width\": \"100px\"}  # <<\n    return img if input.show() else None\n"
  },
  "map-ipyleaflet": {
    "core": "from ipyleaflet import Map  # <<\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  # <<\n\napp_ui = ui.page_fluid(output_widget(\"map\"))  # <<\n\n\ndef server(input, output, session):\n    @render_widget  # <<\n    def map():\n        return Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  # <<\n\n\napp = App(app_ui, server)\n",
    "express": "from ipyleaflet import Map  # <<\nfrom shiny.express import ui\nfrom shinywidgets import render_widget  # <<\n\nui.h2(\"An ipyleaflet Map\")\n\n\n@render_widget  # <<\ndef map():\n    return Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  # <<\n"
  },
  "plot-matplotlib": {
    "core": "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20),\n    ui.output_plot(\"plot\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render.plot(alt=\"A histogram\")  # <<\n    def plot():  # <<\n        df = load_penguins()\n        mass = df[\"body_mass_g\"]\n\n        fig, ax = plt.subplots()\n        ax.hist(mass, input.n(), density=True)\n        ax.set_title(\"Palmer Penguin Masses\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Density\")\n\n        return fig  # <<\n\n\napp = App(app_ui, server, debug=True)\n",
    "express": "import matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom shiny import render\nfrom shiny.express import input, ui\n\nui.input_slider(\"n\", \"Number of bins\", 0, 100, 20)\n\n\n@render.plot(alt=\"A histogram\")  # <<\ndef plot():  # <<\n    df = load_penguins()\n    mass = df[\"body_mass_g\"]\n\n    fig, ax = plt.subplots()\n    ax.hist(mass, input.n(), density=True)\n    ax.set_title(\"Palmer Penguin Masses\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Density\")\n\n    return fig  # <<\n"
  },
  "plot-plotly": {
    "core": "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui\nfrom shinywidgets import output_widget, render_widget  # <<\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    output_widget(\"plot\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render_widget  # <<\n    def plot():  # <<\n        scatterplot = px.histogram(\n            data_frame=penguins,\n            x=\"body_mass_g\",\n            nbins=input.n(),\n        ).update_layout(\n            title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n            yaxis_title=\"Count\",\n            xaxis_title=\"Body Mass (g)\",\n        )\n\n        return scatterplot  # <<\n\n\napp = App(app_ui, server)\n",
    "express": "import plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui\nfrom shinywidgets import render_widget  # <<\n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n\n@render_widget  # <<\ndef plot():  # <<\n    scatterplot = px.histogram(\n        data_frame=penguins,\n        x=\"body_mass_g\",\n        nbins=input.n(),\n    ).update_layout(\n        title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n        yaxis_title=\"Count\",\n        xaxis_title=\"Body Mass (g)\",\n    )\n\n    return scatterplot  # <<\n"
  },
  "plot-seaborn": {
    "core": "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import App, render, ui\n\npenguins = load_penguins()\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"Number of bins\", 1, 100, 20),\n    ui.output_plot(\"plot\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  # <<\n    def plot():  # <<\n        ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  # <<\n        ax.set_title(\"Palmer Penguins\")\n        ax.set_xlabel(\"Mass (g)\")\n        ax.set_ylabel(\"Count\")\n        return ax  # <<\n\n\napp = App(app_ui, server, debug=True)\n",
    "express": "import seaborn as sns\nfrom palmerpenguins import load_penguins\nfrom shiny import render\nfrom shiny.express import input, ui\n\npenguins = load_penguins()\n\nui.input_slider(\"n\", \"Number of bins\", 1, 100, 20)\n\n\n@render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  # <<\ndef plot():  # <<\n    ax = sns.histplot(data=penguins, x=\"body_mass_g\", bins=input.n())  # <<\n    ax.set_title(\"Palmer Penguins\")\n    ax.set_xlabel(\"Mass (g)\")\n    ax.set_ylabel(\"Count\")\n    return ax  # <<\n"
  },
  "text": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    \"You entered:\",\n    ui.output_text_verbatim(\"text\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render.text  # <<\n    def text():\n        return input.Text()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\nui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\")\n\"You entered:\"\n\n\n@render.text  # <<\ndef text():\n    return input.Text()\n"
  },
  "ui": {
    "core": "from shiny import App, reactive, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_switch(\"show_slider\", \"Show slider\", True),\n    ui.output_ui(\"ui_slider\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render.ui  # <<\n    @reactive.event(input.show_slider)  # <<\n    def ui_slider():  # <<\n        if input.show_slider():\n            value = input.slider() if \"slider\" in input else 5\n            return ui.input_slider(\n                \"slider\", \"Choose a number\", min=1, max=10, value=value\n            )\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\nui.input_switch(\"show_slider\", \"Show slider\", True)\n\n\n@render.express  # <<\ndef ui_slider():  # <<\n    if input.show_slider():\n        value = input.slider() if \"slider\" in input else 5\n        ui.input_slider(\"slider\", \"Choose a number\", min=1, max=10, value=value)\n"
  },
  "value-box": {
    "core": "from shiny import App, ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\napp_ui = ui.page_fluid(\n    ui.value_box(\n        \"KPI Title\",\n        \"$1 Billion Dollars\",\n        \"Up 30% VS PREVIOUS 30 DAYS\",\n        showcase=piggy_bank,\n        theme=\"bg-gradient-indigo-purple\",\n    ),\n)\n\napp = App(app_ui, server=None)\n",
    "express": "from shiny.express import ui\n\n# From https://icons.getbootstrap.com/icons/piggy-bank/\npiggy_bank = ui.HTML(\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" class=\"bi bi-piggy-bank \" style=\"fill:currentColor;height:100%;\" aria-hidden=\"true\" role=\"img\" ><path d=\"M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z\"></path>\\n<path fill-rule=\"evenodd\" d=\"M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z\"></path></svg>'\n)\n\nwith ui.value_box(showcase=piggy_bank, theme=\"bg-gradient-indigo-purple\"):\n    \"KPI Title\"\n    \"$1 Billion Dollars\"\n    \"Up 30% VS PREVIOUS 30 DAYS\"\n"
  },
  "verbatim-text": {
    "core": "from shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\"),\n    ui.output_text_verbatim(\"text\"),  # <<\n)\n\n\ndef server(input, output, session):\n    @render.text  # <<\n    def text():\n        return input.Text()\n\n\napp = App(app_ui, server)\n",
    "express": "from shiny import render\nfrom shiny.express import input, ui\n\nui.input_text(\"Text\", \"Enter text\", \"Hello Shiny\")\n\n\n@render.text  # <<\ndef text():\n    return input.Text()\n"
  }
}

{
    "as_css_unit": "def as_css_unit(value: None | CssUnit) -> None | str:",
    "as_css_padding": "def as_css_padding(padding: CssUnit | list[CssUnit] | None) -> str | None:",
    "output_data_frame": "def output_data_frame(id: str) -> Tag:",
    "as_fillable_container": "def as_fillable_container(\n    tag: TagT,\n) -> TagT:",
    "as_fill_item": "def as_fill_item(\n    tag: TagT,\n) -> TagT:",
    "remove_all_fill": "def remove_all_fill(\n    tag: TagT,\n) -> TagT:",
    "is_fillable_container": "def is_fillable_container(\n    tag: object,\n) -> bool:",
    "is_fill_item": "def is_fill_item(tag: object) -> bool:",
    "accordion": "def accordion(\n    *args: AccordionPanel | TagAttrs,\n    id: Optional[str] = None,\n    open: Optional[bool | str | list[str]] = None,\n    multiple: bool = True,\n    class_: Optional[str] = None,\n    width: Optional[CssUnit] = None,\n    height: Optional[CssUnit] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "accordion_panel": "def accordion_panel(\n    title: TagChild,\n    *args: TagChild | TagAttrs,\n    value: Optional[str] | MISSING_TYPE = MISSING,\n    icon: Optional[TagChild] = None,\n    **kwargs: TagAttrValue,\n) -> AccordionPanel:",
    "update_accordion": "def update_accordion(\n    id: str,\n    *,\n    show: bool | str | list[str],\n    session: Optional[Session] = None,\n) -> None:",
    "insert_accordion_panel": "def insert_accordion_panel(\n    id: str,\n    panel: AccordionPanel,\n    target: Optional[str] = None,\n    position: Literal[\"after\", \"before\"] = \"after\",\n    session: Optional[Session] = None,\n) -> None:",
    "remove_accordion_panel": "def remove_accordion_panel(\n    id: str,\n    target: str | list[str],\n    session: Optional[Session] = None,\n) -> None:",
    "update_accordion_panel": "def update_accordion_panel(\n    id: str,\n    target: str,\n    *body: TagChild,\n    title: TagChild | None | MISSING_TYPE = MISSING,\n    value: str | None | MISSING_TYPE = MISSING,\n    icon: TagChild | None | MISSING_TYPE = MISSING,\n    show: Optional[bool] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "row": "def row(*args: TagChild | TagAttrs, **kwargs: TagAttrValue) -> Tag:",
    "column": "def column(\n    width: int, *args: TagChild | TagAttrs, offset: int = 0, **kwargs: TagAttrValue\n) -> Tag:",
    "panel_well": "def panel_well(*args: TagChild | TagAttrs, **kwargs: TagAttrValue) -> Tag:",
    "panel_conditional": "def panel_conditional(\n    condition: str,\n    *args: TagChild | TagAttrs,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "panel_title": "def panel_title(\n    title: str | Tag | TagList, window_title: str | MISSING_TYPE = MISSING\n) -> TagList:",
    "panel_fixed": "def panel_fixed(\n    *args: TagChild | TagAttrs,\n    top: Optional[str] = None,\n    left: Optional[str] = None,\n    right: Optional[str] = None,\n    bottom: Optional[str] = None,\n    width: Optional[str] = None,\n    height: Optional[str] = None,\n    draggable: bool = False,\n    cursor: Literal[\"auto\", \"move\", \"default\", \"inherit\"] = \"auto\",\n    **kwargs: TagAttrValue,\n) -> TagList:",
    "panel_absolute": "def panel_absolute(\n    *args: TagChild | TagAttrs,\n    top: Optional[str] = None,\n    left: Optional[str] = None,\n    right: Optional[str] = None,\n    bottom: Optional[str] = None,\n    width: Optional[str] = None,\n    height: Optional[str] = None,\n    draggable: bool = False,\n    fixed: bool = False,\n    cursor: Literal[\"auto\", \"move\", \"default\", \"inherit\"] = \"auto\",\n    **kwargs: TagAttrValue,\n) -> TagList:",
    "help_text": "def help_text(*args: TagChild | TagAttrs, **kwargs: TagAttrValue) -> Tag:",
    "card": "def card(\n    *args: TagChild | TagAttrs | CardItem,\n    full_screen: bool = False,\n    height: Optional[CssUnit] = None,\n    max_height: Optional[CssUnit] = None,\n    min_height: Optional[CssUnit] = None,\n    fill: bool = True,\n    class_: Optional[str] = None,\n    id: Optional[str] = None,\n    # wrapper: WrapperCallable | None | MISSING_TYPE = MISSING,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "_card_impl": "def _card_impl(\n    *args: TagChild | TagAttrs | CardItem,\n    full_screen: bool = False,\n    height: Optional[CssUnit] = None,\n    max_height: Optional[CssUnit] = None,\n    min_height: Optional[CssUnit] = None,\n    fill: bool = True,\n    class_: Optional[str] = None,\n    id: Optional[str] = None,\n    wrapper: WrapperCallable | None | MISSING_TYPE = MISSING,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "card_body": "def card_body(\n    *args: TagChild | TagAttrs,\n    fillable: bool = True,\n    min_height: Optional[CssUnit] = None,\n    max_height: Optional[CssUnit] = None,\n    max_height_full_screen: Optional[CssUnit] | MISSING_TYPE = MISSING,\n    height: Optional[CssUnit] = None,\n    padding: Optional[CssUnit | list[CssUnit]] = None,\n    gap: Optional[CssUnit] = None,\n    fill: bool = True,\n    class_: Optional[str] = None,\n    **kwargs: TagAttrValue,\n) -> CardItem:",
    "card_header": "def card_header(\n    *args: TagChild | TagAttrs,\n    container: TagFunction = tags.div,\n    **kwargs: TagAttrValue,\n) -> CardItem:",
    "card_footer": "def card_footer(\n    *args: TagChild | TagAttrs,\n    **kwargs: TagAttrValue,\n) -> CardItem:",
    "register_custom_normalizer": "def register_custom_normalizer(\n    provider: str, normalizer: BaseMessageNormalizer, force: bool = False\n) -> None:",
    "chat_ui": "def chat_ui(\n    id: str,\n    *,\n    messages: Optional[Sequence[TagChild | ChatMessageDict]] = None,\n    placeholder: str = \"Enter a message...\",\n    width: CssUnit = \"min(680px, 100%)\",\n    height: CssUnit = \"auto\",\n    fill: bool = True,\n    icon_assistant: HTML | Tag | TagList | None = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "download_button": "def download_button(\n    id: str,\n    label: TagChild,\n    *,\n    icon: TagChild = None,\n    width: Optional[str] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "download_link": "def download_link(\n    id: str,\n    label: TagChild,\n    *,\n    icon: TagChild = None,\n    width: Optional[str] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "include_js": "def include_js(\n    path: Path | str,\n    *,\n    method: Literal[\"link\", \"link_files\", \"inline\"] = \"link\",\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "include_css": "def include_css(\n    path: Path | str, *, method: Literal[\"link\", \"link_files\", \"inline\"] = \"link\"\n) -> Tag:",
    "hash_deterministic": "def hash_deterministic(s: str) -> str:",
    "input_action_button": "def input_action_button(\n    id: str,\n    label: TagChild,\n    *,\n    icon: TagChild = None,\n    width: Optional[str] = None,\n    disabled: bool = False,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "input_action_link": "def input_action_link(\n    id: str,\n    label: TagChild,\n    *,\n    icon: TagChild = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "input_checkbox": "def input_checkbox(\n    id: str, label: TagChild, value: bool = False, *, width: Optional[str] = None\n) -> Tag:",
    "input_switch": "def input_switch(\n    id: str, label: TagChild, value: bool = False, *, width: Optional[str] = None\n) -> Tag:",
    "input_checkbox_group": "def input_checkbox_group(\n    id: str,\n    label: TagChild,\n    choices: ChoicesArg,\n    *,\n    selected: Optional[str | list[str]] = None,\n    inline: bool = False,\n    width: Optional[str] = None,\n) -> Tag:",
    "input_radio_buttons": "def input_radio_buttons(\n    id: str,\n    label: TagChild,\n    choices: ChoicesArg,\n    *,\n    selected: Optional[str] = None,\n    inline: bool = False,\n    width: Optional[str] = None,\n) -> Tag:",
    "input_dark_mode": "def input_dark_mode(\n    *,\n    id: Optional[str] = None,\n    mode: Optional[BootstrapColorMode] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "input_date": "def input_date(\n    id: str,\n    label: TagChild,\n    *,\n    value: Optional[date | str] = None,\n    min: Optional[date | str] = None,\n    max: Optional[date | str] = None,\n    format: str = \"yyyy-mm-dd\",\n    startview: str = \"month\",\n    weekstart: int = 0,\n    language: str = \"en\",\n    width: Optional[str] = None,\n    autoclose: bool = True,\n    datesdisabled: Optional[list[str]] = None,\n    daysofweekdisabled: Optional[list[int]] = None,\n) -> Tag:",
    "input_date_range": "def input_date_range(\n    id: str,\n    label: TagChild,\n    *,\n    start: Optional[date | str] = None,\n    end: Optional[date | str] = None,\n    min: Optional[date | str] = None,\n    max: Optional[date | str] = None,\n    format: str = \"yyyy-mm-dd\",\n    startview: str = \"month\",\n    weekstart: int = 0,\n    language: str = \"en\",\n    separator: str = \" to \",\n    width: Optional[str] = None,\n    autoclose: bool = True,\n) -> Tag:",
    "input_file": "def input_file(\n    id: str,\n    label: TagChild,\n    *,\n    multiple: bool = False,\n    accept: Optional[str | list[str]] = None,\n    width: Optional[str] = None,\n    button_label: str = \"Browse...\",\n    placeholder: str = \"No file selected\",\n    capture: Optional[Literal[\"environment\", \"user\"]] = None,\n) -> Tag:",
    "input_numeric": "def input_numeric(\n    id: str,\n    label: TagChild,\n    value: float,\n    *,\n    min: Optional[float] = None,\n    max: Optional[float] = None,\n    step: Optional[float] = None,\n    width: Optional[str] = None,\n    update_on: Literal[\"change\", \"blur\"] = \"change\",\n) -> Tag:",
    "input_password": "def input_password(\n    id: str,\n    label: TagChild,\n    value: str = \"\",\n    *,\n    width: Optional[str] = None,\n    placeholder: Optional[str] = None,\n    update_on: Literal[\"change\", \"blur\"] = \"change\",\n) -> Tag:",
    "input_selectize": "def input_selectize(\n    id: str,\n    label: TagChild,\n    choices: SelectChoicesArg,\n    *,\n    selected: Optional[str | list[str]] = None,\n    multiple: bool = False,\n    width: Optional[str] = None,\n    remove_button: Optional[bool] = None,\n    options: Optional[dict[str, Jsonifiable | JSEval]] = None,\n) -> Tag:",
    "input_select": "def input_select(\n    id: str,\n    label: TagChild,\n    choices: SelectChoicesArg,\n    *,\n    selected: Optional[str | list[str]] = None,\n    multiple: bool = False,\n    selectize: bool = False,\n    width: Optional[str] = None,\n    size: Optional[str] = None,\n    remove_button: Optional[bool] = None,\n    options: Optional[dict[str, Jsonifiable | JSEval]] = None,\n) -> Tag:",
    "input_slider": "def input_slider(\n    id: str,\n    label: TagChild,\n    min: SliderValueArg,\n    max: SliderValueArg,\n    value: SliderValueArg | Iterable[SliderValueArg],\n    *,\n    step: Optional[SliderStepArg] = None,\n    ticks: bool = False,\n    animate: bool | AnimationOptions = False,\n    width: Optional[str] = None,\n    sep: str = \",\",\n    pre: Optional[str] = None,\n    post: Optional[str] = None,\n    time_format: Optional[str] = None,\n    timezone: Optional[str] = None,\n    drag_range: bool = True,\n) -> Tag:",
    "input_task_button": "def input_task_button(\n    id: str,\n    label: TagChild,\n    *args: TagChild,\n    icon: TagChild = None,\n    label_busy: TagChild = \"Processing...\",\n    icon_busy: TagChild | MISSING_TYPE = MISSING,\n    width: Optional[str] = None,\n    type: Optional[str] = \"primary\",\n    auto_reset: bool = True,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "bind_task_button": "def bind_task_button(\n    task: ExtendedTask[P, R] | None = None, *, button_id: str\n) -> ExtendedTask[P, R] | Callable[[ExtendedTask[P, R]], ExtendedTask[P, R]]:",
    "input_text": "def input_text(\n    id: str,\n    label: TagChild,\n    value: str = \"\",\n    *,\n    width: Optional[str] = None,\n    placeholder: Optional[str] = None,\n    autocomplete: Optional[str] = \"off\",\n    spellcheck: Optional[Literal[\"true\", \"false\"]] = None,\n    update_on: Literal[\"change\", \"blur\"] = \"change\",\n) -> Tag:",
    "input_text_area": "def input_text_area(\n    id: str,\n    label: TagChild,\n    value: str = \"\",\n    *,\n    width: Optional[str] = None,\n    height: Optional[str] = None,\n    cols: Optional[int] = None,\n    rows: Optional[int] = None,\n    placeholder: Optional[str] = None,\n    resize: Optional[Literal[\"none\", \"both\", \"horizontal\", \"vertical\"]] = None,\n    autoresize: bool = False,\n    autocomplete: Optional[str] = None,\n    spellcheck: Optional[Literal[\"true\", \"false\"]] = None,\n    update_on: Literal[\"change\", \"blur\"] = \"change\",\n) -> Tag:",
    "update_action_button": "def update_action_button(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    icon: TagChild = None,\n    disabled: Optional[bool] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_action_link": "def update_action_link(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    icon: TagChild = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_task_button": "def update_task_button(\n    id: str,\n    *,\n    state: Optional[str] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_checkbox": "def update_checkbox(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    value: Optional[bool] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_switch": "def update_switch(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    value: Optional[bool] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_checkbox_group": "def update_checkbox_group(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    choices: Optional[ChoicesArg] = None,\n    selected: Optional[str | list[str] | tuple[str, ...]] = None,\n    inline: bool = False,\n    session: Optional[Session] = None,\n) -> None:",
    "update_radio_buttons": "def update_radio_buttons(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    choices: Optional[ChoicesArg] = None,\n    selected: Optional[str] = None,\n    inline: bool = False,\n    session: Optional[Session] = None,\n) -> None:",
    "update_date": "def update_date(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    value: Optional[date | str] = None,\n    min: Optional[date | str] = None,\n    max: Optional[date | str] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_date_range": "def update_date_range(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    start: Optional[date | str] = None,\n    end: Optional[date | str] = None,\n    min: Optional[date | str] = None,\n    max: Optional[date | str] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_numeric": "def update_numeric(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    value: Optional[float] = None,\n    min: Optional[float] = None,\n    max: Optional[float] = None,\n    step: Optional[float] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_select": "def update_select(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    choices: Optional[SelectChoicesArg] = None,\n    selected: Optional[str | list[str]] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_selectize": "def update_selectize(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    choices: Optional[SelectChoicesArg] = None,\n    selected: Optional[str | list[str]] = None,\n    options: Optional[dict[str, str | float | JSEval]] = None,\n    server: bool = False,\n    session: Optional[Session] = None,\n) -> None:",
    "update_slider": "def update_slider(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    value: Optional[SliderValueArg | tuple[SliderValueArg, SliderValueArg]] = None,\n    min: Optional[SliderValueArg] = None,\n    max: Optional[SliderValueArg] = None,\n    step: Optional[SliderStepArg] = None,\n    time_format: Optional[str] = None,\n    timezone: Optional[str] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_text": "def update_text(\n    id: str,\n    *,\n    label: Optional[str] = None,\n    value: Optional[str] = None,\n    placeholder: Optional[str] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_navs": "def update_navs(\n    id: str, selected: Optional[str] = None, session: Optional[Session] = None\n) -> None:",
    "update_tooltip": "def update_tooltip(\n    id: str,\n    *args: TagChild,\n    show: Optional[bool] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "update_popover": "def update_popover(\n    id: str,\n    *args: TagChild,\n    title: Optional[TagChild] = None,\n    show: Optional[bool] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "insert_ui": "def insert_ui(\n    ui: TagChild,\n    selector: str,\n    where: Literal[\"beforeBegin\", \"afterBegin\", \"beforeEnd\", \"afterEnd\"] = \"beforeEnd\",\n    multiple: bool = False,\n    immediate: bool = False,\n    session: Optional[Session] = None,\n) -> None:",
    "remove_ui": "def remove_ui(\n    selector: str,\n    multiple: bool = False,\n    immediate: bool = False,\n    session: Optional[Session] = None,\n) -> None:",
    "layout_columns": "def layout_columns(\n    *args: TagChild | TagAttrs,\n    col_widths: BreakpointsUser[int] = None,\n    row_heights: BreakpointsUser[CssUnit] = None,\n    fill: bool = True,\n    fillable: bool = True,\n    gap: Optional[CssUnit] = None,\n    class_: Optional[str] = None,\n    height: Optional[CssUnit] = None,\n    min_height: Optional[CssUnit] = None,\n    max_height: Optional[CssUnit] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "layout_column_wrap": "def layout_column_wrap(\n    *args: TagChild | TagAttrs,\n    width: CssUnit | None | MISSING_TYPE = MISSING,\n    fixed_width: bool = False,\n    heights_equal: Literal[\"all\", \"row\"] = \"all\",\n    fill: bool = True,\n    fillable: bool = True,\n    height: Optional[CssUnit] = None,\n    min_height: Optional[CssUnit] = None,\n    max_height: Optional[CssUnit] = None,\n    height_mobile: Optional[CssUnit] = None,\n    gap: Optional[CssUnit] = None,\n    class_: Optional[str] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "output_markdown_stream": "def output_markdown_stream(\n    id: str,\n    *,\n    content: TagChild = \"\",\n    content_type: StreamingContentType = \"markdown\",\n    auto_scroll: bool = True,\n    width: CssUnit = \"min(680px, 100%)\",\n    height: CssUnit = \"auto\",\n) -> Tag:",
    "markdown": "def markdown(\n    text: str, *, render_func: Optional[Callable[[str], str]] = None, **kwargs: object\n) -> HTML:",
    "modal_button": "def modal_button(label: TagChild, icon: TagChild = None, **kwargs: TagAttrValue) -> Tag:",
    "modal": "def modal(\n    *args: TagChild | TagAttrs,\n    title: Optional[str] = None,\n    footer: TagChild | MISSING_TYPE = MISSING,\n    size: Literal[\"m\", \"s\", \"l\", \"xl\"] = \"m\",\n    easy_close: bool = False,\n    fade: bool = True,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "modal_show": "def modal_show(modal: Tag, session: Optional[Session] = None) -> None:",
    "modal_remove": "def modal_remove(session: Optional[Session] = None) -> None:",
    "nav_panel": "def nav_panel(\n    title: TagChild,\n    *args: TagChild,\n    value: Optional[str] = None,\n    icon: TagChild = None,\n) -> NavPanel:",
    "nav_control": "def nav_control(*args: TagChild) -> NavPanel:",
    "nav_spacer": "def nav_spacer() -> NavPanel:",
    "nav_menu": "def nav_menu(\n    title: TagChild,\n    *args: NavPanel | str,\n    value: Optional[str] = None,\n    icon: TagChild = None,\n    align: Literal[\"left\", \"right\"] = \"left\",\n) -> NavMenu:",
    "navset_tab": "def navset_tab(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n) -> NavSet:",
    "navset_pill": "def navset_pill(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n) -> NavSet:",
    "navset_underline": "def navset_underline(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n) -> NavSet:",
    "navset_hidden": "def navset_hidden(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n) -> NavSet:",
    "navset_card_tab": "def navset_card_tab(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    title: Optional[TagChild] = None,\n    sidebar: Optional[Sidebar] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n) -> NavSetCard:",
    "navset_card_pill": "def navset_card_pill(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    title: Optional[TagChild] = None,\n    sidebar: Optional[Sidebar] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n    placement: Literal[\"above\", \"below\"] = \"above\",\n) -> NavSetCard:",
    "navset_card_underline": "def navset_card_underline(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    title: Optional[TagChild] = None,\n    sidebar: Optional[Sidebar] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n    placement: Literal[\"above\", \"below\"] = \"above\",\n) -> NavSetCard:",
    "navset_pill_list": "def navset_pill_list(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n    well: bool = True,\n    widths: tuple[int, int] = (4, 8),\n) -> NavSet:",
    "navbar_options": "def navbar_options(\n    position: NavbarOptionsPositionType | MISSING_TYPE = MISSING,\n    bg: str | None | MISSING_TYPE = MISSING,\n    theme: NavbarOptionsThemeType | MISSING_TYPE = MISSING,\n    underline: bool | MISSING_TYPE = MISSING,\n    collapsible: bool | MISSING_TYPE = MISSING,\n    **attrs: TagAttrValue,\n) -> NavbarOptions:",
    "navset_bar": "def navset_bar(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    title: TagChild,\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    sidebar: Optional[Sidebar] = None,\n    fillable: bool | list[str] = True,\n    gap: Optional[CssUnit] = None,\n    padding: Optional[CssUnit | list[CssUnit]] = None,\n    header: TagChild = None,\n    footer: TagChild = None,\n    navbar_options: Optional[NavbarOptions] = None,\n    fluid: bool = True,\n    # Deprecated -- v1.3.0 2025-01 ----\n    position: NavbarOptionsPositionType | MISSING_TYPE = DEPRECATED,\n    bg: str | None | MISSING_TYPE = DEPRECATED,\n    inverse: bool | MISSING_TYPE = DEPRECATED,\n    underline: bool | MISSING_TYPE = DEPRECATED,\n    collapsible: bool | MISSING_TYPE = DEPRECATED,\n) -> NavSetBar:",
    "navset_title": "def navset_title(\n    title: TagChild | None,\n) -> list[TagChild | TagAttrs]:",
    "notification_show": "def notification_show(\n    ui: TagChild,\n    *,\n    action: Optional[TagChild] = None,\n    duration: Optional[int | float] = 5,\n    close_button: bool = True,\n    id: Optional[str] = None,\n    type: Literal[\"default\", \"message\", \"warning\", \"error\"] = \"default\",\n    session: Optional[Session] = None,\n) -> str:",
    "notification_remove": "def notification_remove(id: str, *, session: Optional[Session] = None) -> str:",
    "output_plot": "def output_plot(\n    id: str,\n    width: str | float | int = \"100%\",\n    height: str | float | int = \"400px\",\n    *,\n    inline: bool = False,\n    click: bool | ClickOpts = False,\n    dblclick: bool | DblClickOpts = False,\n    hover: bool | HoverOpts = False,\n    brush: bool | BrushOpts = False,\n    fill: bool | MISSING_TYPE = MISSING,\n) -> Tag:",
    "output_image": "def output_image(\n    id: str,\n    width: str | float | int = \"100%\",\n    height: str | float | int = \"400px\",\n    *,\n    inline: bool = False,\n    click: bool | ClickOpts = False,\n    dblclick: bool | DblClickOpts = False,\n    hover: bool | HoverOpts = False,\n    brush: bool | BrushOpts = False,\n    fill: bool = False,\n) -> Tag:",
    "output_text": "def output_text(\n    id: str, inline: bool = False, container: Optional[TagFunction] = None\n) -> Tag:",
    "output_code": "def output_code(id: str, placeholder: bool = True) -> Tag:",
    "output_text_verbatim": "def output_text_verbatim(id: str, placeholder: bool = False) -> Tag:",
    "output_table": "def output_table(id: str, **kwargs: TagAttrValue) -> Tag:",
    "output_ui": "def output_ui(\n    id: str,\n    inline: bool = False,\n    container: Optional[TagFunction] = None,\n    fill: bool = False,\n    fillable: bool = False,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "page_sidebar": "def page_sidebar(\n    sidebar: Sidebar,\n    *args: TagChild | TagAttrs,\n    title: Optional[str | Tag | TagList] = None,\n    fillable: bool = False,\n    fillable_mobile: bool = False,\n    window_title: str | MISSING_TYPE = MISSING,\n    lang: Optional[str] = None,\n    theme: Optional[str | Path | Theme | ThemeProvider] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "page_navbar": "def page_navbar(\n    *args: NavSetArg | MetadataNode | Sequence[MetadataNode],\n    title: Optional[str | Tag | TagList] = None,\n    id: Optional[str] = None,\n    selected: Optional[str] = None,\n    sidebar: Optional[Sidebar] = None,\n    # Only page_navbar gets enhanced treatement for `fillable`\n    # If an `*args`'s `data-value` attr string is in `fillable`, then the component is fillable\n    fillable: bool | list[str] = False,\n    fillable_mobile: bool = False,\n    gap: Optional[CssUnit] = None,\n    padding: Optional[CssUnit | list[CssUnit]] = None,\n    header: Optional[TagChild] = None,\n    footer: Optional[TagChild] = None,\n    navbar_options: Optional[NavbarOptions] = None,\n    fluid: bool = True,\n    window_title: str | MISSING_TYPE = MISSING,\n    lang: Optional[str] = None,\n    theme: Optional[str | Path | Theme | ThemeProvider] = None,\n    # Deprecated -- v1.3.0 2025-01 ----\n    position: (\n        Literal[\"static-top\", \"fixed-top\", \"fixed-bottom\"] | MISSING_TYPE\n    ) = DEPRECATED,\n    bg: str | None | MISSING_TYPE = DEPRECATED,\n    inverse: bool | MISSING_TYPE = DEPRECATED,\n    underline: bool | MISSING_TYPE = DEPRECATED,\n    collapsible: bool | MISSING_TYPE = DEPRECATED,\n) -> Tag:",
    "page_fillable": "def page_fillable(\n    *args: TagChild | TagAttrs,\n    padding: Optional[CssUnit | list[CssUnit]] = None,\n    gap: Optional[CssUnit] = None,\n    fillable_mobile: bool = False,\n    title: Optional[str] = None,\n    lang: Optional[str] = None,\n    theme: Optional[str | Path | Theme | ThemeProvider] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "page_fluid": "def page_fluid(\n    *args: TagChild | TagAttrs,\n    title: Optional[str] = None,\n    lang: Optional[str] = None,\n    theme: Optional[str | Path | Theme | ThemeProvider] = None,\n    **kwargs: str,\n) -> Tag:",
    "page_fixed": "def page_fixed(\n    *args: TagChild | TagAttrs,\n    title: Optional[str] = None,\n    lang: Optional[str] = None,\n    theme: Optional[str | Path | Theme | ThemeProvider] = None,\n    **kwargs: str,\n) -> Tag:",
    "page_bootstrap": "def page_bootstrap(\n    *args: TagChild | TagAttrs,\n    title: Optional[str] = None,\n    lang: Optional[str] = None,\n    theme: Optional[str | Path | Theme | ThemeProvider] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "page_auto": "def page_auto(\n    *args: TagChild | TagAttrs,\n    title: str | MISSING_TYPE = MISSING,\n    window_title: str | MISSING_TYPE = MISSING,\n    lang: str | MISSING_TYPE = MISSING,\n    theme: str | Path | Theme | ThemeProvider | MISSING_TYPE = MISSING,\n    fillable: bool | MISSING_TYPE = MISSING,\n    full_width: bool = False,\n    page_fn: Callable[..., Tag] | None = None,\n    **kwargs: object,\n) -> Tag:",
    "page_output": "def page_output(id: str) -> Tag:",
    "popover": "def popover(\n    trigger: TagChild,\n    *args: TagChild | TagAttrs,\n    title: Optional[TagChild] = None,\n    id: Optional[str] = None,\n    placement: Literal[\"auto\", \"top\", \"right\", \"bottom\", \"left\"] = \"auto\",\n    options: Optional[dict[str, Any]] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "sidebar": "def sidebar(\n    *args: TagChild | TagAttrs,\n    position: Literal[\"left\", \"right\"] = \"left\",\n    open: Optional[SidebarOpenSpec | SidebarOpenValue | Literal[\"desktop\"]] = None,\n    width: CssUnit = 250,\n    id: Optional[str] = None,\n    title: TagChild | str = None,\n    bg: Optional[str] = None,\n    fg: Optional[str] = None,\n    class_: Optional[str] = None,\n    max_height_mobile: Optional[str | float] = None,\n    gap: Optional[CssUnit] = None,\n    padding: Optional[CssUnit | list[CssUnit]] = None,\n    **kwargs: TagAttrValue,\n) -> Sidebar:",
    "layout_sidebar": "def layout_sidebar(\n    sidebar: Sidebar,\n    *args: TagChild | TagAttrs,\n    fillable: bool = True,\n    fill: bool = True,\n    bg: Optional[str] = None,\n    fg: Optional[str] = None,\n    border: Optional[bool] = None,\n    border_radius: Optional[bool] = None,\n    border_color: Optional[str] = None,\n    gap: Optional[CssUnit] = None,\n    padding: Optional[CssUnit | list[CssUnit]] = None,\n    height: Optional[CssUnit] = None,\n    **kwargs: TagAttrValue,\n) -> CardItem:",
    "update_sidebar": "def update_sidebar(\n    id: str,\n    *,\n    show: Optional[bool] = None,\n    session: Optional[Session] = None,\n) -> None:",
    "path_pkg_preset": "def path_pkg_preset(preset: ShinyThemePreset, *args: str) -> str:",
    "tooltip": "def tooltip(\n    trigger: TagChild,\n    *args: TagChild | TagAttrs,\n    id: Optional[str] = None,\n    placement: Literal[\"auto\", \"top\", \"right\", \"bottom\", \"left\"] = \"auto\",\n    options: Optional[dict[str, object]] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "css_no_sub": "def css_no_sub(**kwargs: str | float | None) -> Optional[str]:",
    "js_eval": "def js_eval(x: str) -> JSEval:",
    "extract_js_keys": "def extract_js_keys(options: Dict[str, Any], parent_key: str = \"\") -> List[str]:",
    "showcase_left_center": "def showcase_left_center(\n    *,\n    width: CssUnit = \"30%\",\n    width_full_screen: CssUnit | None = \"1fr\",\n    max_height: CssUnit | None = \"100px\",\n    max_height_full_screen: CssUnit | None = \"67%\",\n) -> ShowcaseLayout:",
    "showcase_top_right": "def showcase_top_right(\n    *,\n    width: CssUnit = \"40%\",\n    width_full_screen: CssUnit | None = \"1fr\",\n    max_height: CssUnit | None = \"75px\",\n    max_height_full_screen: CssUnit | None = \"67%\",\n) -> ShowcaseLayout:",
    "showcase_bottom": "def showcase_bottom(\n    *,\n    width: CssUnit = \"100%\",\n    width_full_screen: CssUnit | None = None,\n    height: CssUnit | None = \"auto\",\n    height_full_screen: CssUnit | None = \"2fr\",\n    max_height: CssUnit | None = \"100px\",\n    max_height_full_screen: CssUnit | None = None,\n) -> ShowcaseLayout:",
    "value_box_theme": "def value_box_theme(\n    name: Optional[str] = None,\n    *,\n    fg: Optional[str] = None,\n    bg: Optional[str] = None,\n) -> ValueBoxTheme:",
    "value_box": "def value_box(\n    title: TagChild,\n    value: TagChild,\n    *args: TagChild | TagAttrs,\n    showcase: Optional[TagChild] = None,\n    showcase_layout: SHOWCASE_LAYOUTS_STR | ShowcaseLayout = \"left center\",\n    full_screen: bool = False,\n    theme: Optional[str | ValueBoxTheme] = None,\n    height: Optional[CssUnit] = None,\n    max_height: Optional[CssUnit] = None,\n    min_height: Optional[CssUnit] = None,\n    fill: bool = True,\n    class_: Optional[str] = None,\n    id: Optional[str] = None,\n    **kwargs: TagAttrValue,\n) -> Tag:",
    "options": "def options(\n    *,\n    spinner_type: BusySpinnerType | Path | None = None,\n    spinner_color: str | None = None,\n    spinner_size: str | None = None,\n    spinner_delay: str | None = None,\n    spinner_selector: str | None = None,\n    fade_opacity: float | None = None,\n    fade_selector: str | None = None,\n    pulse_background: str | None = None,\n    pulse_height: str | None = None,\n    pulse_speed: str | None = None,\n) -> CardItem:",
    "use": "def use(*, spinners: bool = True, pulse: bool = True, fade: bool = True) -> TagList:"
  }

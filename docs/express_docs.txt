This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-28T19:05:11.040Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
_sidebar.yml
express.app_opts.qmd
express.expressify.qmd
express.is_express_app.qmd
express.module.qmd
express.render.data_frame.qmd
express.render.DataGrid.qmd
express.render.DataTable.qmd
express.render.download.qmd
express.render.express.qmd
express.render.image.qmd
express.render.plot.qmd
express.render.table.qmd
express.render.text.qmd
express.render.ui.qmd
express.ui.accordion_panel.qmd
express.ui.accordion.qmd
express.ui.busy_indicators.options.qmd
express.ui.busy_indicators.use.qmd
express.ui.card_footer.qmd
express.ui.card_header.qmd
express.ui.card.qmd
express.ui.Chat.qmd
express.ui.help_text.qmd
express.ui.hold.qmd
express.ui.HTML.qmd
express.ui.include_css.qmd
express.ui.include_js.qmd
express.ui.input_action_button.qmd
express.ui.input_action_link.qmd
express.ui.input_checkbox_group.qmd
express.ui.input_checkbox.qmd
express.ui.input_dark_mode.qmd
express.ui.input_date_range.qmd
express.ui.input_date.qmd
express.ui.input_file.qmd
express.ui.input_numeric.qmd
express.ui.input_password.qmd
express.ui.input_radio_buttons.qmd
express.ui.input_select.qmd
express.ui.input_selectize.qmd
express.ui.input_slider.qmd
express.ui.input_switch.qmd
express.ui.input_task_button.qmd
express.ui.input_text_area.qmd
express.ui.input_text.qmd
express.ui.insert_accordion_panel.qmd
express.ui.insert_ui.qmd
express.ui.layout_column_wrap.qmd
express.ui.layout_columns.qmd
express.ui.layout_sidebar.qmd
express.ui.markdown.qmd
express.ui.modal_button.qmd
express.ui.modal_remove.qmd
express.ui.modal_show.qmd
express.ui.modal.qmd
express.ui.nav_control.qmd
express.ui.nav_menu.qmd
express.ui.nav_panel.qmd
express.ui.nav_spacer.qmd
express.ui.navset_bar.qmd
express.ui.navset_card_pill.qmd
express.ui.navset_card_tab.qmd
express.ui.navset_card_underline.qmd
express.ui.navset_hidden.qmd
express.ui.navset_pill_list.qmd
express.ui.navset_pill.qmd
express.ui.navset_tab.qmd
express.ui.navset_underline.qmd
express.ui.notification_remove.qmd
express.ui.notification_show.qmd
express.ui.page_opts.qmd
express.ui.panel_absolute.qmd
express.ui.panel_conditional.qmd
express.ui.panel_fixed.qmd
express.ui.panel_title.qmd
express.ui.panel_well.qmd
express.ui.popover.qmd
express.ui.Progress.qmd
express.ui.remove_accordion_panel.qmd
express.ui.remove_ui.qmd
express.ui.sidebar.qmd
express.ui.TagList.qmd
express.ui.tags.qmd
express.ui.Theme.qmd
express.ui.tooltip.qmd
express.ui.update_accordion_panel.qmd
express.ui.update_accordion.qmd
express.ui.update_action_button.qmd
express.ui.update_action_link.qmd
express.ui.update_checkbox_group.qmd
express.ui.update_checkbox.qmd
express.ui.update_dark_mode.qmd
express.ui.update_date_range.qmd
express.ui.update_date.qmd
express.ui.update_navs.qmd
express.ui.update_numeric.qmd
express.ui.update_popover.qmd
express.ui.update_radio_buttons.qmd
express.ui.update_select.qmd
express.ui.update_selectize.qmd
express.ui.update_sidebar.qmd
express.ui.update_slider.qmd
express.ui.update_switch.qmd
express.ui.update_task_button.qmd
express.ui.update_text_area.qmd
express.ui.update_text.qmd
express.ui.update_tooltip.qmd
express.ui.value_box_theme.qmd
express.ui.value_box.qmd
express.wrap_express_app.qmd
index.qmd
reactive.calc.qmd
reactive.effect.qmd
reactive.event.qmd
reactive.extended_task.qmd
reactive.file_reader.qmd
reactive.flush.qmd
reactive.invalidate_later.qmd
reactive.isolate.qmd
reactive.lock.qmd
reactive.poll.qmd
reactive.value.qmd
req.qmd

================================================================
Repository Files
================================================================

================
File: _sidebar.yml
================
website:
  sidebar:
  - contents:
    - api/express/index.qmd
    - contents:
      - api/express/express.ui.input_select.qmd
      - api/express/express.ui.input_selectize.qmd
      - api/express/express.ui.input_slider.qmd
      - api/express/express.ui.input_dark_mode.qmd
      - api/express/express.ui.input_date.qmd
      - api/express/express.ui.input_date_range.qmd
      - api/express/express.ui.input_checkbox.qmd
      - api/express/express.ui.input_checkbox_group.qmd
      - api/express/express.ui.input_switch.qmd
      - api/express/express.ui.input_radio_buttons.qmd
      - api/express/express.ui.input_numeric.qmd
      - api/express/express.ui.input_text.qmd
      - api/express/express.ui.input_text_area.qmd
      - api/express/express.ui.input_password.qmd
      - api/express/express.ui.input_action_button.qmd
      - api/express/express.ui.input_action_link.qmd
      - api/express/express.ui.input_task_button.qmd
      section: Input components
    - contents:
      - api/express/express.render.plot.qmd
      - api/express/express.render.table.qmd
      - api/express/express.render.DataTable.qmd
      - api/express/express.render.data_frame.qmd
      - api/express/express.render.DataGrid.qmd
      - api/express/express.render.text.qmd
      - api/express/express.render.ui.qmd
      - api/express/express.render.download.qmd
      - api/express/express.render.image.qmd
      - api/express/express.render.express.qmd
      section: Output components
    - contents:
      - api/express/express.ui.page_opts.qmd
      - api/express/express.ui.sidebar.qmd
      - api/express/express.ui.layout_columns.qmd
      - api/express/express.ui.layout_column_wrap.qmd
      - api/express/express.ui.card.qmd
      - api/express/express.ui.card_header.qmd
      - api/express/express.ui.card_footer.qmd
      - api/express/express.ui.value_box.qmd
      - api/express/express.ui.value_box_theme.qmd
      - api/express/express.ui.popover.qmd
      - api/express/express.ui.tooltip.qmd
      - api/express/express.ui.accordion.qmd
      - api/express/express.ui.accordion_panel.qmd
      - api/express/express.ui.layout_sidebar.qmd
      section: Layouts and other UI tools
    - contents:
      - api/express/express.ui.nav_panel.qmd
      - api/express/express.ui.navset_card_underline.qmd
      - api/express/express.ui.navset_card_tab.qmd
      - api/express/express.ui.navset_card_pill.qmd
      - api/express/express.ui.nav_spacer.qmd
      - api/express/express.ui.nav_menu.qmd
      - api/express/express.ui.nav_control.qmd
      - api/express/express.ui.navset_bar.qmd
      - api/express/express.ui.navset_tab.qmd
      - api/express/express.ui.navset_pill.qmd
      - api/express/express.ui.navset_underline.qmd
      - api/express/express.ui.navset_pill_list.qmd
      - api/express/express.ui.navset_hidden.qmd
      section: Navigate multiple panels
    - contents:
      - api/express/express.ui.Chat.qmd
      section: Chat interface
    - contents:
      - api/express/reactive.calc.qmd
      - api/express/reactive.effect.qmd
      - api/express/reactive.value.qmd
      - api/express/reactive.event.qmd
      - api/express/reactive.isolate.qmd
      - api/express/reactive.invalidate_later.qmd
      - api/express/reactive.extended_task.qmd
      - api/express/reactive.flush.qmd
      - api/express/reactive.poll.qmd
      - api/express/reactive.file_reader.qmd
      - api/express/reactive.lock.qmd
      - api/express/req.qmd
      section: Reactive programming
    - contents:
      - api/express/express.ui.hold.qmd
      - api/express/express.expressify.qmd
      section: Reusable Express code
    - contents:
      - api/express/express.ui.update_select.qmd
      - api/express/express.ui.update_selectize.qmd
      - api/express/express.ui.update_slider.qmd
      - api/express/express.ui.update_dark_mode.qmd
      - api/express/express.ui.update_date.qmd
      - api/express/express.ui.update_date_range.qmd
      - api/express/express.ui.update_checkbox.qmd
      - api/express/express.ui.update_checkbox_group.qmd
      - api/express/express.ui.update_switch.qmd
      - api/express/express.ui.update_radio_buttons.qmd
      - api/express/express.ui.update_numeric.qmd
      - api/express/express.ui.update_text.qmd
      - api/express/express.ui.update_text_area.qmd
      - api/express/express.ui.update_navs.qmd
      - api/express/express.ui.update_action_button.qmd
      - api/express/express.ui.update_action_link.qmd
      - api/express/express.ui.update_task_button.qmd
      section: Update inputs
    - contents:
      - api/express/express.ui.update_sidebar.qmd
      - api/express/express.ui.update_tooltip.qmd
      - api/express/express.ui.update_popover.qmd
      - api/express/express.ui.update_accordion.qmd
      - api/express/express.ui.update_accordion_panel.qmd
      - api/express/express.ui.insert_accordion_panel.qmd
      - api/express/express.ui.remove_accordion_panel.qmd
      section: Update UI Layouts
    - contents:
      - api/express/express.ui.help_text.qmd
      - api/express/express.ui.notification_show.qmd
      - api/express/express.ui.notification_remove.qmd
      - api/express/express.ui.modal.qmd
      - api/express/express.ui.modal_show.qmd
      - api/express/express.ui.modal_remove.qmd
      - api/express/express.ui.modal_button.qmd
      - api/express/express.ui.Progress.qmd
      section: Display messages
    - contents:
      - api/express/express.module.qmd
      section: Modules
    - contents:
      - api/express/express.ui.panel_absolute.qmd
      - api/express/express.ui.panel_fixed.qmd
      - api/express/express.ui.panel_title.qmd
      - api/express/express.ui.panel_well.qmd
      section: UI panels
    - contents:
      - api/express/express.ui.input_file.qmd
      - api/express/express.render.download.qmd
      section: Uploads & downloads
    - contents:
      - api/express/express.ui.panel_conditional.qmd
      - api/express/express.ui.insert_ui.qmd
      - api/express/express.ui.remove_ui.qmd
      section: Dynamic UI
    - contents:
      - api/express/express.ui.Theme.qmd
      - api/express/express.ui.markdown.qmd
      - api/express/express.ui.include_css.qmd
      - api/express/express.ui.include_js.qmd
      - api/express/express.ui.HTML.qmd
      - api/express/express.ui.tags.qmd
      - api/express/express.ui.TagList.qmd
      - api/express/express.ui.busy_indicators.use.qmd
      - api/express/express.ui.busy_indicators.options.qmd
      section: UI as HTML
    - contents:
      - api/express/express.app_opts.qmd
      section: Application-level settings
    - contents:
      - api/express/express.is_express_app.qmd
      - api/express/express.wrap_express_app.qmd
      section: Express developer tooling
    id: api/express
  - id: dummy-sidebar

================
File: express.app_opts.qmd
================
# express.app_opts { #shiny.express.app_opts }

```python
express.app_opts(static_assets=MISSING, debug=MISSING)
```

Set App-level options in Shiny Express

This function sets application-level options for Shiny Express. These options are
the same as those from the [](:class:`shiny.App`) constructor.

## Parameters {.doc-section .doc-section-parameters}

<code>[**static_assets**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [Path](`pathlib.Path`) \| [Mapping](`typing.Mapping`)\[[str](`str`), [str](`str`) \| [Path](`pathlib.Path`)\] \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   Static files to be served by the app. If this is a string or Path object, it must be a directory, and it will be mounted at `/`. If this is a dictionary, each key is a mount point and each value is a file or directory to be served at that mount point. In Shiny Express, if there is a `www` subdirectory of the directory containing the app file, it will automatically be mounted at `/`, even without needing to set the option here.

<code>[**debug**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   Whether to enable debug mode.

================
File: express.expressify.qmd
================
# express.expressify { #shiny.express.expressify }

```python
express.expressify(fn=None, *, has_docstring=False)
```

Decorate a function so that output is captured as in Shiny Express

In a Shiny Express app, the output of each line of the app file is captured and
displayed in the UI. However, if the app calls a function, only the return value of
the function is displayed. This decorator changes the behavior of the function so
that when it is executed, the result of each line is captured and displayed, just
like code at the top level of a Shiny Express app.

## Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[TFunc](`shiny.express.expressify_decorator._expressify.TFunc`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The function to decorate. If not provided, this is a decorator factory.

<code>[**has_docstring**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether the function has a docstring. Set this to `True` if the function to decorate has a docstring. This tells `expressify()` to *not* capture the docstring and display it in the UI.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TFunc](`shiny.express.expressify_decorator._expressify.TFunc`) \| [Callable](`typing.Callable`)\[\[[TFunc](`shiny.express.expressify_decorator._expressify.TFunc`)\], [TFunc](`shiny.express.expressify_decorator._expressify.TFunc`)\]]{.parameter-annotation}</code>

:   A function that returns `None`, or a decorator for a function that returns `None`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.render.express`)
* [](:func:`~shiny.express.ui.hold`)

================
File: express.is_express_app.qmd
================
# express.is_express_app { #shiny.express.is_express_app }

```python
express.is_express_app(app, app_dir)
```

Detect whether an app file is a Shiny express app

## Parameters {.doc-section .doc-section-parameters}

<code>[**app**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   App filename, like "app.py". It may be a relative path or absolute path.

<code>[**app_dir**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation}</code>

:   Directory containing the app file. If this is `None`, then `app` must be an absolute path.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   `True` if it is a Shiny express app, `False` otherwise.

================
File: express.module.qmd
================
# express.module { #shiny.express.module }

```python
express.module(fn)
```

Create a Shiny module using Shiny Express syntax

This function is used to create a Shiny module, where the code inside the function
uses Shiny Express syntax. This is in contrast to the pair of functions
:func:`~shiny.module.ui()` and :func:`~shiny.module.server()`, which are used to
create Shiny modules with Core syntax.

## Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[[Concatenate](`shiny._typing_extensions.Concatenate`)\[[Inputs](`shiny.session._session.Inputs`), [Outputs](`shiny.session._session.Outputs`), [Session](`shiny.session._session.Session`), [P](`shiny.express._module.P`)\], [R](`shiny.express._module.R`)\]]{.parameter-annotation}</code>

:   The function that defines the module. The first three parameters of this function must be `input`, `output`, and `session`. Any additional parameters can used to pass information to the module.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.module.ui`)
* [](:func:`~shiny.module.server`)
* [](:func:`~shiny.express.expressify`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import module, render, ui


@module
def counter(input, output, session, starting_value: int = 0):
    count = reactive.value(starting_value)

    ui.input_action_button("btn", "Increment")

    with ui.div():

        @render.express
        def current_count():
            count()

    @reactive.effect
    @reactive.event(input.btn)
    def increment():
        count.set(count() + 1)


counter("one")
ui.hr()
counter("two")


```

================
File: express.render.data_frame.qmd
================
# express.render.data_frame { #shiny.express.render.data_frame }

```python
express.render.data_frame(self, fn)
```

Decorator for a function that returns a [pandas](https://pandas.pydata.org/),
[polars](https://pola.rs/), or eager
[`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object
to render as an interactive table or grid. Features fast virtualized scrolling,
sorting, filtering, and row selection (single or multiple).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns any of the following:  1. A [](:class:`~shiny.express.render.DataGrid`) or [](:class:`~shiny.express.render.DataTable`) object,    which can be used to customize the appearance and behavior of the data frame    output. 2. A [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager    [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame`    object. This object will be internally upgraded to a default    `shiny.express.render.DataGrid(df)`.

## Row selection {.doc-section .doc-section-row-selection}

When using the row selection feature, you can access the selected rows by using the
`<data_frame_renderer>.cell_selection()` method, where `<data_frame_renderer>`
is the `@render.data_frame` function name that corresponds with the `id=` used in
[](:func:`~shiny.express.ui.outout_data_frame`). Internally,
`<data_frame_renderer>.cell_selection()` retrieves the selected cell
information from session's `input.<data_frame_renderer>_cell_selection()` value and
upgrades it for consistent subsetting.

For example, to filter your pandas data frame (`df`) down to the selected rows you can use:

* `df.iloc[list(input.<data_frame_renderer>_cell_selection()["rows"])]`
* `df.iloc[list(<data_frame_renderer>.cell_selection()["rows"])]`
* `<data_frame_renderer>.data_view(selected=True)`

The last method (`.data_view(selected=True)`) will also apply any sorting,
filtering, or edits that has been applied by the user.

## Editing cells {.doc-section .doc-section-editing-cells}

When a returned `DataTable` or `DataGrid` object has `editable=True`, app users will
be able to edit the cells in the table. After a cell has been edited, the edited
value will be sent to the server for processing. The handling methods are set via
`@<data_frame_renderer>.set_patch_fn` or `@<data_frame_renderer>.set_patches_fn`
decorators. By default, both decorators will return the corresponding value as a
string.

## Data methods {.doc-section .doc-section-data-methods}


There are several methods available to inspect and update data frame renderer. It is
important to know the side effects of each method to know how they interact with
each other.

* Data frame render method:
    * When this method is reactively executed, the `.data()` data frame is set to
      the underlying data frame and all `.cell_patches()` are removed.
    * When this method is reactively executed, **all user state is reset**. This
      includes the user's edits, sorting, filtering.
* `.data()`:
    * Reactive calculation that returns the render method's underlying data frame or
      the data frame supplied to `.update_data(data)`, whichever has been most
      recently set.
* `.cell_patches()`:
    * Reactive calculation that returns a list of user edits (or updated cell
      values) that will be applied to `.data()` to create the `.data_patched()` data
      frame.
* `.data_patched()`:
    * Reactive calculation that returns the `.data()` data frame with all
      `.cell_patches()` patches applied.
* `.data_view(*, selected: bool)`:
    * Reactive function that returns the `.data_patched()` data frame with the
      user's sorting and filtering applied. It represents the data frame as viewed
      by the user within the browser.
    * If `selected=True`, only the selected rows are returned.
* `.update_cell_value(value, row, col)`:
    * Sets a new entry in `.cell_patches()`.
    * Calling this method will **not** reset the user's sorting or filtering.
* `.update_data(data)`:
    * Updates the `.data()` data frame with new data.
    * Calling this method will remove all `.cell_patches()`.
    * Calling this method will **not** reset the user's sorting or filtering.

Note: All data methods are shallow copies of each other. If they are mutated in
place, it **will modify** the underlying data object and possibly alter other data
objects.

## Narwhals {.doc-section .doc-section-narwhals}


Shiny uses [`narwhals`](https://narwhals-dev.github.io/narwhals/) to manage data
frame interactions. From their website: "Extremely lightweight and extensible
compatibility layer between dataframe libraries!". This allows for seamless
integration between pandas, polars, and any other eagerly defined data frame type.

There are some reasonable limitations to the narwhals compatibility layer. As they
are found, they will be added to this list:
* When converting the column type who does not have a 1:1 mapping between libraries
  (such as pandas' columns containing `str` and `dict` items both share the same
  `object` data type), narwhals will only inspect the first row to disambiguate the
  cell type. This could lead to false negatives in the data type conversion. Shiny
  could inspect each column in an attempt to disambiguate the cell type, but this
  would be a costly operation. The best way to avoid this is to use consistent
  typing. For example, if your first row of the pandas column contains a string and
  the second row of the same column contains a `ui.TagList`, the column will
  incorrectly be interpreted as a string. To get around this, you can wrap all cells
  (or at the very lest the first cell) in the same column within a `ui.TagList` as
  it will not insert any tags, but it will cause the column to be interpreted as
  `html` where possible.   (tl/dr: Use consistent typing in your columns!)

## Tip {.doc-section .doc-section-tip}

This decorator should be applied **before** the ``@output`` decorator (if that
decorator is used). Also, the name of the decorated function (or
``@output(id=...)``) should match the ``id`` of a [](:func:`~shiny.express.ui.output_data_frame`)
container (see [](:func:`~shiny.express.ui.output_data_frame`) for example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.output_data_frame`)
* [](:class:`~shiny.express.render.DataGrid`) and [](:class:`~shiny.express.render.DataTable`) are the
  objects you can return from the rendering function to specify options.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas  # noqa: F401 (this line needed for Shinylive to load plotly.express)
import plotly.express as px
from shinywidgets import render_widget

from shiny import reactive, req
from shiny.express import render, ui

# Load the Gapminder dataset
df = px.data.gapminder()

# Prepare a summary DataFrame
summary_df = (
    df.groupby("country")
    .agg(
        {
            "pop": ["min", "max", "mean"],
            "lifeExp": ["min", "max", "mean"],
            "gdpPercap": ["min", "max", "mean"],
        }
    )
    .reset_index()
)

summary_df.columns = ["_".join(col).strip() for col in summary_df.columns.values]
summary_df.rename(columns={"country_": "country"}, inplace=True)

# Set up the UI

ui.page_opts(fillable=True)

ui.markdown(
    "**Instructions**: Select one or more countries in the table below to see more information."
)

with ui.layout_columns(col_widths=[12, 6, 6]):
    with ui.card(height="400px"):

        @render.data_frame
        def summary_data():
            return render.DataGrid(summary_df.round(2), selection_mode="rows")

    with ui.card(height="400px"):

        @render_widget
        def country_detail_pop():
            return px.line(
                filtered_df(),
                x="year",
                y="pop",
                color="country",
                title="Population Over Time",
            )

    with ui.card(height="400px"):

        @render_widget
        def country_detail_percap():
            return px.line(
                filtered_df(),
                x="year",
                y="gdpPercap",
                color="country",
                title="GDP per Capita Over Time",
            )


@reactive.calc
def filtered_df():
    data_selected = summary_data.data_view(selected=True)
    req(not data_selected.empty)
    countries = data_selected["country"]

    # Filter data for selected countries
    return df[df["country"].isin(countries)]


```

## Methods

| Name | Description |
| --- | --- |
| [cell_patches](#shiny.express.render.data_frame.cell_patches) | Reactive calculation of the data frame's edits. |
| [cell_selection](#shiny.express.render.data_frame.cell_selection) | Reactive calculation of selected cell information. |
| [data](#shiny.express.render.data_frame.data) | Reactive calculation of the data frame's data. |
| [data_patched](#shiny.express.render.data_frame.data_patched) | Reactive calculation of the data frame's patched data. |
| [data_view](#shiny.express.render.data_frame.data_view) | Reactive function that retrieves the data how it is viewed within the browser. |
| [data_view_rows](#shiny.express.render.data_frame.data_view_rows) | Reactive calculation of the data frame's user view row numbers. |
| [filter](#shiny.express.render.data_frame.filter) | Reactive calculation of the data frame's column filters. |
| [input_cell_selection](#shiny.express.render.data_frame.input_cell_selection) | [Deprecated] Reactive calculation of selected cell information. |
| [selection_modes](#shiny.express.render.data_frame.selection_modes) | Reactive calculation of the data frame's possible selection modes. |
| [set_patch_fn](#shiny.express.render.data_frame.set_patch_fn) | Decorator to set the function that updates a single cell in the data frame. |
| [set_patches_fn](#shiny.express.render.data_frame.set_patches_fn) | Decorator to set the function that updates a batch of cells in the data frame. |
| [sort](#shiny.express.render.data_frame.sort) | Reactive calculation of the data frame's column sorting information. |
| [update_cell_selection](#shiny.express.render.data_frame.update_cell_selection) | Update the cell selection in the data frame. |
| [update_cell_value](#shiny.express.render.data_frame.update_cell_value) | Update the value of a cell in the data frame. |
| [update_data](#shiny.express.render.data_frame.update_data) | Update the data frame with new data. |
| [update_filter](#shiny.express.render.data_frame.update_filter) | Update the column filtering in the data frame. |
| [update_sort](#shiny.express.render.data_frame.update_sort) | Update the column sorting in the data frame. |

### cell_patches { #shiny.express.render.data_frame.cell_patches }

```python
express.render.data_frame.cell_patches()
```

Reactive calculation of the data frame&#x27;s edits.

This reactive calculation that returns a list of user edits (or updated cell
values) that will be applied to `.data()` to create the `.data_patched()` data
frame.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[list](`list`)\[[CellPatch](`shiny.express.render._data_frame_utils._patch.CellPatch`)\]]{.parameter-annotation}</code>

:   A list of cell patches to apply to the data frame.

### cell_selection { #shiny.express.render.data_frame.cell_selection }

```python
express.render.data_frame.cell_selection()
```

Reactive calculation of selected cell information.

This method is a wrapper around `input.<id>_cell_selection()`, where `<id>` is
the `id` of the data frame output. This method returns the selected rows and
will cause reactive updates as the selected rows change.

The value has been enhanced from it&#x27;s vanilla form to include the missing `cols` key
(or `rows` key) as a tuple of integers representing all column (or row) numbers.
This allows for consistent usage within code when subsetting your data. These
missing keys are not sent over the wire as they are independent of the selection.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[CellSelection](`shiny.express.render._data_frame_utils._selection.CellSelection`)]{.parameter-annotation}</code>

:   [](:class:`~shiny.express.render.CellSelection`) representing the indices of the selected cells. If no cells are currently selected, `None` is returned.

### data { #shiny.express.render.data_frame.data }

```python
express.render.data_frame.data()
```

Reactive calculation of the data frame&#x27;s data.

This reactive calculation returns the render method&#x27;s underlying data frame or
the data frame supplied to `.update_data(data)`, whichever has been most
recently set.

The returned value is a shallow copy of the original data frame. It is possible
that alterations to the `.data()` data frame could alter other associated data
frame values. Please be cautious when using this value directly.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   This reactive calculation returns the render method's underlying data frame or the data frame supplied to `.update_data(data)`, whichever has been most recently set.

### data_patched { #shiny.express.render.data_frame.data_patched }

```python
express.render.data_frame.data_patched()
```

Reactive calculation of the data frame&#x27;s patched data.

This method returns the `.data()` data frame with all `.cell_patches()` patches
applied.

The returned value is a shallow copy of the original data frame. It is possible
that alterations to the `.data_patched()` data frame could alter other
associated data frame values. Please be cautious when using this value directly.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   The patched data frame.

### data_view { #shiny.express.render.data_frame.data_view }

```python
express.render.data_frame.data_view(selected=False)
```

Reactive function that retrieves the data how it is viewed within the browser.

This function will return the `.data_patched()` data frame with the user&#x27;s
sorting and filtering applied. It represents the data frame as viewed by the
user within the browser.

The returned value is a shallow copy of the original data frame. It is possible
that alterations to the `.data_view()` data frame could alter other associated
date frame values. Please be cautious when using this value directly.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, subset the viewed data to the selected area. Defaults to `False` (all rows).

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   A view of the (possibly selected) data frame as seen in the browser.

#### See Also {.doc-section .doc-section-see-also}

* [`pandas.DataFrame.copy` API documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.copy.html)
* [`polars.DataFrame.clone` API documentation](https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.clone.html)
* [`narwhals.DataFrame.clone` API documentation](https://narwhals-dev.github.io/narwhals/api-reference/dataframe/#narwhals.dataframe.DataFrame.clone)

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import mtcars

from shiny import reactive
from shiny.express import render, ui

df = reactive.value(mtcars.iloc[:, range(4)])


with ui.layout_columns(col_widths=[4, 4, 4]):
    with ui.card():
        with ui.card_header():
            ui.markdown(
                """
                ##### Editable data frame
                * Edit the cells!
                * Sort the columns!
                """
            )

            @render.data_frame
            def df_original():
                return render.DataGrid(
                    df(),
                    editable=True,
                )

            # Convert edited values to the correct data type
            @df_original.set_patch_fn
            def _(*, patch: render.CellPatch) -> render.CellValue:
                if patch["column_index"] in [0, 2]:
                    return float(patch["value"])
                return int(patch["value"])

    with ui.card():
        with ui.card_header():
            ui.markdown(
                """
                ##### Updated data from the first data frame
                * Select the rows!
                * Filter and sort the columns!
                """
            )

            @render.data_frame
            def df_edited():
                return render.DataGrid(
                    df_original.data_view(),
                    selection_mode="rows",
                    filters=True,
                )

    with ui.card():
        with ui.card_header():
            ui.markdown(
                """
                ##### Selected data from the second data frame
                * Sort the columns!
                """
            )

            @render.data_frame
            def df_selected():
                return render.DataGrid(
                    df_edited.data_view(selected=True),
                    selection_mode="none",
                )


## file: shared.py
from pathlib import Path

import pandas as pd

app_dir = Path(__file__).parent
mtcars = pd.read_csv(app_dir / "mtcars.csv")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

### data_view_rows { #shiny.express.render.data_frame.data_view_rows }

```python
express.render.data_frame.data_view_rows()
```

Reactive calculation of the data frame&#x27;s user view row numbers.

This value is a wrapper around `input.<id>_data_view_rows()`, where `<id>` is the
`id` of the data frame output.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[int](`int`), ...\]]{.parameter-annotation}</code>

:   The row numbers of the data frame that are currently being viewed in the browser after sorting and filtering has been applied.

### filter { #shiny.express.render.data_frame.filter }

```python
express.render.data_frame.filter()
```

Reactive calculation of the data frame&#x27;s column filters.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[ColumnFilter](`shiny.express.render._data_frame_utils._types.ColumnFilter`), ...\]]{.parameter-annotation}</code>

:   An array of `col`umn number and `value` information. If the column type is a number, a tuple of `(min, max)` is used for `value`. If no min (or max) value is set, `None` is used in its place. If the column type is a string, the string value is used for `value`.

### input_cell_selection { #shiny.express.render.data_frame.input_cell_selection }

```python
express.render.data_frame.input_cell_selection()
```

[Deprecated] Reactive calculation of selected cell information.

Please use `~shiny.express.render.data_frame`&#x27;s `.cell_selection()` method instead.

### selection_modes { #shiny.express.render.data_frame.selection_modes }

```python
express.render.data_frame.selection_modes()
```

Reactive calculation of the data frame&#x27;s possible selection modes.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectionModes](`shiny.express.render._data_frame_utils._selection.SelectionModes`)]{.parameter-annotation}</code>

:   The possible selection modes for the data frame.

### set_patch_fn { #shiny.express.render.data_frame.set_patch_fn }

```python
express.render.data_frame.set_patch_fn(fn)
```

Decorator to set the function that updates a single cell in the data frame.

The default patch function returns the value as is.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[PatchFn](`shiny.express.render._data_frame_utils._patch.PatchFn`) \| [PatchFnSync](`shiny.express.render._data_frame_utils._patch.PatchFnSync`)]{.parameter-annotation}</code>

:   A function that accepts a kwarg `patch` and returns the processed `patch.value` for the cell.

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import mtcars

from shiny import reactive
from shiny.express import render, ui

df = reactive.value(mtcars.iloc[:, range(4)])


with ui.layout_columns(col_widths=[4, 4, 4]):
    with ui.card():
        with ui.card_header():
            ui.markdown(
                """
                ##### Editable data frame
                * Edit the cells!
                * Sort the columns!
                """
            )

            @render.data_frame
            def df_original():
                return render.DataGrid(
                    df(),
                    editable=True,
                )

            # Convert edited values to the correct data type
            @df_original.set_patch_fn
            def _(*, patch: render.CellPatch) -> render.CellValue:
                if patch["column_index"] in [0, 2]:
                    return float(patch["value"])
                return int(patch["value"])

    with ui.card():
        with ui.card_header():
            ui.markdown(
                """
                ##### Updated data from the first data frame
                * Select the rows!
                * Filter and sort the columns!
                """
            )

            @render.data_frame
            def df_edited():
                return render.DataGrid(
                    df_original.data_view(),
                    selection_mode="rows",
                    filters=True,
                )

    with ui.card():
        with ui.card_header():
            ui.markdown(
                """
                ##### Selected data from the second data frame
                * Sort the columns!
                """
            )

            @render.data_frame
            def df_selected():
                return render.DataGrid(
                    df_edited.data_view(selected=True),
                    selection_mode="none",
                )


## file: shared.py
from pathlib import Path

import pandas as pd

app_dir = Path(__file__).parent
mtcars = pd.read_csv(app_dir / "mtcars.csv")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

### set_patches_fn { #shiny.express.render.data_frame.set_patches_fn }

```python
express.render.data_frame.set_patches_fn(fn)
```

Decorator to set the function that updates a batch of cells in the data frame.

The default patches function calls the async `._patch_fn()` on each input patch
and returns the updated patch values.

There are no checks made on the quantity of patches returned. The user can
return more, less, or the same number of patches as the input patches. This
allows for the app author to own more control over which columns are updated and
how they are updated.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[PatchesFn](`shiny.express.render._data_frame_utils._patch.PatchesFn`) \| [PatchesFnSync](`shiny.express.render._data_frame_utils._patch.PatchesFnSync`)]{.parameter-annotation}</code>

:   A function that accepts a kwarg `patches` and returns a list of (possibly updated) patches to apply to the data frame.

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from __future__ import annotations

from pathlib import Path

import pandas as pd

from shiny import reactive
from shiny.express import render, ui

here = Path(__file__).parent
mtcars_df = reactive.value(pd.read_csv(here / "mtcars.csv").iloc[:, range(4)])

# A copy of the data frame that will store all the edits
edited_df = reactive.value(None)


# Copy mtcars_df to edited_df when mtcars_df changes and on initial load
@reactive.effect
def _sync_mtcars_to_edited_df():
    edited_df.set(mtcars_df())


ui.markdown(
    """
    #### Instructions:
    * Run the app locally so that the edits to the underlying CSV file will persist.
    * Edit the cells in the table.

    #### Note:
    The data frame will not be re-rendered as the result of `df()` has not updated.

    Once the `df()` is invalidated, all local edits are forgotten, and the data frame will be re-rendered. However, since the edits were saved to the CSV file, the edits will persist between refreshes (when run locally).
    """
)

with ui.card():

    @render.data_frame
    def my_data_frame():
        return render.DataGrid(
            mtcars_df(),
            editable=True,
        )

    # Save the edited values to the data source (ex: the CSV file)
    @my_data_frame.set_patches_fn
    def _(*, patches: list[render.CellPatch]) -> list[render.CellPatch]:
        for patch in patches:
            if patch["column_index"] in [0, 2]:
                patch["value"] = float(patch["value"])
            else:
                patch["value"] = int(patch["value"])

        # "Save to the database" by writing the edited data to a CSV file
        df = edited_df().copy()
        for patch in patches:
            df.iloc[patch["row_index"], patch["column_index"]] = patch["value"]
        edited_df.set(df)
        df.to_csv(here / "mtcars.csv", index=False)
        print("Saved the edited data to './mtcars.csv'")

        return patches


## file: mtcars.csv
mpg,cyl,disp,hp
21.0,6,160.0,110
21.0,6,160.0,110
22.8,4,108.0,93
21.4,6,258.0,110
18.7,8,360.0,175
18.1,6,225.0,105
14.3,8,360.0,245
24.4,4,146.7,62
22.8,4,140.8,95
19.2,6,167.6,123
17.8,6,167.6,123
16.4,8,275.8,180
17.3,8,275.8,180
15.2,8,275.8,180
10.4,8,472.0,205
10.4,8,460.0,215
14.7,8,440.0,230
32.4,4,78.7,66
30.4,4,75.7,52
33.9,4,71.1,65
21.5,4,120.1,97
15.5,8,318.0,150
15.2,8,304.0,150
13.3,8,350.0,245
19.2,8,400.0,175
27.3,4,79.0,66
26.0,4,120.3,91
30.4,4,95.1,113
15.8,8,351.0,264
19.7,6,145.0,175
15.0,8,301.0,335
21.4,4,121.0,109


```

### sort { #shiny.express.render.data_frame.sort }

```python
express.render.data_frame.sort()
```

Reactive calculation of the data frame&#x27;s column sorting information.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[ColumnSort](`shiny.express.render._data_frame_utils._types.ColumnSort`), ...\]]{.parameter-annotation}</code>

:   An array of `col`umn number and _is `desc`ending_ information.

### update_cell_selection { #shiny.express.render.data_frame.update_cell_selection }

```python
express.render.data_frame.update_cell_selection(selection)
```

Update the cell selection in the data frame.

Currently only single (`"type": "row"`) or multiple (`"type": "rows"`) row
selection is supported.

If the current data frame selection mode is `"none"` and a non-none selection is
provided, a warning will be raised and no rows will be selected. If cells are
supposes to be selected, the selection mode returned from the render function
must (currently) be set to `"row"` or `"rows"`.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**selection**]{.parameter-name} [:]{.parameter-annotation-sep} [[CellSelection](`shiny.express.render._data_frame_utils._selection.CellSelection`) \| [Literal](`typing.Literal`)\['all'\] \| None \| [BrowserCellSelection](`shiny.express.render._data_frame_utils._selection.BrowserCellSelection`)]{.parameter-annotation}</code>

:   The cell selection to apply to the data frame. This can be a `CellSelection` object, `"all"` to select all cells (if possible), or `None` to clear the selection.

### update_cell_value { #shiny.express.render.data_frame.update_cell_value }

```python
express.render.data_frame.update_cell_value(value, *, row, col)
```

Update the value of a cell in the data frame.

Calling this method will set a new entry in `.cell_patches()`. It will not reset
the user&#x27;s sorting or filtering of their rendered data frame.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[CellValue](`shiny.express.render._data_frame_utils._patch.CellValue`)]{.parameter-annotation}</code>

:   The new value to set the cell to.

<code>[**row**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation}</code>

:   The row index of the cell to update.

<code>[**column**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The column index of the cell to update.

### update_data { #shiny.express.render.data_frame.update_data }

```python
express.render.data_frame.update_data(data)
```

Update the data frame with new data.

Calling this method will update the `.data()` data frame with new data and will
remove all `.cell_patches()`. It will not reset the user&#x27;s sorting or filtering
of their rendered data frame. Any incompatible sorting or filtering settings
will be silently dropped.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**data**]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   The new data to render.

### update_filter { #shiny.express.render.data_frame.update_filter }

```python
express.render.data_frame.update_filter(filter)
```

Update the column filtering in the data frame.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**filter**]{.parameter-name} [:]{.parameter-annotation-sep} [[ListOrTuple](`shiny.types.ListOrTuple`)\[[ColumnFilter](`shiny.express.render._data_frame_utils._types.ColumnFilter`)\] \| None]{.parameter-annotation}</code>

:   A list of column filtering information. If `None`, filtering will be removed.

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import mtcars

from shiny import reactive
from shiny.express import input, render, ui

data = reactive.value(mtcars.iloc[:, range(4)])
with ui.card():
    with ui.layout_column_wrap(fill=False):
        ui.input_action_button("btn", "Filter on columns 0, 1, and 3")
        ui.input_action_button("reset", "Reset column filters")

    @render.data_frame
    def df():
        return render.DataGrid(data(), filters=True)


@reactive.effect
@reactive.event(input.reset)
async def _():
    await df.update_filter(None)


@reactive.effect
@reactive.event(input.btn)
async def _():
    await df.update_filter(
        [
            {"col": 0, "value": [19, 25]},
            {"col": 1, "value": [None, 6]},
            {"col": 3, "value": [100, None]},
        ]
    )


## file: shared.py
from pathlib import Path

import pandas as pd

app_dir = Path(__file__).parent
mtcars = pd.read_csv(app_dir / "mtcars.csv")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

### update_sort { #shiny.express.render.data_frame.update_sort }

```python
express.render.data_frame.update_sort(sort)
```

Update the column sorting in the data frame.

The sort will be applied in reverse order so that the first value has the highest
precedence. This mean _ties_ will go to the second sort column (and so on).

#### Parameters {.doc-section .doc-section-parameters}

<code>[**sort**]{.parameter-name} [:]{.parameter-annotation-sep} [[ListOrTuple](`shiny.types.ListOrTuple`)\[[ColumnSort](`shiny.express.render._data_frame_utils._types.ColumnSort`) \| [int](`int`)\] \| [int](`int`) \| [ColumnSort](`shiny.express.render._data_frame_utils._types.ColumnSort`) \| None]{.parameter-annotation}</code>

:   A list of column sorting information. If `None`, sorting will be removed. `int` values will be upgraded to `{"col": int, "desc": <DESC>}` where `<DESC>` is `True` if the column is number like and `False` otherwise.

#### Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import mtcars

from shiny import reactive
from shiny.express import input, render, ui

data = reactive.value(mtcars.iloc[:, range(4)])

with ui.card():
    ui.input_action_button("btn", "Sort on columns 1↑ and 3↓")

    @render.data_frame
    def df():
        return render.DataGrid(data())


@reactive.effect
@reactive.event(input.btn)
async def _():
    await df.update_sort([{"col": 1, "desc": False}, {"col": 3, "desc": True}])


## file: shared.py
from pathlib import Path

import pandas as pd

app_dir = Path(__file__).parent
mtcars = pd.read_csv(app_dir / "mtcars.csv")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: express.render.DataGrid.qmd
================
# express.render.DataGrid { #shiny.express.render.DataGrid }

```python
express.render.DataGrid(
    self,
    data,
    *,
    width='fit-content',
    height=None,
    summary=True,
    filters=False,
    editable=False,
    selection_mode='none',
    styles=None,
    row_selection_mode='deprecated',
)
```

Holds the data and options for a [](:class:`~shiny.express.render.data_frame`) output, for a
spreadsheet-like view.

This class is used to wrap the returned data frame from a `@render.data_frame`
render function. It allows you to specify options for the data grid, such as the
width and height of the grid, whether to show a summary message, whether to show
filter inputs, whether the cells are editable, and how the cells are selected.

While there are currently no execution or parameter differences between `DataGrid`
and `DataTable` other than CSS styling in the browser, the two classes are kept
separate to allow for future extensibility.

## Parameters {.doc-section .doc-section-parameters}

<code>[**data**]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   A [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'fit-content\']{.parameter-default}</code>

:   A _maximum_ amount of horizontal space for the data grid to occupy, in CSS units (e.g. `"400px"`) or as a number, which will be interpreted as pixels. The default is `fit-content`, which sets the grid's width according to its contents. Set this to `100%` to use the maximum available horizontal space.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A _maximum_ amount of vertical space for the data grid to occupy, in CSS units (e.g. `"400px"`) or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the grid will scroll. Set the height to `"auto"` to allow the grid to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).

<code>[**summary**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If `True` (the default), shows a message like "Viewing rows 1 through 10 of 20" below the grid when not all of the rows are being shown. If `False`, the message is not displayed. You can also specify a string template to customize the message, containing `{start}`, `{end}`, and `{total}` tokens. For example: `"Viendo filas {start} a {end} de {total}"`.

<code>[**filters**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, shows a row of filter inputs below the headers, one for each column.

<code>[**editable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.

<code>[**selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectionModeInput](`shiny.express.render._data_frame_utils._selection.SelectionModeInput`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'none\']{.parameter-default}</code>

:   Single string or a `set`/`list`/`tuple` of string values to define possible ways to select data within the data frame.  Supported values: * Use `"none"` to disable any cell selections or editing. * Use `"row"` to allow a single row to be selected at a time. * Use `"rows"` to allow multiple rows to be selected by clicking on them individually.  Resolution rules: * If `"none"` is supplied, all other values will be ignored. * If both `"row"` and `"rows"` are supplied, `"row"` will be dropped (supporting `"rows"`).

<code>[**styles**]{.parameter-name} [:]{.parameter-annotation-sep} [[StyleInfo](`shiny.express.render._data_frame_utils._styles.StyleInfo`) \| [list](`list`)\[[StyleInfo](`shiny.express.render._data_frame_utils._styles.StyleInfo`)\] \| [StyleFn](`shiny.express.render._data_frame_utils._styles.StyleFn`)\[[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)\] \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If `styles=None`, no styling will be applied.  Style info object key/value description: * `location`: This value `"body"` and is not required. * `rows`: The row numbers to which the style should be applied. If `None`, the     style will be applied to all rows. * `cols`: The column numbers to which the style should be applied. If `None`,     the style will be applied to all columns. * `style`: A dictionary of CSS properties and values to apply to the selected     rows and columns. Traditional _kebab-cased_ CSS property names (e.g.     `background-color`) will work in addition to _camelCased_ CSS property names     (e.g. `backgroundColor`). * `class`: A string of CSS class names to apply to the selected rows and columns.  If both `style` and `class` are missing or `None`, nothing will be applied. If both `rows` and `cols` are missing or `None`, the style will be applied to the complete data frame.

<code>[**row_selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[RowSelectionModeDeprecated](`shiny.express.render._data_frame_utils._selection.RowSelectionModeDeprecated`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'deprecated\']{.parameter-default}</code>

:   Deprecated. Please use `selection_mode=` instead.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   An object suitable for being returned from a `@render.data_frame`-decorated output function.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.output_data_frame`) - The UI placeholder for a data frame output.
* [](:class:`~shiny.express.render.data_frame`) - The `render` method for data frames.
* [](:class:`~shiny.express.render.DataTable`) - A more _tabular_ view of the data.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd
import seaborn as sns

from shiny import reactive
from shiny.express import input, render, ui

height = 350
width = "fit-content"
df: reactive.value[pd.DataFrame] = reactive.value(
    sns.load_dataset("anagrams").iloc[:, 1:]
)


def update_data_with_patch(patch):
    df_copy = df().copy()
    fn = str if patch["column_index"] == 0 else int
    df_copy.iat[patch["row_index"], patch["column_index"]] = fn(patch["value"])
    df.set(df_copy)


ui.head_content(
    ui.tags.meta(name="viewport", content="width=device-width, initial-scale=1")
)
ui.input_select(
    "selection_mode",
    "Selection mode",
    {
        "none": "(None)",
        "row": "Single row",
        "rows": "Multiple rows",
    },
    selected="rows",
)
ui.input_switch("filters", "Filters", True)
ui.input_switch("editable", "Editable", True)

with ui.layout_column_wrap(width=1 / 2):
    with ui.card():
        ui.card_header("Data Frame as ", ui.tags.code("render.DataGrid"))

        @render.data_frame
        def grid():
            return render.DataGrid(
                df(),
                width=width,
                height=height,
                filters=input.filters(),
                editable=input.editable(),
                selection_mode=input.selection_mode(),
            )

        @grid.set_patch_fn
        def _(*, patch: render.CellPatch):
            update_data_with_patch(patch)
            return patch["value"]

    with ui.card():
        ui.card_header("Data Frame as ", ui.tags.code("render.DataTable"))

        @render.data_frame
        def table():
            return render.DataTable(
                df(),
                width=width,
                height=height,
                filters=input.filters(),
                editable=input.editable(),
                selection_mode=input.selection_mode(),
            )

        @table.set_patch_fn
        def _(*, patch: render.CellPatch):
            update_data_with_patch(patch)
            return patch["value"]


```



```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd

from shiny.express import render, ui

green_styles = [
    {
        "rows": [2, 4],
        "cols": [2, 4],
        "style": {
            "background-color": "mediumspringgreen",
            "width": "300px",
            "height": "100px",
        },
    }
]

n = 6
df = pd.DataFrame(
    {
        "a": range(n),
        "b": range(n, n * 2),
        "c": range(n * 2, n * 3),
        "d": range(n * 3, n * 4),
        "e": range(n * 4, n * 5),
    }
)

ui.h2("Data Frame with Styles applied to 4 cells")


@render.data_frame
def my_df():
    return render.DataGrid(
        df,
        styles=green_styles,
    )


ui.hr()

ui.h2("Custom styles applied to all cells within a data frame ", ui.HTML("&#128075;"))

ui.tags.style(
    ui.HTML(
        """
    .posit-bg {
        background-color: #242a26 ;
    }
    .posit-blue-bg {
        background-color: #447099 ;
    }
    .posit-orange-bg {
        background-color: #ED642F ;
    }
    """
    )
)

hi_styles = [
    {
        # No `rows` or `cols` means apply to all cells
        "class": "posit-bg",
        "style": {
            "border": "transparent",
            "color": "transparent",
        },
    },
    {
        "rows": [3],
        "cols": [2],
        "class": "posit-blue-bg",
        "style": {
            "width": "100px",
            "height": "75px",
        },
    },
    {
        "cols": [1, 3, 5],
        "class": "posit-blue-bg",
    },
    {
        "cols": [7],
        "rows": [0, 1, 2, 3, 5],
        "class": "posit-orange-bg",
    },
]

n = 7
hi_pd = pd.DataFrame(
    {
        "a": range(n),
        "b": range(n, n * 2),
        "c": range(n * 2, n * 3),
        "d": range(n * 3, n * 4),
        "e": range(n * 4, n * 5),
        "f": range(n * 5, n * 6),
        "g": range(n * 6, n * 7),
        "h": range(n * 7, n * 8),
        "i": range(n * 8, n * 9),
    }
)


@render.data_frame
def hi_df():
    return render.DataGrid(
        hi_pd,
        styles=hi_styles,
    )


```

## Methods

| Name | Description |
| --- | --- |
| [to_payload](#shiny.express.render.DataGrid.to_payload) | Converts the `DataGrid` object to a payload dictionary. |

### to_payload { #shiny.express.render.DataGrid.to_payload }

```python
express.render.DataGrid.to_payload()
```

Converts the `DataGrid` object to a payload dictionary.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[FrameJson](`shiny.express.render._data_frame_utils._types.FrameJson`)]{.parameter-annotation}</code>

:   The payload dictionary representing the `DataGrid` object.

================
File: express.render.DataTable.qmd
================
# express.render.DataTable { #shiny.express.render.DataTable }

```python
express.render.DataTable(
    self,
    data,
    *,
    width='fit-content',
    height='500px',
    summary=True,
    filters=False,
    editable=False,
    selection_mode='none',
    styles=None,
    row_selection_mode='deprecated',
)
```

Holds the data and options for a [](:class:`~shiny.express.render.data_frame`) output, for a
spreadsheet-like view.

This class is used to wrap the returned data frame from a `@render.data_frame`
render function. It allows you to specify options for the data table, such as the
width and height of the table, whether to show a summary message, whether to show
filter inputs, whether the cells are editable, and how the cells are selected.

While there are currently no execution or parameter differences between `DataGrid`
and `DataTable` other than CSS styling in the browser, the two classes are kept
separate to allow for future extensibility.

## Parameters {.doc-section .doc-section-parameters}

<code>[**data**]{.parameter-name} [:]{.parameter-annotation-sep} [[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)]{.parameter-annotation}</code>

:   A [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'fit-content\']{.parameter-default}</code>

:   A _maximum_ amount of vertical space for the data table to occupy, in CSS units (e.g. `"400px"`) or as a number, which will be interpreted as pixels. The default is `fit-content`, which sets the table's width according to its contents. Set this to `100%` to use the maximum available horizontal space.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'500px\']{.parameter-default}</code>

:   A _maximum_ amount of vertical space for the data table to occupy, in CSS units (e.g. `"400px"`) or as a number, which will be interpreted as pixels. If there are more rows than can fit in this space, the table body will scroll. Set the height to `None` to allow the table to grow to fit all of the rows (this is not recommended for large data sets, as it may crash the browser).

<code>[**summary**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If `True` (the default), shows a message like "Viewing rows 1 through 10 of 20" below the grid when not all of the rows are being shown. If `False`, the message is not displayed. You can also specify a string template to customize the message, containing `{start}`, `{end}`, and `{total}` tokens. For example: `"Viendo filas {start} a {end} de {total}"`.

<code>[**filters**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, shows a row of filter inputs below the headers, one for each column.

<code>[**editable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, allows the user to edit the cells in the grid. When a cell is edited, the new value is sent to the server for processing. The server can then return a new value for the cell, which will be displayed in the grid.

<code>[**selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectionModeInput](`shiny.express.render._data_frame_utils._selection.SelectionModeInput`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'none\']{.parameter-default}</code>

:   Single string or a `set`/`list`/`tuple` of string values to define possible ways to select data within the data frame.  Supported values: * Use `"none"` to disable any cell selections or editing. * Use `"row"` to allow a single row to be selected at a time. * Use `"rows"` to allow multiple rows to be selected by clicking on them individually.  Resolution rules: * If `"none"` is supplied, all other values will be ignored. * If both `"row"` and `"rows"` are supplied, `"row"` will be dropped (supporting `"rows"`).

<code>[**styles**]{.parameter-name} [:]{.parameter-annotation-sep} [[StyleInfo](`shiny.express.render._data_frame_utils._styles.StyleInfo`) \| [list](`list`)\[[StyleInfo](`shiny.express.render._data_frame_utils._styles.StyleInfo`)\] \| [StyleFn](`shiny.express.render._data_frame_utils._styles.StyleFn`)\[[IntoDataFrameT](`shiny.express.render._data_frame_utils._types.IntoDataFrameT`)\] \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A style info object, a list of style info objects, or a function that receives the (possibly updated) data frame and returns a list of style info objects. The style info objects can be used to apply CSS styles to the data frame. If `styles=None`, no styling will be applied.  Style info object key/value description: * `location`: This value `"body"` and is not required. * `rows`: The row numbers to which the style should be applied. If `None`, the     style will be applied to all rows. * `cols`: The column numbers to which the style should be applied. If `None`,     the style will be applied to all columns. * `style`: A dictionary of CSS properties and values to apply to the selected     rows and columns. Traditional _kebab-cased_ CSS property names (e.g.     `background-color`) will work in addition to _camelCased_ CSS property names     (e.g. `backgroundColor`). * `class`: A string of CSS class names to apply to the selected rows and columns.  If both `style` and `class` are missing or `None`, nothing will be applied. If both `rows` and `cols` are missing or `None`, the style will be applied to the complete data frame.

<code>[**row_selection_mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['deprecated'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'deprecated\']{.parameter-default}</code>

:   Deprecated. Please use `mode={row_selection_mode}_row` instead.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   An object suitable for being returned from a `@render.data_frame`-decorated output function.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.output_data_frame`) - The UI placeholder for a data frame output.
* [](:class:`~shiny.express.render.data_frame`) - The `render` method for data frames.
* [](:class:`~shiny.express.render.DataTable`) - A more _grid_ view of the data.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd
import seaborn as sns

from shiny import reactive
from shiny.express import input, render, ui

height = 350
width = "fit-content"
df: reactive.value[pd.DataFrame] = reactive.value(
    sns.load_dataset("anagrams").iloc[:, 1:]
)


def update_data_with_patch(patch):
    df_copy = df().copy()
    fn = str if patch["column_index"] == 0 else int
    df_copy.iat[patch["row_index"], patch["column_index"]] = fn(patch["value"])
    df.set(df_copy)


ui.head_content(
    ui.tags.meta(name="viewport", content="width=device-width, initial-scale=1")
)
ui.input_select(
    "selection_mode",
    "Selection mode",
    {
        "none": "(None)",
        "row": "Single row",
        "rows": "Multiple rows",
    },
    selected="rows",
)
ui.input_switch("filters", "Filters", True)
ui.input_switch("editable", "Editable", True)

with ui.layout_column_wrap(width=1 / 2):
    with ui.card():
        ui.card_header("Data Frame as ", ui.tags.code("render.DataGrid"))

        @render.data_frame
        def grid():
            return render.DataGrid(
                df(),
                width=width,
                height=height,
                filters=input.filters(),
                editable=input.editable(),
                selection_mode=input.selection_mode(),
            )

        @grid.set_patch_fn
        def _(*, patch: render.CellPatch):
            update_data_with_patch(patch)
            return patch["value"]

    with ui.card():
        ui.card_header("Data Frame as ", ui.tags.code("render.DataTable"))

        @render.data_frame
        def table():
            return render.DataTable(
                df(),
                width=width,
                height=height,
                filters=input.filters(),
                editable=input.editable(),
                selection_mode=input.selection_mode(),
            )

        @table.set_patch_fn
        def _(*, patch: render.CellPatch):
            update_data_with_patch(patch)
            return patch["value"]


```



```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd

from shiny.express import render, ui

green_styles = [
    {
        "rows": [2, 4],
        "cols": [2, 4],
        "style": {
            "background-color": "mediumspringgreen",
            "width": "300px",
            "height": "100px",
        },
    }
]

n = 6
df = pd.DataFrame(
    {
        "a": range(n),
        "b": range(n, n * 2),
        "c": range(n * 2, n * 3),
        "d": range(n * 3, n * 4),
        "e": range(n * 4, n * 5),
    }
)

ui.h2("Data Frame with Styles applied to 4 cells")


@render.data_frame
def my_df():
    return render.DataGrid(
        df,
        styles=green_styles,
    )


ui.hr()

ui.h2("Custom styles applied to all cells within a data frame ", ui.HTML("&#128075;"))

ui.tags.style(
    ui.HTML(
        """
    .posit-bg {
        background-color: #242a26 ;
    }
    .posit-blue-bg {
        background-color: #447099 ;
    }
    .posit-orange-bg {
        background-color: #ED642F ;
    }
    """
    )
)

hi_styles = [
    {
        # No `rows` or `cols` means apply to all cells
        "class": "posit-bg",
        "style": {
            "border": "transparent",
            "color": "transparent",
        },
    },
    {
        "rows": [3],
        "cols": [2],
        "class": "posit-blue-bg",
        "style": {
            "width": "100px",
            "height": "75px",
        },
    },
    {
        "cols": [1, 3, 5],
        "class": "posit-blue-bg",
    },
    {
        "cols": [7],
        "rows": [0, 1, 2, 3, 5],
        "class": "posit-orange-bg",
    },
]

n = 7
hi_pd = pd.DataFrame(
    {
        "a": range(n),
        "b": range(n, n * 2),
        "c": range(n * 2, n * 3),
        "d": range(n * 3, n * 4),
        "e": range(n * 4, n * 5),
        "f": range(n * 5, n * 6),
        "g": range(n * 6, n * 7),
        "h": range(n * 7, n * 8),
        "i": range(n * 8, n * 9),
    }
)


@render.data_frame
def hi_df():
    return render.DataGrid(
        hi_pd,
        styles=hi_styles,
    )


```

## Methods

| Name | Description |
| --- | --- |
| [to_payload](#shiny.express.render.DataTable.to_payload) | Converts the `DataTable` object to a payload dictionary. |

### to_payload { #shiny.express.render.DataTable.to_payload }

```python
express.render.DataTable.to_payload()
```

Converts the `DataTable` object to a payload dictionary.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[FrameJson](`shiny.express.render._data_frame_utils._types.FrameJson`)]{.parameter-annotation}</code>

:   The payload dictionary representing the `DataTable` object.

================
File: express.render.download.qmd
================
# express.render.download { #shiny.express.render.download }

```python
express.render.download(
    self,
    fn=None,
    *,
    filename=None,
    media_type=None,
    encoding='utf-8',
    label='Download',
)
```

Decorator to register a function to handle a download.

This decorator is used to register a function that will be called when the user
clicks a download link or button. The decorated function may be sync or async, and
should do one of the following:

* Return a string. This will be assumed to be a filename; Shiny will return this
  file to the browser, and the downloaded file will have the same filename as the
  original, with an inferred mime type. This is the most convenient IF the file
  already exists on disk. But if the function must create a temporary file, then
  this method should not be used, because the temporary file will not be deleted by
  Shiny. Use the `yield` method instead.
* `yield` one or more strings or bytestrings (`b"..."` or
  `io.BytesIO().getvalue()`). If strings are yielded, they&#x27;ll be encoded in UTF-8.
  (This is better for temp files as after you&#x27;re done yielding you can delete the
  temp file, or use a tempfile.TemporaryFile context manager) With this method, it&#x27;s
  important that the `@render.download` decorator have a `filename` argument, as the
  decorated function won&#x27;t help with that.

## Parameters {.doc-section .doc-section-parameters}

<code>[**filename**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [Callable](`typing.Callable`)\[\[\], [str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The filename of the download.

<code>[**media_type**]{.parameter-name} [:]{.parameter-annotation-sep} [None \| [str](`str`) \| [Callable](`typing.Callable`)\[\[\], [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The media type of the download.

<code>[**encoding**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'utf-8\']{.parameter-default}</code>

:   The encoding of the download.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Download\']{.parameter-default}</code>

:   (Express only) A label for the button. Defaults to "Download".

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The decorated function.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.download_button`)
* [](:func:`~shiny.ui.download_link`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
import io
import os
from datetime import date

import matplotlib.pyplot as plt
import numpy as np

from shiny.express import render, ui

ui.page_opts(title="Various download examples")

with ui.accordion(open=True):
    with ui.accordion_panel("Simple case"):
        ui.markdown("Downloads a pre-existing file, using its existing name on disk.")

        @render.download(label="Download CSV")
        def download1():
            """
            This is the simplest case. The implementation simply returns the name of a file.
            Note that the function name (`download1`) determines which download_button()
            corresponds to this function.
            """

            path = os.path.join(os.path.dirname(__file__), "mtcars.csv")
            return path

    with ui.accordion_panel("Dynamic data generation"):
        ui.markdown("Downloads a PNG that's generated on the fly.")

        ui.input_text("title", "Plot title", "Random scatter plot")
        ui.input_slider("num_points", "Number of data points", min=1, max=100, value=50)

        @render.download(label="Download plot", filename="image.png")
        def download2():
            """
            Another way to implement a file download is by yielding bytes; either all at
            once, like in this case, or by yielding multiple times. When using this
            approach, you should pass a filename argument to @render.download, which
            determines what the browser will name the downloaded file.
            """

            print(input.num_points())
            x = np.random.uniform(size=input.num_points())
            y = np.random.uniform(size=input.num_points())
            plt.figure()
            plt.scatter(x, y)
            plt.title(input.title())
            with io.BytesIO() as buf:
                plt.savefig(buf, format="png")
                yield buf.getvalue()

    with ui.accordion_panel("Dynamic filename"):
        ui.markdown(
            "Demonstrates that filenames can be generated on the fly (and use Unicode characters!)."
        )

        @render.download(
            label="Download filename",
            filename=lambda: f"新型-{date.today().isoformat()}-{np.random.randint(100, 999)}.csv",
        )
        async def download3():
            await asyncio.sleep(0.25)
            yield "one,two,three\n"
            yield "新,1,2\n"
            yield "型,4,5\n"

    with ui.accordion_panel("Failed downloads"):
        ui.markdown(
            "Throws an error in the download handler, download should not succeed."
        )

        @render.download(label="Download", filename="failuretest.txt")
        async def download4():
            yield "hello"
            raise Exception("This error was caused intentionally")


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: express.render.express.qmd
================
# express.render.express { #shiny.express.render.express }

```python
express.render.express(
    self,
    _fn=None,
    *,
    inline=False,
    container=None,
    fill=False,
    fillable=False,
    **kwargs,
)
```

Reactively render HTML content with output captured as in Shiny Express

This is similar to [](:class:`~shiny.express.render.ui`), except that [](:class:`~shiny.express.render.ui`)
uses the return value from the the decorated function, whereas this function works
like Shiny Express: as it executes each line of the decorated function, it calls
:func:`~sys.displayhook()` on the result. This has the effect of &quot;capturing&quot; the
output of each line.

This decorator can be thought of as a combination of [](:class:`~shiny.express.render.ui`) (for
rendering and sending the dynamic UI to the client), and `~shiny.express.expressify`
(for capturing the output of each line).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns `None`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.render.ui`)
* [](:func:`~shiny.express.ui.output_ui`)
* [](:func:`~shiny.express.expressify`)
* [](:func:`~shiny.express.ui.hold`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.input_text("name", "Name", "Socrates")
ui.input_text("years", "Years", "470-399 BC")


@render.express
def person():
    with ui.card(class_="mt-3"):
        ui.h3(input.name())
        input.years()


```

================
File: express.render.image.qmd
================
# express.render.image { #shiny.express.render.image }

```python
express.render.image(self, _fn=None, *, delete_file=False)
```

Reactively render a image file as an HTML image.

## Parameters {.doc-section .doc-section-parameters}

<code>[**delete_file**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the image file will be deleted after rendering.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns an [](:func:`~shiny.types.ImgData`) object.

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.express.ui.output_image`) container (see [](:func:`~shiny.express.ui.output_image`)
for example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.output_image`)
* [](:class:`~shiny.types.ImgData`)
* [](:class:`~shiny.express.render.plot`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import render


@render.image
def image():
    from pathlib import Path

    dir = Path(__file__).resolve().parent
    img = {"src": str(dir / "posit-logo.png"), "width": "100px"}
    return img


## file: posit-logo.png
## type: binary


```

================
File: express.render.plot.qmd
================
# express.render.plot { #shiny.express.render.plot }

```python
express.render.plot(
    self,
    _fn=None,
    *,
    alt=None,
    width=MISSING,
    height=MISSING,
    **kwargs,
)
```

Reactively render a plot object as an HTML image.

## Parameters {.doc-section .doc-section-parameters}

<code>[**alt**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Alternative text for the image if it cannot be displayed or viewed (i.e., the user uses a screen reader).

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   Width of the plot in pixels. If ``None`` or ``MISSING``, the width will be determined by the size of the corresponding [](:func:`~shiny.express.ui.output_plot`). (You should not need to use this argument in most Shiny apps--set the desired width on [](:func:`~shiny.express.ui.output_plot`) instead.)

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   Height of the plot in pixels. If ``None`` or ``MISSING``, the height will be determined by the size of the corresponding [](:func:`~shiny.express.ui.output_plot`). (You should not need to use this argument in most Shiny apps--set the desired height on [](:func:`~shiny.express.ui.output_plot`) instead.)

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional keyword arguments passed to the relevant method for saving the image (e.g., for matplotlib, arguments to ``savefig()``; for PIL and plotnine, arguments to ``save()``).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns any of the following:  1. A [](:class:`matplotlib.figure.Figure`) instance. 2. An [](:class:`matplotlib.artist.Artist`) instance. 3. A list/tuple of Figure/Artist instances. 4. An object with a 'figure' attribute pointing to a    [](:class:`matplotlib.figure.Figure`) instance. 5. A [](:class:`PIL.Image.Image`) instance.

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [It's also possible to use the ``matplotlib.pyplot`` interface; in that case, your]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [function should just call pyplot functions and not return anything. (Note that if]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [the decorated function is async, then it's not safe to use pyplot. Shiny will detect]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [this case and throw an error asking you to use matplotlib's object-oriented]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [interface instead.)]{.parameter-annotation}</code>

:   

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.express.ui.output_plot`) container (see [](:func:`~shiny.express.ui.output_plot`) for
example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.output_plot`)
* [](:class:`~shiny.express.render.image`)

================
File: express.render.table.qmd
================
# express.render.table { #shiny.express.render.table }

```python
express.render.table(
    self,
    _fn=None,
    *,
    index=False,
    classes='table shiny-table w-auto',
    border=0,
    **kwargs,
)
```

Reactively render a pandas ``DataFrame`` object (or similar) as a basic HTML
table.

Consider using [](:class:`~shiny.express.render.data_frame`) instead of this renderer, as
it provides high performance virtual scrolling, built-in filtering and sorting,
and a better default appearance. This renderer may still be helpful if you
use pandas styling features that are not currently supported by
[](:class:`~shiny.express.render.data_frame`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**index**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to print index (row) labels. (Ignored for pandas [](:class:`~pandas.io.formats.style.Styler`) objects; call ``style.hide(axis="index")`` from user code instead.)

<code>[**classes**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'table shiny-table w-auto\']{.parameter-default}</code>

:   CSS classes (space separated) to apply to the resulting table. By default, we use `table shiny-table w-auto` which is designed to look reasonable with Bootstrap 5. (Ignored for pandas [](:class:`~pandas.io.formats.style.Styler`) objects; call ``style.set_table_attributes('class="dataframe table shiny-table w-auto"')`` from user code instead.)

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional keyword arguments passed to ``pandas.DataFrame.to_html()`` or ``pandas.io.formats.style.Styler.to_html()``.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns any of the following:  1. A pandas [](:class:`~pandas.DataFrame`) object. 2. A pandas [](:class:`~pandas.io.formats.style.Styler`) object. 3. Any object that has a `.to_pandas()` method (e.g., a Polars data frame or    Arrow table).

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.express.ui.output_table`) container (see [](:func:`~shiny.express.ui.output_table`)
for example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.output_table`) for the corresponding UI component to this render function.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pathlib

import pandas as pd

from shiny.express import input, render, ui

dir = pathlib.Path(__file__).parent
mtcars = pd.read_csv(dir / "mtcars.csv")


ui.input_checkbox("highlight", "Highlight min/max values")


@render.table
def result():
    if not input.highlight():
        # If we're not highlighting values, we can simply
        # return the pandas data frame as-is; @render.table
        # will call .to_html() on it.
        return mtcars
    else:
        # We need to use the pandas Styler API. The default
        # formatting options for Styler are not the same as
        # DataFrame.to_html(), so we set a few options to
        # make them match.
        return (
            mtcars.style.set_table_attributes(
                'class="dataframe shiny-table table w-auto"'
            )
            .hide(axis="index")
            .format(
                {
                    "mpg": "{0:0.1f}",
                    "disp": "{0:0.1f}",
                    "drat": "{0:0.2f}",
                    "wt": "{0:0.3f}",
                    "qsec": "{0:0.2f}",
                }
            )
            .set_table_styles([dict(selector="th", props=[("text-align", "right")])])
            .highlight_min(color="silver")
            .highlight_max(color="yellow")
        )


# Legend
with ui.panel_conditional("input.highlight"):
    with ui.panel_absolute(bottom="6px", right="6px", class_="p-1 bg-light border"):
        "Yellow is maximum, grey is minimum"


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: express.render.text.qmd
================
# express.render.text { #shiny.express.render.text }

```python
express.render.text(self, _fn=None, *, inline=False)
```

Reactively render text.

When used in Shiny Express applications, this defaults to displaying the text as
normal text on the web page. When used in Shiny Core applications, this should be
paired with [](:func:`~shiny.express.ui.output_text`) in the UI.

## Parameters {.doc-section .doc-section-parameters}

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   (Express only). If ``True``, the result is displayed inline. (This argument is passed to [](:func:`~shiny.express.ui.output_text`).)

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns a string.

## Tip {.doc-section .doc-section-tip}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.express.ui.output_text`) container (see [](:func:`~shiny.express.ui.output_text`) for
example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.express.render.code`)
* [](:func:`~shiny.express.ui.output_text`)

================
File: express.render.ui.qmd
================
# express.render.ui { #shiny.express.render.ui }

```python
express.render.ui(self, _fn=None)
```

Reactively render HTML content.

Note: If you want to write your function with Shiny Express syntax, where the UI
components are automatically captured as the code is evaluated, use
[](:func:`~shiny.express.render.express`) instead of this function.

This function is used to render HTML content, but it requires that the funciton
returns the content, using Shiny Core syntax.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A decorator for a function that returns an object of type [](:class:`~htmltools.TagChild`).

## Tips {.doc-section .doc-section-tips}

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.express.ui.output_ui`) container (see [](:func:`~shiny.express.ui.output_ui`) for
example usage).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.render.express`)
* [](:func:`~shiny.express.expressify`)
* [](:func:`~shiny.express.ui.output_ui`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, render, ui

ui.input_action_button("add", "Add more controls")


@render.ui
@reactive.event(input.add)
def moreControls():
    return [
        ui.input_slider("n", "N", min=1, max=1000, value=500),
        ui.input_text("label", "Label"),
    ]


```

================
File: express.ui.accordion_panel.qmd
================
# express.ui.accordion_panel { #shiny.express.ui.accordion_panel }

```python
express.ui.accordion_panel(title, *, value=MISSING, icon=None, **kwargs)
```

Context manager for single accordion panel.

This function wraps [](:func:`~shiny.ui.accordion_panel`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A title to appear in the [](:func:`~shiny.ui.accordion_panel`)'s header.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\] \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A character string that uniquely identifies this panel. If `MISSING`, the `title` will be used.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~htmltools.Tag`) which is positioned just before the `title`.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Tag attributes to the `accordion-body` div Tag.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.accordion(id="acc"):
    for letter in "ABCDE":
        with ui.accordion_panel(f"Section {letter}"):
            f"Some narrative for section {letter}"


@render.code
def acc_val():
    return "input.acc(): " + str(input.acc())


```

================
File: express.ui.accordion.qmd
================
# express.ui.accordion { #shiny.express.ui.accordion }

```python
express.ui.accordion(
    id=None,
    open=None,
    multiple=True,
    class_=None,
    width=None,
    height=None,
    **kwargs,
)
```

Context manager for a vertically collapsing accordion.

This function wraps [](:func:`~shiny.ui.accordion`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, you can use `input.id()` in your server logic to determine which of the [](:func:`~shiny.ui.accordion_panel`)s are currently active. The value will correspond to the [](:func:`~shiny.ui.accordion_panel`)'s `value` argument.

<code>[**open**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`) \| [str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A list of [](:func:`~shiny.ui.accordion_panel`) values to open (i.e., show) by default. The default value of `None` will open the first [](:func:`~shiny.ui.accordion_panel`). Use a value of `True` to open all (or `False` to open none) of the items. It's only possible to open more than one panel when `multiple=True`.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether multiple [](:func:`~shiny.ui.accordion_panel`) can be open at once.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Additional CSS classes to include on the accordion div.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit; for example, height="100%".

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit; for example, height="100%".

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to this tag.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import expressify, input, render, ui


@expressify
def my_accordion(**kwargs):
    with ui.accordion(**kwargs):
        for letter in "ABCDE":
            with ui.accordion_panel(f"Section {letter}"):
                f"Some narrative for section {letter}"


ui.markdown("#### Single-select accordion")

my_accordion(multiple=False, id="acc_single")


@render.code
def acc_single_val():
    return "input.acc_single(): " + str(input.acc_single())


ui.br()

ui.markdown("#### Multi-select accordion")

my_accordion(multiple=True, id="acc_multiple")


@render.code
def acc_multiple_val():
    return "input.acc_multiple(): " + str(input.acc_multiple())


```

================
File: express.ui.busy_indicators.options.qmd
================
# express.ui.busy_indicators.options { #shiny.express.ui.busy_indicators.options }

```python
express.ui.busy_indicators.options(
    spinner_type=None,
    spinner_color=None,
    spinner_size=None,
    spinner_delay=None,
    spinner_selector=None,
    fade_opacity=None,
    fade_selector=None,
    pulse_background=None,
    pulse_height=None,
    pulse_speed=None,
)
```

Customize spinning busy indicators.

Busy indicators provide a visual cue to users when the server is busy calculating
outputs or otherwise performing tasks (e.g., producing downloads). This function
allows you to customize the appearance of those busy indicators. To apply the
customization, include the result of this function inside the app&#x27;s UI.

## Parameters {.doc-section .doc-section-parameters}

<code>[**spinner_type**]{.parameter-name} [:]{.parameter-annotation-sep} [[BusySpinnerType](`shiny.express.ui._busy_spinner_types.BusySpinnerType`) \| [Path](`pathlib.Path`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The type of spinner. Pre-bundled types are listed in the `BusySpinnerType` type.  A `Path` to a local SVG file can also be provided. The SVG should adhere to the following rules: * The SVG itself should contain the animation. * It should avoid absolute sizes (the spinner's containing DOM element size is     set in CSS by `spinner_size`, so it should fill that container). * It should avoid setting absolute colors (the spinner's containing DOM     element color is set in CSS by `spinner_color`, so it should inherit that     color).

<code>[**spinner_color**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The color of the spinner. This can be any valid CSS color. Defaults to the app's "primary" color (if Bootstrap is on the page).

<code>[**spinner_size**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The size of the spinner. This can be any valid CSS size.

<code>[**spinner_delay**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The amount of time to wait before showing the spinner. This can be any valid CSS time and can useful for not showing the spinner if the computation finishes quickly.

<code>[**spinner_selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string containing a CSS selector for scoping the spinner customization. The default (`None`) will apply the spinner customization to the parent element of the spinner.

<code>[**fade_opacity**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The opacity (a number between 0 and 1) for recalculating output. Set to 1 to "disable" the fade.

<code>[**fade_selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A string containing a CSS selector for scoping the fade customization. The default (`None`) applies the fade customization to the parent element.

<code>[**pulse_background**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CCS background definition for the pulse. The default uses a [linear-gradient](https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient) of the theme's indigo, purple, and pink colors.

<code>[**pulse_height**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The height of the pulsing banner. This can be any valid CSS size.

<code>[**pulse_speed**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The speed of the pulsing banner. This can be any valid CSS time.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.busy_indicators.use`) for enabling/disabling busy indicators.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import os
import time

import numpy as np
import seaborn as sns

from shiny.express import input, render, ui

ui.page_opts(title="Busy spinner demo")

with ui.sidebar():
    ui.input_selectize(
        "indicator_types",
        "Busy indicator types",
        ["spinners", "pulse"],
        multiple=True,
        selected=["spinners", "pulse"],
    )

    @render.download
    def download():
        time.sleep(3)
        path = os.path.join(os.path.dirname(__file__), "app-express.py")
        return path


with ui.card():
    ui.card_header(
        "Plot that takes a few seconds to render",
        ui.input_task_button("simulate", "Simulate"),
        class_="d-flex justify-content-between align-items-center",
    )

    @render.plot
    def plot():
        input.simulate()
        time.sleep(3)
        sns.lineplot(x=np.arange(100), y=np.random.randn(100))


ui.busy_indicators.options(spinner_type="bars3")


@render.ui
def indicator_types_ui():
    return ui.busy_indicators.use(
        spinners="spinners" in input.indicator_types(),
        pulse="pulse" in input.indicator_types(),
    )


```

================
File: express.ui.busy_indicators.use.qmd
================
# express.ui.busy_indicators.use { #shiny.express.ui.busy_indicators.use }

```python
express.ui.busy_indicators.use(spinners=True, pulse=True, fade=True)
```

Enable/disable busy indication

Busy indicators provide a visual cue to users when the server is busy calculating
outputs or otherwise performing tasks (e.g., producing downloads). When enabled
(they are by default), a spinner is shown on each calculating/recalculating output,
and a pulsing banner is shown at the top of the page when the app is otherwise busy.
To disable, include the result of this function in anywhere in the app&#x27;s UI.

## Parameters {.doc-section .doc-section-parameters}

<code>[**spinners**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to show a spinner on each calculating/recalculating output.

<code>[**pulse**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to show a pulsing banner at the top of the page when the app is busy.

<code>[**fade**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to fade recalculating outputs. A value of `False` is equivalent to `shiny.express.ui.busy_indicators.options(fade_opacity=1)`.

## Note {.doc-section .doc-section-note}

When both `spinners` and `pulse` are set to `True`, the pulse is disabled when
spinner(s) are active.
When both `spinners` and `pulse` are set to `False`, no busy indication is shown
(other than the gray-ing out of recalculating outputs).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.busy_indicators.options`) for customizing busy indicators.

================
File: express.ui.card_footer.qmd
================
# express.ui.card_footer { #shiny.express.ui.card_footer }

```python
express.ui.card_footer(*args, **kwargs)
```

Context manager for a card footer container

This function wraps [](:func:`~shiny.ui.card_footer`).


A general container for the &quot;footer&quot; of a [](:func:`~shiny.express.ui.card`). This component is designed
to be provided as a direct child to [](:func:`~shiny.express.ui.card`).

The footer has a different background color and border than the rest of the card.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to the footer container. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional HTML attributes for the returned Tag.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

with ui.card(full_screen=True):
    ui.card_header("This is the header")
    ui.p("This is the body.")
    ui.p("This is still the body.")
    ui.card_footer("This is the footer")


```

================
File: express.ui.card_header.qmd
================
# express.ui.card_header { #shiny.express.ui.card_header }

```python
express.ui.card_header(*args, container=ui.tags.div, **kwargs)
```

Context manager for a card header container

This function wraps [](:func:`~shiny.ui.card_header`).

A general container for the &quot;header&quot; of a [](:func:`~shiny.express.ui.card`). This component is designed
to be provided as a direct child to [](:func:`~shiny.express.ui.card`).

The header has a different background color and border than the rest of the card.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to the header container. Or tag attributes that are supplied to the resolved [](:class:`~htmltools.Tag`) object.

<code>[**container**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagFunction](`htmltools.TagFunction`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [ui.tags.div]{.parameter-default}</code>

:   Method for the returned Tag object. Defaults to [](:func:`~shiny.express.ui.tags.div`).

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional HTML attributes for the returned Tag.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

with ui.card(full_screen=True):
    ui.card_header("This is the header")
    ui.p("This is the body.")
    ui.p("This is still the body.")
    ui.card_footer("This is the footer")


```

================
File: express.ui.card.qmd
================
# express.ui.card { #shiny.express.ui.card }

```python
express.ui.card(
    full_screen=False,
    height=None,
    max_height=None,
    min_height=None,
    fill=True,
    class_=None,
    **kwargs,
)
```

Context manager for Bootstrap card component

This function wraps [](:func:`~shiny.ui.card`).

A general purpose container for grouping related UI elements together with a border
and optional padding. To learn more about `card()`s, see [this
article](https://rstudio.github.io/bslib/articles/cards.html).

## Parameters {.doc-section .doc-section-parameters}

<code>[**full_screen**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit (e.g., `height="200px"`). Doesn't apply when a card is made `full_screen` (in this case, consider setting a `height` in [](:func:`~shiny.experimental.ui.card_body`)).

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to allow the card to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.express.ui.page_fillable`)).

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Additional CSS classes for the returned Tag.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   HTML attributes on the returned Tag.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

with ui.card(full_screen=True):
    ui.card_header("This is the header")
    ui.p("This is the body.")
    ui.p("This is still the body.")
    ui.card_footer("This is the footer")


```

================
File: express.ui.Chat.qmd
================
# express.ui.Chat { #shiny.express.ui.Chat }

```python
express.ui.Chat(self, id, *, messages=(), on_error='auto', tokenizer=None)
```

Create a chat interface.

A UI component for building conversational interfaces. With it, end users can submit
messages, which will cause a `.on_user_submit()` callback to run. In that callback,
a response can be generated based on the chat&#x27;s `.messages()`, and appended to the
chat using `.append_message()` or `.append_message_stream()`.

Here&#x27;s a rough outline for how to implement a `Chat`:

```python
from shiny.express import ui

# Create and display chat instance
chat = ui.Chat(id="my_chat")
chat.ui()

# Define a callback to run when the user submits a message
@chat.on_user_submit
async def _():
    # Get messages currently in the chat
    messages = chat.messages()
    # Create a response message stream
    response = await my_model.generate_response(messages, stream=True)
    # Append the response into the chat
    await chat.append_message_stream(response)
```

In the outline above, `my_model.generate_response()` is a placeholder for
the function that generates a response based on the chat&#x27;s messages. This function
will look different depending on the model you&#x27;re using, but it will generally
involve passing the messages to the model and getting a response back. Also, you&#x27;ll
typically have a choice to `stream=True` the response generation, and in that case,
you&#x27;ll use `.append_message_stream()` instead of `.append_message()` to append the
response to the chat. Streaming is preferrable when available since it allows for
more responsive and scalable chat interfaces.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A unique identifier for the chat session. In Shiny Core, make sure this id matches a corresponding [](:func:`~shiny.express.ui.chat_ui`) call in the UI.

<code>[**messages**]{.parameter-name} [:]{.parameter-annotation-sep} [[Sequence](`typing.Sequence`)\[[Any](`typing.Any`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   A sequence of messages to display in the chat. Each message can be a dictionary with a `content` and `role` key. The `content` key should contain the message text, and the `role` key can be "assistant", "user", or "system". Note that system messages are not actually displayed in the chat, but will still be stored in the chat's `.messages()`.

<code>[**on_error**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'actual', 'sanitize', 'unhandled'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   How to handle errors that occur in response to user input. When `"unhandled"`, the app will stop running when an error occurs. Otherwise, a notification is displayed to the user and the app continues to run.  * `"auto"`: Sanitize the error message if the app is set to sanitize errors,   otherwise display the actual error message. * `"actual"`: Display the actual error message to the user. * `"sanitize"`: Sanitize the error message before displaying it to the user. * `"unhandled"`: Do not display any error message to the user.

<code>[**tokenizer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TokenEncoding](`shiny.express.ui._chat_tokenizer.TokenEncoding`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The tokenizer to use for calculating token counts, which is required to impose `token_limits` in `.messages()`. If not provided, a default generic tokenizer is attempted to be loaded from the tokenizers library. A specific tokenizer may also be provided by following the `TokenEncoding` (tiktoken or tozenizers) protocol (e.g., `tiktoken.encoding_for_model("gpt-4o")`).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

# Set some Shiny page options
ui.page_opts(
    title="Hello Shiny Chat",
    fillable=True,
    fillable_mobile=True,
)

# Create a welcome message
welcome = ui.markdown(
    """
    Hi! This is a simple Shiny `Chat` UI. Enter a message below and I will
    simply repeat it back to you. For more examples, see this
    [folder of examples](https://github.com/posit-dev/py-shiny/tree/main/examples/chat).
    """
)

# Create a chat instance
chat = ui.Chat(
    id="chat",
    messages=[welcome],
)

# Display it
chat.ui()


# Define a callback to run when the user submits a message
@chat.on_user_submit
async def _():
    # Get the user's input
    user = chat.user_input()
    # Append a response to the chat
    await chat.append_message(f"You said: {user}")


```

## Methods

| Name | Description |
| --- | --- |
| [append_message](#shiny.express.ui.Chat.append_message) | Append a message to the chat. |
| [append_message_stream](#shiny.express.ui.Chat.append_message_stream) | Append a message as a stream of message chunks. |
| [clear_messages](#shiny.express.ui.Chat.clear_messages) | Clear all chat messages. |
| [destroy](#shiny.express.ui.Chat.destroy) | Destroy the chat instance. |
| [messages](#shiny.express.ui.Chat.messages) | Reactively read chat messages |
| [on_user_submit](#shiny.express.ui.Chat.on_user_submit) | Define a function to invoke when user input is submitted. |
| [set_user_message](#shiny.express.ui.Chat.set_user_message) | Deprecated. Use `update_user_input(value=value)` instead. |
| [transform_assistant_response](#shiny.express.ui.Chat.transform_assistant_response) | Transform assistant responses. |
| [transform_user_input](#shiny.express.ui.Chat.transform_user_input) | Transform user input. |
| [ui](#shiny.express.ui.Chat.ui) | Place a chat component in the UI. |
| [update_user_input](#shiny.express.ui.Chat.update_user_input) | Update the user input. |
| [user_input](#shiny.express.ui.Chat.user_input) | Reactively read the user's message. |

### append_message { #shiny.express.ui.Chat.append_message }

```python
express.ui.Chat.append_message(message)
```

Append a message to the chat.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Any](`typing.Any`)]{.parameter-annotation}</code>

:   The message to append. A variety of message formats are supported including a string, a dictionary with `content` and `role` keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others.

#### Note {.doc-section .doc-section-note}

Use `.append_message_stream()` instead of this method when `stream=True` (or
similar) is specified in model's completion method.

### append_message_stream { #shiny.express.ui.Chat.append_message_stream }

```python
express.ui.Chat.append_message_stream(message)
```

Append a message as a stream of message chunks.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Iterable](`typing.Iterable`)\[[Any](`typing.Any`)\] \| [AsyncIterable](`typing.AsyncIterable`)\[[Any](`typing.Any`)\]]{.parameter-annotation}</code>

:   An iterable or async iterable of message chunks to append. A variety of message chunk formats are supported, including a string, a dictionary with `content` and `role` keys, or a relevant chat completion object from platforms like OpenAI, Anthropic, Ollama, and others.

#### Note {.doc-section .doc-section-note}

Use this method (over `.append_message()`) when `stream=True` (or similar) is
specified in model's completion method.

### clear_messages { #shiny.express.ui.Chat.clear_messages }

```python
express.ui.Chat.clear_messages()
```

Clear all chat messages.

### destroy { #shiny.express.ui.Chat.destroy }

```python
express.ui.Chat.destroy()
```

Destroy the chat instance.

### messages { #shiny.express.ui.Chat.messages }

```python
express.ui.Chat.messages(
    format=MISSING,
    token_limits=None,
    transform_user='all',
    transform_assistant=False,
)
```

Reactively read chat messages

Obtain chat messages within a reactive context. The default behavior is
intended for passing messages along to a model for response generation where
you typically want to:

1. Cap the number of tokens sent in a single request (i.e., `token_limits`).
2. Apply user input transformations (i.e., `transform_user`), if any.
3. Not apply assistant response transformations (i.e., `transform_assistant`)
   since these are predominantly for display purposes (i.e., the model shouldn&#x27;t
   concern itself with how the responses are displayed).

#### Parameters {.doc-section .doc-section-parameters}

<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \| [ProviderMessageFormat](`shiny.express.ui._chat_provider_types.ProviderMessageFormat`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The message format to return. The default value of `MISSING` means chat messages are returned as [](:class:`ChatMessage`) objects (a dictionary with `content` and `role` keys). Other supported formats include:  * `"anthropic"`: Anthropic message format. * `"google"`: Google message (aka content) format. * `"langchain"`: LangChain message format. * `"openai"`: OpenAI message format. * `"ollama"`: Ollama message format.

<code>[**token_limits**]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[int](`int`), [int](`int`)\] \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Limit the conversation history based on token limits. If specified, only the most recent messages that fit within the token limits are returned. This is useful for avoiding "exceeded token limit" errors when sending messages to the relevant model, while still providing the most recent context available. A specified value must be a tuple of two integers. The first integer is the maximum number of tokens that can be sent to the model in a single request. The second integer is the amount of tokens to reserve for the model's response. Note that token counts based on the `tokenizer` provided to the `Chat` constructor.

<code>[**transform_user**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['all', 'last', 'none'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'all\']{.parameter-default}</code>

:   Whether to return user input messages with transformation applied. This only matters if a `transform_user_input` was provided to the chat constructor. The default value of `"all"` means all user input messages are transformed. The value of `"last"` means only the last user input message is transformed. The value of `"none"` means no user input messages are transformed.

<code>[**transform_assistant**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to return assistant messages with transformation applied. This only matters if an `transform_assistant_response` was provided to the chat constructor.

#### Note {.doc-section .doc-section-note}

Messages are listed in the order they were added. As a result, when this method
is called in a `.on_user_submit()` callback (as it most often is), the last
message will be the most recent one submitted by the user.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[ChatMessage](`shiny.express.ui._chat_types.ChatMessage`), ...\]]{.parameter-annotation}</code>

:   A tuple of chat messages.

### on_user_submit { #shiny.express.ui.Chat.on_user_submit }

```python
express.ui.Chat.on_user_submit(fn=None)
```

Define a function to invoke when user input is submitted.

Apply this method as a decorator to a function (`fn`) that should be invoked when the
user submits a message. The function should take no arguments.

In many cases, the implementation of `fn` should do at least the following:

1. Call `.messages()` to obtain the current chat history.
2. Generate a response based on those messages.
3. Append the response to the chat history using `.append_message()` (
   or `.append_message_stream()` if the response is streamed).

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[SubmitFunction](`shiny.express.ui._chat.SubmitFunction`) \| [SubmitFunctionAsync](`shiny.express.ui._chat.SubmitFunctionAsync`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A function to invoke when user input is submitted.

#### Note {.doc-section .doc-section-note}

This method creates a reactive effect that only gets invalidated when the user
submits a message. Thus, the function `fn` can read other reactive dependencies,
but it will only be re-invoked when the user submits a message.

### set_user_message { #shiny.express.ui.Chat.set_user_message }

```python
express.ui.Chat.set_user_message(value)
```

Deprecated. Use `update_user_input(value=value)` instead.

### transform_assistant_response { #shiny.express.ui.Chat.transform_assistant_response }

```python
express.ui.Chat.transform_assistant_response(fn=None)
```

Transform assistant responses.

Use this method as a decorator on a function (`fn`) that transforms assistant
responses before displaying them in the chat. This is useful for post-processing
model responses before displaying them to the user.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[TransformAssistantResponseFunction](`shiny.express.ui._chat.TransformAssistantResponseFunction`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A function that takes a string and returns either a string, [](:class:`shiny.express.ui.HTML`), or `None`. If `fn` returns a string, it gets interpreted and parsed as a markdown on the client (and the resulting HTML is then sanitized). If `fn` returns [](:class:`shiny.express.ui.HTML`), it will be displayed as-is. If `fn` returns `None`, the response is effectively ignored.

#### Note {.doc-section .doc-section-note}

When doing an `.append_message_stream()`, `fn` gets called on every chunk of the
response (thus, it should be performant), and can optionally access more
information (i.e., arguments) about the stream. The 1st argument (required)
contains the accumulated content, the 2nd argument (optional) contains the
current chunk, and the 3rd argument (optional) is a boolean indicating whether
this chunk is the last one in the stream.

### transform_user_input { #shiny.express.ui.Chat.transform_user_input }

```python
express.ui.Chat.transform_user_input(fn=None)
```

Transform user input.

Use this method as a decorator on a function (`fn`) that transforms user input
before storing it in the chat messages returned by `.messages()`. This is
useful for implementing RAG workflows, like taking a URL and scraping it for
text before sending it to the model.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[TransformUserInput](`shiny.express.ui._chat.TransformUserInput`) \| [TransformUserInputAsync](`shiny.express.ui._chat.TransformUserInputAsync`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A function to transform user input before storing it in the chat `.messages()`. If `fn` returns `None`, the user input is effectively ignored, and `.on_user_submit()` callbacks are suspended until more input is submitted. This behavior is often useful to catch and handle errors that occur during transformation. In this case, the transform function should append an error message to the chat (via `.append_message()`) to inform the user of the error.

### ui { #shiny.express.ui.Chat.ui }

```python
express.ui.Chat.ui(
    messages=None,
    placeholder='Enter a message...',
    width='min(680px, 100%)',
    height='auto',
    fill=True,
    **kwargs,
)
```

Place a chat component in the UI.

This method is only relevant fpr Shiny Express. In Shiny Core, use
[](:func:`~shiny.express.ui.chat_ui`) instead to insert the chat UI.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**messages**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Sequence](`typing.Sequence`)\[[str](`str`) \| [ChatMessage](`shiny.express.ui._chat_types.ChatMessage`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A sequence of messages to display in the chat. Each message can be either a string or a dictionary with `content` and `role` keys. The `content` key should contain the message text, and the `role` key can be "assistant" or "user".

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Enter a message...\']{.parameter-default}</code>

:   Placeholder text for the chat input.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.express.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'min(680px, 100%)\']{.parameter-default}</code>

:   The width of the chat container.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.express.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The height of the chat container.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether the chat should vertically take available space inside a fillable container.

<code>[**kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes for the chat container element.

### update_user_input { #shiny.express.ui.Chat.update_user_input }

```python
express.ui.Chat.update_user_input(value=None, placeholder=None)
```

Update the user input.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value to set the user input to.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The placeholder text for the user input.

### user_input { #shiny.express.ui.Chat.user_input }

```python
express.ui.Chat.user_input(transform=False)
```

Reactively read the user&#x27;s message.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**transform**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to apply the user input transformation function (if one was provided).

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation}</code>

:   The user input message (before any transformation).

#### Note {.doc-section .doc-section-note}

Most users shouldn't need to use this method directly since the last item in
`.messages()` contains the most recent user input. It can be useful for:

  1. Taking a reactive dependency on the user's input outside of a `.on_user_submit()` callback.
  2. Maintaining message state separately from `.messages()`.

================
File: express.ui.help_text.qmd
================
# express.ui.help_text { #shiny.express.ui.help_text }

```python
express.ui.help_text(*args, **kwargs)
```

Create a help text element

Help text is stylized text which can be added to the user interface to provide additional explanation
or context. Text passed to [](:func:`~shiny.ui.help_text`) receives the Bootstrap `help-block` class.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements to include inside the help text.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to add to the text container.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

================
File: express.ui.hold.qmd
================
# express.ui.hold { #shiny.express.ui.hold }

```python
express.ui.hold()
```

Prevent the display of UI elements in various ways.

This is used as a context manager, as in `with hold():`. It prevents the display of
all UI elements within the context block. (This is useful when you want to
temporarily prevent the display of a large number of UI elements, or when you want
to prevent the display of UI elements that are not directly under your control.)

It can also be used as `with hold() as content:` to capture the UI elements that
would be displayed within the context block. Then, later, you can put `content` on a
line by itself to display the captured UI elements.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[HoldContextManager](`shiny.express.ui._hold.HoldContextManager`)]{.parameter-annotation}</code>

:   A context manager that prevents the display of UI elements within the context block.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.render.express`)
* [](:func:`~shiny.express.expressify`)

================
File: express.ui.HTML.qmd
================
# express.ui.HTML { #shiny.express.ui.HTML }

```python
express.ui.HTML(self, html)
```

Mark a string as raw HTML. This will prevent the string from being escaped when
rendered inside an HTML tag.

## Examples {.doc-section .doc-section-examples}

```python
>>> from htmltools import HTML, div
>>> div("<p>Hello</p>")
<div>&lt;p&gt;Hello&lt;/p&gt;</div>
>>> div(HTML("<p>Hello</p>"))
<div><p>Hello</p></div>
```

================
File: express.ui.include_css.qmd
================
# express.ui.include_css { #shiny.express.ui.include_css }

```python
express.ui.include_css(path, *, method='link')
```

Include a CSS file.

## Parameters {.doc-section .doc-section-parameters}

<code>[**path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`) \| [str](`str`)]{.parameter-annotation}</code>

:   A path to a CSS file.

<code>[**method**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['link', 'link_files', 'inline'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'link\']{.parameter-default}</code>

:   One of the following:  * ``"link"`` is the link to the CSS file via a [](:func:`~shiny.express.ui.tags.link`) tag. This   method is generally preferable to ``"inline"`` since it allows the browser to   cache the file. * ``"link_files"`` is the same as ``"link"``, but also allow for the CSS file to   request other files within ``path``'s immediate parent directory (e.g.,   ``@import()`` another file). Note that this isn't the default behavior because   you should **be careful not to include files in the same directory as ``path``   that contain sensitive information**. A good general rule of thumb to follow   is to have ``path`` be located in a subdirectory of the app directory. For   example, if the app's source is located at ``/app/app.py``, then ``path``   should be somewhere like ``/app/css/custom.css`` (and all the other relevant   accompanying 'safe' files should be located under ``/app/css/``). * ``"inline"`` is the inline the CSS file contents within a   [](:func:`~shiny.express.ui.tags.style`) tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   If ``method="inline"``, returns a [](:func:`~shiny.express.ui.tags.style`) tag; otherwise, returns a [](:func:`~shiny.express.ui.tags.link`) tag.

## Note {.doc-section .doc-section-note}

By default this places a [](:func:`~shiny.express.ui.tags.link`) (or [](:func:`~shiny.express.ui.tags.style`)) tag in
the [](:func:`~shiny.express.ui.tags.body`) of the document, which isn't optimal for performance, and
may result in a Flash of Unstyled Content (FOUC). To instead place the CSS in the
[](:func:`~shiny.express.ui.tags.head`) of the document, you can wrap it in ``head_content``:

```{python}
#| eval: false
from htmltools import head_content
from shiny import ui

ui.page_fluid(
    ui.head_content(ui.include_css("custom.css")),

    # You can also inline css by passing a dictionary with a `style` element.
    ui.div(
        {"style": "font-weight: bold;"},
        ui.p("Some text!"),
    )
)
```

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.tags.style`)
* [](:func:`~shiny.express.ui.tags.link`)
* [](:func:`~shiny.express.ui.include_js`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from pathlib import Path

from shiny.express import ui

css_file = Path(__file__).parent / "css" / "styles.css"

"Almost before we knew it, we had left the ground!!!"

ui.include_css(css_file)

# Style individual elements with an attribute dictionary.
ui.p("Bold text", {"style": "font-weight: bold"})


## file: css/styles.css
body {
  font-size: 3rem;
  background-color: pink
}


```

================
File: express.ui.include_js.qmd
================
# express.ui.include_js { #shiny.express.ui.include_js }

```python
express.ui.include_js(path, *, method='link', **kwargs)
```

Include a JavaScript file.

## Parameters {.doc-section .doc-section-parameters}

<code>[**path**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`) \| [str](`str`)]{.parameter-annotation}</code>

:   A path to a JS file.

<code>[**method**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['link', 'link_files', 'inline'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'link\']{.parameter-default}</code>

:   One of the following:  * ``"link"`` is the link to the CSS file via a [](:func:`~shiny.express.ui.tags.link`) tag. This   method is generally preferable to ``"inline"`` since it allows the browser to   cache the file. * ``"link_files"`` is the same as ``"link"``, but also allow for the CSS file to   request other files within ``path``'s immediate parent directory (e.g.,   ``@import()`` another file). Note that this isn't the default behavior because   you should **be careful not to include files in the same directory as ``path``   that contain sensitive information**. A good general rule of thumb to follow   is to have ``path`` be located in a subdirectory of the app directory. For   example, if the app's source is located at ``/app/app.py``, then ``path``   should be somewhere like ``/app/css/custom.css`` (and all the other relevant   accompanying 'safe' files should be located under ``/app/css/``). * ``"inline"`` is the inline the CSS file contents within a   [](:func:`~shiny.express.ui.tags.style`) tag.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes which are passed on to `~shiny.express.ui.tags.script`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A [](:func:`~shiny.express.ui.tags.script`) tag.

## Note {.doc-section .doc-section-note}

This places a [](:func:`~shiny.express.ui.tags.script`) tag in the [](:func:`~shiny.express.ui.tags.body`) of the
document. If you want to place the tag in the [](:func:`~shiny.express.ui.tags.head`) of the
document instead, you can wrap it in ``head_content`` (in this case, just
make sure you're aware that the DOM probably won't be ready when the script
is executed).

```{python}
#| eval: false
ui.page_fluid(
    ui.head_content(ui.include_js("custom.js")),
)

# Alternately you can inline Javscript by changing the method.
ui.page_fluid(
    ui.head_content(ui.include_js("custom.js", method = "inline")),
)
```

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.tags.script`)
* [](:func:`~shiny.express.ui.include_css`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from pathlib import Path

from shiny.express import ui

js_file = Path(__file__).parent / "js" / "app.js"

"If you see this page before 'OK'-ing the alert box, something went wrong"

ui.include_js(js_file)


## file: js/app.js
alert("If you're seeing this, the javascript file was included successfully.");


```

================
File: express.ui.input_action_button.qmd
================
# express.ui.input_action_button { #shiny.express.ui.input_action_button }

```python
express.ui.input_action_button(
    id,
    label,
    *,
    icon=None,
    width=None,
    disabled=False,
    **kwargs,
)
```

Creates an action button whose value is initially zero, and increments by one each
time it is pressed.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**disabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, the button will not be clickable. Use [](:func:`~shiny.express.ui.update_action_button`) to dynamically enable/disable the button.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the button.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
An integer representing the number of clicks.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_action_button`)
* [](:func:`~shiny.express.ui.input_action_link`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import reactive, render
from shiny.express import input, ui

ui.input_slider("n", "Number of observations", min=0, max=1000, value=500)
ui.input_action_button("go", "Go!", class_="btn-success")


@render.plot(alt="A histogram")
# Use reactive.event() to invalidate the plot only when the button is pressed
# (not when the slider is changed)
@reactive.event(input.go, ignore_none=False)
def plot():
    np.random.seed(19680801)
    x = 100 + 15 * np.random.randn(input.n())
    fig, ax = plt.subplots()
    ax.hist(x, bins=30, density=True)
    return fig


```



```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, render, ui

ui.input_text("name", "Your Name")
ui.input_action_button("greet", "Say Hello", disabled=True)


@reactive.effect
@reactive.event(input.name)
def set_button_state():
    if input.name():
        ui.update_action_button("greet", disabled=False)
    else:
        ui.update_action_button("greet", disabled=True)


@render.ui
@reactive.event(input.greet)
def hello():
    return ui.p(f"Hello, {input.name()}!", class_="fs-1 text-primary mt-3")


```

================
File: express.ui.input_action_link.qmd
================
# express.ui.input_action_link { #shiny.express.ui.input_action_link }

```python
express.ui.input_action_link(id, label, *, icon=None, **kwargs)
```

Creates a link whose value is initially zero, and increments by one each time it is
pressed.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the link.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
An integer representing the number of clicks.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_action_link`)
* [](:func:`~shiny.express.ui.input_action_button`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import reactive
from shiny.express import input, render, ui

ui.input_slider("n", "Number of observations", min=0, max=1000, value=500)
ui.input_action_link("go", "Go!")


@render.plot(alt="A histogram")
# reactive.event() to invalidate the plot when the button is pressed but not when
# the slider is changed
@reactive.event(input.go, ignore_none=False)
def plot():
    np.random.seed(19680801)
    x = 100 + 15 * np.random.randn(input.n())
    fig, ax = plt.subplots()
    ax.hist(x, bins=30, density=True)
    return fig


```

================
File: express.ui.input_checkbox_group.qmd
================
# express.ui.input_checkbox_group { #shiny.express.ui.input_checkbox_group }

```python
express.ui.input_checkbox_group(
    id,
    label,
    choices,
    *,
    selected=None,
    inline=False,
    width=None,
)
```

Create a group of checkboxes that can be used to toggle multiple choices
independently.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[ChoicesArg](`shiny.express.ui._input_check_radio.ChoicesArg`)]{.parameter-annotation}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, the result is displayed inline.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A tuple of string(s) with the selected value(s) (if any).
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_checkbox_group`)
* [](:func:`~shiny.express.ui.input_checkbox`)
* [](:func:`~shiny.express.ui.input_radio_buttons`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import req
from shiny.express import input, render, ui

ui.input_checkbox_group(
    "colors",
    "Choose color(s):",
    {
        "red": ui.span("Red", style="color: #FF0000;"),
        "green": ui.span("Green", style="color: #00AA00;"),
        "blue": ui.span("Blue", style="color: #0000AA;"),
    },
)


@render.ui
def val():
    req(input.colors())
    return "You chose " + ", ".join(input.colors())


```

================
File: express.ui.input_checkbox.qmd
================
# express.ui.input_checkbox { #shiny.express.ui.input_checkbox }

```python
express.ui.input_checkbox(id, label, value=False, *, width=None)
```

Create a checkbox that can be used to specify logical values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
``True`` if checked, ``False`` otherwise.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_switch`)
* [](:func:`~shiny.express.ui.update_checkbox`)
* [](:func:`~shiny.ui.input_checkbox_group`)
* [](:func:`~shiny.express.ui.input_radio_buttons`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.input_checkbox("somevalue", "Some value", False)


@render.ui
def value():
    return input.somevalue()


```

================
File: express.ui.input_dark_mode.qmd
================
# express.ui.input_dark_mode { #shiny.express.ui.input_dark_mode }

```python
express.ui.input_dark_mode(id=None, mode=None, **kwargs)
```

Creates a dark mode switch input that toggles the app between dark and light modes.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An optional ID for the dark mode switch. When included, the current color mode is reported in the value of the input with this ID.

<code>[**mode**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[BootstrapColorMode](`shiny.express.ui._input_dark_mode.BootstrapColorMode`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial mode of the dark mode switch. By default or when set to `None`, the user's system settings for the preferred color scheme will be used. Otherwise, set to `"light"` or `"dark"` to force the initial mode.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to be added to the dark mode switch, such as `class_` or `style`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A dark mode toggle switch UI element.

## References {.doc-section .doc-section-references}

* <https://getbootstrap.com/docs/5.3/customize/color-modes>

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import reactive
from shiny.express import input, render, ui

ui.page_opts(title="Shiny Dark Mode", fillable="One")

with ui.nav_panel("One"):
    with ui.layout_sidebar():
        with ui.sidebar():
            ui.input_slider("n", "N", min=0, max=100, value=20)

        @render.plot(alt="A histogram")
        def plot() -> object:
            np.random.seed(19680801)
            x = 100 + 15 * np.random.randn(437)

            fig, ax = plt.subplots()
            ax.hist(x, input.n(), density=True)

            # Theme the plot to match light/dark mode
            fig.patch.set_facecolor("none")
            ax.set_facecolor("none")

            color_fg = "black" if input.mode() == "light" else "silver"
            ax.tick_params(axis="both", colors=color_fg)
            ax.spines["bottom"].set_color(color_fg)
            ax.spines["top"].set_color(color_fg)
            ax.spines["left"].set_color(color_fg)
            ax.spines["right"].set_color(color_fg)

            return fig


with ui.nav_panel("Two"):
    with ui.layout_column_wrap():
        with ui.card():
            "Second page content."

        with ui.card():
            ui.card_header("More content on the second page.")
            ui.input_action_button("make_light", "Switch to light mode")
            ui.input_action_button("make_dark", "Switch to dark mode")

ui.nav_spacer()
with ui.nav_control():
    ui.input_dark_mode(id="mode")


@reactive.effect
@reactive.event(input.make_light)
def _():
    ui.update_dark_mode("light")


@reactive.effect
@reactive.event(input.make_dark)
def _():
    ui.update_dark_mode("dark")


```

================
File: express.ui.input_date_range.qmd
================
# express.ui.input_date_range { #shiny.express.ui.input_date_range }

```python
express.ui.input_date_range(
    id,
    label,
    *,
    start=None,
    end=None,
    min=None,
    max=None,
    format='yyyy-mm-dd',
    startview='month',
    weekstart=0,
    language='en',
    separator=' to ',
    width=None,
    autoclose=True,
)
```

Creates a pair of text inputs which, when clicked on, bring up calendars that the
user can click on to select dates.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**start**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial start date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**end**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial end date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.

<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'yyyy-mm-dd\']{.parameter-default}</code>

:   The format of the date to display in the browser.

<code>[**startview**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'month\']{.parameter-default}</code>

:   The date range shown when the input object is first clicked. Can be "month" (the default), "year", or "decade".

<code>[**weekstart**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Which day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).

<code>[**language**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'en\']{.parameter-default}</code>

:   The language used for month and day names. Default is "en". Other valid values include "ar", "az", "bg", "bs", "ca", "cs", "cy", "da", "de", "el", "en-AU", "en-GB", "eo", "es", "et", "eu", "fa", "fi", "fo", "fr-CH", "fr", "gl", "he", "hr", "hu", "hy", "id", "is", "it-CH", "it", "ja", "ka", "kh", "kk", "ko", "kr", "lt", "lv", "me", "mk", "mn", "ms", "nb", "nl-BE", "nl", "no", "pl", "pt-BR", "pt", "ro", "rs-latin", "rs", "ru", "sk", "sl", "sq", "sr-latin", "sr", "sv", "sw", "th", "tr", "uk", "vi", "zh-CN", and "zh-TW".

<code>[**separator**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\' to \']{.parameter-default}</code>

:   String to display between the start and end input boxes.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**autoclose**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to close the datepicker immediately when a date is selected.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Note {.doc-section .doc-section-note}

The date ``format`` string specifies how the date will be displayed in the browser.
It allows the following values:

- ``yy``: Year without century (12)
- ``yyyy``: Year with century (2012)
- ``mm``: Month number, with leading zero (01-12)
- ``m``: Month number, without leading zero (1-12)
- ``M``: Abbreviated month name
- ``MM``: Full month name
- ``dd``: Day of month with leading zero
- ``d``: Day of month without leading zero
- ``D``: Abbreviated weekday name
- ``DD``: Full weekday name

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A tuple of [](:class:`~datetime.date`) objects.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_date_range`)
* [](:func:`~shiny.express.ui.input_date`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import date

from shiny.express import ui

# Default start and end is the current date in the client's time zone
ui.input_date_range("daterange1", "Date range:")
# Set start and end dates
ui.input_date_range(
    "daterange2", "Set start and end date:", start="2001-01-01", end="2010-12-31"
)
# Start and end are always specified in yyyy-mm-dd, even if the display
# format is different
ui.input_date_range(
    "daterange3",
    "Min, max, start, and end dates are set with custom format and separator:",
    start="2001-01-01",
    end="2010-12-31",
    min="2001-01-01",
    max="2012-12-21",
    format="mm/dd/yy",
    separator=" - ",
)
# Pass in Date objects
ui.input_date_range(
    "daterange4",
    "Default start and end use date objects:",
    start=date(2001, 1, 1),
    end=date(2010, 12, 31),
)
# Use different language and different first day of week
ui.input_date_range(
    "daterange5",
    "Language is German and we starts on Monday:",
    language="de",
    weekstart=1,
)
# Start with decade view instead of default month view
ui.input_date_range(
    "daterange6", "Start Date picker in Decade view:", startview="decade"
)
# Set width of the daterange field
ui.input_date_range("daterange7", "Set width of text input:", width="600px")
# Set autoclose to false
ui.input_date_range("daterange8", "Auto close is disabled:", autoclose=False)


```

================
File: express.ui.input_date.qmd
================
# express.ui.input_date { #shiny.express.ui.input_date }

```python
express.ui.input_date(
    id,
    label,
    *,
    value=None,
    min=None,
    max=None,
    format='yyyy-mm-dd',
    startview='month',
    weekstart=0,
    language='en',
    width=None,
    autoclose=True,
    datesdisabled=None,
    daysofweekdisabled=None,
)
```

Creates a text input which, when clicked on, brings up a calendar that the user can
click on to select dates.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The starting date. Either a [](:class:`~datetime.date`) object, or a string in `yyyy-mm-dd` format. If None (the default), will use the current date in the client's time zone.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format.

<code>[**format**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'yyyy-mm-dd\']{.parameter-default}</code>

:   The format of the date to display in the browser. Defaults to `"yyyy-mm-dd"`.

<code>[**startview**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'month\']{.parameter-default}</code>

:   The date range shown when the input object is first clicked. Can be "month" (the default), "year", or "decade".

<code>[**weekstart**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Which day is the start of the week. Should be an integer from 0 (Sunday) to 6 (Saturday).

<code>[**language**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'en\']{.parameter-default}</code>

:   The language used for month and day names. Default is "en". Other valid values include "ar", "az", "bg", "bs", "ca", "cs", "cy", "da", "de", "el", "en-AU", "en-GB", "eo", "es", "et", "eu", "fa", "fi", "fo", "fr-CH", "fr", "gl", "he", "hr", "hu", "hy", "id", "is", "it-CH", "it", "ja", "ka", "kh", "kk", "ko", "kr", "lt", "lv", "me", "mk", "mn", "ms", "nb", "nl-BE", "nl", "no", "pl", "pt-BR", "pt", "ro", "rs-latin", "rs", "ru", "sk", "sl", "sq", "sr-latin", "sr", "sv", "sw", "th", "tr", "uk", "vi", "zh-CN", and "zh-TW".

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**autoclose**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to close the datepicker immediately when a date is selected.

<code>[**datesdisabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Which dates should be disabled (in `yyyy-mm-dd` format).

<code>[**daysofweekdisabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[list](`list`)\[[int](`int`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Days of the week that should be disabled. Should be a integer vector with values from 0 (Sunday) to 6 (Saturday).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Note {.doc-section .doc-section-note}

The date ``format`` string specifies how the date will be displayed in the browser.
It allows the following values:

- ``yy``: Year without century (12)
- ``yyyy``: Year with century (2012)
- ``mm``: Month number, with leading zero (01-12)
- ``m``: Month number, without leading zero (1-12)
- ``M``: Abbreviated month name
- ``MM``: Full month name
- ``dd``: Day of month with leading zero
- ``d``: Day of month without leading zero
- ``D``: Abbreviated weekday name
- ``DD``: Full weekday name

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A [](:class:`~datetime.date`) object.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_date`)
* [](:func:`~shiny.ui.input_date_range`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import date

from shiny.express import ui

ui.input_date("date1", "Has default date:", value="2016-02-29")
# Default value is the date in client's time zone
ui.input_date("date2", "Client's current date:")
# value is always yyyy-mm-dd, even if the display format is different
ui.input_date("date3", "Format mm/dd/yy:", value="2016-02-29", format="mm/dd/yy")
# Pass in a Date object
ui.input_date("date4", "Default uses date object:", value=date(2016, 2, 29))
# Use different language and different first day of week
ui.input_date(
    "date5",
    "Language is German and the week starts on Monday:",
    language="ru",
    weekstart=1,
)
# Start with decade view instead of default month view
ui.input_date("date6", "Start Date picker in Decade view:", startview="decade")
# Disable Mondays and Tuesdays.
ui.input_date("date7", "Disable Monday and Tuesday:", daysofweekdisabled=[1, 2])
# Disable specific dates.
ui.input_date(
    "date8",
    "Disable specific dates:",
    value="2016-02-29",
    datesdisabled=["2016-03-01", "2016-03-02"],
)
# Set min and max dates.
ui.input_date(
    "date9",
    "Set min and max dates:",
    value="2016-02-03",
    min="2016-02-01",
    max="2016-02-29",
)
# Set width of the date field
ui.input_date("date10", "Set width of text input:", width="600px")
# Set autoclose to false
ui.input_date("date11", "Auto close is disabled:", autoclose=False)


```

================
File: express.ui.input_file.qmd
================
# express.ui.input_file { #shiny.express.ui.input_file }

```python
express.ui.input_file(
    id,
    label,
    *,
    multiple=False,
    accept=None,
    width=None,
    button_label='Browse...',
    placeholder='No file selected',
    capture=None,
)
```

Create a file upload control that can be used to upload one or more files.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether the user should be allowed to select and upload multiple files at once.

<code>[**accept**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Unique file type specifier(s) which give the browser a hint as to the type of file the server expects. Many browsers use this to prevent the user from selecting an invalid file. Examples of valid values include a case insensitive extension (e.g. ``.csv`` or ``.rds``), a valid MIME type (e.g. ``text/plain`` or ``application/pdf``) or one of ``audio/*``, ``video/*``, or ``image/*`` meaning any audio, video, or image type, respectively.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**button_label**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Browse...\']{.parameter-default}</code>

:   The label used on the button.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'No file selected\']{.parameter-default}</code>

:   The text to show on the input before a file has been uploaded.

<code>[**capture**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['environment', 'user'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   On mobile devices, this can be used to open the device's camera for input. If "environment", it will open the rear-facing camera. If "user", it will open the front-facing camera. By default, it will accept either still photos or video. To accept only still photos, use ``accept="image/*"``; to accept only video, use ``accept="video/*"``.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}


::: {.callout-note title="Server value"}
A list of dictionaries (one for each file upload) with the following keys:

* ``name``: The filename provided by the web browser. This is *not* the path to read
    to get at the actual data that was uploaded (see 'datapath').
* ``size``: The size of the uploaded data, in bytes.
* ``type``: The MIME type reported by the browser (for example, 'text/plain'), or
    empty string if the browser didn't know.
* ``datapath``: The path to a temp file that contains the data that was uploaded.
    This file may be deleted if the user performs another upload operation.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.download_button`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd

from shiny import reactive
from shiny.express import input, render, ui
from shiny.types import FileInfo

ui.input_file("file1", "Choose CSV File", accept=[".csv"], multiple=False)
ui.input_checkbox_group(
    "stats",
    "Summary Stats",
    choices=["Row Count", "Column Count", "Column Names"],
    selected=["Row Count", "Column Count", "Column Names"],
)


@reactive.calc
def parsed_file():
    file: list[FileInfo] | None = input.file1()
    if file is None:
        return pd.DataFrame()
    return pd.read_csv(file[0]["datapath"])  # pyright: ignore[reportUnknownMemberType]


@render.table
def summary():
    df = parsed_file()

    if df.empty:
        return pd.DataFrame()

    # Get the row count, column count, and column names of the DataFrame
    row_count = df.shape[0]
    column_count = df.shape[1]
    names = df.columns.tolist()
    column_names = ", ".join(str(name) for name in names)

    # Create a new DataFrame to display the information
    info_df = pd.DataFrame(
        {
            "Row Count": [row_count],
            "Column Count": [column_count],
            "Column Names": [column_names],
        }
    )

    # input.stats() is a list of strings; subset the columns based on the selected
    # checkboxes
    return info_df.loc[:, input.stats()]


```

================
File: express.ui.input_numeric.qmd
================
# express.ui.input_numeric { #shiny.express.ui.input_numeric }

```python
express.ui.input_numeric(
    id,
    label,
    value,
    *,
    min=None,
    max=None,
    step=None,
    width=None,
)
```

Create an input control for entry of numeric values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation}</code>

:   Initial value.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Interval to use when stepping between min and max.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A numeric value.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_numeric`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.input_numeric("obs", "Observations:", 10, min=1, max=100)


@render.code
def value():
    return input.obs()


```

================
File: express.ui.input_password.qmd
================
# express.ui.input_password { #shiny.express.ui.input_password }

```python
express.ui.input_password(id, label, value='', *, width=None, placeholder=None)
```

Create an password control for entry of passwords.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\']{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g., '400px', or '100%'.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The placeholder of the input.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A string of the password input. The default value is unless value is provided.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, render, ui

ui.input_password("password", "Password:")
ui.input_action_button("go", "Go")


@render.code
@reactive.event(input.go)
def value():
    return input.password()


```

================
File: express.ui.input_radio_buttons.qmd
================
# express.ui.input_radio_buttons { #shiny.express.ui.input_radio_buttons }

```python
express.ui.input_radio_buttons(
    id,
    label,
    choices,
    *,
    selected=None,
    inline=False,
    width=None,
)
```

Create a set of radio buttons used to select an item from a list.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[ChoicesArg](`shiny.express.ui._input_check_radio.ChoicesArg`)]{.parameter-annotation}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the result is displayed inline.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A string with the selected value.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_radio_buttons`)
* [](:func:`~shiny.express.ui.input_checkbox_group`)
* [](:func:`~shiny.express.ui.input_checkbox`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.input_radio_buttons(
    "rb",
    "Choose one:",
    {
        "html": ui.HTML("<span style='color:red;'>Red Text</span>"),
        "text": "Normal text",
    },
)


@render.express
def val():
    "You chose " + input.rb()


```

================
File: express.ui.input_select.qmd
================
# express.ui.input_select { #shiny.express.ui.input_select }

```python
express.ui.input_select(
    id,
    label,
    choices,
    *,
    selected=None,
    multiple=False,
    selectize=False,
    width=None,
    size=None,
    remove_button=None,
    options=None,
)
```

Create a select list that can be used to choose a single or multiple items from a
list of values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectChoicesArg](`shiny.express.ui._input_select.SelectChoicesArg`)]{.parameter-annotation}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Is selection of multiple items allowed?

<code>[**selectize**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to use selectize.js or not.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**size**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Number of items to show in the selection box; a larger number will result in a taller box. Normally, when ``multiple=False``, a select input will be a drop-down list, but when size is set, it will be a box instead.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
If `multiple=False`, the server value is a string with the value of the selected item.
If `multiple=True`, the server value is a tuple containing the values of the
selected items. When ``multiple=True`` and nothing is selected, this value
will be ``None``.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_selectize`)
* [](:func:`~shiny.express.ui.update_select`)
* [](:func:`~shiny.express.ui.input_radio_buttons`)
* [](:func:`~shiny.express.ui.input_checkbox_group`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.input_select(
    "state",
    "Choose a state:",
    {
        "East Coast": {"NY": "New York", "NJ": "New Jersey", "CT": "Connecticut"},
        "West Coast": {"WA": "Washington", "OR": "Oregon", "CA": "California"},
        "Midwest": {"MN": "Minnesota", "WI": "Wisconsin", "IA": "Iowa"},
    },
)


@render.text
def value():
    return "You choose: " + str(input.state())


```

================
File: express.ui.input_selectize.qmd
================
# express.ui.input_selectize { #shiny.express.ui.input_selectize }

```python
express.ui.input_selectize(
    id,
    label,
    choices,
    *,
    selected=None,
    multiple=False,
    width=None,
    remove_button=None,
    options=None,
)
```

Create a select list that can be used to choose a single or multiple items from a
list of values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[SelectChoicesArg](`shiny.express.ui._input_select.SelectChoicesArg`)]{.parameter-annotation}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Is selection of multiple items allowed?

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**remove_button**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether to add a remove button. This uses the `clear_button` and `remove_button` selectize plugins which can also be supplied as options. By default it will apply a remove button to multiple selections, but not single selections.

<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[dict](`dict`)\[[str](`str`), [Jsonifiable](`shiny.types.Jsonifiable`) \| [JSEval](`shiny.express.ui._utils.JSEval`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A dictionary of options. See the documentation of selectize.js for possible options. If you want to pass a JavaScript function, wrap the string in `ui.JS`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
If `multiple=False`, the server value is a string with the value of the selected item.
If `multiple=True`, the server value is a tuple containing the values of the
selected items. When ``multiple=True`` and nothing is selected, this value
will be ``None``.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_select`)
* [](:func:`~shiny.express.ui.input_radio_buttons`)
* [](:func:`~shiny.express.ui.input_checkbox_group`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from html import escape  # noqa: F401

from shiny.express import input, render, ui

states = {
    "East Coast": {"NY": "New York", "NJ": "New Jersey", "CT": "Connecticut"},
    "West Coast": {"WA": "Washington", "OR": "Oregon", "CA": "California"},
    "Midwest": {"MN": "Minnesota", "WI": "Wisconsin", "IA": "Iowa"},
}

ui.input_selectize(
    "state",
    "Choose a state:",
    states,
    multiple=True,
)


@render.text
def value():
    return "You choose: " + str(input.state())


ui.input_selectize(
    "state2",
    "Selectize Options",
    states,
    multiple=True,
    options=(
        {
            "placeholder": "Enter text",
            "render": ui.js_eval(
                '{option: function(item, escape) {return "<div><strong>Select " + escape(item.label) + "</strong></div>";}}'
            ),
            "create": True,
        }
    ),
)
ui.input_selectize(
    "state3",
    "Selectize plugins",
    states,
    multiple=True,
    options={"plugins": ["clear_button"]},
)


```

================
File: express.ui.input_slider.qmd
================
# express.ui.input_slider { #shiny.express.ui.input_slider }

```python
express.ui.input_slider(
    id,
    label,
    min,
    max,
    value,
    *,
    step=None,
    ticks=False,
    animate=False,
    width=None,
    sep=',',
    pre=None,
    post=None,
    time_format=None,
    timezone=None,
    drag_range=True,
)
```

Constructs a slider widget to select a number, date, or date-time from a range.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)]{.parameter-annotation}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)]{.parameter-annotation}</code>

:   The maximum allowed value.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`) \| [Iterable](`typing.Iterable`)\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)\]]{.parameter-annotation}</code>

:   Initial value.

<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderStepArg](`shiny.express.ui._input_slider.SliderStepArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Interval to use when stepping between min and max.

<code>[**ticks**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   ``False`` to hide tick marks, ``True`` to show them according to some simple heuristics.

<code>[**animate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [AnimationOptions](`shiny.express.ui._input_slider.AnimationOptions`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   ``True`` to show simple animation controls with default settings; ``False`` not to; or a custom settings list, such as those created using [](:class:`~AnimationOptions`).

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**sep**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\',\']{.parameter-default}</code>

:   Separator between thousands places in numbers.

<code>[**pre**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A prefix string to put in front of the value.

<code>[**post**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A suffix string to put after the value.

<code>[**time_format**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Only used if the slider values are [](:class:`~datetime.date`) or [](:class:`~datetime.datetime`) objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is "%F" (like "2015-07-01"), and for Datetimes, the default is "%F %T" (like "2015-07-01 15:32:10").

<code>[**timezone**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Only used if the values are [](:class:`~datetime.datetime`) objects. A string specifying the time zone offset for the displayed times, in the format "+HHMM" or "-HHMM". If ``None`` (the default), times will be displayed in the browser's time zone. The value "+0000" will result in UTC time.

<code>[**drag_range**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   This option is used only if it is a range slider (with two values). If ``True`` (the default), the range can be dragged. In other words, the min and max can be dragged together. If ``False``, the range cannot be dragged.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A number, date, or date-time (depending on the class of value), or in the case of
slider range, a tuple of two numbers/dates/date-times.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_slider`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny.express import input, render, ui

ui.input_slider("obs", "Number of bins:", min=10, max=100, value=30)


@render.plot
def distPlot():
    np.random.seed(19680801)
    x = 100 + 15 * np.random.randn(437)

    fig, ax = plt.subplots()
    ax.hist(x, input.obs(), density=True)
    return fig


```

================
File: express.ui.input_switch.qmd
================
# express.ui.input_switch { #shiny.express.ui.input_switch }

```python
express.ui.input_switch(id, label, value=False, *, width=None)
```

Create a switch that can be used to specify logical values. Similar to
[](:func:`~shiny.express.ui.input_checkbox`), but implies to the user that the change will take effect
immediately.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element.

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
``True`` if checked, ``False`` otherwise.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_checkbox`)
* [](:func:`~shiny.express.ui.update_switch`)
* [](:func:`~shiny.express.ui.input_checkbox_group`)
* [](:func:`~shiny.express.ui.input_radio_buttons`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.input_switch("somevalue", "Some value", False)


@render.text
def value():
    return input.somevalue()


```

================
File: express.ui.input_task_button.qmd
================
# express.ui.input_task_button { #shiny.express.ui.input_task_button }

```python
express.ui.input_task_button(
    id,
    label,
    *args,
    icon=None,
    label_busy='Processing...',
    icon_busy=MISSING,
    width=None,
    type='primary',
    auto_reset=True,
    **kwargs,
)
```

Creates a button for launching longer-running operations.

Its value is initially zero, and increments by one each time it is pressed. It is
similar to [](:func:`~shiny.express.ui.input_action_button`), except it prevents the user from
clicking when its operation is already in progress.

Upon click, it automatically displays a customizable progress message and disables
itself; and after the server has dealt with whatever reactivity is triggered from
the click, the button automatically resets to its original appearance and re-enables
itself.

In some advanced use cases, it may be necessary to keep a task button in its busy
state even after the normal reactive processing has completed. Calling
:func:`~shiny.express.ui.update_task_button(id, state = "busy")` from the server will opt
out of any currently pending reset for a specific task button. After doing so, the
button can be re-enabled by calling ``update_task_button(id, state = &quot;ready&quot;)``
after each click&#x27;s work is complete.

You can also pass an explicit ``auto_reset = FALSE`` to ``input_task_button()``,
which means that button will _never_ be automatically re-enabled and will require
``update_task_button(id, state = &quot;ready&quot;)`` to be called each time.

Note that, as a general rule, Shiny&#x27;s ``update`` family of functions do not take
effect at the instant that they are called, but are held until the end of the
current reactive cycle. So if you have many different reactive calculations and
outputs, you don&#x27;t have to be too careful about when you call
``update_task_button(id, state = &quot;ready&quot;)``, as the button on the client will not
actually re-enable until the same moment that all of the updated outputs
simultaneously sent to the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A button label.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   [Experimental] Can be used to add additional states besides "ready" and "busy". Pass a [](:func:`~shiny.express.ui.tags.span`) with ``slot="state_name"`` for each new state, and call [](:func:`~shiny.express.ui.update_task_button`) with ``state="state_name"`` to switch the button to that state.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**label_busy**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'Processing...\']{.parameter-default}</code>

:   A label to appear when the button is busy.

<code>[**icon_busy**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   An icon to appear inline with the button/link when the button is busy.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g. '400px', or '100%'

<code>[**type**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'primary\']{.parameter-default}</code>

:   One of the Bootstrap theme colors ('primary', 'default', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'), or None to leave off the Bootstrap-specific button CSS classes. Defaults to 'primary'.

<code>[**auto_reset**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to automatically reset the button to "ready" after the task completes. If False, the button will remain in the "busy" state until [](:func:`~shiny.express.ui.update_task_button`) is called with ``state="ready"``. Also note that even if ``auto_reset=True``, calling [](:func:`~shiny.express.ui.update_task_button`) with ``state="busy"`` will prevent the button from automatically resetting.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the button.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
An integer representing the number of clicks.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.update_task_button`)
* [](:func:`~shiny.express.ui.input_action_button`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
from datetime import datetime

from shiny import reactive, render
from shiny.express import input, ui

ui.h5("Current time")


@render.text
def current_time():
    reactive.invalidate_later(1)
    return datetime.now().strftime("%H:%M:%S")


with ui.p():
    "Notice that the time above updates every second, even if you click the button below."


@ui.bind_task_button(button_id="btn")
@reactive.extended_task
async def slow_compute(a: int, b: int) -> int:
    await asyncio.sleep(3)
    return a + b


with ui.layout_sidebar():
    with ui.sidebar():
        ui.input_numeric("x", "x", 1)
        ui.input_numeric("y", "y", 2)
        ui.input_task_button("btn", "Compute, slowly")
        ui.input_action_button("btn_cancel", "Cancel")

    @reactive.effect
    @reactive.event(input.btn, ignore_none=False)
    def handle_click():
        # slow_compute.cancel()
        slow_compute(input.x(), input.y())

    @reactive.effect
    @reactive.event(input.btn_cancel)
    def handle_cancel():
        slow_compute.cancel()

    ui.h5("Sum of x and y")

    @render.text
    def show_result():
        return str(slow_compute.result())


```

================
File: express.ui.input_text_area.qmd
================
# express.ui.input_text_area { #shiny.express.ui.input_text_area }

```python
express.ui.input_text_area(
    id,
    label,
    value='',
    *,
    width=None,
    height=None,
    cols=None,
    rows=None,
    placeholder=None,
    resize=None,
    autoresize=False,
    autocomplete=None,
    spellcheck=None,
)
```

Create a textarea input control for entry of unstructured text values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\']{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g., '400px', or '100%'.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS height, e.g., '400px', or '100%'.

<code>[**cols**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[int](`int`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Value of the visible character columns of the input, e.g., 80. This argument will only take effect if there is not a CSS width rule defined for this element; such a rule could come from the width argument of this function or from a containing page layout such as [](:func:`~shiny.express.ui.page_fluid`).

<code>[**rows**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[int](`int`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value of the visible character rows of the input, e.g., 6. If the height argument is specified, height will take precedence in the browser's rendering.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A hint as to what can be entered into the control.

<code>[**resize**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['none', 'both', 'horizontal', 'vertical'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Which directions the textarea box can be resized. Can be one of "both", "none", "vertical", and "horizontal". The default, ``None``, will use the client browser's default setting for resizing textareas.

<code>[**autoresize**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If True, then the textarea will automatically resize the height to fit the input text.

<code>[**autocomplete**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether to enable browser autocompletion of the text input (default is "off"). If `None`, then it will use the browser's default behavior. Other possible values include "on", "name", "username", and "email". See [Mozilla's autocomplete documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for more.

<code>[**spellcheck**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['true', 'false'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether to enable browser spell checking of the text input (default is ``None``). If None, then it will use the browser's default behavior.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}


::: {.callout-note title="Server value"}
A string containing the current text input. The default value is ``""`` unless
``value`` is provided.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.input_text_area(
    "caption_regular",
    "Caption:",
    "Data summary\nwith\nmultiple\nlines",
)


@render.text
def value_regular():
    return input.caption_regular()


ui.input_text_area(
    "caption_autoresize",
    ui.markdown("Caption (w/ `autoresize=True`):"),
    "Data summary\nwith\nmultiple\nlines",
    autoresize=True,
)


@render.text
def value_autoresize():
    return input.caption_autoresize()


```

================
File: express.ui.input_text.qmd
================
# express.ui.input_text { #shiny.express.ui.input_text }

```python
express.ui.input_text(
    id,
    label,
    value='',
    *,
    width=None,
    placeholder=None,
    autocomplete='off',
    spellcheck=None,
)
```

Create an input control for entry of text values.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\']{.parameter-default}</code>

:   Initial value.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The CSS width, e.g., '400px', or '100%'.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A hint as to what can be entered into the control.

<code>[**autocomplete**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'off\']{.parameter-default}</code>

:   Whether to enable browser autocompletion of the text input. If `None`, then it will use the browser's default behavior. Some values include "on", "off", "name", "username", and "email". See [https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) to learn more about `autocomplete`'s supported values.

<code>[**spellcheck**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['true', 'false'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether to enable browser spell checking of the text input (default is ``None``). If None, then it will use the browser's default behavior.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## Notes {.doc-section .doc-section-notes}

::: {.callout-note title="Server value"}
A string containing the current text input. The default value is ``""`` unless
``value`` is provided.
:::

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.input_text_area`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.input_text("caption", "Caption:", "Data summary")


@render.code
def value():
    return input.caption()


```

================
File: express.ui.insert_accordion_panel.qmd
================
# express.ui.insert_accordion_panel { #shiny.express.ui.insert_accordion_panel }

```python
express.ui.insert_accordion_panel(
    id,
    panel,
    target=None,
    position='after',
    session=None,
)
```

Insert an [](:func:`~shiny.express.ui.accordion_panel`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that matches an existing [](:func:`~shiny.express.ui.accordion`)'s `id`.

<code>[**panel**]{.parameter-name} [:]{.parameter-annotation-sep} [[AccordionPanel](`shiny.express.ui._accordion.AccordionPanel`)]{.parameter-annotation}</code>

:   An [](:func:`~shiny.express.ui.accordion_panel`) object to insert.

<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The `value` of an existing panel to insert next to.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['after', 'before'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'after\']{.parameter-default}</code>

:   Should `panel` be added before or after the target? When `target=None`, `"after"` will append after the last panel and `"before"` will prepend before the first panel.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.accordion`)
* [](:func:`~shiny.express.ui.accordion_panel`)
* [](:func:`~shiny.express.ui.update_accordion`)
* [](:func:`~shiny.express.ui.remove_accordion_panel`)
* [](:func:`~shiny.express.ui.update_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random

from shiny import reactive, ui
from shiny.express import input


def make_panel(letter):
    return ui.accordion_panel(
        f"Section {letter}", f"Some narrative for section {letter}"
    )


ui.input_action_button("add_panel", "Add random panel", class_="mt-3 mb-3")
ui.accordion(*[make_panel(letter) for letter in "ABCDE"], id="acc", multiple=True)


@reactive.effect
@reactive.event(input.add_panel)
def _():
    ui.insert_accordion_panel("acc", make_panel(str(random.randint(0, 10000))))


```

================
File: express.ui.insert_ui.qmd
================
# express.ui.insert_ui { #shiny.express.ui.insert_ui }

```python
express.ui.insert_ui(
    ui,
    selector,
    where='beforeEnd',
    multiple=False,
    immediate=False,
    session=None,
)
```

Insert UI objects.

## Parameters {.doc-section .doc-section-parameters}

<code>[**ui**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   The UI object you want to insert. This can be anything that you usually put inside your app's UI function. If you're inserting multiple elements in one call, make sure to wrap them in either a [](:func:`~htmltools.TagList`) or a [](:func:`~shiny.express.ui.tags.div`) (the latter option has the advantage that you can give it an id to make it easier to reference or remove it later on). If you want to insert raw HTML, use [](:class:`~shiny.express.ui.HTML`).

<code>[**selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that is accepted by jQuery's selector (i.e. the string ``s`` to be placed in a ``$(s)`` jQuery call) which determines the element(s) relative to which you want to insert your UI object.

<code>[**where**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['beforeBegin', 'afterBegin', 'beforeEnd', 'afterEnd'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'beforeEnd\']{.parameter-default}</code>

:   Where your UI object should go relative to the selector: "beforeBegin": before the selector element itself; "beforeEnd": just inside the selector element, after its last child (default); "afterEnd": after the selector element itself. Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML.

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   In case your selector matches more than one element, ``multiple`` determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).

<code>[**immediate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session._session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}

This function allows you to dynamically add arbitrary UI into your app, whenever you
want, as many times as you want. Unlike [](:class:`~shiny.express.render.ui`), the UI generated
with `insert_ui` is persistent: once it's created, it stays there until removed by
[](:func:`~shiny.express.ui.remove_ui`). Each new call to `insert_ui` creates more UI objects, in addition
to the ones already there (all independent from one another). To update a part of
the UI (ex: an input object), you must use the appropriate render function or a
customized reactive function.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.remove_ui`)
* [](:class:`~shiny.express.render.ui`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("add", "Add UI")


@reactive.effect
@reactive.event(input.add)
def _():
    ui.insert_ui(
        ui.input_text("txt" + str(input.add()), "Enter some text"),
        selector="#add",
        where="afterEnd",
    )


```

================
File: express.ui.layout_column_wrap.qmd
================
# express.ui.layout_column_wrap { #shiny.express.ui.layout_column_wrap }

```python
express.ui.layout_column_wrap(
    width=MISSING,
    fixed_width=False,
    heights_equal='all',
    fill=True,
    fillable=True,
    height=None,
    min_height=None,
    max_height=None,
    height_mobile=None,
    gap=None,
    class_=None,
    **kwargs,
)
```

Context manager for a grid-like, column-first layout

This function wraps [](:func:`~shiny.ui.layout_column_wrap`).

Wraps a 1d sequence of UI elements into a 2d grid. The number of columns (and rows)
in the grid dependent on the column `width` as well as the size of the display.

## Parameters {.doc-section .doc-section-parameters}

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.express.ui.css.CssUnit`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The desired width of each card. It can be one of the following:  * A (unit-less) number between 0 and 1, specified as `1/num`, where `num`   represents the number of desired columns. * A CSS length unit representing either the minimum (when `fixed_width=False`)   or fixed width (`fixed_width=True`). * `None`, which allows power users to set the `grid-template-columns` CSS   property manually, either via a `style` attribute or a CSS stylesheet. * If missing, a value of `200px` will be used.

<code>[**fixed_width**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   When `width` is greater than 1 or is a CSS length unit, e.g. `"200px"`, `fixed_width` indicates whether that `width` value represents the absolute size of each column (`fixed_width=TRUE`) or the minimum size of a column (`fixed_width=FALSE`).  When `fixed_width=FALSE`, new columns are added to a row when `width` space is available and columns will never exceed the container or viewport size.  When `fixed_width=TRUE`, all columns will be exactly `width` wide, which may result in columns overflowing the parent container.

<code>[**heights_equal**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['all', 'row'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'all\']{.parameter-default}</code>

:   If `"all"` (the default), every card in every row of the grid will have the same height. If `"row"`, then every card in _each_ row of the grid will have the same height, but heights may vary between rows.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.express.ui.page_fillable`)).

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not each element is wrapped in a fillable container.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A valid CSS unit (e.g., `height="200px"`). Use `min_height` and `max_height` in a filling layout to ensure that the layout container does not shrink below a `min_height` or grow beyond a `max_height`.

<code>[**height_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit to use for the height when on mobile devices (or narrow windows).

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit to use for the gap between columns.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS class to apply to the containing element.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to apply to the containing element.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

with ui.hold() as a_card:
    with ui.card():
        "A simple card"

# Always has 2 columns (on non-mobile)
with ui.layout_column_wrap(width=1 / 2):
    a_card
    a_card
    a_card

ui.hr()

# Has three columns when viewport is wider than 750px
with ui.layout_column_wrap(width="250px"):
    a_card
    a_card
    a_card


```

================
File: express.ui.layout_columns.qmd
================
# express.ui.layout_columns { #shiny.express.ui.layout_columns }

```python
express.ui.layout_columns(
    col_widths=None,
    row_heights=None,
    fill=True,
    fillable=True,
    gap=None,
    class_=None,
    height=None,
    min_height=None,
    max_height=None,
    **kwargs,
)
```

Context manager for responsive, column-based grid layouts, based on a 12-column
grid.

This function wraps [](:func:`~shiny.ui.layout_columns`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**col_widths**]{.parameter-name} [:]{.parameter-annotation-sep} [[BreakpointsUser](`shiny.express.ui._layout_columns.BreakpointsUser`)\[[int](`int`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The widths of the columns, possibly at different breakpoints. Can be one of the following:  * `None` (the default): Automatically determines a sensible number of columns   based on the number of children given to the layout. * A list or tuple of integers between 1 and 12, where each element represents   the number of columns for the relevant UI element. Column widths are recycled   to extend the values in `col_widths` to match the actual number of items in   the layout, and children are wrapped onto the next row when a row exceeds 12   column units. For example, `col_widths=(4, 8, 12)` allocates 4 columns to the   first element, 8 columns to the second element, and 12 columns to the third   element (which wraps to the next row). Negative values are also allowed, and   are treated as empty columns. For example, `col_widths=(-2, 8, -2)` would   allocate 8 columns to an element (with 2 empty columns on either side). * A dictionary of column widths at different breakpoints. The keys should be one   of `"xs"`, `"sm"`, `"md"`, `"lg"`, `"xl"`, or `"xxl"`, and the values are   either of the above. For example, `col_widths={"sm": (3, 3, 6), "lg": (4)}`.

<code>[**row_heights**]{.parameter-name} [:]{.parameter-annotation-sep} [[BreakpointsUser](`shiny.express.ui._layout_columns.BreakpointsUser`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The heights of the rows, possibly at different breakpoints. Can be one of the following:  * A numeric vector, where each value represents the [fractional   unit](https://css-tricks.com/introduction-fr-css-unit/) (`fr`) height of the   relevant row. If there are more rows than values provided, the pattern will be   repeated. For example, `row_heights=(1, 2)` allows even rows to take up twice   as much space as odd rows. * A list of numeric or CSS length units, where each value represents the height   of the relevant row. If more rows are needed than values provided, the pattern   will repeat. For example, `row_heights=["auto", 1]` allows the height of odd   rows to be driven my it's contents and even rows to be   [`1fr`](https://css-tricks.com/introduction-fr-css-unit/). * A single string containing CSS length units. In this case, the value is   supplied directly to `grid-auto-rows`. * A dictionary of row heights at different breakpoints, where each key is a   breakpoint name (one of `"xs"`, `"sm"`, `"md"`, `"lg"`, `"xl"`, or `"xxl"`)   and where the values may be any of the above options.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to allow the layout to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.express.ui.page_fillable`)).

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not each element is wrapped in a fillable container.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit to use for the gap between columns.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   CSS class(es) to apply to the containing element.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A valid CSS unit (e.g., `height="200px"`). Use `min_height` and `max_height` in a filling layout to ensure that the layout container does not shrink below a `min_height` or grow beyond a `max_height`.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to apply to the containing element.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[RecallContextManager](`shiny.express._recall_context.RecallContextManager`)\[[Tag](`htmltools.Tag`)\]]{.parameter-annotation}</code>

:   An [](:class:`~htmltools.Tag`) element.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.layout_column_wrap`) for laying out elements into a
  uniform grid.

## Reference {.doc-section .doc-section-reference}

* [Bootstrap CSS Grid](https://getbootstrap.com/docs/5.3/layout/grid/)
* [Bootstrap Breakpoints](https://getbootstrap.com/docs/5.3/layout/breakpoints/)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from model_plots import (
    plot_accuracy_over_time,
    plot_feature_importance,
    plot_loss_over_time,
)

from shiny.express import render, ui

ui.page_opts(title="Model Dashboard")

ui.markdown("Using `ui.layout_columns()` for the layout.")


with ui.layout_columns(
    col_widths={"sm": (5, 7, 12)},
    # row_heights=(2, 3),
    # height="700px",
):
    with ui.card(full_screen=True):
        ui.card_header("Loss Over Time")

        @render.plot
        def loss_over_time():
            return plot_loss_over_time()

    with ui.card(full_screen=True):
        ui.card_header("Accuracy Over Time")

        @render.plot
        def accuracy_over_time():
            return plot_accuracy_over_time()

    with ui.card(full_screen=True):
        ui.card_header("Feature Importance")

        @render.plot
        def feature_importance():
            return plot_feature_importance()


## file: model_plots.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import ui


def plot_loss_over_time():
    epochs = np.arange(1, 101)
    loss = 1000 / np.sqrt(epochs) + np.random.rand(100) * 25

    fig = plt.figure(figsize=(10, 6))
    plt.plot(epochs, loss)
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    return fig


def plot_accuracy_over_time():
    epochs = np.arange(1, 101)
    accuracy = np.sqrt(epochs) / 12 + np.random.rand(100) * 0.15
    accuracy = [np.min([np.max(accuracy[:i]), 1]) for i in range(1, 101)]

    fig = plt.figure(figsize=(10, 6))
    plt.plot(epochs, accuracy)
    plt.xlabel("Epochs")
    plt.ylabel("Accuracy")
    return fig


def plot_feature_importance():
    features = ["Product Category", "Price", "Brand", "Rating", "Number of Reviews"]
    importance = np.random.rand(5)

    fig = plt.figure(figsize=(10, 6))
    plt.barh(features, importance)
    plt.xlabel("Importance")
    return fig


card_loss = ui.card(
    ui.card_header("Loss Over Time"),
    ui.output_plot("loss_over_time"),
    full_screen=True,
)

card_acc = ui.card(
    ui.card_header("Accuracy Over Time"),
    ui.output_plot("accuracy_over_time"),
    full_screen=True,
)

card_feat = ui.card(
    ui.card_header("Feature Importance"),
    ui.output_plot("feature_importance"),
    full_screen=True,
)


```

================
File: express.ui.layout_sidebar.qmd
================
# express.ui.layout_sidebar { #shiny.express.ui.layout_sidebar }

```python
express.ui.layout_sidebar(
    fillable=True,
    fill=True,
    bg=None,
    fg=None,
    border=None,
    border_radius=None,
    border_color=None,
    gap=None,
    padding=None,
    height=None,
    **kwargs,
)
```

Context manager for sidebar layout

This function wraps [](:func:`~shiny.ui.layout_sidebar`).

Create a sidebar layout component which can be dropped inside any Shiny UI page
method (e.g. [](:func:`~shiny.express.ui.page_fillable`)) or [](:func:`~shiny.express.ui.card`)
context.

The first child needs to be of class [](:class:`~shiny.express.ui.Sidebar`) object created by
[](:func:`~shiny.express.ui.sidebar`). The remaining arguments will contain the contents
to the main content area. Or tag attributes that are supplied to the resolved
[](:class:`~htmltools.Tag`) object.

## Parameters {.doc-section .doc-section-parameters}

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not the main content area should be wrapped in a fillable container. See [](:func:`~shiny.express.ui.fill.as_fillable_container`) for details.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not the sidebar layout should be wrapped in a fillable container. See [](:func:`~shiny.express.ui.fill.as_fill_item`) for details.

<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A background or foreground color.

<code>[**border**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether or not to show a border around the sidebar layout.

<code>[**border_radius**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Whether or not to round the corners of the sidebar layout.

<code>[**border_color**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A border color.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements provided to `*args`. This value will only be used if `fillable` is `True`.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. `padding` may be one to four values. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit to use for the height.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny.express import input, render, ui

with ui.layout_sidebar():
    with ui.sidebar():
        ui.input_slider("n", "N", min=0, max=100, value=20)

    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


```

================
File: express.ui.markdown.qmd
================
# express.ui.markdown { #shiny.express.ui.markdown }

```python
express.ui.markdown(text, *, render_func=None, **kwargs)
```

Convert a string of markdown to [](:func:`ui.HTML`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**text**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string of text containing markdown.

<code>[**render_func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Callable](`typing.Callable`)\[\[[str](`str`)\], [str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A function (with at least 1 argument) which accepts a string of markdown and returns a string of HTML. By default, a customized instance of the `markdown_id.main.MarkdownIt` class (which supports Github-flavored markdown) from the ``markdown-it`` package is used.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional keyword arguments passed to the ``render_func``.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[HTML](`shiny.express.ui.HTML`)]{.parameter-annotation}</code>

:   An [](:class:`~shiny.express.ui.HTML`) string of the rendered markdown.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

ui.markdown(
    """
    # Hello World

    This is **markdown** and here is some `code`:

    ```python
    print('Hello world!')
    ```
    """
)


```

================
File: express.ui.modal_button.qmd
================
# express.ui.modal_button { #shiny.express.ui.modal_button }

```python
express.ui.modal_button(label, icon=None, **kwargs)
```

Creates a button that will dismiss a [](:func:`~shiny.express.ui.modal`).

[](:func:`~shiny.ui.modal_button`) is usually
passed to the `footer` of a [](:func:`~shiny.express.ui.modal`) to add a button to the footer that will close
the [](:func:`~shiny.express.ui.modal`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the button.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.modal`)
* [](:func:`~shiny.express.ui.modal_show`)
* [](:func:`~shiny.express.ui.modal_remove`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("show", "Show modal dialog")


@reactive.effect
@reactive.event(input.show)
def _():
    m = ui.modal(
        "This is a somewhat important message.",
        title="Somewhat important message",
        easy_close=True,
        footer=None,
    )
    ui.modal_show(m)


```

================
File: express.ui.modal_remove.qmd
================
# express.ui.modal_remove { #shiny.express.ui.modal_remove }

```python
express.ui.modal_remove(session=None)
```

Remove a modal dialog box.

[](:func:`~shiny.ui.modal_remove`) provides a way to remove a modal programmatically.
Modals can also be removed manually by the user if a [](:func:`~shiny.express.ui.modal_button`)
is provided, or if the modal is created with `easy_close=True`.

## Parameters {.doc-section .doc-section-parameters}

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) instance that contains the modal to remove. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.modal_show`)
* [](:func:`~shiny.express.ui.modal`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui


def run_model(delay=10.0):
    import time

    # Pretend to run a model for `delay` seconds
    start_time = time.time()
    while time.time() - start_time < delay:
        pass
    return time.time()


ui.input_action_button("run", "Run Model")

model_result = reactive.value()


def the_modal():
    return ui.modal(
        "The model is running, please wait.",
        title="Running model",
        easy_close=False,
        footer=None,
    )


@reactive.effect
@reactive.event(input.run)
def do_run_model():
    # Show the modal, blocking interaction with the UI
    ui.modal_show(the_modal())

    result = run_model(delay=4)

    # Now that we have model results, remove the modal
    # and update the model result reactive value
    ui.modal_remove()
    model_result.set(result)


```

================
File: express.ui.modal_show.qmd
================
# express.ui.modal_show { #shiny.express.ui.modal_show }

```python
express.ui.modal_show(modal, session=None)
```

Show a modal dialog.

[](:func:`~shiny.ui.modal_show`) is used to display a modal that has been
created with [](:func:`~shiny.express.ui.modal`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**modal**]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   Typically a [](:func:`~shiny.express.ui.modal`) instance.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) instance to display the modal in. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.modal_remove`)
* [](:func:`~shiny.express.ui.modal`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("show", "Show modal dialog")


@reactive.effect
@reactive.event(input.show)
def _():
    m = ui.modal(
        "This is a somewhat important message.",
        title="Somewhat important message",
        easy_close=True,
        footer=None,
    )
    ui.modal_show(m)


```

================
File: express.ui.modal.qmd
================
# express.ui.modal { #shiny.express.ui.modal }

```python
express.ui.modal(
    *args,
    title=None,
    footer=MISSING,
    size='m',
    easy_close=False,
    fade=True,
    **kwargs,
)
```

Creates the UI for a modal dialog, using Bootstrap&#x27;s modal class.

A modal is a dialog box that appears in front of the app. Modals are
typically used for showing important messages, or for presenting UI that requires
input from the user, such as a user name and/or password input.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   UI elements for the body of the modal.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An optional title for the modal dialog.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   UI for footer. Use ``None`` for no footer.

<code>[**size**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['m', 's', 'l', 'xl'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'m\']{.parameter-default}</code>

:   The size of the modal dialogue box. Use one of "s" for small, "m" (the default) for medium, or "l" for large.

<code>[**easy_close**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the modal dialog can be dismissed by clicking outside the dialog box, or by pressing the Escape key. If ``False`` (the default), the modal dialog can't be dismissed in those ways; instead it must be dismissed by clicking on a ``modal_button()``, or from a call to ``modal_remove()`` on the server.

<code>[**fade**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If ``False``, the modal dialog will have no fade-in animation (it will simply appear rather than fade in to view).

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to be applied to the modal's body tag.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Tag](`htmltools.Tag`)]{.parameter-annotation}</code>

:   A UI element

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.ui.modal_show`)
* [](:func:`~shiny.ui.modal_remove`)
* [](:func:`~shiny.ui.modal_button`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("show", "Show modal dialog")


@reactive.effect
@reactive.event(input.show)
def _():
    m = ui.modal(
        "This is a somewhat important message.",
        title="Somewhat important message",
        easy_close=True,
        footer=None,
    )
    ui.modal_show(m)


```

================
File: express.ui.nav_control.qmd
================
# express.ui.nav_control { #shiny.express.ui.nav_control }

```python
express.ui.nav_control()
```

Context manager for a control in the navigation container.

This function wraps [](:func:`~shiny.ui.nav_control`).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

with ui.navset_card_underline(id="tab"):
    with ui.nav_control():
        ui.a("Shiny", href="https://shiny.posit.co", target="_blank")

    with ui.nav_control():
        ui.a(
            "Learn Shiny",
            href="https://shiny.posit.co/py/docs/overview.html",
            target="_blank",
        )


```

================
File: express.ui.nav_menu.qmd
================
# express.ui.nav_menu { #shiny.express.ui.nav_menu }

```python
express.ui.nav_menu(title, *, value=None, icon=None, align='left')
```

Context manager for a menu of nav items.

This function wraps [](:func:`~shiny.ui.nav_menu`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A title to display. Can be a character string or UI elements (i.e., tags).

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value of the item. This is used to determine whether the item is active (when an ``id`` is provided to the nav container), programmatically select the item (e.g., [](:func:`~shiny.express.ui.update_navs`)), and/or be provided to the ``selected`` argument of the navigation container (e.g., [](:func:`~shiny.express.ui.navset_tab`)).

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**align**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['left', 'right'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'left\']{.parameter-default}</code>

:   Horizontal alignment of the dropdown menu relative to dropdown toggle.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_card_pill(id="selected_card_pill"):
    with ui.nav_menu("Nav Menu items"):
        with ui.nav_panel("A"):
            "Page A content"
        with ui.nav_panel("B"):
            "Page B content"
        with ui.nav_panel("C"):
            "Page C content"
ui.h5("Selected:")


@render.code
def _():
    return input.selected_card_pill()


```

================
File: express.ui.nav_panel.qmd
================
# express.ui.nav_panel { #shiny.express.ui.nav_panel }

```python
express.ui.nav_panel(title, *, value=None, icon=None)
```

Context manager for nav item pointing to some internal content.

This function wraps [](:func:`~shiny.express.ui.nav`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   A title to display. Can be a character string or UI elements (i.e., tags).

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value of the item. This is used to determine whether the item is active (when an ``id`` is provided to the nav container), programmatically select the item (e.g., [](:func:`~shiny.express.ui.update_navs`)), and/or be provided to the ``selected`` argument of the navigation container (e.g., [](:func:`~shiny.express.ui.navset_tab`)).

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

ui.page_opts(title="Nav Panel Example")

with ui.nav_panel("Page 1"):
    "Page 1 content"

with ui.nav_panel("Page 2"):
    with ui.navset_card_underline():
        with ui.nav_panel("Tab 1"):
            "Tab 1 content"
        with ui.nav_panel("Tab 2"):
            "Tab 2 content"
        with ui.nav_panel("Tab 3"):
            "Tab 3 content"


```

================
File: express.ui.nav_spacer.qmd
================
# express.ui.nav_spacer { #shiny.express.ui.nav_spacer }

```python
express.ui.nav_spacer()
```

Create space between nav items.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.nav_panel`)
* [](:func:`~shiny.express.ui.nav_menu`)
* [](:func:`~shiny.express.ui.nav_control`)
* [](:func:`~shiny.express.ui.navset_bar`)
* [](:func:`~shiny.express.ui.navset_tab`)
* [](:func:`~shiny.express.ui.navset_pill`)
* [](:func:`~shiny.express.ui.navset_underline`)
* [](:func:`~shiny.express.ui.navset_card_tab`)
* [](:func:`~shiny.express.ui.navset_card_pill`)
* [](:func:`~shiny.express.ui.navset_card_underline`)
* [](:func:`~shiny.express.ui.navset_pill_list`)
* [](:func:`~shiny.express.ui.navset_hidden`)

## Example {.doc-section .doc-section-example}

See [](:func:`~shiny.express.ui.nav_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_underline(id="selected_navset_underline"):
    with ui.nav_panel("Tab 1"):
        "Tab 1 content"
    ui.nav_spacer()
    with ui.nav_panel("Tab 2"):
        "Tab 2 content"
    with ui.nav_panel("Tab 3"):
        "Tab 3 content"
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_underline()


```

================
File: express.ui.navset_bar.qmd
================
# express.ui.navset_bar { #shiny.express.ui.navset_bar }

```python
express.ui.navset_bar(
    title,
    id=None,
    selected=None,
    sidebar=None,
    fillable=True,
    gap=None,
    padding=None,
    position='static-top',
    header=None,
    footer=None,
    bg=None,
    inverse=False,
    underline=True,
    collapsible=True,
    fluid=True,
)
```

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_bar`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   Title to display in the navbar.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ui](`shiny.ui`).[Sidebar](`shiny.express.ui.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.express.ui.Sidebar`) component to display on every [](:func:`~shiny.express.ui.nav_panel`) page.

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [list](`list`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether or not to allow fill items to grow/shrink to fit the browser window. If `True`, all `nav()` pages are fillable. A character vector, matching the value of `nav()`s to be filled, may also be provided. Note that, if a `sidebar` is provided, `fillable` makes the main content portion fillable.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit defining the gap (i.e., spacing) between elements provided to `*args`.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding to use for the body. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. The length can be between one and four. If one, then that value will be used for all four sides. If two, then the first value will be used for the top and bottom, while the second value will be used for left and right. If three, then the first will be used for top, the second will be left and right, and the third will be bottom. If four, then the values will be interpreted as top, right, bottom, and left respectively.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['static-top', 'fixed-top', 'fixed-bottom', 'sticky-top'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'static-top\']{.parameter-default}</code>

:   Determines whether the navbar should be displayed at the top of the page with normal scrolling behavior ("static-top"), pinned at the top ("fixed-top"), or pinned at the bottom ("fixed-bottom"). Note that using "fixed-top" or "fixed-bottom" will cause the navbar to overlay your body content, unless you add padding (e.g., ``tags.style("body {padding-top: 70px;}")``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Background color of the navbar (a CSS color).

<code>[**inverse**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Either ``True`` for a light text color or ``False`` for a dark text color.

<code>[**collapsible**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   ``True`` to automatically collapse the navigation elements into an expandable menu on mobile devices or narrow window widths.

<code>[**fluid**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   ``True`` to use fluid layout; ``False`` to use fixed layout.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_bar(title="Navset Bar", id="selected_navset_bar"):
    with ui.nav_panel("A"):
        "Panel A content"

    with ui.nav_panel("B"):
        "Panel B content"

    with ui.nav_panel("C"):
        "Panel C content"

    with ui.nav_menu("Other links"):
        with ui.nav_panel("D"):
            "Page D content"

        "----"
        "Description:"
        with ui.nav_control():
            ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_bar()


```

================
File: express.ui.navset_card_pill.qmd
================
# express.ui.navset_card_pill { #shiny.express.ui.navset_card_pill }

```python
express.ui.navset_card_pill(
    id=None,
    selected=None,
    title=None,
    sidebar=None,
    header=None,
    footer=None,
    placement='above',
)
```

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_card_pill`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ui](`shiny.ui`).[Sidebar](`shiny.express.ui.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`shiny.express.ui.Sidebar`) component to display on every [](:func:`~shiny.express.ui.nav`) page.

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['above', 'below'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'above\']{.parameter-default}</code>

:   Placement of the nav items relative to the content.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_card_pill(id="selected_navset_card_pill"):
    with ui.nav_panel("A"):
        "Panel A content"

    with ui.nav_panel("B"):
        "Panel B content"

    with ui.nav_panel("C"):
        "Panel C content"

    with ui.nav_menu("Other links"):
        with ui.nav_panel("D"):
            "Page D content"

        "----"
        "Description:"
        with ui.nav_control():
            ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_card_pill()


```

================
File: express.ui.navset_card_tab.qmd
================
# express.ui.navset_card_tab { #shiny.express.ui.navset_card_tab }

```python
express.ui.navset_card_tab(
    id=None,
    selected=None,
    title=None,
    sidebar=None,
    header=None,
    footer=None,
)
```

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_card_tab`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ui](`shiny.ui`).[Sidebar](`shiny.express.ui.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`shiny.express.ui.Sidebar`) component to display on every [](:func:`~shiny.express.ui.nav`) page.

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_card_tab(id="selected_navset_card_tab"):
    with ui.nav_panel("A"):
        "Panel A content"

    with ui.nav_panel("B"):
        "Panel B content"

    with ui.nav_panel("C"):
        "Panel C content"

    with ui.nav_menu("Other links"):
        with ui.nav_panel("D"):
            "Page D content"

        "----"
        "Description:"
        with ui.nav_control():
            ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_card_tab()


```

================
File: express.ui.navset_card_underline.qmd
================
# express.ui.navset_card_underline { #shiny.express.ui.navset_card_underline }

```python
express.ui.navset_card_underline(
    id=None,
    selected=None,
    title=None,
    sidebar=None,
    header=None,
    footer=None,
    placement='above',
)
```

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_card_underline`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**sidebar**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ui](`shiny.ui`).[Sidebar](`shiny.express.ui.Sidebar`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`shiny.express.ui.Sidebar`) component to display on every [](:func:`~shiny.express.ui.nav`) page.

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['above', 'below'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'above\']{.parameter-default}</code>

:   Placement of the nav items relative to the content.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_card_underline(id="selected_navset_card_underline"):
    with ui.nav_panel("A"):
        "Panel A content"

    with ui.nav_panel("B"):
        "Panel B content"

    with ui.nav_panel("C"):
        "Panel C content"

    with ui.nav_menu("Other links"):
        with ui.nav_panel("D"):
            "Page D content"

        "----"
        "Description:"
        with ui.nav_control():
            ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_card_underline()


```

================
File: express.ui.navset_hidden.qmd
================
# express.ui.navset_hidden { #shiny.express.ui.navset_hidden }

```python
express.ui.navset_hidden(id=None, selected=None, header=None, footer=None)
```

Context manager for nav contents without the nav items.

This function wraps [](:func:`~shiny.ui.navset_hidden`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

with ui.sidebar():
    ui.input_radio_buttons("controller", "Controller", ["1", "2", "3"], selected="1")

with ui.navset_hidden(id="hidden_tabs"):
    with ui.nav_panel(None, value="panel1"):
        "Panel 1 content"
    with ui.nav_panel(None, value="panel2"):
        "Panel 2 content"
    with ui.nav_panel(None, value="panel3"):
        "Panel 3 content"


@reactive.effect
@reactive.event(input.controller)
def _():
    ui.update_navs("hidden_tabs", selected="panel" + str(input.controller()))


```

================
File: express.ui.navset_pill_list.qmd
================
# express.ui.navset_pill_list { #shiny.express.ui.navset_pill_list }

```python
express.ui.navset_pill_list(
    id=None,
    selected=None,
    header=None,
    footer=None,
    well=True,
    widths=(4, 8),
)
```

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_pill_list`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match its ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

<code>[**well**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   ``True`` to place a well (gray rounded rectangle) around the navigation list.

<code>[**widths**]{.parameter-name} [:]{.parameter-annotation-sep} [[tuple](`tuple`)\[[int](`int`), [int](`int`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [(4, 8)]{.parameter-default}</code>

:   Column widths of the navigation list and tabset content areas respectively.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_pill_list(id="selected_navset_pill_list"):
    with ui.nav_panel("A"):
        "Panel A content"

    with ui.nav_panel("B"):
        "Panel B content"

    with ui.nav_panel("C"):
        "Panel C content"

    with ui.nav_menu("Other links"):
        with ui.nav_panel("D"):
            "Page D content"

        "----"
        "Description:"
        with ui.nav_control():
            ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_pill_list()


```

================
File: express.ui.navset_pill.qmd
================
# express.ui.navset_pill { #shiny.express.ui.navset_pill }

```python
express.ui.navset_pill(id=None, selected=None, header=None, footer=None)
```

Context manager for a set of nav items as a pillset.

This function wraps [](:func:`~shiny.ui.navset_pill`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_pill(id="selected_navset_pill"):
    with ui.nav_panel("A"):
        "Panel A content"

    with ui.nav_panel("B"):
        "Panel B content"

    with ui.nav_panel("C"):
        "Panel C content"

    with ui.nav_menu("Other links"):
        with ui.nav_panel("D"):
            "Page D content"

        "----"
        "Description:"
        with ui.nav_control():
            ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_pill()


```

================
File: express.ui.navset_tab.qmd
================
# express.ui.navset_tab { #shiny.express.ui.navset_tab }

```python
express.ui.navset_tab(id=None, selected=None, header=None, footer=None)
```

Context manager for a set of nav items as a tabset.

This function wraps [](:func:`~shiny.ui.navset_tab`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_tab(id="selected_navset_tab"):
    with ui.nav_panel("A"):
        "Panel A content"

    with ui.nav_panel("B"):
        "Panel B content"

    with ui.nav_panel("C"):
        "Panel C content"

    with ui.nav_menu("Other links"):
        with ui.nav_panel("D"):
            "Page D content"

        "----"
        "Description:"
        with ui.nav_control():
            ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_tab()


```

================
File: express.ui.navset_underline.qmd
================
# express.ui.navset_underline { #shiny.express.ui.navset_underline }

```python
express.ui.navset_underline(id=None, selected=None, header=None, footer=None)
```

Context manager for a set of nav items whose active/focused navigation links are
styled with an underline.

This function wraps [](:func:`~shiny.ui.navset_underline`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If provided, will create an input value that holds the currently selected nav item.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Choose a particular nav item to select by default value (should match it's ``value``).

<code>[**header**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display above the selected content.

<code>[**footer**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   UI to display below the selected content.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

with ui.navset_underline(id="selected_navset_underline"):
    with ui.nav_panel("A"):
        "Panel A content"

    with ui.nav_panel("B"):
        "Panel B content"

    with ui.nav_panel("C"):
        "Panel C content"

    with ui.nav_menu("Other links"):
        with ui.nav_panel("D"):
            "Page D content"

        "----"
        "Description:"
        with ui.nav_control():
            ui.a("Shiny", href="https://shiny.posit.co", target="_blank")
ui.h5("Selected:")


@render.code
def _():
    return input.selected_navset_underline()


```

================
File: express.ui.notification_remove.qmd
================
# express.ui.notification_remove { #shiny.express.ui.notification_remove }

```python
express.ui.notification_remove(id, *, session=None)
```

Remove a notification.

[](:func:`~shiny.ui.notification_remove`) provides a way to remove a notification programmatically.
Notifications can also be removed manually by the user, or automatically after a
specififed amont of time passes.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The ``id`` of the notification to remove.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) in which the notification appears. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The notification's ``id``.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.notification_show`)
* [](:func:`~shiny.express.ui.modal`)

## Example {.doc-section .doc-section-example}

See [](:func:`shiny.express.ui.notification_show`).

================
File: express.ui.notification_show.qmd
================
# express.ui.notification_show { #shiny.express.ui.notification_show }

```python
express.ui.notification_show(
    ui,
    *,
    action=None,
    duration=5,
    close_button=True,
    id=None,
    type='default',
    session=None,
)
```

Show a notification to the user.

A notification is a message that appears near the bottom corner of the app.
Notifications normally disappear after a short period of time, and should multiple
notifications appear together, they will stack on top of one another.

## Parameters {.doc-section .doc-section-parameters}

<code>[**ui**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation}</code>

:   Contents of the notification message.

<code>[**action**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Message content that represents an action. For example, this could be a link that the user can click on. This is separate from ui so customized layouts can handle the main notification content separately from the action content.

<code>[**duration**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[int](`int`) \| [float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [5]{.parameter-default}</code>

:   Number of seconds to display the message before it disappears. Use ``None`` to prevent the message from disappearing automatically. The user will need to click the corner of the notification to close it.

<code>[**close_button**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   If ``True``, display a button which will make the notification disappear when clicked. If ``False`` do not display.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An optional unique identifier for the notification. If supplied, any existing notification with the same ``id`` will be replaced with this one (otherwise, a new notification is created).

<code>[**type**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['default', 'message', 'warning', 'error'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'default\']{.parameter-default}</code>

:   A string which controls the color of the notification. This should be one of "default" (gray), "message" (blue), "warning" (yellow), or "error" (red).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) in which the notification should appear.  If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The notification's ``id``.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.notification_remove`)
* [](:func:`~shiny.express.ui.modal`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("show", "Show")
ui.input_action_button("remove", "Remove")

ids: list[str] = []
n: int = 0


@reactive.effect
@reactive.event(input.show)
def _():
    global ids
    global n
    # Save the ID for removal later
    id = ui.notification_show("Message " + str(n), duration=None)
    ids.append(id)
    n += 1


@reactive.effect
@reactive.event(input.remove)
def _():
    global ids
    if ids:
        ui.notification_remove(ids.pop())


```

================
File: express.ui.page_opts.qmd
================
# express.ui.page_opts { #shiny.express.ui.page_opts }

```python
express.ui.page_opts(
    title=MISSING,
    window_title=MISSING,
    lang=MISSING,
    theme=MISSING,
    page_fn=MISSING,
    fillable=MISSING,
    full_width=MISSING,
    **kwargs,
)
```

Set page-level options for the current app.

The arguments to this function get passed to [](:func:`~shiny.express.ui.page_auto`), which
determines which page function should be used based on the page options and the
top-level items in the app.

If there is a top-level [](:func:`~shiny.express.ui.nav_panel`), [](:func:`~shiny.express.ui.page_auto`)
will use [](:func:`~shiny.express.ui.page_navbar`). Otherwise, if there is a top-level sidebar,
[](:func:`~shiny.express.ui.page_sidebar`) is used.

If there are neither top-level nav panels nor sidebars, this will use the `fillable`
and `full_width` arguments to determine which page function to use:

1. If `fillable` is `True`, [](:func:`~shiny.express.ui.page_fillable`) is used.
2. Otherwise, if `full_width` is `True`, [](:func:`~shiny.express.ui.page_fluid`) is used.
3. If neither are `True`, [](:func:`~shiny.express.ui.page_fixed`) is used.

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A title shown on the page.

<code>[**window_title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The browser window title. If no value is provided, this will use the value of ``title``.

<code>[**lang**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The default, `None`, results in an empty string.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [Path](`pathlib.Path`) \| [ui](`shiny.ui`).[Theme](`shiny.express.ui.Theme`) \| [ThemeProvider](`shiny.express.ui._html_deps_external.ThemeProvider`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A custom Shiny theme created using the [](:class:`~shiny.express.ui.Theme`) class, or a path to a local or online CSS file that will replace the Bootstrap CSS bundled by default with a Shiny app. This file should be a complete `bootstrap.css` or `bootstrap.min.css` file.  For advanced uses, you can also pass a [](:class:`~htmltools.Tagifiable`) object. In this case, Shiny will suppress the default Bootstrap CSS.  To modify the theme of an app without replacing the Bootstrap CSS entirely, use [](:func:`~shiny.express.ui.include_css`) to add custom CSS.

<code>[**fillable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   If there is a top-level sidebar or nav, then the value is passed through to the [](:func:`~shiny.express.ui.page_sidebar`) or [](:func:`~shiny.express.ui.page_navbar`) function. Otherwise, if ``True``, use [](:func:`~shiny.express.ui.page_fillable`), where the content fills the window; if ``False`` (the default), the value of ``full_width`` will determine which page function is used.

<code>[**full_width**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   This has an effect only if there are no sidebars or top-level navs, and ``fillable`` is ``False``. If this is ``False`` (the default), use use [](:func:`~shiny.express.ui.page_fixed`); if ``True``, use [](:func:`~shiny.express.ui.page_fillable`).

<code>[**page_fn**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[..., [Tag](`htmltools.Tag`)\] \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   The page function to use. If ``None`` (the default), will automatically choose one based on the arguments provided. If not ``None``, this will override all heuristics for choosing page functions.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[object](`object`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional arguments to pass to the page function. See the description above for further details on how the page function is selected.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

ui.page_opts(title="App with Navbar", fillable=True, id="page")

with ui.sidebar():
    ui.input_select("data", "Dataset", ("tips", "flights", "exercise"))

    with ui.panel_conditional("input.page === 'View'"):
        ui.input_select("view", "View", ("plot", "table"))

ui.nav_spacer()

with ui.nav_panel("Data"):
    "This page could be used to pick a dataset."

with ui.nav_panel("View"):
    "This page could be used to view the dataset."
    "Notice the additional controls that appear when 'View' is selected."


```

================
File: express.ui.panel_absolute.qmd
================
# express.ui.panel_absolute { #shiny.express.ui.panel_absolute }

```python
express.ui.panel_absolute(
    top=None,
    left=None,
    right=None,
    bottom=None,
    width=None,
    height=None,
    draggable=False,
    fixed=False,
    cursor='auto',
    **kwargs,
)
```

Context manager for a panel of absolutely positioned content.

This function wraps [](:func:`~shiny.ui.panel_absolute`).

Creates a ``&lt;div&gt;`` tag whose CSS position is set to absolute (or fixed if ``fixed =
True``). The way absolute positioning works in HTML is that absolute coordinates are
specified relative to its nearest parent element whose position is not set to static
(which is the default), and if no such parent is found, then relative to the page
borders. If you&#x27;re not sure what that means, just keep in mind that you may get
strange results if you use this function from inside of certain types of panels.

## Parameters {.doc-section .doc-section-parameters}

<code>[**top**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Distance between the top of the panel, and the top of the page or parent container.

<code>[**left**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Distance between the left side of the panel, and the left of the page or parent container.

<code>[**right**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Distance between the right side of the panel, and the right of the page or parent container.

<code>[**bottom**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Distance between the bottom of the panel, and the bottom of the page or parent container.

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Width of the panel.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Height of the panel.

<code>[**draggable**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, allows the user to move the panel by clicking and dragging.

<code>[**fixed**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Positions the panel relative to the browser window and prevents it from being scrolled with the rest of the page.

<code>[**cursor**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'move', 'default', 'inherit'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The type of cursor that should appear when the user mouses over the panel. Use ``"move"`` for a north-east-south-west icon, ``"default"`` for the usual cursor arrow, or ``"inherit"`` for the usual cursor behavior (including changing to an I-beam when the cursor is over text). The default is ``"auto"``, which is equivalent to ``"move" if draggable else "inherit"``.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes added to the content's container tag.

## Tip {.doc-section .doc-section-tip}

The position (``top``, ``left``, ``right``, ``bottom``) and size (``width``,
``height``) parameters are all optional, but you should specify exactly two of top,
bottom, and height and exactly two of left, right, and width for predictable
results.

Like most other distance parameters in Shiny, the position and size parameters take
a number (interpreted as pixels) or a valid CSS size string, such as ``"100px"``
(100 pixels) or ``"25%"``.

For arcane HTML reasons, to have the panel fill the page or parent you should
specify 0 for ``top``, ``left``, ``right``, and ``bottom`` rather than the more
obvious ``width = "100%"`` and ``height = "100%"``.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

ui.h2("A basic absolute panel example")

with ui.panel_absolute(draggable=True, width="300px", right="50px", top="25%"):
    with ui.panel_well():
        "Drag me around!"
        ui.input_slider("n", "N", min=0, max=100, value=20)


```

================
File: express.ui.panel_conditional.qmd
================
# express.ui.panel_conditional { #shiny.express.ui.panel_conditional }

```python
express.ui.panel_conditional(condition, **kwargs)
```

Context manager for a conditional panel

This function wraps [](:func:`~shiny.ui.panel_conditional`).

Show UI elements only if a ``JavaScript`` condition is ``true``.

## Parameters {.doc-section .doc-section-parameters}

<code>[**condition**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A JavaScript expression that will be evaluated repeatedly to determine whether the panel should be displayed.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Attributes to place on the panel tag.

## Note {.doc-section .doc-section-note}

In the JS expression, you can refer to input and output JavaScript objects that
contain the current values of input and output. For example, if you have an input
with an id of foo, then you can use input.foo to read its value. (Be sure not to
modify the input/output objects, as this may cause unpredictable behavior.)

You are not recommended to use special JavaScript characters such as a period . in
the input id's, but if you do use them anyway, for example, ``id = "foo.bar"``, you
will have to use ``input["foo.bar"]`` instead of ``input.foo.bar`` to read the input
value.

## Tip {.doc-section .doc-section-tip}

A more powerful (but slower) way to conditionally show UI content is to use
[](:class:`~shiny.express.render.ui`).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

ui.input_checkbox("show", "Show radio buttons", False)

with ui.panel_conditional("input.show"):
    ui.input_radio_buttons("radio", "Choose ", ["slider", "select"])

with ui.panel_conditional("input.show && input.radio === 'slider'"):
    ui.input_slider("slider", None, min=0, max=100, value=50)

with ui.panel_conditional("input.show && input.radio === 'select'"):
    ui.input_select("select", None, ["A", "B", "C"])


```

================
File: express.ui.panel_fixed.qmd
================
# express.ui.panel_fixed { #shiny.express.ui.panel_fixed }

```python
express.ui.panel_fixed(
    top=None,
    left=None,
    right=None,
    bottom=None,
    width=None,
    height=None,
    draggable=False,
    cursor='auto',
    **kwargs,
)
```

Context manager for a panel of absolutely positioned content.

This function wraps [](:func:`~shiny.ui.panel_fixed`).

This function is equivalent to calling [](:func:`~shiny.express.ui.panel_absolute`) with
``fixed=True`` (i.e., the panel does not scroll with the rest of the page). See
[](:func:`~shiny.express.ui.panel_absolute`) for more information.

## Parameters {.doc-section .doc-section-parameters}

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Arguments passed along to [](:func:`~shiny.express.ui.panel_absolute`).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.panel_absolute`)

================
File: express.ui.panel_title.qmd
================
# express.ui.panel_title { #shiny.express.ui.panel_title }

```python
express.ui.panel_title(title, window_title=MISSING)
```

Create title(s) for the application.

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [Tag](`htmltools.Tag`) \| [TagList](`htmltools.TagList`)]{.parameter-annotation}</code>

:   A title to display in the app's UI.

<code>[**window_title**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A title to display on the browser tab.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[TagList](`htmltools.TagList`)]{.parameter-annotation}</code>

:   A UI element.

## Note {.doc-section .doc-section-note}

This result of this function causes a side effect of adding a title tag to the head
of the document (this is necessary for the browser to display the title in the
browser window). You can also specify a page title explicitly using the title
parameter of the top-level page function (e.g., [](:func:`~shiny.express.ui.page_fluid`)).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import ui

ui.panel_title("Page title", "Window title")


```

================
File: express.ui.panel_well.qmd
================
# express.ui.panel_well { #shiny.express.ui.panel_well }

```python
express.ui.panel_well(**kwargs)
```

Context manager for a well panel

This function wraps [](:func:`~shiny.ui.panel_well`).

A well panel is a simple container with a border and some padding. It&#x27;s useful for
grouping related content together.

================
File: express.ui.popover.qmd
================
# express.ui.popover { #shiny.express.ui.popover }

```python
express.ui.popover(
    title=None,
    id=None,
    placement='auto',
    options=None,
    **kwargs,
)
```

Context manager for a popover

This function wraps [](:func:`~shiny.ui.popover`).

Display additional information when clicking on a UI element (typically a
button).

## Parameters {.doc-section .doc-section-parameters}

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A title to display in the popover. Can be a character string or UI elements (i.e., tags).

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string. Required to reactively respond to the visibility of the popover (via the `input[id]` value) and/or update the visibility/contents of the popover.

<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'top', 'right', 'bottom', 'left'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The placement of the popover relative to its trigger.

<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[dict](`dict`)\[[str](`str`), [object](`object`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A list of additional [Bootstrap options](https://getbootstrap.com/docs/5.3/components/popovers/#options).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import gear_fill

from shiny.express import input, render, ui

with ui.popover(id="btn_popover"):
    ui.input_action_button("btn", "A button", class_="mt-3")

    "A popover with more context and information than should be used in a tooltip."
    "You can even have multiple DOM elements in a popover!"


with ui.card(class_="mt-3"):
    with ui.card_header():
        "Plot title (Click the gear to change variables)"
        with ui.popover(placement="right", id="card_popover"):
            ui.span(gear_fill, style="position:absolute; top: 5px; right: 7px;")
            "Put dropdowns here to alter your plot!"
            ui.input_selectize("x", "X", ["x1", "x2", "x3"])
            ui.input_selectize("y", "Y", ["y1", "y2", "y3"])

    @render.text
    def plot_txt():
        return f"<Making plot using x: {input.x()} and y: {input.y()}>"


## file: icons.py
from shiny import ui

# https://icons.getbootstrap.com/icons/gear-fill/
gear_fill = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16"><path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/></svg>'
)


```

================
File: express.ui.Progress.qmd
================
# express.ui.Progress { #shiny.express.ui.Progress }

```python
express.ui.Progress(self, min=0, max=1, session=None)
```

Initialize a progress bar.

`Progress` creates a computation manager that can be used with `with` to
run a block of code. Shiny will display a progress bar while the code runs, which
you can update by calling the `set()` and `message()` methods of the computation
manager at strategic points in the code block.

## Parameters {.doc-section .doc-section-parameters}

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   The value that represents the starting point of the progress bar. Must be less than ``max``.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   The value that represents the end of the progress bar. Must be greater than ``min``.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) instance that the progress bar should appear in. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio

from shiny import reactive
from shiny.express import input, render, ui

ui.input_action_button("button", "Compute")


@render.text
@reactive.event(input.button)
async def compute():
    with ui.Progress(min=1, max=15) as p:
        p.set(message="Calculation in progress", detail="This may take a while...")

        for i in range(1, 15):
            p.set(i, message="Computing")
            await asyncio.sleep(0.1)
            # Normally use time.sleep() instead, but it doesn't yet work in Pyodide.
            # https://github.com/pyodide/pyodide/issues/2354

    return "Done computing!"


```

## Methods

| Name | Description |
| --- | --- |
| [close](#shiny.express.ui.Progress.close) | Close the progress bar. You can also use the Progress object as a context manager, which will cause the progress bar to close on exit. |
| [inc](#shiny.express.ui.Progress.inc) | Increment the progress bar. |
| [set](#shiny.express.ui.Progress.set) | Opens and updates the progress panel. |

### close { #shiny.express.ui.Progress.close }

```python
express.ui.Progress.close()
```

Close the progress bar. You can also use the Progress object as a context
manager, which will cause the progress bar to close on exit.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The object instance

#### Note {.doc-section .doc-section-note}

Removes the progress panel. Future calls to set and close will be ignored.

### inc { #shiny.express.ui.Progress.inc }

```python
express.ui.Progress.inc(amount=0.1, message=None, detail=None)
```

Increment the progress bar.

Like ``set``, this updates the progress panel. The difference is that ``inc``
increases the progress bar by amount, instead of setting it to a specific value.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The object instance

<code>[**amount**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0.1]{.parameter-default}</code>

:   The amount to increment in progress.

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The message to be displayed to the user or ``None`` to hide the current message (if any).

<code>[**detail**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The detail message to be displayed to the user or ``None`` to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.

### set { #shiny.express.ui.Progress.set }

```python
express.ui.Progress.set(value=None, message=None, detail=None)
```

Opens and updates the progress panel.

When called the first time, the progress panel is displayed.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**self**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   The object instance

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The value at which to set the progress bar, relative to ``min`` and ``max``. ``None`` hides the progress bar, if it is currently visible.

<code>[**message**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The message to be displayed to the user or ``None`` to hide the current message (if any).

<code>[**detail**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The detail message to be displayed to the user or ``None`` to hide the current detail message (if any). The detail message will be shown with a de-emphasized appearance relative to message.

================
File: express.ui.remove_accordion_panel.qmd
================
# express.ui.remove_accordion_panel { #shiny.express.ui.remove_accordion_panel }

```python
express.ui.remove_accordion_panel(id, target, session=None)
```

Remove an [](:func:`~shiny.express.ui.accordion_panel`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that matches an existing [](:func:`~shiny.express.ui.accordion`)'s `id`.

<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [list](`list`)\[[str](`str`)\]]{.parameter-annotation}</code>

:   The `value` of an existing panel to remove.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.accordion`)
* [](:func:`~shiny.express.ui.accordion_panel`)
* [](:func:`~shiny.express.ui.update_accordion`)
* [](:func:`~shiny.express.ui.insert_accordion_panel`)
* [](:func:`~shiny.express.ui.update_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random

from shiny import reactive
from shiny.express import input, ui

choices = ["A", "B", "C", "D", "E"]
random.shuffle(choices)

ui.input_action_button(
    "remove_panel",
    f"Remove Section {choices[-1]}",
    class_="mt-3 mb-3",
)

" (Sections randomly picked at server start)"

with ui.accordion(id="acc", multiple=True):
    for letter in "ABCDE":
        with ui.accordion_panel(f"Section {letter}"):
            f"Some narrative for section {letter}"


user_choices = [choice for choice in choices]


@reactive.effect
@reactive.event(input.remove_panel)
def _():
    if len(user_choices) == 0:
        ui.notification_show("No more panels to remove!")
        return

    ui.remove_accordion_panel("acc", f"Section {user_choices.pop()}")

    label = "No more panels to remove!"
    if len(user_choices) > 0:
        label = f"Remove Section {user_choices[-1]}"
    ui.update_action_button("remove_panel", label=label)


```

================
File: express.ui.remove_ui.qmd
================
# express.ui.remove_ui { #shiny.express.ui.remove_ui }

```python
express.ui.remove_ui(selector, multiple=False, immediate=False, session=None)
```

Remove UI objects.

## Parameters {.doc-section .doc-section-parameters}

<code>[**selector**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that is accepted by jQuery's selector (i.e. the string ``x`` to be placed in a ``$(x)`` jQuery call), which determines the element(s) to remove. If you want to remove a Shiny input or output, note that many of these are wrapped in ``<div>``s, so you may need to use a somewhat complex selector — see the Examples below. (Alternatively, you could also wrap the inputs/outputs that you want to be able to remove easily in a ``<div>`` with an id.)

<code>[**multiple**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   In case your selector matches more than one element, ``multiple`` determines whether Shiny should insert the UI object relative to all matched elements or just relative to the first matched element (default).

<code>[**immediate**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether the UI object should be immediately inserted or removed, or whether Shiny should wait until all outputs have been updated and all effects have been run (default).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session._session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.insert_ui`)
* [](:class:`~shiny.express.render.ui`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("rmv", "Remove UI")
ui.input_text("txt", "Click button above to remove me")


@reactive.effect
@reactive.event(input.rmv)
def _():
    ui.remove_ui(selector="div:has(> #txt)")


```

================
File: express.ui.sidebar.qmd
================
# express.ui.sidebar { #shiny.express.ui.sidebar }

```python
express.ui.sidebar(
    position='left',
    open=None,
    width=250,
    id=None,
    title=None,
    bg=None,
    fg=None,
    class_=None,
    max_height_mobile=None,
    gap=None,
    padding=None,
    **kwargs,
)
```

Context manager for sidebar element

This function wraps [](:func:`~shiny.ui.sidebar`).

## Parameters {.doc-section .doc-section-parameters}

<code>[**width**]{.parameter-name} [:]{.parameter-annotation-sep} [[CssUnit](`shiny.express.ui.css.CssUnit`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [250]{.parameter-default}</code>

:   A valid CSS unit used for the width of the sidebar.

<code>[**position**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['left', 'right'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'left\']{.parameter-default}</code>

:   Where the sidebar should appear relative to the main content, one of `"left"` or `"right"`.

<code>[**open**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SidebarOpenSpec](`shiny.express.ui._sidebar.SidebarOpenSpec`) \| [SidebarOpenValue](`shiny.express.ui._sidebar.SidebarOpenValue`) \| [Literal](`typing.Literal`)\['desktop'\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial state of the sidebar. If a string, the possible values are:  * `"open"`: the sidebar starts open * `"closed"`: the sidebar starts closed * `"always"`: the sidebar is always open and cannot be closed  Alternatively, you can provide a dictionary with keys `"desktop"` and `"mobile"` to set different initial states for desktop and mobile. For example, when `{"desktop": "open", "mobile": "closed"}` the sidebar is initialized in the open state on desktop screens or in the closed state on mobile screens.

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string. Required if wanting to reactively read (or update) the `collapsible` state in a Shiny app.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| [str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character title to be used as the sidebar title, which will be wrapped in a `<div>` element with class `sidebar-title`. You can also provide a custom [](:class:`~htmltools.Tag`) for the title element, in which case you'll likely want to give this element `class = "sidebar-title"`.

<code>[**bg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A background or foreground color.

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   CSS classes for the sidebar container element, in addition to the fixed `.sidebar` class.

<code>[**max_height_mobile**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit (passed through [](:func:`~shiny.express.ui.css.as_css_unit`)) defining the maximum height of the horizontal sidebar when viewed on mobile devices. Only applies to always-open sidebars on mobile, where by default the sidebar container is placed below the main content container on mobile devices.

<code>[**gap**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements provided to `*args`.

<code>[**padding**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be interpreted as pixels) or a character vector with valid CSS lengths. `padding` may be one to four values.  * If a single value, then that value will be used for all four sides. * If two, then the first value will be used for the top and bottom, while   the second value will be used for left and right. * If three values, then the first will be used for top, the second will be left   and right, and the third will be bottom. * If four, then the values will be interpreted as top, right, bottom, and left   respectively.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Named attributes are supplied to the sidebar content container.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny.express import input, render, ui

ui.page_opts(fillable=True)

with ui.card():
    with ui.layout_sidebar():
        with ui.sidebar(id="sidebar_left", open="desktop"):
            "Left sidebar content"

        @render.code
        def state_left():
            return f"input.sidebar_left(): {input.sidebar_left()}"


with ui.card():
    with ui.layout_sidebar():
        with ui.sidebar(id="sidebar_right", position="right", open="desktop"):
            "Right sidebar content"

        @render.code
        def state_right():
            return f"input.sidebar_right(): {input.sidebar_right()}"


with ui.card():
    with ui.layout_sidebar():
        with ui.sidebar(id="sidebar_closed", open="closed"):
            "Closed sidebar content"

        @render.code
        def state_closed():
            return f"input.sidebar_closed(): {input.sidebar_closed()}"


with ui.card():
    with ui.layout_sidebar():
        with ui.sidebar(id="sidebar_always", open="always"):
            "Always sidebar content"

        @render.code
        def state_always():
            return f"input.sidebar_always(): {input.sidebar_always()}"


```

================
File: express.ui.TagList.qmd
================
# express.ui.TagList { #shiny.express.ui.TagList }

```python
express.ui.TagList(self, *args)
```

Create an HTML tag list (i.e., a fragment of HTML)

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools._core.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   The tag children to add to the list.

## Examples {.doc-section .doc-section-examples}

```python
>>> from htmltools import TagList, div
>>> TagList("hello", div(id="foo", class_="bar"))
hello
<div id="foo" class="bar"></div>
```

## Methods

| Name | Description |
| --- | --- |
| [append](#shiny.express.ui.TagList.append) | Append tag children to the end of the list. |
| [extend](#shiny.express.ui.TagList.extend) | Extend the children by appending an iterable of children. |
| [get_dependencies](#shiny.express.ui.TagList.get_dependencies) | Get any dependencies needed to render the HTML. |
| [get_html_string](#shiny.express.ui.TagList.get_html_string) | Return the HTML string for this tag list. |
| [insert](#shiny.express.ui.TagList.insert) | Insert tag children before a given index. |
| [render](#shiny.express.ui.TagList.render) | Get string representation as well as its HTML dependencies. |
| [save_html](#shiny.express.ui.TagList.save_html) | Save to a HTML file. |
| [show](#shiny.express.ui.TagList.show) | Preview as a complete HTML document. |
| [tagify](#shiny.express.ui.TagList.tagify) | Convert any tagifiable children to Tag/TagList objects. |

### append { #shiny.express.ui.TagList.append }

```python
express.ui.TagList.append(item, *args)
```

Append tag children to the end of the list.

### extend { #shiny.express.ui.TagList.extend }

```python
express.ui.TagList.extend(other)
```

Extend the children by appending an iterable of children.

### get_dependencies { #shiny.express.ui.TagList.get_dependencies }

```python
express.ui.TagList.get_dependencies(dedup=True)
```

Get any dependencies needed to render the HTML.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**dedup**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to deduplicate the dependencies.

### get_html_string { #shiny.express.ui.TagList.get_html_string }

```python
express.ui.TagList.get_html_string(
    indent=0,
    eol='\n',
    *,
    add_ws=True,
    _escape_strings=True,
)
```

Return the HTML string for this tag list.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**indent**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Number of spaces to indent each line of the HTML.

<code>[**eol**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'\n\']{.parameter-default}</code>

:   End-of-line character(s).

<code>[**add_ws**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to add whitespace between the opening tag and the first child. If either this is True, or the child's add_ws attribute is True, then whitespace will be added; if they are both False, then no whitespace will be added.

### insert { #shiny.express.ui.TagList.insert }

```python
express.ui.TagList.insert(i, item)
```

Insert tag children before a given index.

### render { #shiny.express.ui.TagList.render }

```python
express.ui.TagList.render()
```

Get string representation as well as its HTML dependencies.

### save_html { #shiny.express.ui.TagList.save_html }

```python
express.ui.TagList.save_html(file, *, libdir='lib', include_version=True)
```

Save to a HTML file.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**file**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The file to save to.

<code>[**libdir**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'lib\']{.parameter-default}</code>

:   The directory to save the dependencies to.

<code>[**include_version**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to include the version number in the dependency folder name.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The path to the generated HTML file.

### show { #shiny.express.ui.TagList.show }

```python
express.ui.TagList.show(renderer='auto')
```

Preview as a complete HTML document.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**renderer**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'ipython', 'browser'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The renderer to use.

### tagify { #shiny.express.ui.TagList.tagify }

```python
express.ui.TagList.tagify()
```

Convert any tagifiable children to Tag/TagList objects.

================
File: express.ui.tags.qmd
================
# express.ui.tags { #shiny.express.ui.tags }

`express.ui.tags`

Functions for creating HTML tags.

================
File: express.ui.Theme.qmd
================
# express.ui.Theme { #shiny.express.ui.Theme }

```python
express.ui.Theme(self, preset=None, name=None, include_paths=None)
```

Create a custom Shiny theme.

The `Theme` class allows you to create a custom Shiny theme by providing custom Sass
code. The theme can be based on one of the available presets, such as `"shiny"` or
`"bootstrap"`, or a Bootswatch theme. Use the `.add_*()` methods can be chained
together to add custom Sass functions, defaults, mixins, and rules.

Pass the `Theme` object directly to the `theme` argument of any Shiny page function,
such as [](:func:`~shiny.express.ui.page_sidebar`) or [](:func:`~shiny.express.ui.page_navbar`). In Shiny
Express apps, use the `theme` argument of [](:func:`~shiny.express.ui.page_opts`) to set
the app theme.

**Note: Compiling custom themes requires the
[libsass](https://pypi.org/project/libsass/) package**, which is not installed by
default with Shiny. Use `pip install libsass` or `pip install "shiny[theme]"` to
install it.

Customized themes are compiled to CSS when the theme is used. The `Theme` class
caches the compiled CSS so that it&#x27;s only compiled for the first user to load your
app, but you can speed up app loading (and avoid the runtime `libsass` dependency)
by pre-compiling the theme CSS and saving it to a file. To do this, use the
`.to_css()` method to render the theme to a single minified CSS string.

```{.python filename="my_theme.py"}
from pathlib import Path

from shiny import ui

my_theme = (
    ui.Theme("shiny")
    .add_defaults(
        my_purple="#aa00aa",
    )
    .add_mixins(
        headings_color="$my-purple",
    )
)

with open(Path(__file__).parent / "my_theme.css", "w") as f:
    f.write(my_theme.to_css())
```

Run this script with `python my_theme.py` to generate the CSS file. Once saved to a
file, the CSS can be used in any Shiny app by passing the file path to the `theme`
argument instead of the `Theme` object.

```{.python filename="app.py"}
from pathlib import Path

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.h2("Hello, themed Shiny!"),
    # App content here
    title="My App",
    theme=Path(__file__).parent / "my_theme.css",
)

def server(input):
    pass

app = App(app_ui, server)
```

## Parameters {.doc-section .doc-section-parameters}

<code>[**preset**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The name of the preset to use as a base. `"shiny"` is the default theme for Shiny apps and `"bootstrap"` uses standard Bootstrap 5 styling. Bootswatch theme presets are also available. Use `Theme.available_presets()` to see the full list.

<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A custom name for the theme. If not provided, the preset name will be used.

<code>[**include_paths**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`) \| [list](`list`)\[[str](`str`) \| [pathlib](`pathlib`).[Path](`pathlib.Path`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Additional paths to include when looking for Sass files used in `@import` statements in the theme. This can be a single path as a string or [](:class:`pathlib.Path`), or a list of paths. The paths should point to directories containing additional Sass files that the theme depends on.

## Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[ValueError](`ValueError`)]{.parameter-annotation}</code>

:   If the `preset` is not a valid theme preset.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shared import filler_text, my_theme

from shiny.express import input, render, ui

ui.page_opts(
    title="Theme Example",
    theme=my_theme,
)

with ui.sidebar(title="Parameters"):
    ui.input_numeric("n", "N", min=0, max=100, value=20)
    ui.input_slider("m", "M", min=0, max=100, value=50)
    ui.input_selectize("letter", "Letter", choices=["A", "B", "C"])

ui.h2("Output")


@render.code
def txt():
    return f"n*2 is {input.n() * 2}"


ui.markdown(filler_text)


## file: shared.py
from pathlib import Path

from shiny import ui

my_theme = (
    ui.Theme("shiny", include_paths=Path(__file__).parent)
    .add_defaults(
        bslib_dashboard_design=True,
    )
    .add_mixins(
        headings_color="$success",
        bar_color="$purple",
        select_color_text="$orange",
    )
    .add_rules(
        """
        em { color: $warning; }
        .sidebar-title { color: $danger; }
        """
    )
    .add_rules('@import "css/rules.scss";')
)


if False:
    # To avoid runtime Sass compilation, save your theme CSS to a file
    # and then use that CSS file in the `theme` argument.
    css_dir = Path(__file__).parent / "css"
    css_dir.mkdir(exist_ok=True)
    with open(css_dir / "shiny-theme-demo.css", "w") as f:
        f.write(my_theme.to_css())

filler_text = """
**AI-generated filler text.** In the world of exotic fruits, the durian stands out with its spiky exterior and strong odor. Despite its divisive smell, many people are drawn to its rich, creamy texture and unique flavor profile. This tropical fruit is often referred to as the "king of fruits" in various Southeast Asian countries.

Durians are known for their large size and thorn-covered husk, _which requires careful handling_. The flesh inside can vary in color from pale yellow to deep orange, with a custard-like consistency that melts in your mouth. Some describe its taste as a mix of sweet, savory, and creamy, while others find it overpowering and pungent.
"""


## file: css/shiny-theme-demo.css
@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Source+Code+Pro:ital,wght@0,400;0,600;1,400;1,600&display=swap");:root{}/*!
   * Bootstrap  v5.3.1 (https://getbootstrap.com/)
   * Copyright 2011-2023 The Bootstrap Authors
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   */:root{--bs-font-monospace: "Source Code Pro", SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;--bs-body-font-family: "Open Sans", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;--bs-body-font-size:1rem;--bs-body-font-weight: 400;--bs-body-line-height: 1.5;--bs-body-color: #1D1F21;--bs-body-bg: #fff;--bs-emphasis-color: #000;--bs-emphasis-color-rgb: 0,0,0;--bs-secondary-color: rgba(29,31,33,0.75);--bs-secondary-bg: #e9ecef;--bs-tertiary-bg: #f8f8f8;--bs-heading-color: #00891a;--bs-link-color-rgb: 0,123,194;--bs-link-hover-color-rgb: 0,98,155;--bs-border-width: 1px;--bs-border-color: #dee2e6;--bs-border-color-translucent: rgba(40,70,94,0.1);--bs-border-radius: 3px}*,*::before,*::after{box-sizing:border-box}@media (prefers-reduced-motion: no-preference){:root{scroll-behavior:smooth}}body{margin:0;font-family:var(--bs-body-font-family);font-size:var(--bs-body-font-size);font-weight:var(--bs-body-font-weight);line-height:var(--bs-body-line-height);color:var(--bs-body-color);text-align:var(--bs-body-text-align);background-color:var(--bs-body-bg);-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}h2,.h2,h1,.h1{margin-top:0;margin-bottom:.5rem;font-weight:400;line-height:1.2;color:var(--bs-heading-color)}h1,.h1{font-size:calc(1.335rem + 1.02vw)}@media (min-width: 1200px){h1,.h1{font-size:2.1rem}}h2,.h2{font-size:calc(1.325rem + .9vw)}@media (min-width: 1200px){h2,.h2{font-size:2rem}}p{margin-top:0;margin-bottom:1rem}strong{font-weight:bolder}a{color:rgba(var(--bs-link-color-rgb), var(--bs-link-opacity, 1));text-decoration:underline;-webkit-text-decoration:underline;-moz-text-decoration:underline;-ms-text-decoration:underline;-o-text-decoration:underline}a:hover{--bs-link-color-rgb: var(--bs-link-hover-color-rgb)}a:not([href]):not([class]),a:not([href]):not([class]):hover{color:inherit;text-decoration:none}pre{font-family:var(--bs-font-monospace);font-size:1em}pre{display:block;margin-top:0;margin-bottom:1rem;overflow:auto;font-size:.875em;color:RGB(var(--bs-emphasis-color-rgb, 0, 0, 0));background-color:RGBA(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.04);padding:.5rem;border:1px solid var(--bs-border-color, #dee2e6);border-radius:3px}img,svg{vertical-align:middle}label{display:inline-block}button{border-radius:0}button:focus:not(:focus-visible){outline:0}input,button{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button{text-transform:none}[role="button"]{cursor:pointer}button,[type="button"]{-webkit-appearance:button}button:not(:disabled),[type="button"]:not(:disabled){cursor:pointer}::-moz-focus-inner{padding:0;border-style:none}::-webkit-datetime-edit-fields-wrapper,::-webkit-datetime-edit-text,::-webkit-datetime-edit-minute,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding:0}::-webkit-inner-spin-button{height:auto}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-color-swatch-wrapper{padding:0}::file-selector-button{font:inherit;-webkit-appearance:button}.container-fluid{--bs-gutter-x: 1.5rem;width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-right:auto;margin-left:auto}:root{}.shiny-input-container .control-label{margin-bottom:.5rem}.form-control{display:block;width:100%;padding:.375rem .75rem;font-size:.9375rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);appearance:none;-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;-o-appearance:none;background-color:var(--bs-body-bg);background-clip:padding-box;border:var(--bs-border-width) solid #8D959E;border-radius:var(--bs-border-radius);transition:border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.form-control{transition:none}}.form-control:focus{color:var(--bs-body-color);background-color:var(--bs-body-bg);border-color:#80bde1;outline:0;box-shadow:0 0 0 .25rem rgba(0,123,194,0.25)}.form-control::-webkit-date-and-time-value{min-width:85px;height:1.5em;margin:0}.form-control::-webkit-datetime-edit{display:block;padding:0}.form-control::placeholder{color:var(--bs-secondary-color);opacity:1}.form-control:disabled{background-color:var(--bs-secondary-bg);opacity:1}.form-control::file-selector-button{padding:.375rem .75rem;margin:-.375rem -.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;transition:color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out}@media (prefers-reduced-motion: reduce){.form-control::file-selector-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::file-selector-button{background-color:var(--bs-secondary-bg)}.navbar{--bs-navbar-padding-x: .66rem;--bs-navbar-padding-y: .5rem;--bs-navbar-brand-padding-y: .3125rem;--bs-navbar-brand-margin-end: 1rem;--bs-navbar-brand-font-size: 1.25rem;--bs-navbar-brand-color: rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-hover-color: rgba(var(--bs-emphasis-color-rgb), 1);position:relative;display:flex;display:-webkit-flex;flex-wrap:wrap;-webkit-flex-wrap:wrap;align-items:center;-webkit-align-items:center;justify-content:space-between;-webkit-justify-content:space-between;padding:var(--bs-navbar-padding-y) var(--bs-navbar-padding-x)}.navbar>.container-fluid{display:flex;display:-webkit-flex;flex-wrap:inherit;-webkit-flex-wrap:inherit;align-items:center;-webkit-align-items:center;justify-content:space-between;-webkit-justify-content:space-between}.navbar-brand{padding-top:var(--bs-navbar-brand-padding-y);padding-bottom:var(--bs-navbar-brand-padding-y);margin-right:var(--bs-navbar-brand-margin-end);font-size:var(--bs-navbar-brand-font-size);color:var(--bs-navbar-brand-color);text-decoration:none;-webkit-text-decoration:none;-moz-text-decoration:none;-ms-text-decoration:none;-o-text-decoration:none;white-space:nowrap}.navbar-brand:hover,.navbar-brand:focus{color:var(--bs-navbar-brand-hover-color)}@keyframes progress-bar-stripes{0%{background-position-x:1rem}}@keyframes spinner-border{to{transform:rotate(360deg) /* rtl:ignore */}}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1;transform:none}}@keyframes placeholder-glow{50%{opacity:.2}}@keyframes placeholder-wave{100%{mask-position:-200% 0%;-webkit-mask-position:-200% 0%}}:root{--bslib-spacer: 1.5rem;--bslib-mb-spacer: var(--bslib-spacer, 1rem)}.bslib-mb-spacing{margin-bottom:var(--bslib-mb-spacer)}.bslib-gap-spacing{gap:var(--bslib-mb-spacer)}.bslib-gap-spacing>.bslib-mb-spacing,.bslib-gap-spacing>.form-group,.bslib-gap-spacing>p,.bslib-gap-spacing>pre{margin-bottom:0}.html-fill-container>.html-fill-item.bslib-mb-spacing{margin-bottom:0}:root{}:root{--bslib-dashboard-main-bg: rgb(247, 247, 247);--bs-card-border-color: var(--bslib-dashboard-border-color-translucent, var(--bs-border-color-translucent));--bslib-sidebar-bg: var(--bs-body-bg);--bslib-sidebar-fg: var(--bs-color)}.main:has(.tab-content>.bslib-page-dashboard.active){background-color:var(--bslib-dashboard-main-bg);--_main-bg: var(--bslib-dashboard-main-bg)}.bslib-page-sidebar{--bslib-page-sidebar-title-bg: var(--bs-body-bg);--bslib-page-sidebar-title-color: var(--bs-body-color)}.bslib-page-sidebar .bslib-page-title{border-color:var(--bs-border-color-translucent)}@keyframes bslib-full-screen-overlay-enter{0%{opacity:0}100%{opacity:1}}.bslib-page-fill{width:100%;height:100%;margin:0;padding:var(--bslib-spacer, 1rem);gap:var(--bslib-spacer, 1rem)}@media (max-width: 575.98px){.bslib-flow-mobile>.html-fill-item{flex:0 0 auto}.bslib-flow-mobile.bslib-page-sidebar>.html-fill-item{flex:1 1 auto}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout>.main>.html-fill-item{flex:0 0 auto}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout:not(.sidebar-right)>.main{padding-left:var(--_padding-icon);padding-top:var(--_padding)}.bslib-flow-mobile.bslib-page-sidebar>.bslib-sidebar-layout:not(.sidebar-right)>.collapse-toggle{left:calc(var(--_icon-size) / 2)}}.navbar+.container-fluid:has(>.tab-content>.tab-pane.active.html-fill-container){padding-left:0;padding-right:0}.navbar+div>.bslib-sidebar-layout{border-top:var(--bslib-sidebar-border)}:root{--bslib-page-sidebar-title-bg: #202020;--bslib-page-sidebar-title-color: #fff}.bslib-page-sidebar>.navbar{--bs-navbar-brand-color: var(--bslib-page-sidebar-title-color);border-bottom:var(--bs-border-width) solid var(--bs-border-color-translucent);background-color:var(--bslib-page-sidebar-title-bg);color:var(--bslib-page-sidebar-title-color)}.bslib-page-sidebar .bslib-page-title{margin-bottom:0;line-height:var(--bs-body-line-height)}.bslib-sidebar-layout{--_transition-duration: 0;--_transition-easing-x: var(--bslib-sidebar-transition-easing-x, cubic-bezier(0.8, 0.78, 0.22, 1.07));--_border: var(--bslib-sidebar-border, var(--bs-card-border-width, var(--bs-border-width)) solid var(--bs-card-border-color, var(--bs-border-color-translucent)));--_border-radius: var(--bslib-sidebar-border-radius, var(--bs-border-radius));--_vert-border: var(--bslib-sidebar-vert-border, var(--_border));--_sidebar-width: var(--bslib-sidebar-width, 250px);--_sidebar-bg: var(--bslib-sidebar-bg, rgba(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.05));--_sidebar-fg: var(--bslib-sidebar-fg, var(--bs-emphasis-color, black));--_main-fg: var(--bslib-sidebar-main-fg, var(--bs-card-color, var(--bs-body-color)));--_main-bg: var(--bslib-sidebar-main-bg, transparent);--_toggle-bg: var(--bslib-sidebar-toggle-bg, rgba(var(--bs-emphasis-color-rgb, 0, 0, 0), 0.1));--_padding: var(--bslib-sidebar-padding, var(--bslib-spacer, 1.5rem));--_icon-size: var(--bslib-sidebar-icon-size, 1rem);--_icon-button-size: var(--bslib-sidebar-icon-button-size, calc(var(--_icon-size, 1rem) * 2));--_padding-icon: calc(var(--_icon-button-size, 2rem) * 1.5);--_toggle-border-radius: var(--bslib-collapse-toggle-border-radius, var(--bs-border-radius, 3px));--_toggle-transform: var(--bslib-collapse-toggle-transform, 0deg);--_toggle-transition-easing: var(--bslib-sidebar-toggle-transition-easing, cubic-bezier(1, 0, 0, 1));--_mobile-max-height: var(--bslib-sidebar-mobile-max-height, var(--bslib-sidebar-max-height-mobile));--_sidebar-mobile-opacity: var(--bslib-sidebar-mobile-opacity);--_sidebar-mobile-max-width: var(--bslib-sidebar-mobile-max-width);--_sidebar-mobile-box-shadow: var(--bslib-sidebar-mobile-box-shadow);--_column-main: minmax(0, 1fr);--_toggle-collective-height: calc(calc(var(--_icon-button-size) + 0.5em) * var(--_js-toggle-count-max-side, 1));display:grid !important;grid-template-columns:Min(calc(100% - var(--_padding-icon)), var(--_sidebar-width)) var(--_column-main);position:relative;transition:grid-template-columns ease-in-out var(--_transition-duration);border:var(--_border);border-radius:var(--_border-radius)}@media (prefers-reduced-motion: reduce){.bslib-sidebar-layout{transition:none}}.bslib-sidebar-layout,.html-fill-container>.bslib-sidebar-layout.html-fill-item{min-height:var(--_toggle-collective-height)}.bslib-sidebar-layout[data-bslib-sidebar-border="false"]{border:none}.bslib-sidebar-layout[data-bslib-sidebar-border-radius="false"]{border-radius:initial}.bslib-sidebar-layout>.main,.bslib-sidebar-layout>.sidebar{grid-row:1 / 2;border-radius:inherit;overflow:auto}.bslib-sidebar-layout>.main{grid-column:2 / 3;border-top-left-radius:0;border-bottom-left-radius:0;padding:var(--_padding);transition:padding var(--_transition-easing-x) var(--_transition-duration);color:var(--_main-fg);background-color:var(--_main-bg)}.bslib-sidebar-layout>.sidebar{grid-column:1 / 2;width:100%;border-right:var(--_vert-border);border-top-right-radius:0;border-bottom-right-radius:0;color:var(--_sidebar-fg);background-color:var(--_sidebar-bg);backdrop-filter:blur(5px)}.bslib-sidebar-layout>.sidebar>.sidebar-content{display:flex;flex-direction:column;gap:var(--bslib-spacer, 1rem);padding:var(--_padding);padding-top:var(--_padding-icon)}.bslib-sidebar-layout>.sidebar>.sidebar-content>:last-child:not(.sidebar-title){margin-bottom:0}.bslib-sidebar-layout>.sidebar .shiny-input-container{width:100%}.bslib-sidebar-layout>.collapse-toggle{grid-row:1 / 2;grid-column:1 / 2;z-index:1000;display:inline-flex;align-items:center;position:absolute;right:calc(var(--_icon-size));top:calc(var(--_icon-size, 1rem) / 2);border:none;border-radius:var(--_toggle-border-radius);height:var(--_icon-button-size, 2rem);width:var(--_icon-button-size, 2rem);display:flex;align-items:center;justify-content:center;padding:0;color:var(--_sidebar-fg);background-color:unset;transition:color var(--_transition-easing-x) var(--_transition-duration),top var(--_transition-easing-x) var(--_transition-duration),right var(--_transition-easing-x) var(--_transition-duration),left var(--_transition-easing-x) var(--_transition-duration)}.bslib-sidebar-layout>.collapse-toggle:hover{background-color:var(--_toggle-bg)}.bslib-sidebar-layout>.collapse-toggle>.collapse-icon{opacity:0.8;width:var(--_icon-size);height:var(--_icon-size);transform:rotateY(var(--_toggle-transform));transition:transform var(--_toggle-transition-easing) var(--_transition-duration)}.bslib-sidebar-layout>.collapse-toggle:hover>.collapse-icon{opacity:1}.bslib-sidebar-layout .sidebar-title{font-size:1.25rem;line-height:1.25;margin-top:0;margin-bottom:1rem;padding-bottom:1rem;border-bottom:var(--_border)}.bslib-sidebar-layout{}@media (max-width: 575.98px){.bslib-sidebar-layout{}}@media (min-width: 576px){.bslib-sidebar-layout[data-collapsible-desktop="false"]{--_padding-icon: var(--_padding)}.bslib-sidebar-layout[data-collapsible-desktop="false"]>.collapse-toggle{display:none}}@media (max-width: 575.98px){.bslib-sidebar-layout>.sidebar{border:none}.bslib-sidebar-layout>.main{grid-column:1 / 3}.bslib-sidebar-layout[data-collapsible-mobile="true"]{grid-template-columns:100% 0}.bslib-sidebar-layout[data-collapsible-mobile="true"]:not(.sidebar-collapsed)>.sidebar{z-index:1045}.bslib-sidebar-layout[data-collapsible-mobile="true"]:not(.sidebar-collapsed)>.collapse-toggle{z-index:1045}.bslib-sidebar-layout[data-collapsible-mobile="true"]:not(.sidebar-right)>.collapse-toggle{left:var(--_icon-size);right:unset}.bslib-sidebar-layout[data-collapsible-mobile="true"]>.sidebar{opacity:var(--_sidebar-mobile-opacity, 1);max-width:var(--_sidebar-mobile-max-width, 100%);box-shadow:var(--_sidebar-mobile-box-shadow);margin:0}.bslib-sidebar-layout[data-collapsible-mobile="true"]:not(.sidebar-right)>.sidebar{margin-right:auto}.bslib-sidebar-layout[data-collapsible-mobile="true"]>.main{padding-top:var(--_toggle-collective-height);padding-left:var(--_padding);padding-right:var(--_padding)}}@media (max-width: 575.98px){.bslib-sidebar-layout[data-collapsible-mobile="false"]{display:block !important;--_padding-icon: var(--_padding);--_vert-border: var(--_border)}.bslib-sidebar-layout[data-collapsible-mobile="false"]>.sidebar{max-height:var(--_mobile-max-height);overflow-y:auto;border-top:var(--_vert-border)}.bslib-sidebar-layout[data-collapsible-mobile="false"]>.collapse-toggle{display:none}}@media screen and (min-width: 575.98px){}pre.shiny-text-output:empty::before{content:" "}pre.shiny-text-output.noplaceholder:empty{margin:0;padding:0;border-width:0;height:0}pre.shiny-text-output{word-wrap:normal;border-radius:3px}@keyframes fadeIn{to{opacity:0.1}}.shiny-input-container:not(.shiny-input-container-inline){width:300px;max-width:100%}@use "sass:math";@keyframes lds-dual-ring{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.datepicker{border-radius:3px;direction:ltr}em{color:#f9b928}.sidebar-title{color:#c10000}strong{color:#c10000}


## file: css/rules.scss
strong {
  color: $danger;
}


```

## Methods

| Name | Description |
| --- | --- |
| [add_defaults](#shiny.express.ui.Theme.add_defaults) | Add custom default values to the theme. |
| [add_functions](#shiny.express.ui.Theme.add_functions) | Add custom Sass functions to the theme. |
| [add_mixins](#shiny.express.ui.Theme.add_mixins) | Add custom Sass mixins to the theme. |
| [add_rules](#shiny.express.ui.Theme.add_rules) | Add custom Sass rules to the theme. |
| [available_presets](#shiny.express.ui.Theme.available_presets) | Get a list of available theme presets. |
| [from_brand](#shiny.express.ui.Theme.from_brand) | Create a custom Shiny theme from a `_brand.yml` |
| [to_css](#shiny.express.ui.Theme.to_css) | Compile the theme to CSS and return the result as a string. |
| [to_sass](#shiny.express.ui.Theme.to_sass) | Returns the custom theme as a single Sass string. |

### add_defaults { #shiny.express.ui.Theme.add_defaults }

```python
express.ui.Theme.add_defaults(*args, **kwargs)
```

Add custom default values to the theme.

Sass code added via this method will be placed **before** the default values of
the theme preset, allowing you to override or extend the default values.

#### Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Sass code, as a single or multiple strings, containing default value declarations to add.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`) \| [bool](`bool`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Keyword arguments containing default value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_defaults(primary_color="#ff0000")` is equivalent to `.add_defaults("$primary-color: #ff0000 !default;")`.

### add_functions { #shiny.express.ui.Theme.add_functions }

```python
express.ui.Theme.add_functions(*args)
```

Add custom Sass functions to the theme.

Sass code added via this method will be placed **after** the function
declarations from the theme preset, allowing you to override or extend the
default functions.

#### Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   The Sass functions to add as a single or multiple strings.

### add_mixins { #shiny.express.ui.Theme.add_mixins }

```python
express.ui.Theme.add_mixins(*args, **kwargs)
```

Add custom Sass mixins to the theme.

Sass code added via this method will be placed **after** the mixin declarations
from the theme preset, allowing you to override or extend the default mixins.

#### Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Sass code, as a single or multiple strings, containing mixins to add.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`) \| [bool](`bool`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Keyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_mixins(primary_color="#ff0000")` is equivalent to `.add_mixins("$primary-color: #ff0000;")`.

### add_rules { #shiny.express.ui.Theme.add_rules }

```python
express.ui.Theme.add_rules(*args, **kwargs)
```

Add custom Sass rules to the theme.

Sass code added via this method will be placed **after** the rule declarations
from the theme preset, allowing you to override or extend the default rules.

#### Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Sass code, as a single or multiple strings, containing rules to add.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [float](`float`) \| [int](`int`) \| [bool](`bool`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Keyword arguments containing Sass value declarations to add. The keys should be Sass variable names using underscore casing that will be transformed automatically to kebab-case. For example, `.add_rules(primary_color="#ff0000")` is equivalent to `.add_rules("$primary-color: #ff0000;")`.

### available_presets { #shiny.express.ui.Theme.available_presets }

```python
express.ui.Theme.available_presets()
```

Get a list of available theme presets.

### from_brand { #shiny.express.ui.Theme.from_brand }

```python
express.ui.Theme.from_brand(brand)
```

Create a custom Shiny theme from a `_brand.yml`

Creates a custom Shiny theme for your brand using
[brand.yml](https://posit-dev.github.io/brand-yml), a single YAML file that
describes the brand&#x27;s color and typography. Learn more about writing a
`_brand.yml` file for your brand at the
[brand.yml homepage](https://posit-dev.github.io/brand-yml).

As a simple example, suppose your brand guidelines include a color palette with
custom orange and black colors. The orange is used as the primary accent color
and the black for all text. For typography, the brand also uses
[Roboto](https://fonts.google.com/specimen/Roboto?query=roboto) and
[Roboto Mono](https://fonts.google.com/specimen/Roboto+Mono?query=roboto) from
Google Fonts for text and monospace-styled text, respectively. Here&#x27;s a
`_brand.yml` file for this brand:

```{.yaml filename="_brand.yml"}
meta:
  name: brand.yml Example

color:
  palette:
    orange: "#F96302"
    black: "#000000"
  foreground: black
  primary: orange

typography:
  fonts:
    - family: Roboto
      source: google
    - family: Roboto Mono
      source: google
  base: Roboto
  monospace: Roboto Mono
```

You can store the `_brand.yml` file next to your Shiny `app.py` or, for larger
projects, in a parent folder. To use a theme generated from the `_brand.yml`
file, call [](:meth:`~shiny.express.ui.Theme.from_brand`) on `__file__` and pass the result
to the `theme` argument of [](:func:`~shiny.express.ui.page_opts`) (Shiny Express)
or the `theme` argument of `shiny.express.ui.page_*` functions, like
[](:func:`~shiny.express.ui.page_sidebar`).

```{.python filename="app.py"}
from shiny.express import input, render, ui

ui.page_opts(theme=ui.Theme.from_brand(__file__))

ui.input_slider("n", "N", 0, 100, 20)


@render.code
def txt():
    return f"n*2 is {input.n() * 2}"
```

#### Parameters {.doc-section .doc-section-parameters}

<code>[**brand**]{.parameter-name} [:]{.parameter-annotation-sep} ['str \| pathlib.Path \| Brand']{.parameter-annotation}</code>

:   A [](:class:`brand_yml.Brand`) instance, or a path to help locate `_brand.yml`. For a path, you can pass `__file__` or a directory containing the `_brand.yml` or a path directly to the `_brand.yml` file.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A [](:class:`shiny.express.ui.Theme`) instance with a custom Shiny theme created from the brand guidelines (see [](:class:`brand_yml.Brand`)).

### to_css { #shiny.express.ui.Theme.to_css }

```python
express.ui.Theme.to_css(compile_args=None)
```

Compile the theme to CSS and return the result as a string.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**compile_args**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SassCompileArgs](`shiny.express.ui._theme.SassCompileArgs`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A dictionary of keyword arguments to pass to [`sass.compile()`](https://sass.github.io/libsass-python/sass.html#sass.compile).

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The compiled CSS for the theme. The value is cached such that previously compiled themes are returned immediately. Adding additional custom Sass code or changing the preset will invalidate the cache.

### to_sass { #shiny.express.ui.Theme.to_sass }

```python
express.ui.Theme.to_sass()
```

Returns the custom theme as a single Sass string.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The custom theme as a single Sass string.

================
File: express.ui.tooltip.qmd
================
# express.ui.tooltip { #shiny.express.ui.tooltip }

```python
express.ui.tooltip(id=None, placement='auto', options=None, **kwargs)
```

Context manager for a tooltip

This function wraps [](:func:`~shiny.ui.tooltip`).

Display additional information when focusing (or hovering over) a UI element.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A character string. Required to reactively respond to the visibility of the tooltip (via the `input[id]` value) and/or update the visibility/contents of the tooltip.

<code>[**placement**]{.parameter-name} [:]{.parameter-annotation-sep} [[Literal](`typing.Literal`)\['auto', 'top', 'right', 'bottom', 'left'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'auto\']{.parameter-default}</code>

:   The placement of the tooltip relative to its trigger.

<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[dict](`dict`)\[[str](`str`), [object](`object`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A list of additional [Bootstrap options](https://getbootstrap.com/docs/5.3/components/tooltips/#options).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import question_circle_fill

from shiny.express import ui

with ui.tooltip(id="btn_tooltip"):
    ui.input_action_button("btn", "A button", class_="mt-3")

    "A message"

with ui.card(class_="mt-3"):
    with ui.card_header():
        with ui.tooltip(placement="right", id="card_tooltip"):
            ui.span("Card title ", question_circle_fill)
            "Additional info"

    "Card body content..."


## file: icons.py
from shiny import ui

# https://icons.getbootstrap.com/icons/question-circle-fill/
question_circle_fill = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-question-circle-fill mb-1" viewBox="0 0 16 16"><path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z"/></svg>'
)


```

================
File: express.ui.update_accordion_panel.qmd
================
# express.ui.update_accordion_panel { #shiny.express.ui.update_accordion_panel }

```python
express.ui.update_accordion_panel(
    id,
    target,
    *body,
    title=MISSING,
    value=MISSING,
    icon=MISSING,
    show=None,
    session=None,
)
```

Dynamically update accordion panel contents.

Dynamically (i.e., programmatically) update/modify [](:func:`~shiny.express.ui.accordion`) panels in a Shiny app.
These functions require an `id` to be provided to the [](:func:`~shiny.express.ui.accordion`) and must also be
called within an active Shiny session.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that matches an existing [](:func:`~shiny.express.ui.accordion`)'s `id`.

<code>[**target**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The `value` of an existing panel to update.

<code>[***body**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   If provided, the new body contents of the panel.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   If not missing, the new title of the panel.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   If not missing, the new value of the panel.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   If not missing, the new icon of the panel.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.accordion`)
* [](:func:`~shiny.express.ui.accordion_panel`)
* [](:func:`~shiny.express.ui.update_accordion`)
* [](:func:`~shiny.express.ui.insert_accordion_panel`)
* [](:func:`~shiny.express.ui.remove_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_switch("update_panel", "Update (and open) Sections")

with ui.accordion(id="acc", multiple=True):
    for letter in "ABCDE":
        with ui.accordion_panel(f"Section {letter}", value=f"sec_{letter}"):
            f"Some narrative for section {letter}"


@reactive.effect
@reactive.event(input.update_panel)
def _():
    txt = " (updated)" if input.update_panel() else ""
    show = bool(input.update_panel() % 2 == 1)
    for letter in "ABCDE":
        ui.update_accordion_panel(
            "acc",
            f"sec_{letter}",
            f"Some{txt} narrative for section {letter}",
            title=f"Section {letter}{txt}",
            # Open Accordion Panel to see updated contents
            show=show,
        )
    next_show_txt = "close" if show else "open"

    ui.update_switch("update_panel", label=f"Update (and {next_show_txt}) Sections")


```

================
File: express.ui.update_accordion.qmd
================
# express.ui.update_accordion { #shiny.express.ui.update_accordion }

```python
express.ui.update_accordion(id, *, show, session=None)
```

Dynamically set accordions&#x27; states.

Dynamically (i.e., programmatically) update/modify [](:func:`~shiny.express.ui.accordion`)s in a Shiny app.
These functions require an `id` to be provided to the [](:func:`~shiny.express.ui.accordion`) and must also be
called within an active Shiny session.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A string that matches an existing [](:func:`~shiny.express.ui.accordion`)'s `id`.

<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [str](`str`) \| [list](`list`)\[[str](`str`)\]]{.parameter-annotation}</code>

:   Either a string or list of strings (used to identify particular [](:func:`~shiny.express.ui.accordion_panel`)(s) by their `value`) or a `bool` to set the state of all panels.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## References {.doc-section .doc-section-references}

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.accordion`)
* [](:func:`~shiny.express.ui.accordion_panel`)
* [](:func:`~shiny.express.ui.insert_accordion_panel`)
* [](:func:`~shiny.express.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("set_acc", "Only open sections A,C,E", class_="mt-3 mb-3")

with ui.accordion(id="acc", open=["Section B", "Section D"], multiple=True):
    for letter in "ABCDE":
        with ui.accordion_panel(f"Section {letter}"):
            f"Some narrative for section {letter}"


@reactive.effect
@reactive.event(input.set_acc)
def _():
    ui.update_accordion("acc", show=["Section A", "Section C", "Section E"])


```

================
File: express.ui.update_action_button.qmd
================
# express.ui.update_action_button { #shiny.express.ui.update_action_button }

```python
express.ui.update_action_button(
    id,
    *,
    label=None,
    icon=None,
    disabled=None,
    session=None,
)
```

Change the label and/or icon of an action button on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**disabled**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   If `True`, disable the button making it unclickable; if `False`, the button will become enabled and clickable.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.input_action_button`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive, req
from shiny.express import input, ui

with ui.sidebar():
    ui.input_action_button("update", "Update other buttons and link")

with ui.layout_column_wrap():
    ui.input_action_button("goButton", "Go")
    ui.input_action_button("goButton2", "Go 2", icon="🤩")
    ui.input_action_button("goButton3", "Go 3")
    ui.input_action_link("goLink", "Go Link")


@reactive.effect
def _():
    req(input.update())
    # Updates goButton's label and icon
    ui.update_action_button("goButton", label="New label", icon="📅")
    # Leaves goButton2's label unchanged and removes its icon
    ui.update_action_button("goButton2", icon=[])
    # Leaves goButton3's icon, if it exists, unchanged and changes its label
    ui.update_action_button("goButton3", label="New label 3")
    # Updates goLink's label and icon
    ui.update_action_link("goLink", label="New link label", icon="🔗")


```

================
File: express.ui.update_action_link.qmd
================
# express.ui.update_action_link { #shiny.express.ui.update_action_link }

```python
express.ui.update_action_link(id, *, label=None, icon=None, session=None)
```

Change the label and/or icon of an action link on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**icon**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An icon to appear inline with the button/link.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.input_action_link`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive, req
from shiny.express import input, ui

with ui.sidebar():
    ui.input_action_button("update", "Update other buttons and link")

with ui.layout_column_wrap():
    ui.input_action_button("goButton", "Go")
    ui.input_action_button("goButton2", "Go 2", icon="🤩")
    ui.input_action_button("goButton3", "Go 3")
    ui.input_action_link("goLink", "Go Link")


@reactive.effect
def _():
    req(input.update())
    # Updates goButton's label and icon
    ui.update_action_button("goButton", label="New label", icon="📅")
    # Leaves goButton2's label unchanged and removes its icon
    ui.update_action_button("goButton2", icon=[])
    # Leaves goButton3's icon, if it exists, unchanged and changes its label
    ui.update_action_button("goButton3", label="New label 3")
    # Updates goLink's label and icon
    ui.update_action_link("goLink", label="New link label", icon="🔗")


```

================
File: express.ui.update_checkbox_group.qmd
================
# express.ui.update_checkbox_group { #shiny.express.ui.update_checkbox_group }

```python
express.ui.update_checkbox_group(
    id,
    *,
    label=None,
    choices=None,
    selected=None,
    inline=False,
    session=None,
)
```

Change the value of a checkbox group input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ChoicesArg](`shiny.express.ui._input_check_radio.ChoicesArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\] \| [tuple](`tuple`)\[[str](`str`), ...\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, the result is displayed inline

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_checkbox_group`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

"The first checkbox group controls the second"
ui.input_checkbox_group(
    "inCheckboxGroup", "Input checkbox", ["Item A", "Item B", "Item C"]
)
ui.input_checkbox_group(
    "inCheckboxGroup2", "Input checkbox 2", ["Item A", "Item B", "Item C"]
)


@reactive.effect
def _():
    x = input.inCheckboxGroup()

    # Can also set the label and select items
    ui.update_checkbox_group(
        "inCheckboxGroup2",
        label="Checkboxgroup label " + str(len(x)),
        choices=x,
        selected=x,
    )


```

================
File: express.ui.update_checkbox.qmd
================
# express.ui.update_checkbox { #shiny.express.ui.update_checkbox }

```python
express.ui.update_checkbox(id, *, label=None, value=None, session=None)
```

Change the value of a checkbox input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_checkbox`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_slider("controller", "Controller", min=0, max=1, value=0, step=1)
ui.input_checkbox("inCheckbox", "Input checkbox")


@reactive.effect
def _():
    # True if controller is odd, False if even.
    x_even = input.controller() % 2 == 1
    ui.update_checkbox("inCheckbox", value=x_even)


```

================
File: express.ui.update_dark_mode.qmd
================
# express.ui.update_dark_mode { #shiny.express.ui.update_dark_mode }

```python
express.ui.update_dark_mode(mode, *, session=None)
```

================
File: express.ui.update_date_range.qmd
================
# express.ui.update_date_range { #shiny.express.ui.update_date_range }

```python
express.ui.update_date_range(
    id,
    *,
    label=None,
    start=None,
    end=None,
    min=None,
    max=None,
    session=None,
)
```

Change the start and end values of a date range input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**start**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial start date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**end**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The initial end date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_date_range`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import date, timedelta

from shiny import reactive
from shiny.express import input, ui

ui.input_slider("n", "Day of month", min=1, max=30, value=10)
ui.input_date_range("inDateRange", "Input date")


@reactive.effect
def _():
    d = date(2013, 4, input.n())
    ui.update_date_range(
        "inDateRange",
        label="Date range label " + str(input.n()),
        start=d - timedelta(days=1),
        end=d + timedelta(days=1),
        min=d - timedelta(days=5),
        max=d + timedelta(days=5),
    )


```

================
File: express.ui.update_date.qmd
================
# express.ui.update_date { #shiny.express.ui.update_date }

```python
express.ui.update_date(
    id,
    *,
    label=None,
    value=None,
    min=None,
    max=None,
    session=None,
)
```

Change the value of a date input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The starting date. Either a `date()` object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[date](`datetime.date`) \| [str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_date`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from datetime import date, timedelta

from shiny import reactive
from shiny.express import input, ui

ui.input_slider("n", "Day of month", min=1, max=30, value=10)
ui.input_date("inDate", "Input date")


@reactive.effect
def _():
    d = date(2013, 4, input.n())
    ui.update_date(
        "inDate",
        label="Date label " + str(input.n()),
        value=d,
        min=d - timedelta(days=3),
        max=d + timedelta(days=3),
    )


```

================
File: express.ui.update_navs.qmd
================
# express.ui.update_navs { #shiny.express.ui.update_navs }

```python
express.ui.update_navs(id, selected=None, session=None)
```

Change the value of a navs container on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.navset_tab`)
* [](:func:`~shiny.express.ui.navset_pill`)
* [](:func:`~shiny.express.ui.page_navbar`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

with ui.sidebar():
    ui.input_slider("controller", "Controller", min=1, max=3, value=1)

with ui.navset_card_tab(id="inTabset"):
    with ui.nav_panel("Panel 1", value="panel1"):
        "Panel 1 content"
    with ui.nav_panel("Panel 2", value="panel2"):
        "Panel 2 content"
    with ui.nav_panel("Panel 3", value="panel3"):
        "Panel 3 content"


@reactive.effect
def _():
    ui.update_navs("inTabset", selected="panel" + str(input.controller()))


```

================
File: express.ui.update_numeric.qmd
================
# express.ui.update_numeric { #shiny.express.ui.update_numeric }

```python
express.ui.update_numeric(
    id,
    *,
    label=None,
    value=None,
    min=None,
    max=None,
    step=None,
    session=None,
)
```

Change the value of a number input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[float](`float`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Interval to use when stepping between min and max.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The [](:class:`~shiny.Session`) object passed to the server function of a [](:class:`~shiny.App`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_numeric`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_slider("controller", "Controller", min=0, max=20, value=10)
ui.input_numeric("inNumber", "Input number", 0)
ui.input_numeric("inNumber2", "Input number 2", 0)


@reactive.effect
def _():
    x = input.controller()
    ui.update_numeric("inNumber", value=x)
    ui.update_numeric(
        "inNumber2",
        label="Number label " + str(x),
        value=x,
        min=x - 10,
        max=x + 10,
        step=5,
    )


```

================
File: express.ui.update_popover.qmd
================
# express.ui.update_popover { #shiny.express.ui.update_popover }

```python
express.ui.update_popover(id, *args, title=None, show=None, session=None)
```

Update the contents or title of a popover.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The id of the popover DOM element to update.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   The new contents of the popover.

<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The new title of the popover.

<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Opens (`True`) or closes (`False`) the popover.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.popover`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("btn_show", "Show popover", class_="mt-3 me-3")
ui.input_action_button("btn_close", "Close popover", class_="mt-3 me-3")

ui.br()
ui.br()

with ui.popover(id="popover_id"):
    ui.input_action_button("btn_w_popover", "A button w/ a popover", class_="mt-3")
    "A message"


@reactive.effect
@reactive.event(input.btn_show)
def _():
    ui.update_popover("popover_id", show=True)


@reactive.effect
@reactive.event(input.btn_close)
def _():
    ui.update_popover("popover_id", show=False)


@reactive.effect
@reactive.event(input.btn_w_popover)
def _():
    ui.notification_show("Button clicked!", duration=3, type="message")


```

================
File: express.ui.update_radio_buttons.qmd
================
# express.ui.update_radio_buttons { #shiny.express.ui.update_radio_buttons }

```python
express.ui.update_radio_buttons(
    id,
    *,
    label=None,
    choices=None,
    selected=None,
    inline=False,
    session=None,
)
```

Change the value of a radio input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[ChoicesArg](`shiny.express.ui._input_check_radio.ChoicesArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True```, the result is displayed inline

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_radio_buttons`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.markdown("The first radio button group controls the second")

ui.input_radio_buttons(
    "inRadioButtons", "Input radio buttons", ["Item A", "Item B", "Item C"]
)
ui.input_radio_buttons(
    "inRadioButtons2", "Input radio buttons 2", ["Item A", "Item B", "Item C"]
)


@reactive.effect
def _():
    x = input.inRadioButtons()

    # Can also set the label and select items
    ui.update_radio_buttons(
        "inRadioButtons2",
        label="Radio buttons label " + x,
        choices=[x],
        selected=x,
    )


```

================
File: express.ui.update_select.qmd
================
# express.ui.update_select { #shiny.express.ui.update_select }

```python
express.ui.update_select(
    id,
    *,
    label=None,
    choices=None,
    selected=None,
    session=None,
)
```

Change the value of a select input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SelectChoicesArg](`shiny.express.ui._input_select.SelectChoicesArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_select`)
* [](:func:`~shiny.ui.update_selectize`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.markdown("The checkbox group controls the select input")

ui.input_checkbox_group(
    "inCheckboxGroup", "Input checkbox", ["Item A", "Item B", "Item C"]
)
ui.input_select("inSelect", "Select input", ["Item A", "Item B", "Item C"])


@reactive.effect
def _():
    x = input.inCheckboxGroup()

    # Can use [] to remove all choices
    if x is None:
        x = []
    elif isinstance(x, str):
        x = [x]

    ui.update_select(
        "inSelect",
        label="Select input label " + str(len(x)),
        choices=x,
        selected=x[len(x) - 1] if len(x) > 0 else None,
    )


```

================
File: express.ui.update_selectize.qmd
================
# express.ui.update_selectize { #shiny.express.ui.update_selectize }

```python
express.ui.update_selectize(
    id,
    *,
    label=None,
    choices=None,
    selected=None,
    options=None,
    server=False,
    session=None,
)
```

Change the value of a selectize.js powered input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SelectChoicesArg](`shiny.express.ui._input_select.SelectChoicesArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels. A dictionary of dictionaries is also supported, and in that case, the top-level keys are treated as ``<optgroup>`` labels.

<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The values that should be initially selected, if any.

<code>[**options**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[dict](`dict`)\[[str](`str`), [str](`str`) \| [float](`float`) \| [JSEval](`shiny.express.ui._utils.JSEval`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Options to send to update, see `input_selectize` for details.

<code>[**server**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   Whether to store choices on the server side, and load the select options dynamically on searching, instead of writing all choices into the page at once (i.e., only use the client-side version of selectize.js)

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_selectize`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import ui

ui.input_selectize("x", "Server side selectize", choices=[], multiple=True)


@reactive.effect
def _():
    ui.update_selectize(
        "x",
        choices=[f"Foo {i}" for i in range(10000)],
        selected=["Foo 0", "Foo 1"],
        server=True,
    )


```

================
File: express.ui.update_sidebar.qmd
================
# express.ui.update_sidebar { #shiny.express.ui.update_sidebar }

```python
express.ui.update_sidebar(id, *, show=None, session=None)
```

Update a sidebar&#x27;s visibility.

Set a [](:func:`~shiny.express.ui.sidebar`) state during an active Shiny user session.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   The `id` of the [](:func:`~shiny.express.ui.sidebar`) to toggle.

<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The desired visible state of the sidebar, where `True` opens the sidebar and `False` closes the sidebar (if not already in that state).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.sidebar`)
* [](:func:`~shiny.express.ui.layout_sidebar`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, render, ui

with ui.sidebar(id="sidebar"):
    "Sidebar content"

ui.input_action_button("open_sidebar", label="Open sidebar", class_="me-3")
ui.input_action_button("close_sidebar", label="Close sidebar", class_="me-3")


@render.text
def state():
    return f"input.sidebar(): {input.sidebar()}"


@reactive.effect
@reactive.event(input.open_sidebar)
def _():
    ui.update_sidebar("sidebar", show=True)


@reactive.effect
@reactive.event(input.close_sidebar)
def _():
    ui.update_sidebar("sidebar", show=False)


```

================
File: express.ui.update_slider.qmd
================
# express.ui.update_slider { #shiny.express.ui.update_slider }

```python
express.ui.update_slider(
    id,
    *,
    label=None,
    value=None,
    min=None,
    max=None,
    step=None,
    time_format=None,
    timezone=None,
    session=None,
)
```

Change the value of a slider input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`) \| [tuple](`tuple`)\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`), [SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The minimum allowed value.

<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.express.ui._input_slider.SliderValueArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The maximum allowed value.

<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[SliderStepArg](`shiny.express.ui._input_slider.SliderStepArg`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Specifies the interval between each selectable value on the slider. Either ``None`` (the default), which uses a heuristic to determine the step size or a single number. If the values are dates, step is in days; if the values are date-times, step is in seconds.

<code>[**time_format**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Only used if the slider values are [](:class:`~datetime.date`) or [](:class:`~datetime.datetime`) objects. A time format string, to be passed to the Javascript strftime library. See https://github.com/samsonjs/strftime for more details. For Dates, the default is "%F" (like "2015-07-01"), and for Datetimes, the default is "%F %T" (like "2015-07-01 15:32:10").

<code>[**timezone**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Only used if the values are [](:class:`~datetime.datetime`) objects. A string specifying the time zone offset for the displayed times, in the format "+HHMM" or "-HHMM". If ``None`` (the default), times will be displayed in the browser's time zone. The value "+0000" will result in UTC time.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_slider`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_slider("receiver", "Receiver:", min=0, max=100, value=50, step=1, width="100%")
ui.p("Change the min and max values below to see the receiver slider above update.")

with ui.layout_column_wrap(width=1 / 2):
    ui.input_slider("min", "Min:", min=0, max=50, value=0, step=1)
    ui.input_slider("max", "Max:", min=50, max=100, value=100, step=1)


@reactive.effect
def _():
    # You can update the value, min, max, and step.
    ui.update_slider(
        "receiver",
        value=max(min(input.receiver(), input.max()), input.min()),
        min=input.min(),
        max=input.max(),
    )


```

================
File: express.ui.update_switch.qmd
================
# express.ui.update_switch { #shiny.express.ui.update_switch }

```python
express.ui.update_switch(id, *, label=None, value=None, session=None)
```

Change the value of a switch input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_switch`)

================
File: express.ui.update_task_button.qmd
================
# express.ui.update_task_button { #shiny.express.ui.update_task_button }

```python
express.ui.update_task_button(id, *, state=None, session=None)
```

Change the state of a task button on the client.

When a task button is clicked, it automatically changes to the &quot;busy&quot; state. This
function can be used to change the state back to &quot;ready&quot; when the task is complete.

You can also use this function to change the state to &quot;busy&quot; manually, which will
prevent the button from automatically resetting to &quot;ready&quot; after a click.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**state**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The new state of the button. One of "ready", "busy", or a custom state name added via [](:func:`~shiny.express.ui.input_task_button`).

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

================
File: express.ui.update_text_area.qmd
================
# express.ui.update_text_area { #shiny.express.ui.update_text_area }

```python
express.ui.update_text_area(
    id,
    *,
    label=None,
    value=None,
    placeholder=None,
    session=None,
)
```

Change the value of a text input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A hint as to what can be entered into the control.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

with ui.layout_column_wrap(width=1 / 2):
    ui.input_radio_buttons("pet_type", "Pet type", ["Dog", "Cat", "Bird"], inline=True)
    ui.input_radio_buttons("pet_sex", "Pet sex", ["Male", "Female"], inline=True)
    ui.input_text("name", "Pet name", "Charlie")
    ui.input_text("royal_name", "Royal Name", "King Charlie")


@reactive.effect
@reactive.event(input.pet_type)
def _():
    # Update the label of the pet name input
    ui.update_text("name", label=f"{input.pet_type()}'s name")


@reactive.effect
def _():
    # Update the value of the royal name input
    royal_noun = "King" if input.pet_sex() == "Male" else "Queen"
    ui.update_text("royal_name", value=f"{royal_noun} {input.name()}")


```

================
File: express.ui.update_text.qmd
================
# express.ui.update_text { #shiny.express.ui.update_text }

```python
express.ui.update_text(
    id,
    *,
    label=None,
    value=None,
    placeholder=None,
    session=None,
)
```

Change the value of a text input on the client.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   An input id.

<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An input label.

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A new value.

<code>[**placeholder**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A hint as to what can be entered into the control.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).

## Note {.doc-section .doc-section-note}


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.express.ui.input_numeric`) and
[](:func:`~shiny.express.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~shiny.express.ui.update_radio_buttons`), [](:func:`~shiny.express.ui.update_checkbox_group`), and
[](:func:`~shiny.express.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.input_text`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

with ui.layout_column_wrap(width=1 / 2):
    ui.input_radio_buttons("pet_type", "Pet type", ["Dog", "Cat", "Bird"], inline=True)
    ui.input_radio_buttons("pet_sex", "Pet sex", ["Male", "Female"], inline=True)
    ui.input_text("name", "Pet name", "Charlie")
    ui.input_text("royal_name", "Royal Name", "King Charlie")


@reactive.effect
@reactive.event(input.pet_type)
def _():
    # Update the label of the pet name input
    ui.update_text("name", label=f"{input.pet_type()}'s name")


@reactive.effect
def _():
    # Update the value of the royal name input
    royal_noun = "King" if input.pet_sex() == "Male" else "Queen"
    ui.update_text("royal_name", value=f"{royal_noun} {input.name()}")


```

================
File: express.ui.update_tooltip.qmd
================
# express.ui.update_tooltip { #shiny.express.ui.update_tooltip }

```python
express.ui.update_tooltip(id, *args, show=None, session=None)
```

Update tooltip contents.

## Parameters {.doc-section .doc-section-parameters}

<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>

:   A character string that matches an existing tooltip id.

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Contents to the tooltip's body.

<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Opens (`True`) or closes (`False`) the tooltip.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A Shiny session object (the default should almost always be used).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("btn_show", "Show tooltip", class_="mt-3 me-3")
ui.input_action_button("btn_close", "Close tooltip", class_="mt-3 me-3")
ui.input_action_button(
    "btn_update", "Update tooltip phrase (and show tooltip)", class_="mt-3 me-3"
)

with ui.tooltip(id="tooltip_id"):
    ui.input_action_button(
        "btn_w_tooltip",
        "A button w/ a tooltip",
        class_="btn-primary mt-5",
    )
    "A message"


@reactive.effect
@reactive.event(input.btn_show)
def _():
    ui.update_tooltip("tooltip_id", show=True)


@reactive.effect
@reactive.event(input.btn_close)
def _():
    ui.update_tooltip("tooltip_id", show=False)


@reactive.effect
@reactive.event(input.btn_update)
def _():
    content = "A " + " ".join(["NEW" for _ in range(input.btn_update())]) + " message"

    ui.update_tooltip("tooltip_id", content, show=True)


@reactive.effect
@reactive.event(input.btn_w_tooltip)
def _():
    ui.notification_show("Button clicked!", duration=3, type="message")


```

================
File: express.ui.value_box_theme.qmd
================
# express.ui.value_box_theme { #shiny.express.ui.value_box_theme }

```python
express.ui.value_box_theme(name=None, *, fg=None, bg=None)
```

Value box theme

A theme for a [](:func:`~shiny.express.ui.value_box`). Themes provide a convenient way to use
your app&#x27;s Bootstrap theme colors as the foreground or background colors of the
value box. For more control, you can create your own theme with
[](:func:`~shiny.ui.value_box_theme`) where you can pass foreground and background
value.

See
[rstudio/bslib#themes](https://rstudio.github.io/bslib/reference/value_box.html#themes)
for more examples.

## Parameters {.doc-section .doc-section-parameters}

<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The name of the theme, e.g. `"primary"`, `"danger"`, `"purple"`.  `name` can also be a Bootstrap-supported color: `"blue"`, `"purple"`, `"pink"`, `"red"`, `"orange"`, `"yellow"`, `"green"`, `"teal"`, and `"cyan"`. These colors can be used with `bg-NAME`, `text-NAME`, and `bg-gradient-NAME1-NAME2`. If a `name` does not start with `text-` or `bg-`, it will be auto-prefixed with `bg-`.

<code>[**fg**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The background and foreground colors for the theme.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[ValueBoxTheme](`shiny.express.ui._valuebox.ValueBoxTheme`)]{.parameter-annotation}</code>

:   A `ValueBoxTheme`

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.express.ui.value_box`)

================
File: express.ui.value_box.qmd
================
# express.ui.value_box { #shiny.express.ui.value_box }

```python
express.ui.value_box(
    showcase=None,
    showcase_layout='left center',
    full_screen=False,
    theme=None,
    height=None,
    max_height=None,
    min_height=None,
    fill=True,
    class_=None,
    **kwargs,
)
```

Context manager for a value box

This function wraps [](:func:`~shiny.ui.value_box`).

An opinionated ([](:func:`~shiny.express.ui.card`)-powered) box, designed for displaying a title
(the 1st child), value (the 2nd child), and other explanation text (other children,
if any). Optionally, a `showcase` can provide for context for what the `value`
represents (for example, it could hold an icon, or even a
[](:func:`~shiny.express.ui.output_plot`)).

## Parameters {.doc-section .doc-section-parameters}

<code>[**showcase**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   A [](:class:`~htmltools.Tag`) child to showcase (e.g., an icon, a [](:func:`~shiny.express.ui.output_plot`), etc).

<code>[**showcase_layout**]{.parameter-name} [:]{.parameter-annotation-sep} [[ui](`shiny.ui`).[_valuebox](`shiny.express.ui._valuebox`).[SHOWCASE_LAYOUTS_STR](`shiny.express.ui._valuebox.SHOWCASE_LAYOUTS_STR`) \| [ui](`shiny.ui`).[ShowcaseLayout](`shiny.express.ui.ShowcaseLayout`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'left center\']{.parameter-default}</code>

:   One of `"left center"` (default), `"top right"` or `"bottom"`. Alternatively, you can customize the showcase layout options with the [](:func:`~shiny.express.ui.showcase_left_center`), :func:`~shiny.express.ui.showcase_top_right()`, or :func:`~shiny.express.ui.showcase_bottom()` functions. Use the options functions when you want to control the height or width of the showcase area.

<code>[**theme**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`) \| [ui](`shiny.ui`).[ValueBoxTheme](`shiny.express.ui.ValueBoxTheme`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The name of a theme (e.g. `"primary"`, `"danger"`, `"purple"`, `"bg-green"`, `"text-red"`) for the value box, or a theme constructed with [](:func:`~shiny.ui.value_box_theme`). The theme names provide a convenient way to use your app's Bootstrap theme colors as the foreground or background colors of the value box. For more control, you can create your own theme with [](:func:`~shiny.ui.value_box_theme`) where you can pass foreground and background colors directly. Bootstrap supported color themes: `"blue"`, `"purple"`, `"pink"`, `"red"`, `"orange"`, `"yellow"`, `"green"`, `"teal"`, and `"cyan"`. These colors can be used with `bg-NAME`, `text-NAME`, and `bg-gradient-NAME1-NAME2` to change the background, foreground, or use a background gradient respectively. If a `theme` string does not start with `text-` or `bg-`, it will be auto prefixed with `bg-`.

<code>[**full_screen**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If `True`, an icon will appear when hovering over the card body. Clicking the icon expands the card to fit viewport size.

<code>[**height**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[CssUnit](`shiny.express.ui.css.CssUnit`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Any valid CSS unit (e.g., `height="200px"`). Doesn't apply when a value box is made `full_screen`.

<code>[**fill**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to allow the value box to grow/shrink to fit a fillable container with an opinionated height (e.g., [](:func:`~shiny.express.ui.page_fillable`)).

<code>[**class_**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[str](`str`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Utility classes for customizing the appearance of the summary card. Use `bg-*` and `text-*` classes (e.g, `"bg-danger"` and `"text-light"`) to customize the background/foreground colors.

<code>[****kwargs**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagAttrValue](`htmltools.TagAttrValue`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [{}]{.parameter-default}</code>

:   Additional attributes to pass to [](:func:`~shiny.express.ui.card`).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from icons import piggy_bank

from shiny.express import ui

with ui.layout_columns():
    with ui.value_box(
        showcase=piggy_bank, theme="bg-gradient-orange-red", full_screen=True
    ):
        "KPI Title"
        "$1 Billion Dollars"
        "Up 30% VS PREVIOUS 30 DAYS"

    with ui.value_box(
        showcase=piggy_bank,
        theme="text-green",
        showcase_layout="top right",
        full_screen=True,
    ):
        "KPI Title"
        "$1 Billion Dollars"
        "Up 30% VS PREVIOUS 30 DAYS"

    with ui.value_box(
        showcase=piggy_bank, theme="purple", showcase_layout="bottom", full_screen=True
    ):
        "KPI Title"
        "$1 Billion Dollars"
        "Up 30% VS PREVIOUS 30 DAYS"


## file: icons.py
from shiny import ui

piggy_bank = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-piggy-bank " style="fill:currentColor;height:100%;" aria-hidden="true" role="img" ><path d="M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z"></path>\n<path fill-rule="evenodd" d="M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z"></path></svg>'
)


```

================
File: express.wrap_express_app.qmd
================
# express.wrap_express_app { #shiny.express.wrap_express_app }

```python
express.wrap_express_app(file)
```

Wrap a Shiny Express mode app into a Shiny `App` object.

This also creates a Python package for the app named something like
`shiny_express_app_0`. This package is required for relative imports to work, as in
`from . import utils`.

## Parameters {.doc-section .doc-section-parameters}

<code>[**file**]{.parameter-name} [:]{.parameter-annotation-sep} [[Path](`pathlib.Path`)]{.parameter-annotation}</code>

:   The path to the file containing the Shiny express application.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[App](`shiny._app.App`)]{.parameter-annotation}</code>

:   A [](:class:`shiny.App`) object.

================
File: index.qmd
================
# Function reference {.doc .doc-index}

## Input components

Gather user input.

| | |
| --- | --- |
| [express.ui.input_select](express.ui.input_select.qmd#shiny.express.ui.input_select) | Create a select list that can be used to choose a single or multiple items from a list of values. |
| [express.ui.input_selectize](express.ui.input_selectize.qmd#shiny.express.ui.input_selectize) | Create a select list that can be used to choose a single or multiple items from a list of values. |
| [express.ui.input_slider](express.ui.input_slider.qmd#shiny.express.ui.input_slider) | Constructs a slider widget to select a number, date, or date-time from a range. |
| [express.ui.input_dark_mode](express.ui.input_dark_mode.qmd#shiny.express.ui.input_dark_mode) | Creates a dark mode switch input that toggles the app between dark and light modes. |
| [express.ui.input_date](express.ui.input_date.qmd#shiny.express.ui.input_date) | Creates a text input which, when clicked on, brings up a calendar that the user can click on to select dates. |
| [express.ui.input_date_range](express.ui.input_date_range.qmd#shiny.express.ui.input_date_range) | Creates a pair of text inputs which, when clicked on, bring up calendars that the user can click on to select dates. |
| [express.ui.input_checkbox](express.ui.input_checkbox.qmd#shiny.express.ui.input_checkbox) | Create a checkbox that can be used to specify logical values. |
| [express.ui.input_checkbox_group](express.ui.input_checkbox_group.qmd#shiny.express.ui.input_checkbox_group) | Create a group of checkboxes that can be used to toggle multiple choices independently. |
| [express.ui.input_switch](express.ui.input_switch.qmd#shiny.express.ui.input_switch) | Create a switch that can be used to specify logical values. Similar to [](:func:`~shiny.ui.input_checkbox`), but implies to the user that the change will take effect immediately. |
| [express.ui.input_radio_buttons](express.ui.input_radio_buttons.qmd#shiny.express.ui.input_radio_buttons) | Create a set of radio buttons used to select an item from a list. |
| [express.ui.input_numeric](express.ui.input_numeric.qmd#shiny.express.ui.input_numeric) | Create an input control for entry of numeric values. |
| [express.ui.input_text](express.ui.input_text.qmd#shiny.express.ui.input_text) | Create an input control for entry of text values. |
| [express.ui.input_text_area](express.ui.input_text_area.qmd#shiny.express.ui.input_text_area) | Create a textarea input control for entry of unstructured text values. |
| [express.ui.input_password](express.ui.input_password.qmd#shiny.express.ui.input_password) | Create an password control for entry of passwords. |
| [express.ui.input_action_button](express.ui.input_action_button.qmd#shiny.express.ui.input_action_button) | Creates an action button whose value is initially zero, and increments by one each time it is pressed. |
| [express.ui.input_action_link](express.ui.input_action_link.qmd#shiny.express.ui.input_action_link) | Creates a link whose value is initially zero, and increments by one each time it is pressed. |
| [express.ui.input_task_button](express.ui.input_task_button.qmd#shiny.express.ui.input_task_button) | Creates a button for launching longer-running operations. |

## Output components

Reactively render output.

| | |
| --- | --- |
| [express.render.plot](express.render.plot.qmd#shiny.express.render.plot) | Reactively render a plot object as an HTML image. |
| [express.render.table](express.render.table.qmd#shiny.express.render.table) | Reactively render a pandas ``DataFrame`` object (or similar) as a basic HTML table. |
| [express.render.DataTable](express.render.DataTable.qmd#shiny.express.render.DataTable) | Holds the data and options for a [](:class:`~shiny.render.data_frame`) output, for a spreadsheet-like view. |
| [express.render.data_frame](express.render.data_frame.qmd#shiny.express.render.data_frame) | Decorator for a function that returns a [pandas](https://pandas.pydata.org/), [polars](https://pola.rs/), or eager [`narwhals`](https://narwhals-dev.github.io/narwhals/) compatible `DataFrame` object to render as an interactive table or grid. Features fast virtualized scrolling, sorting, filtering, and row selection (single or multiple). |
| [express.render.DataGrid](express.render.DataGrid.qmd#shiny.express.render.DataGrid) | Holds the data and options for a [](:class:`~shiny.render.data_frame`) output, for a spreadsheet-like view. |
| [express.render.text](express.render.text.qmd#shiny.express.render.text) | Reactively render text. |
| [express.render.ui](express.render.ui.qmd#shiny.express.render.ui) | Reactively render HTML content. |
| [express.render.download](express.render.download.qmd#shiny.express.render.download) | Decorator to register a function to handle a download. |
| [express.render.image](express.render.image.qmd#shiny.express.render.image) | Reactively render a image file as an HTML image. |
| [express.render.express](express.render.express.qmd#shiny.express.render.express) | Reactively render HTML content with output captured as in Shiny Express |

## Layouts and other UI tools

Tools for creating, arranging, and styling UI components.

| | |
| --- | --- |
| [express.ui.page_opts](express.ui.page_opts.qmd#shiny.express.ui.page_opts) | Set page-level options for the current app. |
| [express.ui.sidebar](express.ui.sidebar.qmd#shiny.express.ui.sidebar) | Context manager for sidebar element |
| [express.ui.layout_columns](express.ui.layout_columns.qmd#shiny.express.ui.layout_columns) | Context manager for responsive, column-based grid layouts, based on a 12-column grid. |
| [express.ui.layout_column_wrap](express.ui.layout_column_wrap.qmd#shiny.express.ui.layout_column_wrap) | Context manager for a grid-like, column-first layout |
| [express.ui.card](express.ui.card.qmd#shiny.express.ui.card) | Context manager for Bootstrap card component |
| [express.ui.card_header](express.ui.card_header.qmd#shiny.express.ui.card_header) | Context manager for a card header container |
| [express.ui.card_footer](express.ui.card_footer.qmd#shiny.express.ui.card_footer) | Context manager for a card footer container |
| [express.ui.value_box](express.ui.value_box.qmd#shiny.express.ui.value_box) | Context manager for a value box |
| [express.ui.value_box_theme](express.ui.value_box_theme.qmd#shiny.express.ui.value_box_theme) | Value box theme |
| [express.ui.popover](express.ui.popover.qmd#shiny.express.ui.popover) | Context manager for a popover |
| [express.ui.tooltip](express.ui.tooltip.qmd#shiny.express.ui.tooltip) | Context manager for a tooltip |
| [express.ui.accordion](express.ui.accordion.qmd#shiny.express.ui.accordion) | Context manager for a vertically collapsing accordion. |
| [express.ui.accordion_panel](express.ui.accordion_panel.qmd#shiny.express.ui.accordion_panel) | Context manager for single accordion panel. |
| [express.ui.layout_sidebar](express.ui.layout_sidebar.qmd#shiny.express.ui.layout_sidebar) | Context manager for sidebar layout |

## Navigate multiple panels

Create a set of panels that can be navigated between.

| | |
| --- | --- |
| [express.ui.nav_panel](express.ui.nav_panel.qmd#shiny.express.ui.nav_panel) | Context manager for nav item pointing to some internal content. |
| [express.ui.navset_card_underline](express.ui.navset_card_underline.qmd#shiny.express.ui.navset_card_underline) | Context manager for a set of nav items as a tabset inside a card container. |
| [express.ui.navset_card_tab](express.ui.navset_card_tab.qmd#shiny.express.ui.navset_card_tab) | Context manager for a set of nav items as a tabset inside a card container. |
| [express.ui.navset_card_pill](express.ui.navset_card_pill.qmd#shiny.express.ui.navset_card_pill) | Context manager for a set of nav items as a tabset inside a card container. |
| [express.ui.nav_spacer](express.ui.nav_spacer.qmd#shiny.express.ui.nav_spacer) | Create space between nav items. |
| [express.ui.nav_menu](express.ui.nav_menu.qmd#shiny.express.ui.nav_menu) | Context manager for a menu of nav items. |
| [express.ui.nav_control](express.ui.nav_control.qmd#shiny.express.ui.nav_control) | Context manager for a control in the navigation container. |
| [express.ui.navset_bar](express.ui.navset_bar.qmd#shiny.express.ui.navset_bar) | Context manager for a set of nav items as a tabset inside a card container. |
| [express.ui.navset_tab](express.ui.navset_tab.qmd#shiny.express.ui.navset_tab) | Context manager for a set of nav items as a tabset. |
| [express.ui.navset_pill](express.ui.navset_pill.qmd#shiny.express.ui.navset_pill) | Context manager for a set of nav items as a pillset. |
| [express.ui.navset_underline](express.ui.navset_underline.qmd#shiny.express.ui.navset_underline) | Context manager for a set of nav items whose active/focused navigation links are styled with an underline. |
| [express.ui.navset_pill_list](express.ui.navset_pill_list.qmd#shiny.express.ui.navset_pill_list) | Context manager for a set of nav items as a tabset inside a card container. |
| [express.ui.navset_hidden](express.ui.navset_hidden.qmd#shiny.express.ui.navset_hidden) | Context manager for nav contents without the nav items. |

## Chat interface

Build a chatbot interface

| | |
| --- | --- |
| [express.ui.Chat](express.ui.Chat.qmd#shiny.express.ui.Chat) | Create a chat interface. |

## Reactive programming

Create reactive functions and dependencies.

| | |
| --- | --- |
| [reactive.calc](reactive.calc.qmd#shiny.reactive.calc) | Mark a function as a reactive calculation. |
| [reactive.effect](reactive.effect.qmd#shiny.reactive.effect) | Mark a function as a reactive side effect. |
| [reactive.value](reactive.value.qmd#shiny.reactive.value) | Create a reactive value. |
| [reactive.event](reactive.event.qmd#shiny.reactive.event) | Mark a function to react only when an "event" occurs. |
| [reactive.isolate](reactive.isolate.qmd#shiny.reactive.isolate) | Create a non-reactive scope within a reactive scope. |
| [reactive.invalidate_later](reactive.invalidate_later.qmd#shiny.reactive.invalidate_later) | Scheduled Invalidation |
| [reactive.extended_task](reactive.extended_task.qmd#shiny.reactive.extended_task) | Decorator to mark an async function as a slow computation. This will cause the function to be run in a background asyncio task, and the results will be available via the [](:class:`~shiny.reactive.ExtendedTask`) object returned by the decorator. |
| [reactive.flush](reactive.flush.qmd#shiny.reactive.flush) | Run any pending invalidations (i.e., flush the reactive environment). |
| [reactive.poll](reactive.poll.qmd#shiny.reactive.poll) | Create a reactive polling object. |
| [reactive.file_reader](reactive.file_reader.qmd#shiny.reactive.file_reader) | Create a reactive file reader. |
| [reactive.lock](reactive.lock.qmd#shiny.reactive.lock) | A lock that should be held whenever manipulating the reactive graph. |
| [req](req.qmd#shiny.req) | Throw a silent exception for falsy values. |

## Reusable Express code

Create reusable Express code.

| | |
| --- | --- |
| [express.ui.hold](express.ui.hold.qmd#shiny.express.ui.hold) | Prevent the display of UI elements in various ways. |
| [express.expressify](express.expressify.qmd#shiny.express.expressify) | Decorate a function so that output is captured as in Shiny Express |

## Update inputs

Programmatically update input values.

| | |
| --- | --- |
| [express.ui.update_select](express.ui.update_select.qmd#shiny.express.ui.update_select) | Change the value of a select input on the client. |
| [express.ui.update_selectize](express.ui.update_selectize.qmd#shiny.express.ui.update_selectize) | Change the value of a selectize.js powered input on the client. |
| [express.ui.update_slider](express.ui.update_slider.qmd#shiny.express.ui.update_slider) | Change the value of a slider input on the client. |
| [express.ui.update_dark_mode](express.ui.update_dark_mode.qmd#shiny.express.ui.update_dark_mode) |  |
| [express.ui.update_date](express.ui.update_date.qmd#shiny.express.ui.update_date) | Change the value of a date input on the client. |
| [express.ui.update_date_range](express.ui.update_date_range.qmd#shiny.express.ui.update_date_range) | Change the start and end values of a date range input on the client. |
| [express.ui.update_checkbox](express.ui.update_checkbox.qmd#shiny.express.ui.update_checkbox) | Change the value of a checkbox input on the client. |
| [express.ui.update_checkbox_group](express.ui.update_checkbox_group.qmd#shiny.express.ui.update_checkbox_group) | Change the value of a checkbox group input on the client. |
| [express.ui.update_switch](express.ui.update_switch.qmd#shiny.express.ui.update_switch) | Change the value of a switch input on the client. |
| [express.ui.update_radio_buttons](express.ui.update_radio_buttons.qmd#shiny.express.ui.update_radio_buttons) | Change the value of a radio input on the client. |
| [express.ui.update_numeric](express.ui.update_numeric.qmd#shiny.express.ui.update_numeric) | Change the value of a number input on the client. |
| [express.ui.update_text](express.ui.update_text.qmd#shiny.express.ui.update_text) | Change the value of a text input on the client. |
| [express.ui.update_text_area](express.ui.update_text_area.qmd#shiny.express.ui.update_text_area) | Change the value of a text input on the client. |
| [express.ui.update_navs](express.ui.update_navs.qmd#shiny.express.ui.update_navs) | Change the value of a navs container on the client. |
| [express.ui.update_action_button](express.ui.update_action_button.qmd#shiny.express.ui.update_action_button) | Change the label and/or icon of an action button on the client. |
| [express.ui.update_action_link](express.ui.update_action_link.qmd#shiny.express.ui.update_action_link) | Change the label and/or icon of an action link on the client. |
| [express.ui.update_task_button](express.ui.update_task_button.qmd#shiny.express.ui.update_task_button) | Change the state of a task button on the client. |

## Update UI Layouts



| | |
| --- | --- |
| [express.ui.update_sidebar](express.ui.update_sidebar.qmd#shiny.express.ui.update_sidebar) | Update a sidebar's visibility. |
| [express.ui.update_tooltip](express.ui.update_tooltip.qmd#shiny.express.ui.update_tooltip) | Update tooltip contents. |
| [express.ui.update_popover](express.ui.update_popover.qmd#shiny.express.ui.update_popover) | Update the contents or title of a popover. |
| [express.ui.update_accordion](express.ui.update_accordion.qmd#shiny.express.ui.update_accordion) | Dynamically set accordions' states. |
| [express.ui.update_accordion_panel](express.ui.update_accordion_panel.qmd#shiny.express.ui.update_accordion_panel) | Dynamically update accordion panel contents. |
| [express.ui.insert_accordion_panel](express.ui.insert_accordion_panel.qmd#shiny.express.ui.insert_accordion_panel) | Insert an [](:func:`~shiny.ui.accordion_panel`). |
| [express.ui.remove_accordion_panel](express.ui.remove_accordion_panel.qmd#shiny.express.ui.remove_accordion_panel) | Remove an [](:func:`~shiny.ui.accordion_panel`). |

## Display messages

Display messages to the user.

| | |
| --- | --- |
| [express.ui.help_text](express.ui.help_text.qmd#shiny.express.ui.help_text) | Create a help text element |
| [express.ui.notification_show](express.ui.notification_show.qmd#shiny.express.ui.notification_show) | Show a notification to the user. |
| [express.ui.notification_remove](express.ui.notification_remove.qmd#shiny.express.ui.notification_remove) | Remove a notification. |
| [express.ui.modal](express.ui.modal.qmd#shiny.express.ui.modal) | Creates the UI for a modal dialog, using Bootstrap's modal class. |
| [express.ui.modal_show](express.ui.modal_show.qmd#shiny.express.ui.modal_show) | Show a modal dialog. |
| [express.ui.modal_remove](express.ui.modal_remove.qmd#shiny.express.ui.modal_remove) | Remove a modal dialog box. |
| [express.ui.modal_button](express.ui.modal_button.qmd#shiny.express.ui.modal_button) | Creates a button that will dismiss a [](:func:`~shiny.ui.modal`). |
| [express.ui.Progress](express.ui.Progress.qmd#shiny.express.ui.Progress) | Initialize a progress bar. |

## Modules



| | |
| --- | --- |
| [express.module](express.module.qmd#shiny.express.module) | Create a Shiny module using Shiny Express syntax |

## UI panels

Visually group together a section of UI components.

| | |
| --- | --- |
| [express.ui.panel_absolute](express.ui.panel_absolute.qmd#shiny.express.ui.panel_absolute) | Context manager for a panel of absolutely positioned content. |
| [express.ui.panel_fixed](express.ui.panel_fixed.qmd#shiny.express.ui.panel_fixed) | Context manager for a panel of absolutely positioned content. |
| [express.ui.panel_title](express.ui.panel_title.qmd#shiny.express.ui.panel_title) | Create title(s) for the application. |
| [express.ui.panel_well](express.ui.panel_well.qmd#shiny.express.ui.panel_well) | Context manager for a well panel |

## Uploads & downloads

Allow users to upload and download files.

| | |
| --- | --- |
| [express.ui.input_file](express.ui.input_file.qmd#shiny.express.ui.input_file) | Create a file upload control that can be used to upload one or more files. |
| [express.render.download](express.render.download.qmd#shiny.express.render.download) | Decorator to register a function to handle a download. |

## Dynamic UI

Dynamically show/hide UI elements.

| | |
| --- | --- |
| [express.ui.panel_conditional](express.ui.panel_conditional.qmd#shiny.express.ui.panel_conditional) | Context manager for a conditional panel |
| [express.ui.insert_ui](express.ui.insert_ui.qmd#shiny.express.ui.insert_ui) | Insert UI objects. |
| [express.ui.remove_ui](express.ui.remove_ui.qmd#shiny.express.ui.remove_ui) | Remove UI objects. |

## UI as HTML

Tools for creating HTML/CSS/JS

| | |
| --- | --- |
| [express.ui.Theme](express.ui.Theme.qmd#shiny.express.ui.Theme) | Create a custom Shiny theme. |
| [express.ui.markdown](express.ui.markdown.qmd#shiny.express.ui.markdown) | Convert a string of markdown to [](:func:`ui.HTML`). |
| [express.ui.include_css](express.ui.include_css.qmd#shiny.express.ui.include_css) | Include a CSS file. |
| [express.ui.include_js](express.ui.include_js.qmd#shiny.express.ui.include_js) | Include a JavaScript file. |
| [express.ui.HTML](express.ui.HTML.qmd#shiny.express.ui.HTML) | Mark a string as raw HTML. This will prevent the string from being escaped when rendered inside an HTML tag. |
| [express.ui.tags](express.ui.tags.qmd#shiny.express.ui.tags) | Functions for creating HTML tags. |
| [express.ui.TagList](express.ui.TagList.qmd#shiny.express.ui.TagList) | Create an HTML tag list (i.e., a fragment of HTML) |
| [express.ui.busy_indicators.use](express.ui.busy_indicators.use.qmd#shiny.express.ui.busy_indicators.use) | Enable/disable busy indication |
| [express.ui.busy_indicators.options](express.ui.busy_indicators.options.qmd#shiny.express.ui.busy_indicators.options) | Customize spinning busy indicators. |

## Application-level settings

| | |
| --- | --- |
| [express.app_opts](express.app_opts.qmd#shiny.express.app_opts) | Set App-level options in Shiny Express |

## Express developer tooling

| | |
| --- | --- |
| [express.is_express_app](express.is_express_app.qmd#shiny.express.is_express_app) | Detect whether an app file is a Shiny express app |
| [express.wrap_express_app](express.wrap_express_app.qmd#shiny.express.wrap_express_app) | Wrap a Shiny Express mode app into a Shiny `App` object. |

================
File: reactive.calc.qmd
================
# reactive.calc { #shiny.reactive.calc }

```python
reactive.calc(fn=None, *, session=MISSING)
```

Mark a function as a reactive calculation.

A reactive calculation is a function whose return value depends on other
reactive value(s) (i.e., [](:class:`~shiny.Inputs`), [](:class:`~shiny.reactive.Value`)s,
and other reactive calculations). Whenever a reactive value changes, any reactive
calculations that depend on it are &quot;invalidated&quot; and automatically re-execute if called while invalid. If a reactive calculation is marked as invalidated, any other reactive
calculations that recently called it are also marked as invalidated. In this way,
invalidations ripple through reactive calculations that depend on each other.

## Parameters {.doc-section .doc-section-parameters}

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} ['MISSING_TYPE \| Session \| None']{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Calc_](`shiny.reactive._reactives.Calc_`)\[[T](`shiny.reactive._reactives.T`)\] \| [Callable](`typing.Callable`)\[\[[CalcFunction](`shiny.reactive._reactives.CalcFunction`)\[[T](`shiny.reactive._reactives.T`)\]\], [Calc_](`shiny.reactive._reactives.Calc_`)\[[T](`shiny.reactive._reactives.T`)\]\]]{.parameter-annotation}</code>

:   A decorator that marks a function as a reactive calculation.

## Tip {.doc-section .doc-section-tip}

Reactive calculations should not produce any side effects; to reactively produce
side effects, use [](:func:`~shiny.reactive.effect`) instead.

Reactive calculations are analagous to reactive expressions in Shiny for R.

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.Inputs`)
* [](:class:`~shiny.reactive.Value`)
* [](:func:`~shiny.reactive.effect`)
* [](:func:`~shiny.reactive.invalidate_later`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random
import time

from shiny import reactive
from shiny.express import input, render, ui


@reactive.calc
def first():
    input.first()
    p = ui.Progress()
    for i in range(30):
        p.set(i / 30, message="Computing, please wait...")
        time.sleep(0.1)
    p.close()
    return random.randint(1, 1000)


@reactive.calc
def second():
    input.second()
    return random.randint(1, 1000)


with ui.card():
    with ui.layout_columns():
        ui.input_action_button("first", "Invalidate first (slow) computation")
        ui.input_action_button("second", "Invalidate second (fast) computation")

    @render.text
    def result():
        return first() + second()


```

================
File: reactive.effect.qmd
================
# reactive.effect { #shiny.reactive.effect }

```python
reactive.effect(fn=None, *, suspended=False, priority=0, session=MISSING)
```

Mark a function as a reactive side effect.

A reactive effect is like a reactive calculation ([](:func:`~shiny.reactive.calc`)) in
that it can read reactive values and call reactive calculations, and will
automatically re-execute when those dependencies change. But unlike reactive
calculations, it doesn&#x27;t return a result and can&#x27;t be used as an input to other
reactive expressions. Thus, reactive effects are only useful for their side effects (for
example, performing I/O).

Another contrast between reactive calculations and effects is their execution
strategy. Reactive calculations use lazy evaluation; that is, when their
dependencies change, they don&#x27;t re-execute right away but rather wait until they are
called by someone else. Indeed, if they are not called, then they will never
re-execute. In contrast, effects use eager evaluation; as soon as their dependencies
change, they schedule themselves to re-execute.

## Parameters {.doc-section .doc-section-parameters}

<code>[**suspended**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``TRUE``, start the effect in a suspended state (i.e., it will not execute until resumed and invalidated).

<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   The new priority. A higher value means higher priority: an effect with a higher priority value will execute before all effects with lower priority values. Positive, negative, and zero values are allowed.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} ['MISSING_TYPE \| Session \| None']{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, the session is inferred via [](:func:`~shiny.session.get_current_session`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Effect_](`shiny.reactive._reactives.Effect_`) \| [Callable](`typing.Callable`)\[\[[EffectFunction](`shiny.reactive._reactives.EffectFunction`) \| [EffectFunctionAsync](`shiny.reactive._reactives.EffectFunctionAsync`)\], [Effect_](`shiny.reactive._reactives.Effect_`)\]]{.parameter-annotation}</code>

:   A decorator that marks a function as a reactive effect ([](:class:`Effect_`)).

## Tip {.doc-section .doc-section-tip}

Reactive effects are analagous to observers in Shiny for R.

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.Inputs`)
* [](:class:`~shiny.reactive.Value`)
* [](:func:`~shiny.reactive.effect`)
* [](:func:`~shiny.reactive.invalidate_later`)
* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, ui

ui.input_action_button("show", "Show modal dialog")


@reactive.effect
@reactive.event(input.show)
def show_important_message():
    m = ui.modal(
        "This is a somewhat important message.",
        easy_close=True,
        footer=None,
    )
    ui.modal_show(m)


```

================
File: reactive.event.qmd
================
# reactive.event { #shiny.reactive.event }

```python
reactive.event(*args, ignore_none=True, ignore_init=False)
```

Mark a function to react only when an &quot;event&quot; occurs.

Shiny&#x27;s reactive programming framework is primarily designed for calculated values
([](:func:`~shiny.reactive.calc`)) and side-effect-causing actions
([](:func:`~shiny.reactive.effect`)) that respond to **any** of their inputs changing.
That&#x27;s often what is desired in Shiny apps, but not always: sometimes you want to
wait for a specific action to be taken from the user, like clicking an
[](:func:`~shiny.express.ui.input_action_button`), before calculating or taking an action. You
do not want the calculation or action to be prematurely triggered if other reactive
values that it calls are invalidated. The reactive value (or function) which triggers
other calculations or actions in this way is called an event.

These situations demand a more imperative, &quot;event handling&quot; style of programming,
which ``@reactive.event()`` provides. It does this by using the
[](:func:`~shiny.reactive.isolate`) primitive under-the-hood to essentially &quot;limit&quot; the
set of reactive dependencies to those in ``args``. In other words, the event can call
as many reactive values as it likes in its code body without taking a reactive
dependency on them; it will be invalidated only when a dependency listed in args is
invalidated.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], [object](`object`)\] \| [Callable](`typing.Callable`)\[\[\], [Awaitable](`typing.Awaitable`)\[[object](`object`)\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   One or more callables that represent the event; most likely this will be a reactive input value linked to a [](:func:`~shiny.express.ui.input_action_button`) or similar (e.g., ``input.click``), but it can also be a (reactive or non-reactive) function that returns a value.

<code>[**ignore_none**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [True]{.parameter-default}</code>

:   Whether to ignore the event if the value is ``None`` or ``0``.

<code>[**ignore_init**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``False``, the event triggers on the first run.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._reactives.T`)\]\], [Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._reactives.T`)\]\]]{.parameter-annotation}</code>

:   A decorator that marks a function as an event handler.

## Tip {.doc-section .doc-section-tip}

This decorator must be applied before the relevant reactivity decorator (i.e.,
``@reactive.event`` must be applied before ``@reactive.effect``, ``@reactive.calc``,
``@render.ui``, etc).

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random

from shiny import reactive
from shiny.express import input, render, ui
from shiny.ui import output_ui

ui.markdown(
    f"""
    This example demonstrates how `@reactive.event()` can be used to restrict
    execution of: (1) a `@render` function, (2) `@reactive.calc`, or (3)
    `@reactive.effect`.

    In all three cases, the output is dependent on a random value that gets updated
    every 0.5 seconds (currently, it is {output_ui("number", inline=True)}), but
    the output is only updated when the button is clicked.
    """
)

# Always update this output when the number is updated
with ui.hold():

    @render.ui
    def number():
        return val.get()


ui.input_action_button("btn_out", "(1) Update number")


# Since ignore_none=False, the function executes before clicking the button.
# (input.btn_out() is 0 on page load, but @@reactive.event() treats 0 as None for
# action buttons.)
@render.text
@reactive.event(input.btn_out, ignore_none=False)
def out_out():
    return str(val.get())


ui.input_action_button("btn_calc", "(2) Show 1 / number")


@render.text
def out_calc():
    return str(calc())


ui.input_action_button("btn_effect", "(3) Log number")
ui.div(id="out_effect")


# Update a random number every second
val = reactive.value(random.randint(0, 1000))


@reactive.effect
def _():
    reactive.invalidate_later(0.5)
    val.set(random.randint(0, 1000))


@reactive.calc
@reactive.event(input.btn_calc)
def calc():
    return 1 / val.get()


@reactive.effect
@reactive.event(input.btn_effect)
def _():
    ui.insert_ui(
        ui.p("Random number! ", val.get()),
        selector="#out_effect",
        where="afterEnd",
    )


```

================
File: reactive.extended_task.qmd
================
# reactive.extended_task { #shiny.reactive.extended_task }

```python
reactive.extended_task(func=None)
```

Decorator to mark an async function as a slow computation. This will cause the
function to be run in a background asyncio task, and the results will be available
via the [](:class:`~shiny.reactive.ExtendedTask`) object returned by the decorator.

Unlike normal async render functions, effects, and calcs, `extended_task` async
computations do not block Shiny reactive processing from proceeding. This means that
they can be used to perform long-running tasks without freezing the session that
owns them, nor other sessions.

However, this also means that they cannot access reactive sources. This is because
processing of inputs and reactivity is not blocked, and so the reactive sources may
change while the computation is running, which is almost never the desired behavior.
If any reactive sources are needed by the computation, the decorated function must
take them as parameters, and the resulting `ExtendedTask` object must be invoked
with the corresponding arguments.

## Parameters {.doc-section .doc-section-parameters}

<code>[**func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\[[Callable](`typing.Callable`)\[[P](`shiny.reactive._extended_task.P`), [Awaitable](`typing.Awaitable`)\[[R](`shiny.reactive._extended_task.R`)\]\]\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   The function to decorate. It must be ``async``. It can take any parameters and return any value (including None).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[ExtendedTask](`shiny.reactive._extended_task.ExtendedTask`)\[[P](`shiny.reactive._extended_task.P`), [R](`shiny.reactive._extended_task.R`)\] \| [Callable](`typing.Callable`)\[\[[Callable](`typing.Callable`)\[[P](`shiny.reactive._extended_task.P`), [Awaitable](`typing.Awaitable`)\[[R](`shiny.reactive._extended_task.R`)\]\]\], [ExtendedTask](`shiny.reactive._extended_task.ExtendedTask`)\[[P](`shiny.reactive._extended_task.P`), [R](`shiny.reactive._extended_task.R`)\]\]]{.parameter-annotation}</code>

:   An ``ExtendedTask`` object that can be used to check the status of the computation and retrieve the result.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
from datetime import datetime

from shiny import reactive, render
from shiny.express import input, ui

ui.h5("Current time")


@render.text
def current_time():
    reactive.invalidate_later(1)
    return datetime.now().strftime("%H:%M:%S")


with ui.p():
    "Notice that the time above updates every second, even if you click the button below."


@ui.bind_task_button(button_id="btn")
@reactive.extended_task
async def slow_compute(a: int, b: int) -> int:
    await asyncio.sleep(3)
    return a + b


with ui.layout_sidebar():
    with ui.sidebar():
        ui.input_numeric("x", "x", 1)
        ui.input_numeric("y", "y", 2)
        ui.input_task_button("btn", "Compute, slowly")
        ui.input_action_button("btn_cancel", "Cancel")

    @reactive.effect
    @reactive.event(input.btn, ignore_none=False)
    def handle_click():
        # slow_compute.cancel()
        slow_compute(input.x(), input.y())

    @reactive.effect
    @reactive.event(input.btn_cancel)
    def handle_cancel():
        slow_compute.cancel()

    ui.h5("Sum of x and y")

    @render.text
    def show_result():
        return str(slow_compute.result())


```

================
File: reactive.file_reader.qmd
================
# reactive.file_reader { #shiny.reactive.file_reader }

```python
reactive.file_reader(filepath, interval_secs=1, *, priority=1, session=MISSING)
```

Create a reactive file reader.

This is a decorator, meant to be applied to a no-argument function that reads data
from a file on disk. Whenever the file changes (or to be precise, the file size or
last modified time changes), past readers of the data are reactively invalidated.
This makes it incredibly easy to write apps that automatically update all of their
outputs as soon as files on disk change.

Note that `file_reader` works only on single files, not directories of files.

Both the `filepath` function and the decorated (file reading) function can read
reactive values and [](:func:`~shiny.reactive.calc`) objects. Any invalidations
triggered by reactive dependencies will apply to the reactive file reader object
immediately (not waiting for the `interval_secs` delay to expire).

## Parameters {.doc-section .doc-section-parameters}

<code>[**filepath**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`) \| [os](`os`).[PathLike](`os.PathLike`)\[[str](`str`)\] \| [Callable](`typing.Callable`)\[\[\], [str](`str`)\] \| [Callable](`typing.Callable`)\[\[\], [os](`os`).[PathLike](`os.PathLike`)\[[str](`str`)\]\]]{.parameter-annotation}</code>

:   Either a string indicating the file path to be monitored, or, a no-argument function that returns such a string. The latter is useful if the file to be monitored depends on some user input, the current date/time, etc.  The file path provided MUST exist, otherwise Shiny will treat it as an unhandled error and close the session.  If a function is used, make sure it is high performance (or is cached, i.e. use a :class:`~shiny.reactive.calc)`, as it will be called very frequently.

<code>[**interval_secs**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   The number of seconds to wait after each time the file metadata is checked. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.

<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   Reactive polling is implemented using an [](:func:`~shiny.reactive.effect`) to call `poll_func` on a timer; use the `priority` argument to control the order of this Effect's execution versus other Effects in your app. See [](:func:`~shiny.reactive.effect`) for more details.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \| [Session](`shiny.Session`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, a session is inferred via [](:func:`~shiny.session.get_current_session`). If there is no current session (i.e. `poll` is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._poll.T`)\]\], [Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._poll.T`)\]\]]{.parameter-annotation}</code>

:   A decorator that should be applied to a no-argument function that (expensively)

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [reads whatever data is desired. (This function may be a regular function or a]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [co-routine function.) The result of the decorator is a reactive]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [func:`~shiny.reactive.calc` that always returns up-to-date data, and invalidates]{.parameter-annotation}</code>

:   

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [callers when changes are detected via polling.]{.parameter-annotation}</code>

:   

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.reactive.poll`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pathlib

import pandas as pd

from shiny import reactive
from shiny.express import render

file = pathlib.Path(__file__).parent / "mtcars.csv"


@reactive.file_reader(file)
def read_file():
    return pd.read_csv(file)


@render.table
def result():
    return read_file()


## file: mtcars.csv
mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb
21,6,160,110,3.9,2.62,16.46,0,1,4,4
21,6,160,110,3.9,2.875,17.02,0,1,4,4
22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
10.4,8,460,215,3,5.424,17.82,0,0,3,4
14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1
30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2
33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1
21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1
15.5,8,318,150,2.76,3.52,16.87,0,0,3,2
15.2,8,304,150,3.15,3.435,17.3,0,0,3,2
13.3,8,350,245,3.73,3.84,15.41,0,0,3,4
19.2,8,400,175,3.08,3.845,17.05,0,0,3,2
27.3,4,79,66,4.08,1.935,18.9,1,1,4,1
26,4,120.3,91,4.43,2.14,16.7,0,1,5,2
30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2
15.8,8,351,264,4.22,3.17,14.5,0,1,5,4
19.7,6,145,175,3.62,2.77,15.5,0,1,5,6
15,8,301,335,3.54,3.57,14.6,0,1,5,8
21.4,4,121,109,4.11,2.78,18.6,1,1,4,2


```

================
File: reactive.flush.qmd
================
# reactive.flush { #shiny.reactive.flush }

```python
reactive.flush()
```

Run any pending invalidations (i.e., flush the reactive environment).

## Warning {.doc-section .doc-section-warning}

You shouldn't ever need to call this function inside of a Shiny app. It's only
useful for testing and running reactive code interactively in the console.

================
File: reactive.invalidate_later.qmd
================
# reactive.invalidate_later { #shiny.reactive.invalidate_later }

```python
reactive.invalidate_later(delay, *, session=MISSING)
```

Scheduled Invalidation

When called from within a reactive context, [](:func:`~shiny.reactive.invalidate_later`)
schedules the reactive context to be invalidated in the given number of seconds.

## Parameters {.doc-section .doc-section-parameters}

<code>[**delay**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation}</code>

:   The number of seconds to wait before invalidating.

## Note {.doc-section .doc-section-note}

When called within a reactive function (i.e., [](:func:`~shiny.reactive.effect`),
[](:func:`~shiny.reactive.calc`), [](:class:`shiny.express.render.ui`), etc.), that reactive context
is invalidated (and re-executes) after the interval has passed. The re-execution
will reset the invalidation flag, so in a typical use case, the object will keep
re-executing and waiting for the specified interval. It's possible to stop this
cycle by adding conditional logic that prevents the ``invalidate_later`` from being
run.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import random

from shiny import reactive
from shiny.express import render


@render.text
def value():
    reactive.invalidate_later(0.5)
    return "Random int: " + str(random.randint(0, 10000))


```

================
File: reactive.isolate.qmd
================
# reactive.isolate { #shiny.reactive.isolate }

```python
reactive.isolate()
```

Create a non-reactive scope within a reactive scope.

Ordinarily, the simple act of reading a reactive value causes a relationship to be
established between the caller and the reactive value, where a change to the
reactive value will cause the caller to re-execute. (The same applies for the act of
getting a reactive calculation&#x27;s value.) `with isolate()` lets you read a reactive
value or calculation without establishing this relationship.

``with isolate()`` can also be useful for calling reactive calculations at the
console, which can be useful for debugging. To do so, wrap the calls to the reactive
calculation with ``with isolate()``.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Generator](`typing.Generator`)\[None, None, None\]]{.parameter-annotation}</code>

:   A context manager that executes the given expression in a scope where reactive values can be read, but do not cause the reactive scope of the caller to be re-evaluated when they change.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.reactive.event`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import reactive
from shiny.express import input, render, ui

ui.input_slider("n", "Number of observations", min=0, max=1000, value=500)
ui.input_action_button("go", "Go!", class_="btn-success")


@render.plot(alt="A histogram")
def plot():
    # Take a reactive dependency on the action button...
    input.go()

    # ...but don't take a reactive dependency on the slider
    with reactive.isolate():
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(input.n())

    fig, ax = plt.subplots()
    ax.hist(x, bins=30, density=True)
    return fig


```

================
File: reactive.lock.qmd
================
# reactive.lock { #shiny.reactive.lock }

```python
reactive.lock()
```

A lock that should be held whenever manipulating the reactive graph.

For example, [](:func:`~shiny.reactive.lock`) makes it safe to set a
[](:class:`~reactive.value`) and call [](:func:`~shiny.reactive.flush`) from a different
[](:class:`~asyncio.Task`) than the one that is running the Shiny
[](:class:`~shiny.Session`).

================
File: reactive.poll.qmd
================
# reactive.poll { #shiny.reactive.poll }

```python
reactive.poll(
    poll_func,
    interval_secs=1,
    *,
    equals=eq,
    priority=0,
    session=MISSING,
)
```

Create a reactive polling object.

Polling is a technique that approximates &quot;real-time&quot; or streaming updates, as if a
data source were pushing notifications each time it is updated. The data source does
not actually push notifications; a polling object repeatedly checks for changes in an
efficient way at specified intervals. If a change is detected, the polling object runs
a function to re-read the data source.

A reactive polling object is constructed using two functions: a polling function,
which is a fast-running, inexpensive function that is used to determine whether some
data source has changed (such as the timestamp of a file, or a `SELECT MAX(updated)
FROM table` query); and a slower-running reading function that actually loads and
returns the data that is desired. The `poll()` function is intended to be used as a
decorator: the poll function is passed as the `poll_func` arg to `@poll()`, while
the data reading function is the target of the decorator.

Reactive consumers can invoke the resulting polling object to get the current data,
and will automatically invalidate when the polling function detects a change.
Polling objects also cache the results of the read function; for this reason, apps
where all sessions depend on the same data source may want to declare the polling
object at the top level of app.py (outside of the server function).

Both `poll_func` and the decorated (data reading) function can read reactive values
and [](:func:`~shiny.reactive.calc`) objects. Any invalidations triggered by reactive
dependencies will apply to the reactive polling object immediately (not waiting for
the `interval_secs` delay to expire).

## Parameters {.doc-section .doc-section-parameters}

<code>[**poll_func**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[\], [Any](`typing.Any`)\] \| [Callable](`typing.Callable`)\[\[\], [Awaitable](`typing.Awaitable`)\[[Any](`typing.Any`)\]\]]{.parameter-annotation}</code>

:   A function to be called frequently to determine whether a data source has changed. The return value should be something that can be compared inexpensively using `==`. Both regular functions and co-routine functions are allowed.  Note that the `poll_func` should NOT return a bool that indicates whether the data source has changed. Rather, each `poll_func` return value will be checked for equality with its preceding `poll_func` return value (using `==` semantics by default), and if it differs, the data source will be considered changed.

<code>[**interval_secs**]{.parameter-name} [:]{.parameter-annotation-sep} [[float](`float`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   The number of seconds to wait after each `poll_func` invocation before polling again. Note: depending on what other tasks are executing, the actual wait time may far exceed this value.

<code>[**equals**]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Any](`typing.Any`), [Any](`typing.Any`)\], [bool](`bool`)\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [eq]{.parameter-default}</code>

:   The function that will be used to compare each `poll_func` return value with its immediate predecessor.

<code>[**priority**]{.parameter-name} [:]{.parameter-annotation-sep} [[int](`int`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Reactive polling is implemented using an [](:func:`~shiny.reactive.effect`) to call `poll_func` on a timer; use the `priority` argument to control the order of this Effect's execution versus other Effects in your app. See [](:func:`~shiny.reactive.effect`) for more details.

<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[MISSING_TYPE](`shiny.types.MISSING_TYPE`) \| [Session](`shiny.Session`) \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   A [](:class:`~shiny.Session`) instance. If not provided, a session is inferred via [](:func:`~shiny.session.get_current_session`). If there is no current session (i.e. `poll` is being created outside of the server function), the lifetime of this reactive poll object will not be tied to any specific session.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[Callable](`typing.Callable`)\[\[[Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._poll.T`)\]\], [Callable](`typing.Callable`)\[\[\], [T](`shiny.reactive._poll.T`)\]\]]{.parameter-annotation}</code>

:   A decorator that should be applied to a no-argument function that (expensively) reads whatever data is desired. (This function may be a regular function or a co-routine function.) The result of the decorator is a reactive [](:func:`~shiny.reactive.calc`) that always returns up-to-date data, and invalidates callers when changes are detected via polling.

## See Also {.doc-section .doc-section-see-also}

* [](:func:`~shiny.reactive.file_reader`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import asyncio
import random
import sqlite3
from datetime import datetime
from typing import Any, Awaitable

import pandas as pd

from shiny import reactive
from shiny.express import input, render, ui

SYMBOLS = ["AAA", "BBB", "CCC", "DDD", "EEE", "FFF"]


def timestamp() -> str:
    return datetime.now().strftime("%x %X")


def rand_price() -> float:
    return round(random.random() * 250, 2)


# === Initialize the database =========================================


def init_db(con: sqlite3.Connection) -> None:
    cur = con.cursor()
    try:
        cur.executescript(
            """
            CREATE TABLE stock_quotes (timestamp text, symbol text, price real);
            CREATE INDEX idx_timestamp ON stock_quotes (timestamp);
            """
        )
        cur.executemany(
            "INSERT INTO stock_quotes (timestamp, symbol, price) VALUES (?, ?, ?)",
            [(timestamp(), symbol, rand_price()) for symbol in SYMBOLS],
        )
        con.commit()
    finally:
        cur.close()


conn = sqlite3.connect(":memory:")
init_db(conn)


# === Randomly update the database with an asyncio.task ==============


def update_db(con: sqlite3.Connection) -> None:
    """Update a single stock price entry at random"""

    cur = con.cursor()
    try:
        sym = SYMBOLS[random.randint(0, len(SYMBOLS) - 1)]
        print(f"Updating {sym}")
        cur.execute(
            "UPDATE stock_quotes SET timestamp = ?, price = ? WHERE symbol = ?",
            (timestamp(), rand_price(), sym),
        )
        con.commit()
    finally:
        cur.close()


async def update_db_task(con: sqlite3.Connection) -> Awaitable[None]:
    """Task that alternates between sleeping and updating prices"""
    while True:
        await asyncio.sleep(random.random() * 1.5)
        update_db(con)


_ = asyncio.create_task(update_db_task(conn))


# === Create the reactive.poll object ===============================


def tbl_last_modified() -> Any:
    df = pd.read_sql_query("SELECT MAX(timestamp) AS timestamp FROM stock_quotes", conn)
    return df["timestamp"].to_list()


@reactive.poll(tbl_last_modified, 0.5)
def stock_quotes() -> pd.DataFrame:
    return pd.read_sql_query("SELECT timestamp, symbol, price FROM stock_quotes", conn)


with ui.card():
    ui.markdown(
        """
        # `shiny.reactive.poll` demo

        This example app shows how to stream results from a database (in this
        case, an in-memory sqlite3) with the help of `shiny.reactive.poll`.
        """
    )
    ui.input_selectize("symbols", "Filter by symbol", [""] + SYMBOLS, multiple=True)

    @render.data_frame
    def table():
        df = stock_quotes()
        if input.symbols():
            df = df[df["symbol"].isin(input.symbols())]
        return df


```

================
File: reactive.value.qmd
================
# reactive.value { #shiny.reactive.value }

```python
reactive.value(self, value=MISSING, *, read_only=False)
```

Create a reactive value.

Reactive values are the source of reactivity in Shiny. Changes to reactive values
invalidate downstream reactive functions ([](:func:`~shiny.reactive.calc`),
[](:func:`~shiny.reactive.effect`), and `render` functions decorated with `@output`).
When these functions are invalidated, they get scheduled to re-execute.

Shiny input values are read-only reactive values. For example, `input.x` is a
reactive value object, and to get the current value, you can call `input.x()` or
`input.x.get()`. When you do that inside of a reactive function, the function takes
a dependency on the reactive value.

## Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [MISSING]{.parameter-default}</code>

:   An optional initial value.

<code>[**read_only**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, then the reactive value cannot be `set()`.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   An instance of a reactive value.

## Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[](:class:`~shiny.types.SilentException`)]{.parameter-annotation}</code>

:   If [](:func:`~shiny.reactive.Value.get`) is called before a value is provided/set.

## Note {.doc-section .doc-section-note}

A reactive value may only be read from within a reactive function (e.g.,
[](:func:`~shiny.reactive.calc`), [](:func:`~shiny.reactive.effect`),
[](:class:`shiny.express.render.text`), etc.) and, when doing so, the function takes a reactive
dependency on the value (i.e., when the value changes, the calling reactive function
will re-execute).

## See Also {.doc-section .doc-section-see-also}

* [](:class:`~shiny.Inputs`)
* [](:func:`~shiny.reactive.calc`)
* [](:func:`~shiny.reactive.effect`)

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive
from shiny.express import input, render, ui

val = reactive.value(0)


@reactive.effect
@reactive.event(input.minus)
def _():
    newVal = val.get() - 1
    val.set(newVal)


@reactive.effect
@reactive.event(input.plus)
def _():
    newVal = val.get() + 1
    val.set(newVal)


with ui.sidebar():
    ui.input_action_button("minus", "-1")
    ui.input_action_button("plus", "+1")


@render.text
def value():
    return str(val.get())


```

## Methods

| Name | Description |
| --- | --- |
| [freeze](#shiny.reactive.value.freeze) | Freeze the reactive value. |
| [get](#shiny.reactive.value.get) | Read the reactive value. |
| [is_set](#shiny.reactive.value.is_set) | Check if the reactive value is set. |
| [set](#shiny.reactive.value.set) | Set the reactive value to a new value. |
| [unset](#shiny.reactive.value.unset) | Unset the reactive value. |

### freeze { #shiny.reactive.value.freeze }

```python
reactive.value.freeze()
```

Freeze the reactive value.

Freezing is equivalent to unsetting the value, but it does not invalidate
dependents.

### get { #shiny.reactive.value.get }

```python
reactive.value.get()
```

Read the reactive value.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`)]{.parameter-annotation}</code>

:   A value.

#### Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[](:class:`~shiny.types.SilentException`)]{.parameter-annotation}</code>

:   If the value is not set.

<code>[:]{.parameter-annotation-sep} [[RuntimeError](`RuntimeError`)]{.parameter-annotation}</code>

:   If called from outside a reactive function.

### is_set { #shiny.reactive.value.is_set }

```python
reactive.value.is_set()
```

Check if the reactive value is set.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   ``True`` if the value is set, ``False`` otherwise.

### set { #shiny.reactive.value.set }

```python
reactive.value.set(value)
```

Set the reactive value to a new value.

#### Parameters {.doc-section .doc-section-parameters}

<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny.reactive._reactives.T`)]{.parameter-annotation}</code>

:   A value.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation}</code>

:   ``True`` if the value was set to a different value and ``False`` otherwise.

#### Raises {.doc-section .doc-section-raises}

<code>[:]{.parameter-annotation-sep} [[RuntimeError](`RuntimeError`)]{.parameter-annotation}</code>

:   If called on a read-only reactive value.

### unset { #shiny.reactive.value.unset }

```python
reactive.value.unset()
```

Unset the reactive value.

#### Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [None]{.parameter-annotation}</code>

:   ``True`` if the value was set prior to this unsetting.

================
File: req.qmd
================
# req { #shiny.req }

```python
req(*args, cancel_output=False)
```

Throw a silent exception for falsy values.

This is a convenient shorthand for throwing [](:class:`~shiny.types.SilentException`) /
[](:class:`~shiny.types.SilentCancelOutputException`) if any of the arguments are falsy.

The term &quot;falsy&quot; generally indicates that a value is considered `False` when
encountered in a logical context. We use the term a little loosely here; our usage
tries to match the intuitive notions of &quot;Is this value missing or available?&quot;, or
&quot;Has the user provided an answer?&quot;, or in the case of action buttons, &quot;Has the
button been clicked?&quot;. So `False`, `None`, `0`, and `""` would be examples of Falsy
values.

## Parameters {.doc-section .doc-section-parameters}

<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny._validation.T`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Any number of arguments to check.

<code>[**cancel_output**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`) \| [Literal](`typing.Literal`)\['progress'\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>

:   If ``True``, throw [](:class:`~shiny.types.SilentCancelOutputException`) instead of [](:class:`~shiny.types.SilentException`).

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [[T](`shiny._validation.T`) \| None]{.parameter-annotation}</code>

:   The first argument. If no arguments are provided, returns ``None``.

## Examples {.doc-section .doc-section-examples}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import reactive, req
from shiny.express import input, render, ui
from shiny.types import SafeException

ui.input_action_button("safe", "Throw a safe error")


@render.ui
def safe():
    # This error _won't_ be sanitized when deployed (i.e., it's "safe")
    raise SafeException(f"You've clicked {str(safe_click())} times")


ui.input_action_button("unsafe", "Throw an unsafe error")


@render.ui
def unsafe():
    req(input.unsafe())
    # This error _will_ be sanitized when deployed (i.e., it's "unsafe")
    raise Exception(f"Super secret number of clicks: {str(input.unsafe())}")


ui.input_text(
    "txt",
    "Enter some text below, then remove it. Notice how the text is never fully removed.",
)


@render.ui
def txt_out():
    req(input.txt(), cancel_output=True)
    return input.txt()


@reactive.calc
def safe_click():
    req(input.safe())
    return input.safe()


@reactive.effect
def _():
    req(input.unsafe())
    print("unsafe clicks:", input.unsafe())
    # raise Exception("Observer exception: this should cause a crash")


```

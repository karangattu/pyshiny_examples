import pandas as pd
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

# Sample data for the app
function_docs = [
    {
        "File Name": "ui.update_date_range",
        "Usage": "ui.update_date_range(\n    id,\n    *,\n    label=None,\n    start=None,\n    end=None,\n    min=None,\n    max=None,\n    session=None,\n)",
        "Description": "Change the start and end values of a date range input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**start**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The initial start date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.\n\n<code>[**end**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The initial end date. Either a [](:class:`~datetime.date`) object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed value.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.ui.input_numeric`) and\n[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and\n[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": 'from datetime import date, timedelta\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider("n", "Day of month", min=1, max=30, value=10),\n    ui.input_date_range("inDateRange", "Input date"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        d = date(2013, 4, input.n())\n        ui.update_date_range(\n            "inDateRange",\n            label="Date range label " + str(input.n()),\n            start=d - timedelta(days=1),\n            end=d + timedelta(days=1),\n            min=d - timedelta(days=5),\n            max=d + timedelta(days=5),\n        )\n\n\napp = App(app_ui, server)\n\n\n\n================',
    },
    {
        "File Name": "ui.update_date",
        "Usage": "ui.update_date(id, *, label=None, value=None, min=None, max=None, session=None)",
        "Description": "Change the value of a date input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The starting date. Either a `date()` object, or a string in yyyy-mm-dd format. If ``None`` (the default), will use the current date in the client's time zone.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[date](`datetime.date`) \\| [str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed value.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.ui.input_numeric`) and\n[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and\n[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": 'from datetime import date, timedelta\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider("n", "Day of month", min=1, max=30, value=10),\n    ui.input_date("inDate", "Input date"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        d = date(2013, 4, input.n())\n        ui.update_date(\n            "inDate",\n            label="Date label " + str(input.n()),\n            value=d,\n            min=d - timedelta(days=3),\n            max=d + timedelta(days=3),\n        )\n\n\napp = App(app_ui, server)\n\n\n\n================',
    },
    {
        "File Name": "ui.update_navs",
        "Usage": "ui.update_navs(id, selected=None, session=None)",
        "Description": "Change the value of a navs container on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.ui.input_numeric`) and\n[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and\n[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": 'from shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(ui.input_slider("controller", "Controller", min=1, max=3, value=1)),\n    ui.navset_card_tab(\n        ui.nav_panel("Panel 1", "Panel 1 content", value="panel1"),\n        ui.nav_panel("Panel 2", "Panel 2 content", value="panel2"),\n        ui.nav_panel("Panel 3", "Panel 3 content", value="panel3"),\n        id="inTabset",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        ui.update_navs("inTabset", selected="panel" + str(input.controller()))\n\n\napp = App(app_ui, server)\n\n\n\n================',
    },
    {
        "File Name": "ui.update_numeric",
        "Usage": "ui.update_numeric(\n    id,\n    *,\n    label=None,\n    value=None,\n    min=None,\n    max=None,\n    step=None,\n    session=None,\n)",
        "Description": "Change the value of a number input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**value**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A new value.\n\n<code>[**min**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The minimum allowed value.\n\n<code>[**max**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The maximum allowed value.\n\n<code>[**step**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[float](`float`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Interval to use when stepping between min and max.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The [](:class:`~shiny.Session`) object passed to the server function of a [](:class:`~shiny.App`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.ui.input_numeric`) and\n[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and\n[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": 'from shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider("controller", "Controller", min=0, max=20, value=10),\n    ui.input_numeric("inNumber", "Input number", 0),\n    ui.input_numeric("inNumber2", "Input number 2", 0),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        x = input.controller()\n        ui.update_numeric("inNumber", value=x)\n        ui.update_numeric(\n            "inNumber2",\n            label="Number label " + str(x),\n            value=x,\n            min=x - 10,\n            max=x + 10,\n            step=5,\n        )\n\n\napp = App(app_ui, server)\n\n\n\n================',
    },
    {
        "File Name": "ui.update_popover",
        "Usage": "ui.update_popover(id, *args, title=None, show=None, session=None)",
        "Description": "Update the contents or title of a popover.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   The id of the popover DOM element to update.\n\n<code>[***args**]{.parameter-name} [:]{.parameter-annotation-sep} [[TagChild](`htmltools.TagChild`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>\n\n:   The new contents of the popover.\n\n<code>[**title**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[TagChild](`htmltools.TagChild`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The new title of the popover.\n\n<code>[**show**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[bool](`bool`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Opens (`True`) or closes (`False`) the popover.\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A Shiny session object (the default should almost always be used).\n",
        "Examples": 'from shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.input_action_button("btn_show", "Show popover", class_="mt-3 me-3"),\n    ui.input_action_button("btn_close", "Close popover", class_="mt-3 me-3"),\n    ui.br(),\n    ui.br(),\n    ui.popover(\n        ui.input_action_button("btn_w_popover", "A button w/ a popover", class_="mt-3"),\n        "A message",\n        id="popover_id",\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    @reactive.event(input.btn_show)\n    def _():\n        ui.update_popover("popover_id", show=True)\n\n    @reactive.effect\n    @reactive.event(input.btn_close)\n    def _():\n        ui.update_popover("popover_id", show=False)\n\n    @reactive.effect\n    @reactive.event(input.btn_w_popover)\n    def _():\n        ui.notification_show("Button clicked!", duration=3, type="message")\n\n\napp = App(app_ui, server=server)\n\n\n\n================',
    },
    {
        "File Name": "ui.update_radio_buttons",
        "Usage": "ui.update_radio_buttons(\n    id,\n    *,\n    label=None,\n    choices=None,\n    selected=None,\n    inline=False,\n    session=None,\n)",
        "Description": "Change the value of a radio input on the client.",
        "Parameters": "\n<code>[**id**]{.parameter-name} [:]{.parameter-annotation-sep} [[str](`str`)]{.parameter-annotation}</code>\n\n:   An input id.\n\n<code>[**label**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   An input label.\n\n<code>[**choices**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[ChoicesArg](`shiny.ui._input_check_radio.ChoicesArg`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   Either a list of choices or a dictionary mapping choice values to labels. Note that if a dictionary is provided, the keys are used as the (input) values so that the dictionary values can hold HTML labels.\n\n<code>[**selected**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[str](`str`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   The values that should be initially selected, if any.\n\n<code>[**inline**]{.parameter-name} [:]{.parameter-annotation-sep} [[bool](`bool`)]{.parameter-annotation} [ = ]{.parameter-default-sep} [False]{.parameter-default}</code>\n\n:   If ``True```, the result is displayed inline\n\n<code>[**session**]{.parameter-name} [:]{.parameter-annotation-sep} [[Optional](`typing.Optional`)\\[[Session](`shiny.session.Session`)\\]]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>\n\n:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via [](:func:`~shiny.session.get_current_session`).\n\n## Note {.doc-section .doc-section-note}\n\n\nThe input updater functions send a message to the client, telling it to change the\nsettings of an input object. The messages are collected and sent after all the\nobservers (including outputs) have finished running.\n\nThe syntax of these functions is similar to the functions that created the inputs in\nthe first place. For example, [](:func:`~shiny.ui.input_numeric`) and\n[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.\n\nAny arguments with ``None`` values will be ignored; they will not result in any\nchanges to the input object on the client.\n\nFor [](:func:`~shiny.ui.update_radio_buttons`), [](:func:`~shiny.ui.update_checkbox_group`), and\n[](:func:`~shiny.ui.update_select`), the set of choices can be cleared by using ``choices=[]``.\nSimilarly, for these inputs, the selected item can be cleared by using\n`selected=[]`.\n",
        "Examples": 'from shiny import App, Inputs, Outputs, Session, reactive, ui\n\napp_ui = ui.page_fluid(\n    ui.tags.p("The first radio button group controls the second"),\n    ui.input_radio_buttons(\n        "inRadioButtons", "Input radio buttons", ["Item A", "Item B", "Item C"]\n    ),\n    ui.input_radio_buttons(\n        "inRadioButtons2", "Input radio buttons 2", ["Item A", "Item B", "Item C"]\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.effect\n    def _():\n        x = input.inRadioButtons()\n\n        # Can also set the label and select items\n        ui.update_radio_buttons(\n            "inRadioButtons2",\n            label="Radio buttons label " + x,\n            choices=[x],\n            selected=x,\n        )\n\n\napp = App(app_ui, server)\n\n\n\n================',
    },
    # Add more function documentation as needed
]
# convert function_docs to a DataFrame
function_docs = pd.DataFrame(function_docs)

function_docs["Parameters"] = function_docs["Parameters"].apply(
    lambda x: ui.markdown(f"{x}")
)
function_docs["Examples"] = function_docs["Examples"].apply(
    lambda x: ui.markdown(f'```python"{x}"')
)


app_ui = ui.page_navbar(
    ui.nav_panel("Home", "Welcome to the Shiny for Python App!"),
    ui.nav_panel("Function Reference", ui.output_data_frame("function_reference")),
    title="Shiny for Python",
    id="nav",
)


def server(input, output, session):
    @render.data_frame
    def function_reference():
        return function_docs


app = App(app_ui, server)

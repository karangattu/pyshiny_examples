{
  "test_app_09_plots_app": {
    "test_code": "import pytest\nfrom playwright.sync_api import Page\nfrom shiny.playwright import controller\nfrom shiny.pytest import create_app_fixture\nfrom shiny.run import ShinyAppProc\n\napp = create_app_fixture([\"app.py\"])\n\ndef test_plot_module_app(page: Page, app: ShinyAppProc) -> None:\n    page.goto(app.url)\n\n    # Test the slider input\n    n_points_slider = controller.InputSlider(page, \"my_plot_module-n_points\")\n    n_points_slider.expect_label(\"Number of points:\")\n    n_points_slider.expect_min(\"10\")\n    n_points_slider.expect_max(\"100\")\n    n_points_slider.expect_value(\"50\")\n\n    # Test plot outputs exist\n    plot1 = controller.OutputPlot(page, \"my_plot_module-plot1\")\n    plot2 = controller.OutputPlot(page, \"my_plot_module-plot2\")\n\n    # Test slider interaction\n    n_points_slider.set(\"75\")\n    n_points_slider.expect_value(\"75\")\n\n    # Test setting slider to different values\n    n_points_slider.set(\"25\")\n    n_points_slider.expect_value(\"25\")\n\n    n_points_slider.set(\"90\")\n    n_points_slider.expect_value(\"90\")",
    "app_code": "# app.py\nfrom shiny import App, ui, module, render, reactive\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the module UI function\n@module.ui\ndef plot_module_ui():\n    \"\"\"Defines a module with two plots and inputs to control them.\"\"\"\n    return ui.div(\n        ui.h3(\"Plot Module\"),\n        ui.input_slider(\"n_points\", \"Number of points:\", min=10, max=100, value=50),  # Slider for points\n        ui.row(  # Use ui.row to arrange plots side-by-side\n            ui.column(6, ui.output_plot(\"plot1\")), # First plot in a column\n            ui.column(6, ui.output_plot(\"plot2\"))  # Second plot in a column\n        )\n    )\n\n# Define the module server function\n@module.server\ndef plot_module_server(input, output, session):\n    \"\"\"Defines the server logic for the plot module.\"\"\"\n\n    @output\n    @render.plot  # Decorator for rendering plots\n    def plot1():\n        # Generate some data for the first plot\n        x = np.random.rand(input.n_points())\n        y = np.random.rand(input.n_points())\n\n        fig, ax = plt.subplots()\n        ax.scatter(x, y)\n        ax.set_title(\"Random Scatter Plot\")\n        return fig\n\n    @output\n    @render.plot  # Decorator for rendering plots\n    def plot2():\n        # Generate some data for the second plot\n        x = np.linspace(0, 10, input.n_points())\n        y = np.sin(x)\n\n        fig, ax = plt.subplots()\n        ax.plot(x, y)\n        ax.set_title(\"Sine Wave Plot\")\n        return fig\n\n# Define the main app UI\napp_ui = ui.page_fluid(\n    ui.h1(\"Main Application with Plot Module\"),\n    plot_module_ui(\"my_plot_module\")  # Instantiate the module UI\n)\n\n# Define the main app server function\ndef server(input, output, session):\n    plot_module_server(\"my_plot_module\")  # Instantiate the module server\n\n# Create the Shiny app instance\napp = App(app_ui, server)\n",
    "app_path": "evaluation_apps/app_09_plots/app.py",
    "test_file_path": "evaluation_apps/app_09_plots/test_app.py",
    "app_name": "app_09_plots"
  },
  "test_app_07_modules_app": {
    "test_code": "from playwright.sync_api import Page\nfrom shiny.playwright import controller\nfrom shiny.pytest import create_app_fixture\nfrom shiny.run import ShinyAppProc\n\napp = create_app_fixture([\"app.py\"])\n\n\ndef test_module_app(page: Page, app: ShinyAppProc) -> None:\n    page.goto(app.url)\n\n    # Test first text input\n    text_input_1 = controller.InputText(page, \"module_instance_1-text_input_1\")\n    text_input_1.expect_label(\"Enter the first text:\")\n    text_input_1.expect_value(\"\")\n\n    # Test second text input\n    text_input_2 = controller.InputText(page, \"module_instance_1-text_input_2\")\n    text_input_2.expect_label(\"Enter the second text:\")\n    text_input_2.expect_value(\"\")\n\n    # Test text output\n    text_output = controller.OutputText(page, \"module_instance_1-text_output\")\n    text_output.expect_value(\"You entered:  and \")\n\n    # Test setting values and output update\n    text_input_1.set(\"Hello\")\n    text_input_2.set(\"World\")\n    text_output.expect_value(\"You entered: Hello and World\")\n\n    # Test partial input\n    text_input_1.set(\"Test\")\n    text_input_2.set(\"\")\n    text_output.expect_value(\"You entered: Test and \")\n\n    # Test clearing inputs\n    text_input_1.set(\"\")\n    text_input_2.set(\"\")\n    text_output.expect_value(\"You entered:  and \")",
    "app_code": "from shiny import App, ui, module, render\n\n\n@module.ui\ndef my_module_ui():\n    \"\"\"Defines the UI elements for the module with multiple text inputs.\"\"\"\n    return ui.div(\n        ui.h2(\"My Module\"),\n        ui.input_text(\"text_input_1\", \"Enter the first text:\"),\n        ui.input_text(\"text_input_2\", \"Enter the second text:\"),  # Second text input\n        ui.output_text(\"text_output\"),\n    )\n\n\n@module.server\ndef my_module_server(input, output, session):\n    \"\"\"Defines the server logic for the module.\"\"\"\n\n    @render.text\n    def text_output():\n        return f\"You entered: {input.text_input_1()} and {input.text_input_2()}\"  # Accessing both inputs\n\n\napp_ui = ui.page_fluid(ui.h1(\"Main Application\"), my_module_ui(\"module_instance_1\"))\n\n\ndef server(input, output, session):\n    my_module_server(\"module_instance_1\")\n\n\napp = App(app_ui, server)\n",
    "app_path": "evaluation_apps/app_07_modules/app.py",
    "test_file_path": "evaluation_apps/app_07_modules/test_app.py",
    "app_name": "app_07_modules"
  },
  "test_app_03_slider_app": {
    "test_code": "from playwright.sync_api import Page\nfrom shiny.playwright import controller\nfrom shiny.pytest import create_app_fixture\nfrom shiny.run import ShinyAppProc\n\napp = create_app_fixture([\"app.py\"])\n\ndef test_slider_parameters_demo(page: Page, app: ShinyAppProc) -> None:\n    page.goto(app.url)\n\n    # Test basic numeric slider\n    slider1 = controller.InputSlider(page, \"slider1\")\n    value1_output = controller.OutputText(page, \"value1\")\n    \n    slider1.expect_label(\"Min, max, value\")\n    slider1.expect_min(\"0\")\n    slider1.expect_max(\"100\")\n    slider1.expect_value(\"50\")\n    value1_output.expect_value(\"Value: 50\")\n    \n    slider1.set(\"75\")\n    slider1.expect_value(\"75\")\n    value1_output.expect_value(\"Value: 75\")\n\n    # Test slider with step parameter\n    slider2 = controller.InputSlider(page, \"slider2\")\n    value2_output = controller.OutputText(page, \"value2\")\n    \n    slider2.expect_label(\"Step size = 10\")\n    slider2.expect_min(\"0\")\n    slider2.expect_max(\"100\")\n    slider2.expect_step(\"10\")\n    slider2.expect_value(\"50\")\n    value2_output.expect_value(\"Value: 50\")\n    \n    slider2.set(\"80\")\n    slider2.expect_value(\"80\")\n    value2_output.expect_value(\"Value: 80\")\n\n    # Test range slider\n    slider3 = controller.InputSliderRange(page, \"slider3\")\n    value3_output = controller.OutputText(page, \"value3\")\n    \n    slider3.expect_label(\"Select a range\")\n    slider3.expect_min(\"0\")\n    slider3.expect_max(\"100\")\n    value3_output.expect_value(\"Value: (30, 70)\")\n    \n    slider3.set((\"20\", \"80\"))\n    value3_output.expect_value(\"Value: (20, 80)\")\n\n    # Test date slider\n    slider4 = controller.InputSlider(page, \"slider4\")\n    value4_output = controller.OutputText(page, \"value4\")\n    \n    slider4.expect_label(\"Select a date\")\n    slider4.expect_time_format(\"%Y-%m-%d\")\n    slider4.expect_timezone(\"UTC\")\n\n    # Test animated slider\n    slider5 = controller.InputSlider(page, \"slider5\")\n    value5_output = controller.OutputText(page, \"value5\")\n    \n    slider5.expect_label(\"With animation\")\n    slider5.expect_animate(True)\n    slider5.expect_min(\"0\")\n    slider5.expect_max(\"100\")\n    slider5.expect_value(\"50\")\n    value5_output.expect_value(\"Value: 50\")\n    \n    # Test play and pause functionality\n    slider5.click_play()\n    slider5.click_pause()\n\n    # Test slider with custom formatting\n    slider6 = controller.InputSlider(page, \"slider6\")\n    value6_output = controller.OutputText(page, \"value6\")\n    \n    slider6.expect_label(\"With prefix and suffix\")\n    slider6.expect_min(\"0\")\n    slider6.expect_max(\"100\")\n    slider6.expect_pre(\"$\")\n    slider6.expect_post(\"%\")\n    slider6.expect_sep(\",\")\n    slider6.expect_value(\"50\")\n    value6_output.expect_value(\"Value: 50\")\n\n    # Test slider with ticks\n    slider7 = controller.InputSlider(page, \"slider7\")\n    value7_output = controller.OutputText(page, \"value7\")\n    \n    slider7.expect_label(\"With tick marks\")\n    slider7.expect_min(\"0\")\n    slider7.expect_max(\"100\")\n    slider7.expect_ticks(\"true\")\n    slider7.expect_value(\"50\")\n    value7_output.expect_value(\"Value: 50\")\n\n    # Test date range slider with drag_range\n    slider9 = controller.InputSliderRange(page, \"slider9\")\n    value9_output = controller.OutputText(page, \"value9\")\n    \n    slider9.expect_label(\"Draggable range\")\n    slider9.expect_time_format(\"%Y-%m-%d\")\n    slider9.expect_timezone(\"UTC\")\n    slider9.expect_drag_range(\"true\")\n\n    # Test datetime slider\n    slider10 = controller.InputSlider(page, \"slider10\")\n    value10_output = controller.OutputText(page, \"value10\")\n    \n    slider10.expect_label(\"With time format\")\n    slider10.expect_time_format(\"%Y-%m-%d %H:%M\")\n    slider10.expect_timezone(\"UTC\")",
    "app_code": "from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nfrom shiny.express import input, render, ui\n\n# Define a consistent timezone\nTIMEZONE = ZoneInfo(\"UTC\")\n\nui.page_opts(title=\"Slider Parameters Demo\", full_width=True)\n\nwith ui.layout_column_wrap(width=\"400px\"):\n    # Numeric Slider - basic parameters\n    with ui.card():\n        ui.card_header(\"Basic Numeric Slider\")\n        ui.input_slider(\"slider1\", \"Min, max, value\", min=0, max=100, value=50)\n\n        @render.text\n        def value1():\n            return f\"Value: {input.slider1()}\"\n\n    # Numeric Slider with step\n    with ui.card():\n        ui.card_header(\"Step Parameter\")\n        ui.input_slider(\"slider2\", \"Step size = 10\", min=0, max=100, value=50, step=10)\n\n        @render.text\n        def value2():\n            return f\"Value: {input.slider2()}\"\n\n    # Range Slider\n    with ui.card():\n        ui.card_header(\"Range Slider\")\n        ui.input_slider(\"slider3\", \"Select a range\", min=0, max=100, value=(30, 70))\n\n        @render.text\n        def value3():\n            return f\"Value: {input.slider3()}\"\n\n    # Date Slider\n    with ui.card():\n        ui.card_header(\"Date Slider\")\n        ui.input_slider(\n            \"slider4\",\n            \"Select a date\",\n            min=datetime(2023, 1, 1, 0, 0, tzinfo=TIMEZONE),\n            max=datetime(2023, 12, 31, 0, 0, tzinfo=TIMEZONE),\n            value=datetime(2023, 6, 15, 12, 30, tzinfo=TIMEZONE),\n            time_format=\"%Y-%m-%d\",\n            timezone=\"UTC\",\n        )\n\n        @render.text\n        def value4():\n            return f\"Value: {input.slider4()}\"\n\n    # Animated Slider\n    with ui.card():\n        ui.card_header(\"Animated Slider\")\n        ui.input_slider(\n            \"slider5\", \"With animation\", min=0, max=100, value=50, animate=True\n        )\n\n        @render.text\n        def value5():\n            return f\"Value: {input.slider5()}\"\n\n    # Slider with custom formatting\n    with ui.card():\n        ui.card_header(\"Custom Formatting\")\n        ui.input_slider(\n            \"slider6\",\n            \"With prefix and suffix\",\n            min=0,\n            max=100,\n            value=50,\n            pre=\"$\",\n            post=\"%\",\n            sep=\",\",\n        )\n\n        @render.text\n        def value6():\n            return f\"Value: {input.slider6()}\"\n\n    # Slider with ticks\n    with ui.card():\n        ui.card_header(\"Ticks Display\")\n        ui.input_slider(\n            \"slider7\", \"With tick marks\", min=0, max=100, value=50, ticks=True\n        )\n\n        @render.text\n        def value7():\n            return f\"Value: {input.slider7()}\"\n\n    # Date Range Slider with drag_range\n    with ui.card():\n        ui.card_header(\"Date Range\")\n        ui.input_slider(\n            \"slider9\",\n            \"Draggable range\",\n            min=datetime(2023, 1, 1, 0, 0, tzinfo=TIMEZONE),\n            max=datetime(2023, 12, 31, 0, 0, tzinfo=TIMEZONE),\n            value=(\n                datetime(2023, 3, 1, 0, 0, tzinfo=TIMEZONE),\n                datetime(2023, 9, 30, 0, 0, tzinfo=TIMEZONE),\n            ),\n            time_format=\"%Y-%m-%d\",\n            timezone=\"UTC\",\n            drag_range=True,\n        )\n\n        @render.text\n        def value9():\n            return f\"Value: {input.slider9()}\"\n\n    # Datetime slider\n    with ui.card():\n        ui.card_header(\"Datetime Slider\")\n        ui.input_slider(\n            \"slider10\",\n            \"With time format\",\n            min=datetime(2023, 1, 1, 0, 0, tzinfo=TIMEZONE),\n            max=datetime(2023, 12, 31, 23, 59, tzinfo=TIMEZONE),\n            value=datetime(2023, 6, 15, 12, 30, tzinfo=TIMEZONE),\n            time_format=\"%Y-%m-%d %H:%M\",\n            timezone=\"UTC\",\n        )\n\n        @render.text\n        def value10():\n            return f\"Value: {input.slider10()}\"\n",
    "app_path": "evaluation_apps/app_03_slider/app.py",
    "test_file_path": "evaluation_apps/app_03_slider/test_app.py",
    "app_name": "app_03_slider"
  },
  "test_app_06_R_shiny_app": {
    "test_code": "",
    "app_code": "library(shiny)\n\nui <- fluidPage(\n    # Application title\n    titlePanel(\"My First Shiny App\"),\n\n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\n                inputId = \"num\",\n                label = \"Select a number:\",\n                min = 1,\n                max = 1000,\n                value = 500\n            ) # Default value\n        ),\n\n        mainPanel(\n            textOutput(\"message\")\n        )\n    )\n)\n\nserver <- function(input, output) {\n    output$message <- renderText({\n        paste(\"You selected:\", input$num)\n    })\n}\n\nshinyApp(ui = ui, server = server)\n",
    "app_path": "evaluation_apps/app_06_R_shiny/app.py",
    "test_file_path": "evaluation_apps/app_06_R_shiny/test_app.py",
    "app_name": "app_06_R_shiny"
  },
  "test_app_10_complex_layout_app": {
    "test_code": "from playwright.sync_api import Page\nfrom shiny.playwright import controller\nfrom shiny.pytest import create_app_fixture\nfrom shiny.run import ShinyAppProc\n\napp = create_app_fixture([\"app.py\"])\n\ndef test_shiny_demo_app(page: Page, app: ShinyAppProc) -> None:\n    page.goto(app.url)\n\n    # Test action button\n    action_button = controller.InputActionButton(page, \"action_button\")\n    action_button.expect_label(\"Click me!\")\n    action_button_output = controller.OutputText(page, \"action_button_value\")\n    action_button_output.expect_value(\"Action Button clicked: 0\")\n    \n    action_button.click()\n    action_button_output.expect_value(\"Action Button clicked: 1\")\n    \n    action_button.click()\n    action_button_output.expect_value(\"Action Button clicked: 2\")\n\n    # Test checkbox\n    checkbox = controller.InputCheckbox(page, \"checkbox\")\n    checkbox.expect_label(\"Check this box\")\n    checkbox.expect_checked(False)\n    checkbox_output = controller.OutputText(page, \"checkbox_value\")\n    checkbox_output.expect_value(\"Checkbox checked: False\")\n    \n    checkbox.set(True)\n    checkbox.expect_checked(True)\n    checkbox_output.expect_value(\"Checkbox checked: True\")\n    \n    checkbox.set(False)\n    checkbox.expect_checked(False)\n    checkbox_output.expect_value(\"Checkbox checked: False\")\n\n    # Test date selector\n    date_selector = controller.InputDate(page, \"date_selector\")\n    date_selector.expect_label(\"Select a date\")\n    date_output = controller.OutputText(page, \"date_selector_value\")\n    \n    date_selector.set(\"2024-05-15\")\n    date_output.expect_value(\"Selected date: 2024-05-15\")\n\n    # Test numeric input\n    numeric_input = controller.InputNumeric(page, \"numeric_input\")\n    numeric_input.expect_label(\"Enter a number\")\n    numeric_input.expect_value(\"10\")\n    numeric_output = controller.OutputText(page, \"numeric_input_value\")\n    numeric_output.expect_value(\"Numeric Input value: 10\")\n    \n    numeric_input.set(\"25\")\n    numeric_input.expect_value(\"25\")\n    numeric_output.expect_value(\"Numeric Input value: 25\")\n\n    # Test radio buttons\n    radio_buttons = controller.InputRadioButtons(page, \"radio_buttons\")\n    radio_buttons.expect_label(\"Choose one:\")\n    radio_buttons.expect_choices([\"Option A\", \"Option B\", \"Option C\"])\n    radio_buttons.expect_selected(\"Option A\")\n    radio_output = controller.OutputText(page, \"radio_buttons_value\")\n    radio_output.expect_value(\"Selected Radio Button: Option A\")\n    \n    radio_buttons.set(\"Option B\")\n    radio_buttons.expect_selected(\"Option B\")\n    radio_output.expect_value(\"Selected Radio Button: Option B\")\n    \n    radio_buttons.set(\"Option C\")\n    radio_buttons.expect_selected(\"Option C\")\n    radio_output.expect_value(\"Selected Radio Button: Option C\")\n\n    # Test switch\n    switch = controller.InputSwitch(page, \"switch\")\n    switch.expect_label(\"Turn on/off\")\n    switch.expect_checked(False)\n    switch_output = controller.OutputText(page, \"switch_value\")\n    switch_output.expect_value(\"Switch status: False\")\n    \n    switch.set(True)\n    switch.expect_checked(True)\n    switch_output.expect_value(\"Switch status: True\")\n    \n    switch.set(False)\n    switch.expect_checked(False)\n    switch_output.expect_value(\"Switch status: False\")\n\n    # Test data grid\n    data_grid = controller.OutputDataFrame(page, \"data_grid\")\n    data_grid.expect_ncol(2)\n    data_grid.expect_nrow(6)\n    data_grid.expect_column_labels([\"Input\", \"Value\"])\n    \n    # Test initial data grid values\n    data_grid.expect_cell(\"Action Button\", row=0, col=0)\n    data_grid.expect_cell(\"Checkbox\", row=1, col=0)\n    data_grid.expect_cell(\"Date Selector\", row=2, col=0)\n    data_grid.expect_cell(\"Numeric Input\", row=3, col=0)\n    data_grid.expect_cell(\"Radio Buttons\", row=4, col=0)\n    data_grid.expect_cell(\"Switch\", row=5, col=0)\n    \n    # Verify data grid updates when inputs change\n    action_button.click()\n    checkbox.set(True)\n    \n    data_grid.expect_cell(\"3\", row=0, col=1)  # Action button count\n    data_grid.expect_cell(\"True\", row=1, col=1)  # Checkbox state",
    "app_code": "import pandas as pd\nfrom shiny import App, render, ui, reactive\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Shiny for Python Demo with Multiple Inputs and Data Grid\"),\n    ui.layout_sidebar(\n        ui.sidebar(  # Use ui.sidebar()\n            ui.input_action_button(\"action_button\", \"Click me!\"),\n            ui.input_checkbox(\"checkbox\", \"Check this box\"),\n            ui.input_date(\"date_selector\", \"Select a date\"),\n            ui.input_numeric(\"numeric_input\", \"Enter a number\", 10),\n            ui.input_radio_buttons(\n                \"radio_buttons\", \"Choose one:\", [\"Option A\", \"Option B\", \"Option C\"]\n            ),\n            ui.input_switch(\"switch\", \"Turn on/off\"),\n        ),\n        ui.h3(\"Output Values\"),\n        ui.output_text(\"action_button_value\"),\n        ui.output_text(\"checkbox_value\"),\n        ui.output_text(\"date_selector_value\"),\n        ui.output_text(\"numeric_input_value\"),\n        ui.output_text(\"radio_buttons_value\"),\n        ui.output_text(\"switch_value\"),\n        ui.h3(\"Data Grid Output\"),\n        ui.output_data_frame(\"data_grid\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    @render.text\n    def action_button_value():\n        return f\"Action Button clicked: {input.action_button()}\"\n\n    @render.text\n    def checkbox_value():\n        return f\"Checkbox checked: {input.checkbox()}\"\n\n    @render.text\n    def date_selector_value():\n        return f\"Selected date: {input.date_selector()}\"\n\n    @render.text\n    def numeric_input_value():\n        return f\"Numeric Input value: {input.numeric_input()}\"\n\n    @render.text\n    def radio_buttons_value():\n        return f\"Selected Radio Button: {input.radio_buttons()}\"\n\n    @render.text\n    def switch_value():\n        return f\"Switch status: {input.switch()}\"\n\n    @render.data_frame\n    def data_grid():\n        data = {\n            \"Input\": [\n                \"Action Button\",\n                \"Checkbox\",\n                \"Date Selector\",\n                \"Numeric Input\",\n                \"Radio Buttons\",\n                \"Switch\",\n            ],\n            \"Value\": [\n                input.action_button(),\n                input.checkbox(),\n                input.date_selector(),\n                input.numeric_input(),\n                input.radio_buttons(),\n                input.switch(),\n            ],\n        }\n        df = pd.DataFrame(data)\n        return render.DataGrid(df)\n\n\napp = App(app_ui, server)\n",
    "app_path": "evaluation_apps/app_10_complex_layout/app.py",
    "test_file_path": "evaluation_apps/app_10_complex_layout/test_app.py",
    "app_name": "app_10_complex_layout"
  },
  "test_app_02_express_basic_app": {
    "test_code": "from playwright.sync_api import Page\nfrom shiny.playwright import controller\nfrom shiny.pytest import create_app_fixture\nfrom shiny.run import ShinyAppProc\n\napp = create_app_fixture([\"app.py\"])\n\n\ndef test_action_button_examples(page: Page, app: ShinyAppProc) -> None:\n    page.goto(app.url)\n\n    # Test basic button\n    btn1 = controller.InputActionButton(page, \"btn1\")\n    btn1.expect_label(\"Basic Button\")\n    btn1.expect_width(\"200px\")\n\n    # Test disabled button with icon\n    btn2 = controller.InputActionButton(page, \"btn2\")\n    btn2.expect_label(\"Disabled Button with Icon\")\n\n    # Test styled button\n    btn3 = controller.InputActionButton(page, \"btn3\")\n    btn3.expect_label(\"Styled Button\")\n\n    # Test click counts output\n    click_counts = controller.OutputText(page, \"click_counts\")\n    click_counts.expect_value(\"Button 1 clicks: 0\\nButton 2 clicks: 0\\nButton 3 clicks: 0\")\n\n    # Test button clicks and verify counts update\n    btn1.click()\n    click_counts.expect_value(\"Button 1 clicks: 1\\nButton 2 clicks: 0\\nButton 3 clicks: 0\")\n\n    btn3.click()\n    click_counts.expect_value(\"Button 1 clicks: 1\\nButton 2 clicks: 0\\nButton 3 clicks: 1\")\n\n    btn1.click()\n    click_counts.expect_value(\"Button 1 clicks: 2\\nButton 2 clicks: 0\\nButton 3 clicks: 1\")\n\n    btn3.click()\n    btn3.click()\n    click_counts.expect_value(\"Button 1 clicks: 2\\nButton 2 clicks: 0\\nButton 3 clicks: 3\")",
    "app_code": "from shiny.express import input, render, ui\n\n# Add Font Awesome CSS for icons - this needs to be before any UI elements\nui.head_content(\n    ui.HTML(\n        '<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css\">'\n    )\n)\n\n# Create a layout with some spacing\nwith ui.layout_column_wrap(width=\"100%\"):\n    with ui.card():\n        ui.card_header(\"Action Button Examples\")\n\n        # Basic button with width parameter\n        ui.input_action_button(id=\"btn1\", label=\"Basic Button\", width=\"200px\")\n\n        ui.br()  # Add some spacing\n\n        # Button with icon and disabled state\n        ui.input_action_button(\n            id=\"btn2\",\n            label=\"Disabled Button with Icon\",\n            icon=ui.tags.i(class_=\"fa-solid fa-shield-halved\"),\n            disabled=True,\n        )\n\n        ui.br()  # Add some spacing\n\n        # Button with custom class and style attributes\n        ui.input_action_button(\n            id=\"btn3\",\n            label=\"Styled Button\",\n            class_=\"btn-success\",\n            style=\"margin-top: 20px;\",\n        )\n\n    # Create another card for displaying results\n    with ui.card():\n        ui.card_header(\"Click Counts\")\n\n        @render.text\n        def click_counts():\n            return (\n                f\"Button 1 clicks: {input.btn1() or 0}\\n\"\n                f\"Button 2 clicks: {input.btn2() or 0}\\n\"\n                f\"Button 3 clicks: {input.btn3() or 0}\"\n            )\n",
    "app_path": "evaluation_apps/app_02_express_basic/app.py",
    "test_file_path": "evaluation_apps/app_02_express_basic/test_app.py",
    "app_name": "app_02_express_basic"
  },
  "test_app_08_navigation_app": {
    "test_code": "from playwright.sync_api import Page\nfrom shiny.playwright import controller\nfrom shiny.pytest import create_app_fixture\nfrom shiny.run import ShinyAppProc\n\napp = create_app_fixture([\"app.py\"])\n\ndef test_shiny_app_with_tabs(page: Page, app: ShinyAppProc) -> None:\n    page.goto(app.url)\n\n    # Test navset tab structure\n    navset = controller.NavsetTab(page, \"\")\n    navset.expect_nav_titles([\"Tab 1: Input & Output\", \"Tab 2: Slider & Plot\", \"Tab 3: Button & Message\"])\n\n    # Test Tab 1 - Input & Output\n    tab1_panel = navset.nav_panel(\"Tab 1: Input & Output\")\n    tab1_panel.expect_active(True)\n\n    # Test text input\n    text_input = controller.InputText(page, \"text_input\")\n    text_input.expect_label(\"Enter some text:\")\n    text_input.expect_value(\"Hello Shiny!\")\n\n    # Test text output\n    text_output = controller.OutputText(page, \"output_text\")\n    text_output.expect_value(\"You entered: Hello Shiny!\")\n\n    # Test changing text input\n    text_input.set(\"Test input\")\n    text_output.expect_value(\"You entered: Test input\")\n\n    # Test Tab 2 - Slider & Plot\n    tab2_panel = navset.nav_panel(\"Tab 2: Slider & Plot\")\n    tab2_panel.click()\n    tab2_panel.expect_active(True)\n\n    # Test slider input\n    slider_input = controller.InputSlider(page, \"n_points\")\n    slider_input.expect_label(\"Number of points:\")\n    slider_input.expect_min(\"10\")\n    slider_input.expect_max(\"100\")\n    slider_input.expect_value(\"50\")\n\n    # Test plot output exists\n    plot_output = controller.OutputPlot(page, \"output_plot\")\n\n    # Test changing slider value\n    slider_input.set(\"75\")\n    slider_input.expect_value(\"75\")\n\n    # Test Tab 3 - Button & Message\n    tab3_panel = navset.nav_panel(\"Tab 3: Button & Message\")\n    tab3_panel.click()\n    tab3_panel.expect_active(True)\n\n    # Test action button\n    action_button = controller.InputActionButton(page, \"action_button\")\n    action_button.expect_label(\"Click me!\")\n\n    # Test message output before clicking\n    message_output = controller.OutputText(page, \"output_message\")\n    message_output.expect_value(\"Click the button.\")\n\n    # Test clicking button\n    action_button.click()\n    message_output.expect_value(\"Button clicked!\")\n\n    # Test clicking button again (should still show \"Button clicked!\")\n    action_button.click()\n    message_output.expect_value(\"Button clicked!\")",
    "app_code": "# app.py\nfrom shiny import App, ui, render\n\n# Define the main app UI\napp_ui = ui.page_fluid(\n    ui.h1(\"Shiny App with Tabs\"),\n    ui.navset_tab(  # Use ui.navset_tab to create the tabbed interface\n        ui.nav_panel(\n            \"Tab 1: Input & Output\",  # Tab title\n            ui.h3(\"Input and Text Output\"),\n            ui.input_text(\"text_input\", \"Enter some text:\", \"Hello Shiny!\"), # Text input component\n            ui.output_text(\"output_text\")\n        ),\n        ui.nav_panel(\n            \"Tab 2: Slider & Plot\",  # Tab title\n            ui.h3(\"Slider and Plot Output\"),\n            ui.input_slider(\"n_points\", \"Number of points:\", min=10, max=100, value=50), # Slider input component\n            ui.output_plot(\"output_plot\")\n        ),\n        ui.nav_panel(\n            \"Tab 3: Button & Message\",  # Tab title\n            ui.h3(\"Action Button and Message Output\"),\n            ui.input_action_button(\"action_button\", \"Click me!\"),  # Action button component\n            ui.output_text(\"output_message\")\n        )\n    )\n)\n\n# Define the main app server function\ndef server(input, output, session):\n\n    @render.text  # Decorator for verbatim text output\n    def output_text():\n        return f\"You entered: {input.text_input()}\"  # Accessing the text input value\n\n    @render.plot  # Decorator for rendering plots\n    def output_plot():\n        import matplotlib.pyplot as plt\n        import numpy as np\n\n        # Generate some data based on the slider input\n        x = np.linspace(0, 10, input.n_points())\n        y = np.sin(x)\n\n        fig, ax = plt.subplots()\n        ax.plot(x, y)\n        ax.set_title(\"Dynamic Sine Wave\")\n        return fig\n\n    @render.text  # Decorator for rendering simple text\n    def output_message():\n        # Respond when the action button is clicked\n        if input.action_button() > 0:\n            return \"Button clicked!\"\n        return \"Click the button.\"\n\n# Create the Shiny app instance\napp = App(app_ui, server)\n",
    "app_path": "evaluation_apps/app_08_navigation/app.py",
    "test_file_path": "evaluation_apps/app_08_navigation/test_app.py",
    "app_name": "app_08_navigation"
  },
  "test_app_04_custom_app_name_app_input_checkbox_group": {
    "test_code": "from playwright.sync_api import Page\nfrom shiny.playwright import controller\nfrom shiny.pytest import create_app_fixture\nfrom shiny.run import ShinyAppProc\n\napp = create_app_fixture([\"app_input_checkbox_group.py\"])\n\ndef test_input_checkbox_group(page: Page, app: ShinyAppProc) -> None:\n    page.goto(app.url)\n\n    # Test checkbox group component\n    colors_group = controller.InputCheckboxGroup(page, \"colors\")\n    selected_output = controller.OutputText(page, \"selected_colors\")\n\n    # Test initial state\n    colors_group.expect_label(\"Choose colors\")\n    colors_group.expect_choices([\"red\", \"green\", \"blue\"])\n    colors_group.expect_selected([\"red\", \"blue\"])\n    colors_group.expect_inline(True)\n    colors_group.expect_width(\"300px\")\n\n    # Test initial output\n    selected_output.expect_value(\"You selected: red, blue\")\n\n    # Test selecting different combination\n    colors_group.set([\"green\"])\n    selected_output.expect_value(\"You selected: green\")\n\n    # Test selecting all options\n    colors_group.set([\"red\", \"green\", \"blue\"])\n    selected_output.expect_value(\"You selected: red, green, blue\")\n\n    # Test deselecting all\n    colors_group.set([])\n    selected_output.expect_value(\"No colors selected\")\n\n    # Test selecting single option\n    colors_group.set([\"blue\"])\n    selected_output.expect_value(\"You selected: blue\")",
    "app_code": "from shiny.express import input, render, ui\n\n# Create sample choices with HTML formatting for demonstration\nchoices = {\n    \"red\": ui.span(\"Red\", style=\"color: #FF0000;\"),\n    \"green\": ui.span(\"Green\", style=\"color: #00AA00;\"),\n    \"blue\": ui.span(\"Blue\", style=\"color: #0000AA;\"),\n}\n\nwith ui.card():\n    ui.card_header(\"Color Selection Demo\")\n\n    # Using input_checkbox_group with all its parameters\n    ui.input_checkbox_group(\n        id=\"colors\",  # Required: unique identifier\n        label=\"Choose colors\",  # Required: label text\n        choices=choices,  # Required: choices as dict with HTML formatting\n        selected=[\"red\", \"blue\"],  # Optional: pre-selected values\n        inline=True,  # Optional: display choices inline\n        width=\"300px\",  # Optional: CSS width\n    )\n\n    # Add some spacing\n    ui.hr()\n\n    # Simple output to show selected values\n    @render.text\n    def selected_colors():\n        if input.colors():\n            return f\"You selected: {', '.join(input.colors())}\"\n        return \"No colors selected\"\n",
    "app_path": "evaluation_apps/app_04_custom_app_name/app_input_checkbox_group.py",
    "test_file_path": "evaluation_apps/app_04_custom_app_name/test_app_input_checkbox_group.py",
    "app_name": "app_04_custom_app_name"
  },
  "test_app_01_core_basic_app": {
    "test_code": "from playwright.sync_api import Page\nfrom shiny.playwright import controller\nfrom shiny.pytest import create_app_fixture\nfrom shiny.run import ShinyAppProc\n\napp = create_app_fixture([\"app.py\"])\n\n\ndef test_action_button_examples(page: Page, app: ShinyAppProc) -> None:\n    page.goto(app.url)\n\n    # Test basic button (btn1)\n    btn1 = controller.InputActionButton(page, \"btn1\")\n    btn1.expect_label(\"Basic Button\")\n    btn1.expect_width(\"200px\")\n\n    # Test disabled button with icon (btn2)\n    btn2 = controller.InputActionButton(page, \"btn2\")\n    btn2.expect_label(\"Disabled Button with Icon\")\n\n    # Test styled button (btn3)\n    btn3 = controller.InputActionButton(page, \"btn3\")\n    btn3.expect_label(\"Styled Button\")\n\n    # Test output text\n    click_counts = controller.OutputText(page, \"click_counts\")\n    click_counts.expect_value(\"Button 1 clicks: 0\\nButton 2 clicks: 0\\nButton 3 clicks: 0\")\n\n    # Test clicking btn1\n    btn1.click()\n    click_counts.expect_value(\"Button 1 clicks: 1\\nButton 2 clicks: 0\\nButton 3 clicks: 0\")\n\n    # Test clicking btn1 multiple times\n    btn1.click()\n    btn1.click()\n    click_counts.expect_value(\"Button 1 clicks: 3\\nButton 2 clicks: 0\\nButton 3 clicks: 0\")\n\n    # Test clicking btn3\n    btn3.click()\n    click_counts.expect_value(\"Button 1 clicks: 3\\nButton 2 clicks: 0\\nButton 3 clicks: 1\")\n\n    # Test clicking btn3 again\n    btn3.click()\n    click_counts.expect_value(\"Button 1 clicks: 3\\nButton 2 clicks: 0\\nButton 3 clicks: 2\")",
    "app_code": "from shiny import App, render, ui\n\n# Create the UI\napp_ui = ui.page_fluid(\n    # Add Font Awesome CSS in the head\n    ui.tags.head(\n        ui.tags.link(\n            rel=\"stylesheet\",\n            href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css\",\n        )\n    ),\n    # Main layout\n    ui.layout_column_wrap(\n        ui.card(\n            ui.card_header(\"Action Button Examples\"),\n            # Basic button with width parameter\n            ui.input_action_button(id=\"btn1\", label=\"Basic Button\", width=\"200px\"),\n            ui.br(),  # Add spacing\n            # Button with icon and disabled state\n            ui.input_action_button(\n                id=\"btn2\",\n                label=\"Disabled Button with Icon\",\n                icon=ui.tags.i(class_=\"fa-solid fa-shield-halved\"),\n                disabled=True,\n            ),\n            ui.br(),  # Add spacing\n            # Button with custom class and style attributes\n            ui.input_action_button(\n                id=\"btn3\",\n                label=\"Styled Button\",\n                class_=\"btn-success\",\n                style=\"margin-top: 20px;\",\n            ),\n        ),\n        # Card for displaying results\n        ui.card(\n            ui.card_header(\"Click Counts\"),\n            ui.output_text(\"click_counts\"),\n        ),\n        width=\"100%\",\n    ),\n)\n\n\n# Define the server\ndef server(input, output, session):\n    @output\n    @render.text\n    def click_counts():\n        return (\n            f\"Button 1 clicks: {input.btn1() or 0}\\n\"\n            f\"Button 2 clicks: {input.btn2() or 0}\\n\"\n            f\"Button 3 clicks: {input.btn3() or 0}\"\n        )\n\n\n# Create and return the app\napp = App(app_ui, server)\n",
    "app_path": "evaluation_apps/app_01_core_basic/app.py",
    "test_file_path": "evaluation_apps/app_01_core_basic/test_app.py",
    "app_name": "app_01_core_basic"
  },
  "test_app_05_streamlit_app": {
    "test_code": "",
    "app_code": "import streamlit as st\n\nst.title(\"My Simple Streamlit App\")\n\nuser_name = st.text_input(\"Enter your name\", \"Type your name here...\")\n\n# Add a slider widget\nuser_age = st.slider(\n    \"Select your age\", 0, 100, 25\n)\n\n# Display the user's input\nst.write(f\"Hello, {user_name}! You are {user_age} years old.\")\n",
    "app_path": "evaluation_apps/app_05_streamlit/app.py",
    "test_file_path": "evaluation_apps/app_05_streamlit/test_app.py",
    "app_name": "app_05_streamlit"
  }
}